<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8.Hook应用场景</title>
      <link href="/posts/b9cf5dd3e8c1/"/>
      <url>/posts/b9cf5dd3e8c1/</url>
      
        <content type="html"><![CDATA[<h1 id="按日期分割日志—writer"><a href="#按日期分割日志—writer" class="headerlink" title="按日期分割日志—writer"></a>按日期分割日志—writer</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// logformmater 按日期分割日志</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Black <span class="hljs-type">int</span> = <span class="hljs-literal">iota</span><br>Red<br>Green<br>Yellow<br>Blue<br>Amaranth<br>Ultramarine<br>White<br>)<br><br><span class="hljs-keyword">type</span> LogFormatter <span class="hljs-keyword">struct</span> &#123;<br>Prefix <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *LogFormatter)</span></span> Format(entry *log.Entry) ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> color <span class="hljs-type">int</span><br><span class="hljs-keyword">switch</span> entry.Level &#123;<br><span class="hljs-keyword">case</span> log.TraceLevel:<br>color = Amaranth<br><span class="hljs-keyword">case</span> log.DebugLevel:<br>color = Ultramarine<br><span class="hljs-keyword">case</span> log.InfoLevel:<br>color = Green<br><span class="hljs-keyword">case</span> log.WarnLevel:<br>color = Yellow<br><span class="hljs-keyword">case</span> log.ErrorLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.FatalLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.PanicLevel:<br>color = Red<br><span class="hljs-keyword">default</span>:<br>color = White<br>&#125;<br><br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> entry.Buffer != <span class="hljs-literal">nil</span> &#123;<br>buf = entry.Buffer<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>buf = &amp;bytes.Buffer&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> line <span class="hljs-type">string</span><br><span class="hljs-comment">// 是否允许访问函数和行号</span><br><span class="hljs-keyword">if</span> entry.HasCaller() &#123;<br><span class="hljs-comment">// 函数名</span><br>funcVal := entry.Caller.Function<br><span class="hljs-comment">// 函数所在文件路径</span><br>filePath := path.Base(entry.Caller.File)<br><span class="hljs-comment">// 文件路径+行号</span><br>fileVal := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, filePath, entry.Caller.Line)<br><br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s %s %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>fileVal,<br>funcVal,<br>entry.Message,<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>entry.Message,<br>)<br>&#125;<br>buf.WriteString(line)<br><br><span class="hljs-keyword">return</span> buf.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> logFileWriter <span class="hljs-keyword">struct</span> &#123;<br>file     *os.File<br>logPath  <span class="hljs-type">string</span><br>fileDate <span class="hljs-type">string</span><br>app      <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *logFileWriter)</span></span> Write(data []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br>fileDate := time.Now().Format(<span class="hljs-string">&quot;20060102&quot;</span>)<br><span class="hljs-comment">// 如果时间不相等</span><br><span class="hljs-keyword">if</span> w.fileDate != fileDate &#123;<br>w.file.Close()<br>err := os.MkdirAll(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, w.logPath, fileDate), os.ModePerm)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err<br>&#125;<br>w.file, err = os.OpenFile(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s-%s.log&quot;</span>, w.logPath, fileDate, fileDate, w.app), os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0600</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> w.file.Write(data)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitLog</span><span class="hljs-params">(logPath <span class="hljs-type">string</span>, app <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-comment">// 创建当前日期文件夹</span><br>fileDate := time.Now().Format(<span class="hljs-string">&quot;20060102&quot;</span>)<br><span class="hljs-keyword">if</span> err := os.MkdirAll(logPath+<span class="hljs-string">&quot;/&quot;</span>+fileDate, os.ModePerm); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 创建当前log文件</span><br>filename := fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s-%s.log&quot;</span>, logPath, fileDate, fileDate, app)<br>file, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0600</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 设置log</span><br>fileWriter := &amp;logFileWriter&#123;<br>file:     file,<br>logPath:  logPath,<br>fileDate: fileDate,<br>app:      app,<br>&#125;<br>log.SetOutput(io.MultiWriter(fileWriter, os.Stdout))<br>log.SetReportCaller(<span class="hljs-literal">true</span>)<br>log.SetFormatter(&amp;LogFormatter&#123;app&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>InitLog(<span class="hljs-string">&quot;demo1/log&quot;</span>, <span class="hljs-string">&quot;order&quot;</span>)<br>log.Info(<span class="hljs-string">&quot;order&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="按日期分割日志—hook"><a href="#按日期分割日志—hook" class="headerlink" title="按日期分割日志—hook"></a>按日期分割日志—hook</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 用Hook实现日期分隔日志</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Black <span class="hljs-type">int</span> = <span class="hljs-literal">iota</span><br>Red<br>Green<br>Yellow<br>Blue<br>Amaranth<br>Ultramarine<br>White<br>)<br><br><span class="hljs-keyword">type</span> LogFormatter <span class="hljs-keyword">struct</span> &#123;<br>Prefix <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *LogFormatter)</span></span> Format(entry *log.Entry) ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> color <span class="hljs-type">int</span><br><span class="hljs-keyword">switch</span> entry.Level &#123;<br><span class="hljs-keyword">case</span> log.TraceLevel:<br>color = Amaranth<br><span class="hljs-keyword">case</span> log.DebugLevel:<br>color = Ultramarine<br><span class="hljs-keyword">case</span> log.InfoLevel:<br>color = Green<br><span class="hljs-keyword">case</span> log.WarnLevel:<br>color = Yellow<br><span class="hljs-keyword">case</span> log.ErrorLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.FatalLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.PanicLevel:<br>color = Red<br><span class="hljs-keyword">default</span>:<br>color = White<br>&#125;<br><br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> entry.Buffer != <span class="hljs-literal">nil</span> &#123;<br>buf = entry.Buffer<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>buf = &amp;bytes.Buffer&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> line <span class="hljs-type">string</span><br><span class="hljs-comment">// 是否允许访问函数和行号</span><br><span class="hljs-keyword">if</span> entry.HasCaller() &#123;<br><span class="hljs-comment">// 函数名</span><br>funcVal := entry.Caller.Function<br><span class="hljs-comment">// 函数所在文件路径</span><br>filePath := path.Base(entry.Caller.File)<br><span class="hljs-comment">// 文件路径+行号</span><br>fileVal := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, filePath, entry.Caller.Line)<br><br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s %s %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>fileVal,<br>funcVal,<br>entry.Message,<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>entry.Message,<br>)<br>&#125;<br>buf.WriteString(line)<br><br><span class="hljs-keyword">return</span> buf.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> FileHook <span class="hljs-keyword">struct</span> &#123;<br>file     *os.File<br>logPath  <span class="hljs-type">string</span><br>fileDate <span class="hljs-type">string</span><br>app      <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *FileHook)</span></span> Levels() []log.Level &#123;<br><span class="hljs-keyword">return</span> log.AllLevels<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *FileHook)</span></span> Fire(entry *log.Entry) <span class="hljs-type">error</span> &#123;<br>fileDate := time.Now().Format(<span class="hljs-string">&quot;200601021504&quot;</span>)<br><span class="hljs-keyword">if</span> fileDate != f.fileDate &#123;<br>f.file.Close()<br>err := os.MkdirAll(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, f.logPath, fileDate), os.ModePerm)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 创建日志文件</span><br>f.file, err = os.OpenFile(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s-%s.log&quot;</span>, f.logPath, fileDate, fileDate, f.app),<br>os.O_CREATE|os.O_WRONLY|os.O_APPEND,<br><span class="hljs-number">0600</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> err<br>&#125;<br>f.fileDate = fileDate<br>&#125;<br><br>line, _ := entry.String()<br>_, err := f.file.Write([]<span class="hljs-type">byte</span>(line))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitLog</span><span class="hljs-params">(logPath <span class="hljs-type">string</span>, app <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-comment">// 创建文件夹</span><br>fileDate := time.Now().Format(<span class="hljs-string">&quot;200601021504&quot;</span>)<br>err := os.MkdirAll(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, logPath, fileDate), os.ModePerm)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 创建日志文件</span><br>file, err := os.OpenFile(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s-%s.log&quot;</span>, logPath, fileDate, fileDate, app),<br>os.O_CREATE|os.O_WRONLY|os.O_APPEND,<br><span class="hljs-number">0600</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br>log.AddHook(&amp;FileHook&#123;file: file, logPath: logPath, fileDate: fileDate, app: app&#125;)<br>log.SetReportCaller(<span class="hljs-literal">true</span>)<br>log.SetFormatter(&amp;LogFormatter&#123;Prefix: app&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>InitLog(<span class="hljs-string">&quot;demo2/log&quot;</span>, <span class="hljs-string">&quot;WER&quot;</span>)<br><br>log.Info(<span class="hljs-string">&quot;order success&quot;</span>)<br>log.Errorln(<span class="hljs-string">&quot;order success&quot;</span>)<br>log.Panicln(<span class="hljs-string">&quot;order success&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="按日志等级分隔日志"><a href="#按日志等级分隔日志" class="headerlink" title="按日志等级分隔日志"></a>按日志等级分隔日志</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Black <span class="hljs-type">int</span> = <span class="hljs-literal">iota</span><br>Red<br>Green<br>Yellow<br>Blue<br>Amaranth<br>Ultramarine<br>White<br>)<br><br><span class="hljs-keyword">type</span> LogFormatter <span class="hljs-keyword">struct</span> &#123;<br>Prefix <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *LogFormatter)</span></span> Format(entry *log.Entry) ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> color <span class="hljs-type">int</span><br><span class="hljs-keyword">switch</span> entry.Level &#123;<br><span class="hljs-keyword">case</span> log.TraceLevel:<br>color = Amaranth<br><span class="hljs-keyword">case</span> log.DebugLevel:<br>color = Ultramarine<br><span class="hljs-keyword">case</span> log.InfoLevel:<br>color = Green<br><span class="hljs-keyword">case</span> log.WarnLevel:<br>color = Yellow<br><span class="hljs-keyword">case</span> log.ErrorLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.FatalLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.PanicLevel:<br>color = Red<br><span class="hljs-keyword">default</span>:<br>color = White<br>&#125;<br><br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> entry.Buffer != <span class="hljs-literal">nil</span> &#123;<br>buf = entry.Buffer<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>buf = &amp;bytes.Buffer&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> line <span class="hljs-type">string</span><br><span class="hljs-comment">// 是否允许访问函数和行号</span><br><span class="hljs-keyword">if</span> entry.HasCaller() &#123;<br><span class="hljs-comment">// 函数名</span><br>funcVal := entry.Caller.Function<br><span class="hljs-comment">// 函数所在文件路径</span><br>filePath := path.Base(entry.Caller.File)<br><span class="hljs-comment">// 文件路径+行号</span><br>fileVal := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, filePath, entry.Caller.Line)<br><br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s %s %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>fileVal,<br>funcVal,<br>entry.Message,<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>entry.Message,<br>)<br>&#125;<br>buf.WriteString(line)<br><br><span class="hljs-keyword">return</span> buf.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> LevelHook <span class="hljs-keyword">struct</span> &#123;<br>file      *os.File<br>logPath   <span class="hljs-type">string</span><br>app       <span class="hljs-type">string</span><br>LastLevel log.Level<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *LevelHook)</span></span> Levels() []log.Level &#123;<br><span class="hljs-keyword">return</span> log.AllLevels<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *LevelHook)</span></span> Fire(entry *log.Entry) <span class="hljs-type">error</span> &#123;<br><br><span class="hljs-keyword">for</span> _, level := <span class="hljs-keyword">range</span> l.Levels() &#123;<br><span class="hljs-keyword">if</span> level == entry.Level &#123;<br><span class="hljs-keyword">goto</span> h<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>h:<br><span class="hljs-keyword">if</span> l.LastLevel != entry.Level &#123;<br><span class="hljs-keyword">if</span> l.file != <span class="hljs-literal">nil</span> &#123;<br>l.file.Close()<br>&#125;<br><br>filename := entry.Level.String()<br>err := os.MkdirAll(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, l.logPath, filename), os.ModePerm)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 创建日志文件</span><br>file, err := os.OpenFile(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s-%s.log&quot;</span>, l.logPath, filename, filename, l.app),<br>os.O_CREATE|os.O_WRONLY|os.O_APPEND,<br><span class="hljs-number">0600</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> err<br>&#125;<br>l.file = file<br>l.LastLevel = entry.Level<br>&#125;<br>_, err := l.file.Write([]<span class="hljs-type">byte</span>(entry.Message))<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitLog</span><span class="hljs-params">(logPath <span class="hljs-type">string</span>, app <span class="hljs-type">string</span>)</span></span> &#123;<br>log.AddHook(&amp;LevelHook&#123;logPath: logPath, app: app&#125;)<br>log.SetReportCaller(<span class="hljs-literal">true</span>)<br>log.SetFormatter(&amp;LogFormatter&#123;Prefix: app&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>InitLog(<span class="hljs-string">&quot;demo3/log&quot;</span>, <span class="hljs-string">&quot;WER&quot;</span>)<br>log.Infoln(<span class="hljs-string">&quot;order&quot;</span>)<br>log.Errorln(<span class="hljs-string">&quot;order&quot;</span>)<br>log.Warnln(<span class="hljs-string">&quot;order&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Hook机制</title>
      <link href="/posts/ee158b5a6809/"/>
      <url>/posts/ee158b5a6809/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>logrus</code>框架的<code>Hook</code>机制，可以自定义各种功能，实现各种模板。</p><p><code>github</code>上也有各种完善的模板 ，可以使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Hook <span class="hljs-keyword">interface</span> &#123;<br>Levels() []Level <span class="hljs-comment">// 使用的level</span><br>Fire(*Entry) <span class="hljs-type">error</span> <span class="hljs-comment">// 每次输出日志都会走该方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>按日期为日志分类</li><li>将错误发送到跟踪服务器，如<code>kafka</code>、<code>redis</code>、&#96;&#96;logstash&#96;</li></ul><h1 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h1><p>下面例子是使用hook机制将日志写入文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MyHook <span class="hljs-keyword">struct</span> &#123;<br>Writer *os.File<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *MyHook)</span></span> Levels() []log.Level &#123;<br><span class="hljs-keyword">return</span> log.AllLevels<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *MyHook)</span></span> Fire(entry *log.Entry) <span class="hljs-type">error</span> &#123;<br>line, err := entry.String()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;Unable to read entry, %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">//if err, ok := entry.Data[log.ErrorKey].(error); ok &#123;</span><br><span class="hljs-comment">//line += fmt.Sprintf(&quot;%+v\n&quot;, err)</span><br><span class="hljs-comment">//&#125;</span><br>m.Writer.WriteString(line)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>file, _ := os.OpenFile(<span class="hljs-string">&quot;hook/log/order.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0600</span>)<br>log.AddHook(&amp;MyHook&#123;file&#125;)<br><br>log.Infoln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>log.Debugln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>log.Warningln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>log.Errorln(errors.New(<span class="hljs-string">&quot;下订单成功&quot;</span>))<br>log.Panicln(errors.New(<span class="hljs-string">&quot;下订单成功&quot;</span>))<br>log.Fatalln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Field</title>
      <link href="/posts/20bfae75514a/"/>
      <url>/posts/20bfae75514a/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>logrus</code>鼓励使用<code>Field</code>机制进行结构化日志记录，而不是无法进行解析的日志。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">log.WithFields(log.Fields&#123;<br>  <span class="hljs-string">&quot;event&quot;</span>: event,<br>  <span class="hljs-string">&quot;topic&quot;</span>: topic,<br>  <span class="hljs-string">&quot;key&quot;</span>: key,<br>&#125;).Fatal(<span class="hljs-string">&quot;Failed to send event&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">time=<span class="hljs-string">&quot;2024-03-24T16:53:06+08:00&quot;</span> level=fatal msg=<span class="hljs-string">&quot;Failed to send event&quot;</span> event=<span class="hljs-string">&quot;吃饭&quot;</span> key=<span class="hljs-number">1232324421</span> topic=<span class="hljs-string">&quot;食物&quot;</span><br></code></pre></td></tr></table></figure><p>这种方式还可以优雅地修改更有用的日志记录信息，而不是修改整个日志模板。</p><h2 id="默认字段"><a href="#默认字段" class="headerlink" title="默认字段"></a>默认字段</h2><p>还可以为logger添加默认字段，使得区分不同的logger。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> request_id = <span class="hljs-string">&quot;^*KHR%T&amp;H%&amp;*O&amp;UII%*G&quot;</span><br><span class="hljs-keyword">var</span> user_ip = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>requestLogger := log.WithFields(log.Fields&#123;<span class="hljs-string">&quot;required_id&quot;</span>: request_id, <span class="hljs-string">&quot;user_ip&quot;</span>: user_ip&#125;)<br>requestLogger.Info(<span class="hljs-string">&quot;将触发错误！！！&quot;</span>)<br>requestLogger.Warn(<span class="hljs-string">&quot;警告！警告！警告！&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">time=<span class="hljs-string">&quot;2024-03-24T17:02:09+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;将触发错误！！！&quot;</span> required_id=<span class="hljs-string">&quot;^*KHR%T&amp;H%&amp;*O&amp;UII%*G&quot;</span> user_ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>time=<span class="hljs-string">&quot;2024-03-24T17:02:09+08:00&quot;</span> level=warning msg=<span class="hljs-string">&quot;警告！警告！警告！&quot;</span> required_id=<span class="hljs-string">&quot;^*KHR%T&amp;H%&amp;*O&amp;UII%*G&quot;</span> user_ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>内置默认字段：</p><ul><li><code>time</code>: 创建日志的时间戳。</li><li><code>msg</code>: 日志信息。</li><li><code>level</code>: 日志记录等级。</li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.自定义输出格式</title>
      <link href="/posts/8971aaae4da7/"/>
      <url>/posts/8971aaae4da7/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义输出格式"><a href="#自定义输出格式" class="headerlink" title="自定义输出格式"></a>自定义输出格式</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Balck <span class="hljs-type">int</span> = <span class="hljs-literal">iota</span><br>Red<br>Green<br>Yellow<br>Blue<br>Amaranth<br>Ultramarine<br>White<br>)<br><br><span class="hljs-keyword">type</span> MyFormatter <span class="hljs-keyword">struct</span> &#123;<br>Prefix <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *MyFormatter)</span></span> Format(entry *logrus.Entry) ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> color <span class="hljs-type">int</span><br><span class="hljs-keyword">switch</span> entry.Level &#123;<br><span class="hljs-keyword">case</span> logrus.TraceLevel:<br>color = Amaranth<br><span class="hljs-keyword">case</span> logrus.DebugLevel:<br>color = Ultramarine<br><span class="hljs-keyword">case</span> logrus.InfoLevel:<br>color = Green<br><span class="hljs-keyword">case</span> logrus.WarnLevel:<br>color = Yellow<br><span class="hljs-keyword">case</span> logrus.ErrorLevel:<br>color = Red<br><span class="hljs-keyword">case</span> logrus.FatalLevel:<br>color = Red<br><span class="hljs-keyword">case</span> logrus.PanicLevel:<br>color = Red<br><span class="hljs-keyword">default</span>:<br>color = White<br>&#125;<br><br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> entry.Buffer != <span class="hljs-literal">nil</span> &#123;<br>buf = entry.Buffer<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>buf = &amp;bytes.Buffer&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> line <span class="hljs-type">string</span><br><span class="hljs-comment">// 是否允许访问函数和行号</span><br><span class="hljs-keyword">if</span> entry.HasCaller() &#123;<br><span class="hljs-comment">// 函数名</span><br>funcVal := entry.Caller.Function<br><span class="hljs-comment">// 函数所在文件路径</span><br>filePath := path.Base(entry.Caller.File)<br><span class="hljs-comment">// 文件路径+行号</span><br>fileVal := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, filePath, entry.Caller.Line)<br><br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s %s %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>entry.Level,<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>fileVal,<br>funcVal,<br>entry.Message,<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>entry.Level,<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>entry.Message,<br>)<br>&#125;<br>buf.WriteString(line)<br><br><span class="hljs-keyword">return</span> buf.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>logrus.SetFormatter(&amp;MyFormatter&#123;Prefix: <span class="hljs-string">&quot;WER&quot;</span>&#125;)<br><br>logrus.SetReportCaller(<span class="hljs-literal">true</span>)<br>logrus.Infoln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>logrus.Debugln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>logrus.Warningln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>logrus.Errorln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>logrus.Panicln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>logrus.Fatalln(<span class="hljs-string">&quot;下订单成功&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.输出到日志文件</title>
      <link href="/posts/199f34a19708/"/>
      <url>/posts/199f34a19708/</url>
      
        <content type="html"><![CDATA[<h1 id="输出到日志文件"><a href="#输出到日志文件" class="headerlink" title="输出到日志文件"></a>输出到日志文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 输出到日志文件</span><br>file, _ := os.OpenFile(<span class="hljs-string">&quot;logfile/info.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0600</span>)<br>logrus.SetOutput(file)<br><br>logrus.Infoln(<span class="hljs-string">&quot;你好&quot;</span>)<br>logrus.Warnln(<span class="hljs-string">&quot;你好&quot;</span>)<br>logrus.Errorln(<span class="hljs-string">&quot;你好&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="同时设置多个输出"><a href="#同时设置多个输出" class="headerlink" title="同时设置多个输出"></a>同时设置多个输出</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 输出到日志文件</span><br>file, _ := os.OpenFile(<span class="hljs-string">&quot;logfile/info.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0600</span>)<br><span class="hljs-comment">//logrus.SetOutput(file)</span><br>output := io.MultiWriter(file, os.Stdout)<br><br>logrus.SetOutput(output)<br>logrus.Infoln(<span class="hljs-string">&quot;你好&quot;</span>)<br>logrus.Warnln(<span class="hljs-string">&quot;你好&quot;</span>)<br>logrus.Errorln(<span class="hljs-string">&quot;你好&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.控制台颜色</title>
      <link href="/posts/eb5098f7d0d5/"/>
      <url>/posts/eb5098f7d0d5/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>ANSI</code>定义了用于屏幕显示的Escape屏幕控制码，控制台也是基于<code>ANSI</code>实现了颜色输出。</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>例子：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">\033[1;40;32m color!!! \033[0m<br></code></pre></td></tr></table></figure><p><code>\033</code>：开始转义序列；</p><p><code>[</code>：开始定义；</p><p><code>1</code>: 定义字体特殊属性，这里定义高亮显示字符；</p><p><code>40</code>: 定义背景颜色；40表示黑色；</p><p><code>32</code>：定义字体颜色；32表示绿色；</p><p><code>\033[0m</code>：关闭转义序列，这里指终端默认颜色；</p><h1 id="颜色代码"><a href="#颜色代码" class="headerlink" title="颜色代码"></a>颜色代码</h1><table><thead><tr><th>字体颜色</th><th>背景颜色</th><th>释义</th></tr></thead><tbody><tr><td>30</td><td>40</td><td>黑色</td></tr><tr><td>31</td><td>41</td><td>红色</td></tr><tr><td>32</td><td>42</td><td>绿色</td></tr><tr><td>33</td><td>43</td><td>黄色</td></tr><tr><td>34</td><td>44</td><td>蓝色</td></tr><tr><td>35</td><td>45</td><td>紫红色</td></tr><tr><td>36</td><td>46</td><td>青蓝色</td></tr><tr><td>37</td><td>47</td><td>白色</td></tr></tbody></table><h1 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h1><table><thead><tr><th>属性</th><th>释义</th></tr></thead><tbody><tr><td>0</td><td>终端默认设置，黑底白字</td></tr><tr><td>1</td><td>高亮显示</td></tr><tr><td>4</td><td>下划线</td></tr><tr><td>5</td><td>闪烁</td></tr><tr><td>7</td><td>反显</td></tr><tr><td>8</td><td>消隐</td></tr><tr><td>nA</td><td>光标上移n行</td></tr><tr><td>nB</td><td>光标下移n行</td></tr><tr><td>nC</td><td>光标右移n行</td></tr><tr><td>nD</td><td>光标左移n行</td></tr><tr><td>y;xH</td><td>设置光标位置</td></tr><tr><td>2J</td><td>清屏</td></tr><tr><td>K</td><td>清除从光标到行尾的内容</td></tr><tr><td>s</td><td>保存光标位置</td></tr><tr><td>u</td><td>恢复光标位置</td></tr><tr><td>?25I</td><td>隐藏光标</td></tr><tr><td>?25h</td><td>显示光标</td></tr></tbody></table><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;\033[4;47;30m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[1;46;31m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[0;45;32m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[44;33m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[43;34m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[42;35m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[41;36m你好\033[0m&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;\033[40;37m你好\033[0m&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出如下：</p><p><img src="/posts/eb5098f7d0d5/image-20240324143148596.png" alt="image-20240324143148596"></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.快速入门</title>
      <link href="/posts/866ef296f7f3/"/>
      <url>/posts/866ef296f7f3/</url>
      
        <content type="html"><![CDATA[<h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><p>用命令导入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/sirupsen/logrus<br></code></pre></td></tr></table></figure><p>直接import, 然后执行命令<code>go mod tidy</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br></code></pre></td></tr></table></figure><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>兼容Go标准库log</li><li>支持7种日志级别：<code>Trace</code>、<code>Debug</code>、<code>Info</code>、<code>Warn</code>、<code>Error</code>、<code>Fatal</code>、<code>Panic</code>。</li><li>支持结构化日志记录，即<code>key-value</code>形式，<code>Filed机制</code>进行结构化。</li><li>支持自定义日志格式，内置格式<code>TextFormatter</code>和<code>JSONFormatter</code>。</li><li>支持可扩展<code>Hook</code>机制，实现将不同级别日志记录到不同位置，还能实现将日志发送到<code>redis</code>、<code>logstash</code>等。</li><li>支持控制台输出颜色。</li><li>并发安全。</li></ul><h1 id="兼容Go标准库log"><a href="#兼容Go标准库log" class="headerlink" title="兼容Go标准库log"></a>兼容Go标准库log</h1><p>给<code>logrus</code>起个别名即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br></code></pre></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 基本使用</span><br><span class="hljs-comment">// 日志级别从低到高</span><br>logrus.Traceln(<span class="hljs-string">&quot;Trace&quot;</span>) <span class="hljs-comment">// 比debug更细的日志</span><br>logrus.Debugln(<span class="hljs-string">&quot;Debug&quot;</span>) <span class="hljs-comment">// 不会输出，logrui默认级别为logrus.InfoLevel</span><br>logrus.Infoln(<span class="hljs-string">&quot;Info&quot;</span>)<br>logrus.Warnln(<span class="hljs-string">&quot;Warn&quot;</span>)<br>logrus.Errorln(<span class="hljs-string">&quot;Error&quot;</span>)<br><span class="hljs-comment">//logrus.Fatalln(&quot;Fatal&quot;)  //  错误，然后终止 os.Exit(1)</span><br><span class="hljs-comment">//logrus.Panicln(&quot;Panic&quot;)// 抛出异常 panic()</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">TraceLevel<br>DebugLevel<br>InfoLevel<br>WarnLevel<br>ErrorLevel<br>FatalLevel<br>PanicLevel<br></code></pre></td></tr></table></figure><h1 id="修改日志级别"><a href="#修改日志级别" class="headerlink" title="修改日志级别"></a>修改日志级别</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">logrus.SetLevel(logrus.DebugLevel)<br></code></pre></td></tr></table></figure><ul><li>小于该级别将不输出日志。</li><li>开发环境&#x2F;测试环境：<code>logrus.DebugLevel</code> 生产环境：<code>logrus.WarnLevel</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 日志格式</title>
      <link href="/posts/4d70eda438e0/"/>
      <url>/posts/4d70eda438e0/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>logrus</code>提供了两种输出格式：</p><ul><li><p><code>JsonFormatter</code></p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;debug&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Debug&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2024-03-24T13:36:18+08:00&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>TextFormatter</code></p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">time=<span class="hljs-string">&quot;2024-03-24T13:21:41+08:00&quot;</span> level=debug msg=Debug<br></code></pre></td></tr></table></figure></li></ul><p>默认格式是<code>TextFormatter</code>。</p><h1 id="修改输出格式"><a href="#修改输出格式" class="headerlink" title="修改输出格式"></a>修改输出格式</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">logrus.SetFormatter(&amp;logrus.JSONFormatter&#123;&#125;)<br></code></pre></td></tr></table></figure><h1 id="自定义格式样式"><a href="#自定义格式样式" class="headerlink" title="自定义格式样式"></a>自定义格式样式</h1><p>以<code>TextFormatter</code>为例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 修改输出格式</span><br>logrus.SetFormatter(&amp;logrus.TextFormatter&#123;<br>ForceColors:     <span class="hljs-literal">true</span>,<br>FullTimestamp:   <span class="hljs-literal">true</span>,<br>TimestampFormat: <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><p>输出例子如下：</p><p><img src="/posts/4d70eda438e0/image-20240324134921756.png" alt="image-20240324134921756"></p><h2 id="部分样式参数说明"><a href="#部分样式参数说明" class="headerlink" title="部分样式参数说明"></a>部分样式参数说明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">ForceColors：是否强制使用颜色输出<br>DisableColors：是否禁用颜色输出<br>ForceQuote：是否强制引用所有值<br>DisableQuote：是否禁用应用所有值<br>DisableTimestamp：是否禁用时间戳<br>FullTimestamp：是否在连接到TTY时输出完整的时间戳<br>TimestampFormat：用于输出完整时间戳的时间戳格式<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> logrus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> logrus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Compression</title>
      <link href="/posts/c9d547dbfa72/"/>
      <url>/posts/c9d547dbfa72/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc可以实现对发送的数据进行压缩，已达到减少通信时的带宽。</p><p>还可以根据消息的级别和调用，启用和禁用压缩。</p><p>可以对通道进行不同的压缩设置，以及支持不同算法，和自定义压缩器。</p><h1 id="非对称的压缩"><a href="#非对称的压缩" class="headerlink" title="非对称的压缩"></a>非对称的压缩</h1><p>grpc允许非对称的通信，如：响应不被压缩，而请求进行压缩。</p><p>响应还可以使用与请求不同的压缩方法。</p><p>如果客户端的请求消息被服务器不支持的算法压缩，那么服务器将导致<code>UNIMPLEMENTED</code>的错误码。</p><p>而且服务器的响应头包含了支持的压缩算法，其报头：<code>grpc-accept-encoding</code>。</p><p>相反的，如果服务器使用了客户端不支持的压缩算法（从客户端发送来的最后一条消息的报头<code>grpc-accept-encoding</code>得知），那么将发送不被压缩的消息。</p><p>如<code>server.go</code>源码所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// If cp is set, use it.  Otherwise, attempt to compress the response using</span><br><span class="hljs-comment">// the incoming message compression method.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> this needs to be ahead of all handling, https://github.com/grpc/grpc-go/issues/686.</span><br><span class="hljs-comment">// s.opts.cp 已被弃用，即之前可以使用grpc.RPCCompressor()指定服务器压缩器</span><br><span class="hljs-keyword">if</span> s.opts.cp != <span class="hljs-literal">nil</span> &#123;<br>ss.cp = s.opts.cp<br>ss.sendCompressorName = s.opts.cp.Type()<br>    <span class="hljs-comment">// 当前版本只能从请求头中读取报头`grpc-accept-encoding`指定的压缩算法</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> rc := stream.RecvCompress(); rc != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; rc != encoding.Identity &#123;<br><span class="hljs-comment">// Legacy compressor not specified; attempt to respond with same encoding.</span><br>ss.comp = encoding.GetCompressor(rc)<br><span class="hljs-keyword">if</span> ss.comp != <span class="hljs-literal">nil</span> &#123;<br>ss.sendCompressorName = rc<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> ss.sendCompressorName != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">if</span> err := stream.SetSendCompress(ss.sendCompressorName); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> status.Errorf(codes.Internal, <span class="hljs-string">&quot;grpc: failed to set send compressor: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器的解压缩算法，都是可以由来自客户端的请求头中<code>grpc-accept-encoding</code>指定的解压缩算法，前提是服务器有提前注册好，<code>encoding.RegisterCompressor()</code>。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>grpc自带<code>gzip</code>压缩算法。</p><p>在客户端使用<code>calloption</code>设置压缩器，指定压缩算法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.UseCompressor(gzip.Name)<br></code></pre></td></tr></table></figure><p>在服务器匿名导包，注册压缩器。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">_ <span class="hljs-string">&quot;google.golang.org/grpc/encoding/gzip&quot;</span><br></code></pre></td></tr></table></figure><p>注意这里使用了匿名导包<code>_ &quot;google.golang.org/grpc/encoding/gzip&quot;</code>，看源码得知，已经在<code>init</code>函数中进行注册压缩器了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> gzip<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;compress/gzip&quot;</span><br><span class="hljs-string">&quot;encoding/binary&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc/encoding&quot;</span><br>)<br><br><span class="hljs-comment">// Name is the name registered for the gzip compressor.</span><br><span class="hljs-keyword">const</span> Name = <span class="hljs-string">&quot;gzip&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>c := &amp;compressor&#123;&#125;<br>c.poolCompressor.New = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> any &#123;<br><span class="hljs-keyword">return</span> &amp;writer&#123;Writer: gzip.NewWriter(io.Discard), pool: &amp;c.poolCompressor&#125;<br>&#125;<br>encoding.RegisterCompressor(c)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以设置压缩级别<code>gzip.SetLevel</code>，但值得注意的是，该方法并非线程安全，所以要在保证在线程安全的情况下使用，如<code>init函数</code>。同样的函数有<code>encoding.RegisterCompressor</code>。</p><p>下面是<code>gzip</code>的几个压缩等级：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   <span class="hljs-comment">// 不压缩</span><br>NoCompression      = flate.NoCompression<br><span class="hljs-comment">// 最快速度</span><br>    BestSpeed          = flate.BestSpeed<br><span class="hljs-comment">// 最好的压缩</span><br>    BestCompression    = flate.BestCompression<br><span class="hljs-comment">// 默认的压缩</span><br>    DefaultCompression = flate.DefaultCompression<br><span class="hljs-comment">//  哈夫曼算法 gizp不支持</span><br>    HuffmanOnly        = flate.HuffmanOnly<br>)<br></code></pre></td></tr></table></figure><p>可以在服务器端，获取请求头，查看客户端指定使用的压缩算法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e echoServer)</span></span> UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br>md, ok := metadata.FromIncomingContext(ctx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Error(codes.InvalidArgument, <span class="hljs-string">&quot;miss metadata&quot;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> codec <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> codecs, ok := md[<span class="hljs-string">&quot;grpc-accept-encoding&quot;</span>]; ok &#123;<br>codec = codecs[<span class="hljs-number">0</span>]<br>&#125;<br>log.Println(codec) <span class="hljs-comment">// gzip</span><br><br>fmt.Printf(<span class="hljs-string">&quot;UnaryEcho called with message %q\n&quot;</span>, in.GetMessage())<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: in.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><code>echo.proto</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span>;<br><br><span class="hljs-keyword">package</span> echo;<br><br><span class="hljs-comment">// 请求</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">EchoRequest</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 响应</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">EchoResponse</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// Echo 服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Echo</span> &#123;<br>  <span class="hljs-comment">// 一元rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> UnaryEcho(EchoRequest) <span class="hljs-keyword">returns</span> (EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 服务器流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ServerStreamingEcho(EchoRequest) <span class="hljs-keyword">returns</span> (stream EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 客户端流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ClientStreamingEcho(stream EchoRequest) <span class="hljs-keyword">returns</span> (EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 双向流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> BidirectionalStreamingEcho(stream EchoRequest) <span class="hljs-keyword">returns</span> (stream EchoResponse) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>_ <span class="hljs-string">&quot;google.golang.org/grpc/encoding/gzip&quot;</span> <span class="hljs-comment">// 在init函数中已经初始化gzip compressor</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> echoServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e echoServer)</span></span> UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;UnaryEcho called with message %q\n&quot;</span>, in.GetMessage())<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: in.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;server listening at %v\n&quot;</span>, lis.Addr())<br>s := grpc.NewServer()<br>pb.RegisterEchoServer(s, &amp;echoServer&#123;&#125;)<br>s.Serve(lis)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/encoding/gzip&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect server: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>client := pb.NewEchoClient(conn)<br><br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br>    <span class="hljs-comment">// 使用calloption实现压缩请求信息</span><br>res, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: <span class="hljs-string">&quot;compress&quot;</span>&#125;, grpc.UseCompressor(gzip.Name))<br>log.Printf(<span class="hljs-string">&quot;UnaryEcho call returned %q, %v\n&quot;</span>, res.GetMessage(), err)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Message=%q, err=%v; want Message=%q, err=&lt;nil&gt;&quot;</span>, res.GetMessage(), err, <span class="hljs-string">&quot;compress&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义压缩器"><a href="#自定义压缩器" class="headerlink" title="自定义压缩器"></a>自定义压缩器</h1><p>在<code>gzip</code>的源码中，不难看出，自定义压缩器需要实现<code>encoding.Compressor</code>接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Compressor <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// Compress writes the data written to wc to w after compressing it.  If an</span><br><span class="hljs-comment">// error occurs while initializing the compressor, that error is returned</span><br><span class="hljs-comment">// instead.</span><br>Compress(w io.Writer) (io.WriteCloser, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Decompress reads data from r, decompresses it, and provides the</span><br><span class="hljs-comment">// uncompressed data via the returned io.Reader.  If an error occurs while</span><br><span class="hljs-comment">// initializing the decompressor, that error is returned instead.</span><br>Decompress(r io.Reader) (io.Reader, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Name is the name of the compression codec and is used to set the content</span><br><span class="hljs-comment">// coding header.  The result must be static; the result cannot change</span><br><span class="hljs-comment">// between calls.</span><br>Name() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所以，创建一个算法，实现该接口即可。</p><p>下面是一个自定义一个acom算法的压缩器，acom算法：不进行压缩的算法。</p><p>acom.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> acom<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;google.golang.org/grpc/encoding&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> Name = <span class="hljs-string">&quot;acom&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>encoding.RegisterCompressor(&amp;compressor&#123;&#125;)<br>&#125;<br><br><span class="hljs-keyword">type</span> compressor <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-keyword">type</span> writer <span class="hljs-keyword">struct</span> &#123;<br>io.Writer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w writer)</span></span> Close() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *compressor)</span></span> Compress(w io.Writer) (io.WriteCloser, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;writer&#123;w&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *compressor)</span></span> Decompress(r io.Reader) (io.Reader, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> r, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *compressor)</span></span> Name() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> Name<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">res, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: <span class="hljs-string">&quot;compress&quot;</span>&#125;, grpc.UseCompressor(gzip.Name))<br>...<br>res, err = client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: <span class="hljs-string">&quot;compress&quot;</span>&#125;, grpc.UseCompressor(acom.Name))<br>...<br></code></pre></td></tr></table></figure><p>服务器匿名导包注册：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">_ <span class="hljs-string">&quot;grpc-learn/feature/compression/acom&quot;</span><br></code></pre></td></tr></table></figure><p>在服务器响应中，打印出请求头:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">md, ok := metadata.FromIncomingContext(ctx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Error(codes.InvalidArgument, <span class="hljs-string">&quot;miss metadata&quot;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> codec <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> codecs, ok := md[<span class="hljs-string">&quot;grpc-accept-encoding&quot;</span>]; ok &#123;<br>codec = codecs[<span class="hljs-number">0</span>]<br>&#125;<br>log.Println(<span class="hljs-string">&quot;appoint codec: &quot;</span> + codec)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">appoint codec: gzip,acom<br></code></pre></td></tr></table></figure><p>表明客户端支持的压缩算法：gzip和acom</p><p>只要服务器有注册这两个算法即可，可以解压缩请求，压缩响应。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://grpc.p2hp.com/docs/guides/compression/index.html">GRPC </a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Cancellation</title>
      <link href="/posts/9a0c4dff1be1/"/>
      <url>/posts/9a0c4dff1be1/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当grpc客户端不再需要rpc调用结果时，可以向服务器发出<code>Cancel</code>信号。</p><p>当超时和<code>I/O</code>错误时也会触发取消。</p><p>当客户端的请求结果无关紧要时，可以提前<code>Cancel</code>，以达到节约能耗的作用。</p><p>当<code>client</code>发出一个请求到<code>server1</code>，然后<code>server1</code>需要调用<code>server2</code>，如果要取消该调用，则需要将取消信号往下传递。</p><p><img src="/posts/9a0c4dff1be1/image-20240403190228572.png" alt="image-20240403190228572"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>grpc的取消流程如下：</p><ol><li><p>客户端调用在附带的<code>context</code>中的取消函数，且客户端不需要往服务器提供任何取消原因。</p></li><li><p>服务器不会立即停止处理请求后续，服务器会定期检查它所服务的RPC是否已经取消或存在，如果已取消，才会停止处理。</p></li><li><p>当服务器处理完，会将<code>Cancel</code>信号传递到下一个服务器（如果调用链上有的话）。</p></li></ol><p>流程图如下所示：</p><p><img src="/posts/9a0c4dff1be1/image-20240403191309632.png" alt="image-20240403191309632"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><code>echo.proto</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span>;<br><br><span class="hljs-keyword">package</span> echo;<br><br><span class="hljs-comment">// 请求</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">EchoRequest</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 响应</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">EchoResponse</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// Echo 服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Echo</span> &#123;<br>  <span class="hljs-comment">// 一元rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> UnaryEcho(EchoRequest) <span class="hljs-keyword">returns</span> (EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 服务器流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ServerStreamingEcho(EchoRequest) <span class="hljs-keyword">returns</span> (stream EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 客户端流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ClientStreamingEcho(stream EchoRequest) <span class="hljs-keyword">returns</span> (EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 双向流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> BidirectionalStreamingEcho(stream EchoRequest) <span class="hljs-keyword">returns</span> (stream EchoResponse) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br>)<br><br><span class="hljs-keyword">type</span> echoServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *echoServer)</span></span> BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>in, err := stream.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to receving form stream: %v&quot;</span>, err)<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;echoing message: %v&quot;</span>, in.Message)<br>stream.Send(&amp;pb.EchoResponse&#123;Message: in.Message&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 1. 监听接口</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen port %q: %v&quot;</span>, *port, err)<br>&#125;<br><br><span class="hljs-comment">// 2. 创建grpc服务器</span><br>s := grpc.NewServer()<br><br><span class="hljs-comment">// 3. 注册服务</span><br>pb.RegisterEchoServer(s, &amp;echoServer&#123;&#125;)<br><br><span class="hljs-comment">// 4. 服务器， 启动</span><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> address = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;address of server&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> opts = []grpc.DialOption&#123;<br><span class="hljs-comment">// 无认证连接 http1.0</span><br>grpc.WithTransportCredentials(insecure.NewCredentials()),<br>&#125;<br><span class="hljs-comment">// 1. 创建连接</span><br>conn, err := grpc.Dial(*address, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect server : %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 2. 创建客户端</span><br>client := pb.NewEchoClient(conn)<br><br><span class="hljs-comment">// 3. 调用rpc</span><br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br>stream, err := client.BidirectionalStreamingEcho(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to creating stream: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 发送信息</span><br><span class="hljs-keyword">if</span> err := sendMessage(stream, <span class="hljs-string">&quot;hello&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error sending on stream: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err := sendMessage(stream, <span class="hljs-string">&quot;hello&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error sending on stream: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 收信息</span><br>recvMessage(stream, codes.OK)<br>recvMessage(stream, codes.OK)<br><br><span class="hljs-comment">// 取消</span><br>log.Println(<span class="hljs-string">&quot;cancelling context&quot;</span>)<br>cancel()<br><br>sendMessage(stream, <span class="hljs-string">&quot;closed&quot;</span>)<br><br>recvMessage(stream, codes.Canceled)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">recvMessage</span><span class="hljs-params">(stream pb.Echo_BidirectionalStreamingEchoClient, wantErrCode codes.Code)</span></span> &#123;<br>in, err := stream.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to recvice: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> status.Code(err) != wantErrCode &#123;<br>log.Fatalf(<span class="hljs-string">&quot;stream.Recv() = %v, %v; want _, status.Code(err)=%v&quot;</span>, in, err, wantErrCode)<br>&#125;<br><br>log.Printf(<span class="hljs-string">&quot;received message: %v&quot;</span>, in.Message)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(stream pb.Echo_BidirectionalStreamingEchoClient, msg <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;sending message: %v\n&quot;</span>, msg)<br><span class="hljs-keyword">return</span> stream.Send(&amp;pb.EchoRequest&#123;Message: msg&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[GRPC ](<a href="https://grpc.p2hp.com/docs/guides/cancellation/index.html">Cancellation | gRPC (p2hp.com)</a>)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Authz-rbac</title>
      <link href="/posts/5f6a91d393f6/"/>
      <url>/posts/5f6a91d393f6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>grpc提供了包<code>authz</code>，用于<code>RBAC</code>模型的权限控制。</p><p><code>authz</code>本质上是提供了拦截器<code>interceptor</code>，对来自客户端的请求进行拦截解析。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分成客户端和服务器两个方面：</p><ul><li>客户端<ul><li>需要传递可以进行权限划分的标识，如<code>username。</code></li><li>同时也需要开启<code>tls</code>，那么就可以让<code>token</code>携带<code>username</code>。</li><li>使用<code>callOption</code>进行获取<code>token</code>。</li><li>可以使用grpc的<code>oauth</code>进行包装<code>token</code>。</li></ul></li><li>服务器<ul><li>创建一个拦截器，解析token中的<code>username</code>，并分发权限。</li><li>使用拦截器<code>authz</code>，对已经携带权限信息的请求进行拦截并判断权限。</li><li>开启tls。</li></ul></li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>同样是使用<code>echo.proto</code>文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br>option go_package = <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span>;<br><br><span class="hljs-keyword">package</span> echo;<br><br><span class="hljs-comment">// 请求</span><br>message EchoRequest &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 响应</span><br>message EchoResponse &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// Echo 服务</span><br>service Echo &#123;<br>  <span class="hljs-comment">// 一元rpc</span><br>  rpc UnaryEcho(EchoRequest) returns (EchoResponse) &#123;&#125;<br><br>  <span class="hljs-comment">// 服务器流式rpc</span><br>  rpc ServerStreamingEcho(EchoRequest) returns (stream EchoResponse) &#123;&#125;<br><br>  <span class="hljs-comment">// 客户端流式rpc</span><br>  rpc ClientStreamingEcho(stream EchoRequest) returns (EchoResponse) &#123;&#125;<br><br>  <span class="hljs-comment">// 双向流式rpc</span><br>  rpc BidirectionalStreamingEcho(stream EchoRequest) returns (stream EchoResponse) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/authz&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/metadata&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;grpc-learn/jwt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// RBAC（Role-Based Access Control）权限控制</span><br><span class="hljs-keyword">const</span> (<br>unaryEchoWriterRole      = <span class="hljs-string">&quot;UNARY_ECHO:W&quot;</span><br>streamEchoReadWriterRole = <span class="hljs-string">&quot;STREAM_ECHO:RW&quot;</span><br>authzPolicy              = <span class="hljs-string">`</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;name&quot;: &quot;authz&quot;,</span><br><span class="hljs-string">&quot;allow_rules&quot;: [</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;name&quot;: &quot;allow_UnaryEcho&quot;,</span><br><span class="hljs-string">&quot;request&quot;: &#123;</span><br><span class="hljs-string">&quot;paths&quot;: [&quot;/echo.Echo/UnaryEcho&quot;],</span><br><span class="hljs-string">&quot;headers&quot;: [</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;key&quot;: &quot;UNARY_ECHO:W&quot;,</span><br><span class="hljs-string">&quot;values&quot;: [&quot;true&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;name&quot;: &quot;allow_BidirectionalStreamingEcho&quot;,</span><br><span class="hljs-string">&quot;request&quot;: &#123;</span><br><span class="hljs-string">&quot;paths&quot;: [&quot;/echo.Echo/BidirectionalStreamingEcho&quot;],</span><br><span class="hljs-string">&quot;headers&quot;: [</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;key&quot;: &quot;STREAM_ECHO:RW&quot;,</span><br><span class="hljs-string">&quot;values&quot;: [&quot;true&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">],</span><br><span class="hljs-string">&quot;deny_rules&quot;: []</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">`</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br>)<br><br><span class="hljs-comment">// 实现echo服务器</span><br><span class="hljs-keyword">type</span> echoServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *echoServer)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br>log.Printf(<span class="hljs-string">&quot;unary echoing message: %v\n&quot;</span>, request.Message)<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *echoServer)</span></span> BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>recv, err := stream.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>log.Fatalf(<span class="hljs-string">&quot;failed to receiving message form stream: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;bidirectional echoing message: %v\n&quot;</span>, recv.Message)<br>err = stream.Send(&amp;pb.EchoResponse&#123;Message: recv.Message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to send message: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// authUnaryInterceptor 认证 一元拦截器 验证token 以及获取用户和分发权限</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">authUnaryInterceptor</span><span class="hljs-params">(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span></span> (resp any, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 从metadata读取token</span><br>md, ok := metadata.FromIncomingContext(ctx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Error(codes.InvalidArgument, <span class="hljs-string">&quot;miss metadata&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 验证token 并取出username</span><br>username, err := isAuthenticated(md[<span class="hljs-string">&quot;authorization&quot;</span>])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Error(codes.Unauthenticated, err.Error())<br>&#125;<br><br><span class="hljs-comment">// 分发角色到context</span><br>ctx = newContextWithRoles(ctx, username)<br><span class="hljs-keyword">return</span> handler(ctx, req)<br>&#125;<br><br><span class="hljs-comment">// newContextWithRoles 通过用户名分发角色权限</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newContextWithRoles</span><span class="hljs-params">(ctx context.Context, username <span class="hljs-type">string</span>)</span></span> context.Context &#123;<br>md := metadata.MD&#123;&#125;<br><span class="hljs-comment">// 赋予角色及权限 这里是简单判断</span><br><span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;super-user&quot;</span> &#123;<br>md.Set(unaryEchoWriterRole, <span class="hljs-string">&quot;true&quot;</span>)<br>md.Set(streamEchoReadWriterRole, <span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> metadata.NewIncomingContext(ctx, md)<br>&#125;<br><br><span class="hljs-comment">// 读取并验证token，取出username</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isAuthenticated</span><span class="hljs-params">(authorization []<span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 验证authorization长度</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(authorization) &lt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, errors.New(<span class="hljs-string">&quot;received empty authorization token form client&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 截取token</span><br>token := strings.TrimPrefix(authorization[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;Bearer &quot;</span>)<br><br><span class="hljs-comment">// jwt解析token</span><br>claims, err := jwt.ParseAuthToken(token)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> claims.Username, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// authStreamInterceptor 认证流拦截器 验证token 以及获取用户和分发权限</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">authStreamInterceptor</span><span class="hljs-params">(srv any, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 读取流的metadata</span><br>md, ok := metadata.FromIncomingContext(ss.Context())<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> status.Error(codes.InvalidArgument, <span class="hljs-string">&quot;miss metadata&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 验证token</span><br>username, err := isAuthenticated(md[<span class="hljs-string">&quot;authorization&quot;</span>])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> status.Error(codes.Unauthenticated, err.Error())<br>&#125;<br><br><span class="hljs-comment">// 分发角色权限</span><br>ctx := newContextWithRoles(ss.Context(), username)<br><br><span class="hljs-comment">// 封装 ctx到流中</span><br>ss = &amp;wrappedStream&#123;<br>ServerStream: ss,<br>ctx:          ctx,<br>&#125;<br><br><span class="hljs-keyword">return</span> handler(srv, ss)<br><br>&#125;<br><br><span class="hljs-keyword">type</span> wrappedStream <span class="hljs-keyword">struct</span> &#123;<br>grpc.ServerStream<br>ctx context.Context<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *wrappedStream)</span></span> Context() context.Context &#123;<br><span class="hljs-keyword">return</span> w.ctx<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 1. 监听端口</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen port %q: %v&quot;</span>, *port, err)<br>&#125;<br><br><span class="hljs-comment">// 创建tls凭证</span><br>creds, err := credentials.NewServerTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to loading credentials: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 创建认证拦截器</span><br>staticInterceptor, err := authz.NewStatic(authzPolicy)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create authz interceptor&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> opts = []grpc.ServerOption&#123;<br><span class="hljs-comment">// 一元rpc拦截器</span><br>grpc.ChainUnaryInterceptor(authUnaryInterceptor, staticInterceptor.UnaryInterceptor),<br><span class="hljs-comment">// 流拦截器</span><br>grpc.ChainStreamInterceptor(authStreamInterceptor, staticInterceptor.StreamInterceptor),<br><span class="hljs-comment">// tls</span><br>grpc.Creds(creds),<br>&#125;<br><br><span class="hljs-comment">// 2. 创建服务器</span><br>s := grpc.NewServer(opts...)<br><br><span class="hljs-comment">// 3. 注册服务</span><br>pb.RegisterEchoServer(s, &amp;echoServer&#123;&#125;)<br><br><span class="hljs-comment">// 4. 启动服务</span><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/oauth2&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/oauth&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;grpc-learn/jwt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>address = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(ctx context.Context, client pb.EchoClient, message <span class="hljs-type">string</span>, opts ...grpc.CallOption)</span></span> <span class="hljs-type">error</span> &#123;<br>resp, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> status.Errorf(status.Code(err), <span class="hljs-string">&quot;UnaryEcho RPC failed: %v&quot;</span>, err)<br>&#125;<br>log.Println(<span class="hljs-string">&quot;UnaryEcho: &quot;</span>, resp.Message)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callBidiStreamUnaryEcho</span><span class="hljs-params">(ctx context.Context, client pb.EchoClient, opts ...grpc.CallOption)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 建立连接</span><br>c, err := client.BidirectionalStreamingEcho(ctx, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> status.Errorf(status.Code(err), <span class="hljs-string">&quot;BidirectionalStreamingEcho RPC failed: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 用于等待接收数据</span><br>waitCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-comment">// 接收数据</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>recv, err := c.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-comment">// 接收完毕 关闭channel</span><br><span class="hljs-built_in">close</span>(waitCh)<br><span class="hljs-keyword">break</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;failed to receive form server: %v&quot;</span>, err)<br><span class="hljs-built_in">close</span>(waitCh)<br><span class="hljs-keyword">break</span><br>&#125;<br>log.Println(<span class="hljs-string">&quot;BidiStreaming Echo: &quot;</span>, recv.Message)<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>err := c.Send(&amp;pb.EchoRequest&#123;Message: fmt.Sprintf(<span class="hljs-string">&quot;Request %d&quot;</span>, i)&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> status.Errorf(status.Code(err), <span class="hljs-string">&quot;sending StreamingEcho message: %v&quot;</span>, err)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 发送EOF</span><br>c.CloseSend()<br>&lt;-waitCh<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 创建调用可选项 设置token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newCredentialsCallOption</span><span class="hljs-params">(username <span class="hljs-type">string</span>)</span></span> grpc.CallOption &#123;<br>token, err := jwt.GetAuthToken(username, <span class="hljs-string">&quot;grpc&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to get token: %v&quot;</span>, err)<br>&#125;<br>oauth2Token := oauth2.Token&#123;AccessToken: token&#125;<br>tokenSource := oauth2.StaticTokenSource(&amp;oauth2Token)<br><span class="hljs-keyword">return</span> grpc.PerRPCCredentials(oauth.TokenSource&#123;TokenSource: tokenSource&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// tls</span><br>creds, err := credentials.NewClientTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), <span class="hljs-string">&quot;x.test.example.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to load credentials: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">var</span> opts = []grpc.DialOption&#123;<br>grpc.WithTransportCredentials(creds),<br>&#125;<br><br><span class="hljs-comment">// 1. 连接服务器</span><br>conn, err := grpc.Dial(*address, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 2. 创建客户端</span><br>client := pb.NewEchoClient(conn)<br><br><span class="hljs-comment">// 3.rpc调用</span><br><span class="hljs-comment">// 设置超时时间</span><br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br><span class="hljs-comment">// 能通过验证的rpc调用</span><br>authorisedUserTokenCallOption := newCredentialsCallOption(<span class="hljs-string">&quot;super-user&quot;</span>)<br><span class="hljs-keyword">if</span> err := callUnaryEcho(ctx, client, <span class="hljs-string">&quot;hello world&quot;</span>, authorisedUserTokenCallOption); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to call UnaryEcho by authorized user: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err := callBidiStreamUnaryEcho(ctx, client, authorisedUserTokenCallOption); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to call BidiStreamUnaryEcho by authorized user: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 不能通过认证的rpc调用</span><br>unAuthorisedUserTokenCallOption := newCredentialsCallOption(<span class="hljs-string">&quot;hacker&quot;</span>)<br><span class="hljs-keyword">if</span> err := callUnaryEcho(ctx, client, <span class="hljs-string">&quot;hello world&quot;</span>, unAuthorisedUserTokenCallOption); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to call UnaryEcho by unauthorized user: %v\n&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err := callBidiStreamUnaryEcho(ctx, client, unAuthorisedUserTokenCallOption); err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;failed to call BidiStreamUnaryEcho by unauthorized user: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[GRPC ](<a href="https://github.com/grpc/grpc-go/tree/master/examples/features/authz">grpc-go&#x2F;examples&#x2F;features&#x2F;authz at master · grpc&#x2F;grpc-go (github.com)</a>)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.特征</title>
      <link href="/posts/f0350a06fa23/"/>
      <url>/posts/f0350a06fa23/</url>
      
        <content type="html"><![CDATA[<p>本文为grpc的功能归纳。<br><a href>Authorization</a><br><a href="/posts/5f6a91d393f6/">Authz-rbac</a><br><a href>Authorization</a><br><a href>Authorization</a><br><a href>Authorization</a><br><a href>Authorization</a><br><a href>Authorization</a><br><a href>Authorization</a><br><a href>Authorization</a><br><a href>Authorization</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Authorization</title>
      <link href="/posts/8280d9410f0c/"/>
      <url>/posts/8280d9410f0c/</url>
      
        <content type="html"><![CDATA[<p>grpc可以支持使用<code>oauth2</code>进行身份认证。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1.客户端从认证服务器拿取token。(该例子中直接使用<code>jwt</code>获取<code>token</code>)</p><p>2.服务器使用<code>Interceptor</code>拦截器获取元数据中的<code>token</code>，并校验。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>一个简单的<code>echo.proto</code>。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span>;<br><br><span class="hljs-keyword">package</span> echo;<br><br><span class="hljs-comment">// 请求</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">EchoRequest</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 响应</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">EchoResponse</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// Echo 服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Echo</span> &#123;<br>  <span class="hljs-comment">// 一元rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> UnaryEcho(EchoRequest) <span class="hljs-keyword">returns</span> (EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 服务器流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ServerStreamingEcho(EchoRequest) <span class="hljs-keyword">returns</span> (stream EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 客户端流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ClientStreamingEcho(stream EchoRequest) <span class="hljs-keyword">returns</span> (EchoResponse) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 双向流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> BidirectionalStreamingEcho(stream EchoRequest) <span class="hljs-keyword">returns</span> (stream EchoResponse) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器使用拦截器拦截请求读取token并校验。</p><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/metadata&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;grpc-learn/jwt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// 命令行参数 自定义端口</span><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> echoServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *echoServer)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 验证token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ensureValidToken</span><span class="hljs-params">(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span></span> (resp any, err <span class="hljs-type">error</span>) &#123;<br>md, ok := metadata.FromIncomingContext(ctx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Error(codes.InvalidArgument, <span class="hljs-string">&quot;miss metadata&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> !valid(md[<span class="hljs-string">&quot;authorization&quot;</span>]) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Error(codes.Unauthenticated, <span class="hljs-string">&quot;invalid token&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">return</span> handler(ctx, req)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">valid</span><span class="hljs-params">(authorization []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(authorization) &lt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br>token := strings.TrimPrefix(authorization[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;Bearer &quot;</span>)<br><br>_, err := jwt.ParseToken(token)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>log.Printf(<span class="hljs-string">&quot;server starting on port %d ... \n&quot;</span>, *port)<br><br><span class="hljs-comment">//  获取私钥公钥文件</span><br>creds, err := credentials.NewServerTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to get credentials: %v&quot;</span>, err)<br>&#125;<br>opts := []grpc.ServerOption&#123;<br><span class="hljs-comment">// 开启tls</span><br>grpc.Creds(creds),<br><span class="hljs-comment">// 开启拦截器 验证token</span><br>grpc.UnaryInterceptor(ensureValidToken),<br>&#125;<br><br><span class="hljs-comment">// 1. 监听端口</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 2. 创建grpc服务器</span><br>s := grpc.NewServer(opts...)<br><span class="hljs-comment">// 3. 注册服务</span><br>pb.RegisterEchoServer(s, &amp;echoServer&#123;&#125;)<br><span class="hljs-comment">// 4. 服务器，启动</span><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/oauth2&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/oauth&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;grpc-learn/jwt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(client pb.EchoClient, s <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancelFunc := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">10</span>)<br><span class="hljs-keyword">defer</span> cancelFunc()<br>reply, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: s&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.UnaryEcho(_) = _, %v&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;UnaryEcho: &quot;</span>, reply.Message)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetchToken</span><span class="hljs-params">()</span></span> *oauth2.Token &#123;<br>    <span class="hljs-comment">// 这里可以替换成从认证服务器获取token</span><br>token, err := jwt.GetToken(<span class="hljs-string">&quot;wer&quot;</span>, <span class="hljs-string">&quot;grpc&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> &amp;oauth2.Token&#123;AccessToken: token&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 开启oauth</span><br>oauthRPC := oauth.TokenSource&#123;TokenSource: oauth2.StaticTokenSource(fetchToken())&#125;<br><span class="hljs-comment">// 开启tls</span><br>creds, err := credentials.NewClientTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>), <span class="hljs-string">&quot;x.test.example.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to get credentials: %v&quot;</span>, err)<br>&#125;<br>opts := []grpc.DialOption&#123;<br><span class="hljs-comment">// oauth.TokenSource 其实就是实现了PerRPCCredentials接口</span><br>grpc.WithPerRPCCredentials(oauthRPC),<br><span class="hljs-comment">// oauth.TokenSource 必须开启tls 运输层安全</span><br>grpc.WithTransportCredentials(creds),<br>&#125;<br><br><span class="hljs-comment">// 1. 获取连接</span><br>conn, err := grpc.Dial(fmt.Sprintf(<span class="hljs-string">&quot;:%v&quot;</span>, *port), opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 2. 创建客户端 stub</span><br>client := pb.NewEchoClient(conn)<br><br>callUnaryEcho(client, <span class="hljs-string">&quot;hello world!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端使用<code>oauth2</code>获取到<code>TokenSource</code>，然后使用<code>credentials.Oauth.TokenSource</code>创建<code>PerRPCCredentials</code>，最后加入到<code>gprc channel</code>的配置选项中。</p><p>不难得知，其实<code>credentials.Oauth.TokenSource</code>实现了<code>PerRPCCredentials</code>。</p><p>源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ts TokenSource)</span></span> GetRequestMetadata(ctx context.Context, uri ...<span class="hljs-type">string</span>) (<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>token, err := ts.Token()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>    <span class="hljs-comment">// 判断是否开启了tls 运输层安全</span><br>ri, _ := credentials.RequestInfoFromContext(ctx)<br><span class="hljs-keyword">if</span> err = credentials.CheckSecurityLevel(ri.AuthInfo, credentials.PrivacyAndIntegrity); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unable to transfer TokenSource PerRPCCredentials: %v&quot;</span>, err)<br>&#125;<br>    <span class="hljs-comment">// 填充metadata</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;authorization&quot;</span>: token.Type() + <span class="hljs-string">&quot; &quot;</span> + token.AccessToken,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要使用<code>oauth</code>必须要开启<code>tls</code>。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[GRPC 文档](<a href="https://grpc.p2hp.com/docs/guides/auth/index.html">Authentication | gRPC (p2hp.com)</a>)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.认证</title>
      <link href="/posts/a2694b6ef159/"/>
      <url>/posts/a2694b6ef159/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>grpc旨在与各种身份验证机制配合使用，使得易于安全地使用grpc与其它系统通信。</p><p>可以使用gprc支持的<code>SSL/TLS</code>，或基于Google令牌的身份验证，再或者扩展代码插入自定义的身份验证系统。</p><h1 id="支持的身份认证方式"><a href="#支持的身份认证方式" class="headerlink" title="支持的身份认证方式"></a>支持的身份认证方式</h1><ul><li><code>SSL/TLS（基于http2协议）</code>: grpc推荐使用<code>SSL/TLS</code>进行身份验证，并加密客户端与服务器之间交换的所有数据，还有确保数据在传输中不被改变。</li><li><code>ALTS</code>: 如果应用式用在谷歌云平台（GCP）上的，可以使用ALTS。</li><li><code>Token-based authentication with Goole</code>: 通常是OAuth2令牌。<code>Google token</code>也是只能连接到<code>Goole</code>服务。</li><li><code>基于Token的认证方式</code>：如jwt</li><li><code>无认证</code>： 默认采用http1, 不安全连接。</li><li><code>自定义身份认证</code></li></ul><h1 id="认证API"><a href="#认证API" class="headerlink" title="认证API"></a>认证API</h1><p>grpc提供了一个简单的身份验证API<code>Credential</code>，可以在创建grpc channel时使用。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><code>Credential</code>有两种类型：</p><ul><li><code>Channel credentials</code>: 用于<code>channel</code>连接, 如<code>SSL/TLS</code></li><li><code>Call credentials</code>: 用于调用, 如C++中的<code>ClientContext</code></li></ul><p>可以将<code>Channel credentials</code>和<code>Call credentials</code>组合在一起使用。</p><p>例如，<code>SslCredentials</code>和<code>AccessTokenCredentials</code>组合创建<code>ChannelCredentials</code>。即每当该<code>Channel</code>上调用时，都需要发送<code>Access Token</code>。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="没有加密或认证"><a href="#没有加密或认证" class="headerlink" title="没有加密或认证"></a>没有加密或认证</h2><p>Client:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">conn, _ := grpc.Dial(<span class="hljs-string">&quot;localhost:50051&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-comment">// error handling omitted</span><br>client := pb.NewGreeterClient(conn)<br></code></pre></td></tr></table></figure><p>Server:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s := grpc.NewServer()<br>lis, _ := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>)<br><span class="hljs-comment">// error handling omitted</span><br>s.Serve(lis)<br></code></pre></td></tr></table></figure><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h2><p>Client:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">creds, _ := credentials.NewClientTLSFromFile(certFile, <span class="hljs-string">&quot;&quot;</span>)<br>conn, _ := grpc.Dial(<span class="hljs-string">&quot;localhost:50051&quot;</span>, grpc.WithTransportCredentials(creds))<br><span class="hljs-comment">// error handling omitted</span><br>client := pb.NewGreeterClient(conn)<br></code></pre></td></tr></table></figure><p>Server:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">creds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)<br>s := grpc.NewServer(grpc.Creds(creds))<br>lis, _ := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>)<br><span class="hljs-comment">// error handling omitted</span><br>s.Serve(lis)<br></code></pre></td></tr></table></figure><h2 id="用Google认证"><a href="#用Google认证" class="headerlink" title="用Google认证"></a>用Google认证</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">pool, _ := x509.SystemCertPool()<br><span class="hljs-comment">// error handling omitted</span><br>creds := credentials.NewClientTLSFromCert(pool, <span class="hljs-string">&quot;&quot;</span>)<br>perRPC, _ := oauth.NewServiceAccountFromFile(<span class="hljs-string">&quot;service-account.json&quot;</span>, scope)<br>conn, _ := grpc.Dial(<br><span class="hljs-string">&quot;greeter.googleapis.com&quot;</span>,<br>grpc.WithTransportCredentials(creds),<br>grpc.WithPerRPCCredentials(perRPC),<br>)<br><span class="hljs-comment">// error handling omitted</span><br>client := pb.NewGreeterClient(conn)<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h2 id="拓展：自定义认证"><a href="#拓展：自定义认证" class="headerlink" title="拓展：自定义认证"></a>拓展：自定义认证</h2><p>grpc的<code>Credentials</code>允许开发人员使用自定义的认证。</p><ul><li><p>客户端实现<code>credentials</code>包的接口<code>PerRPCCredentials</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PerRPCCredentials <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// GetRequestMetadata gets the current request metadata, refreshing tokens</span><br><span class="hljs-comment">// if required. This should be called by the transport layer on each</span><br><span class="hljs-comment">// request, and the data should be populated in headers or other</span><br><span class="hljs-comment">// context. If a status code is returned, it will be used as the status for</span><br><span class="hljs-comment">// the RPC (restricted to an allowable set of codes as defined by gRFC</span><br><span class="hljs-comment">// A54). uri is the URI of the entry point for the request.  When supported</span><br><span class="hljs-comment">// by the underlying implementation, ctx can be used for timeout and</span><br><span class="hljs-comment">// cancellation. Additionally, RequestInfo data will be available via ctx</span><br><span class="hljs-comment">// to this call.  TODO(zhaoq): Define the set of the qualified keys instead</span><br><span class="hljs-comment">// of leaving it as an arbitrary string.</span><br>GetRequestMetadata(ctx context.Context, uri ...<span class="hljs-type">string</span>) (<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// RequireTransportSecurity indicates whether the credentials requires</span><br><span class="hljs-comment">// transport security.</span><br>RequireTransportSecurity() <span class="hljs-type">bool</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>服务器实现对<code>metadata</code>验证客户端信息。</p></li></ul><ol><li><p>proto文件</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;grpc-learn/customauth/customauth&quot;</span>;<br><br><span class="hljs-keyword">package</span> customauth;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> sayHello(HelloRequest) <span class="hljs-keyword">returns</span> (HelloReply) </span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span> &#123;<br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloReply</span> &#123;<br>  <span class="hljs-type">string</span><br>  message = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/customauth/customauth&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Address = <span class="hljs-string">&quot;localhost:50052&quot;</span><br>Jwtkey  = <span class="hljs-string">&quot;123456&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MyCredential <span class="hljs-keyword">struct</span> &#123;<br>token <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// GetRequestMetadata 发送元数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *MyCredential)</span></span> GetRequestMetadata(ctx context.Context, uri ...<span class="hljs-type">string</span>) (<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;authorization&quot;</span>: m.token,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// RequireTransportSecurity 自定义认证是否需要安全运输</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *MyCredential)</span></span> RequireTransportSecurity() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 开启tls</span><br><span class="hljs-keyword">var</span> opts []grpc.DialOption<br>creds, err := credentials.NewClientTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>), <span class="hljs-string">&quot;x.test.example.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to get credentials: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// tls认证</span><br>opts = <span class="hljs-built_in">append</span>(opts, grpc.WithTransportCredentials(creds))<br><span class="hljs-comment">// 自定义认证</span><br>mCreds := &amp;MyCredential&#123;&#125;<br>opts = <span class="hljs-built_in">append</span>(opts, grpc.WithPerRPCCredentials(mCreds))<br><br><span class="hljs-comment">// 创建tls 连接通道</span><br>conn, err := grpc.Dial(Address, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to dial: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 创建客户端</span><br>client := pb.NewGreeterClient(conn)<br><br><span class="hljs-comment">// 登录</span><br>loginReq := &amp;pb.LoginRequest&#123;Username: <span class="hljs-string">&quot;wer&quot;</span>, Password: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br>loginReply, err := client.Login(context.Background(), loginReq)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to login: %v&quot;</span>, err)<br>&#125;<br>mCreds.token = loginReply.Token<br><br>req := pb.HelloRequest&#123;Name: <span class="hljs-string">&quot;wer&quot;</span>&#125;<br>reply, err := client.SayHello(context.Background(), &amp;req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to call: %v&quot;</span>, err)<br>&#125;<br>log.Println(reply)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/golang-jwt/jwt/v5&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/metadata&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/customauth/customauth&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Address = <span class="hljs-string">&quot;localhost:50052&quot;</span><br>Jwtkey  = <span class="hljs-string">&quot;123456&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> GreeterServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *GreeterServer)</span></span> Login(ctx context.Context, request *pb.LoginRequest) (*pb.LoginReply, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> request.Username == <span class="hljs-string">&quot;wer&quot;</span> &amp;&amp; request.Password == <span class="hljs-string">&quot;123456&quot;</span> &#123;<br>token, err := GetToken(request.Username, <span class="hljs-string">&quot;grpc&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.InvalidArgument, <span class="hljs-string">&quot;Invalid Argument&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;pb.LoginReply&#123;Status: <span class="hljs-string">&quot;200&quot;</span>, Token: token&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> &amp;pb.LoginReply&#123;Status: <span class="hljs-string">&quot;500&quot;</span>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *GreeterServer)</span></span> SayHello(ctx context.Context, request *pb.HelloRequest) (*pb.HelloReply, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 认证metadata中的信息</span><br>md, ok := metadata.FromIncomingContext(ctx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.Unauthenticated, <span class="hljs-string">&quot;no token&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> token <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> val, ok := md[<span class="hljs-string">&quot;authorization&quot;</span>]; ok &#123;<br>token = val[<span class="hljs-number">0</span>]<br>&#125;<br><br>claims, err := ParseToken(token)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.Unauthenticated, <span class="hljs-string">&quot;token invalid: %v&quot;</span>, err)<br>&#125;<br><br>log.Println(claims.ID)<br><span class="hljs-keyword">return</span> &amp;pb.HelloReply&#123;Message: fmt.Sprintf(<span class="hljs-string">&quot;Hello，%v&quot;</span>, request.Name)&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// ParseToken 解析token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseToken</span><span class="hljs-params">(tokenString <span class="hljs-type">string</span>)</span></span> (*jwt.RegisteredClaims, <span class="hljs-type">error</span>) &#123;<br>token, err := jwt.ParseWithClaims(tokenString, &amp;jwt.RegisteredClaims&#123;&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(token *jwt.Token)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">byte</span>(Jwtkey), <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> claim, ok := token.Claims.(*jwt.RegisteredClaims); ok &#123;<br><span class="hljs-keyword">return</span> claim, <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;invalid token&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetToken</span><span class="hljs-params">(id <span class="hljs-type">string</span>, aud ...<span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>claims := jwt.RegisteredClaims&#123;<br>Issuer:    <span class="hljs-string">&quot;WER&quot;</span>,                                         <span class="hljs-comment">// 签发人</span><br>Subject:   <span class="hljs-string">&quot;access&quot;</span>,                                      <span class="hljs-comment">// 主题</span><br>Audience:  aud,                                           <span class="hljs-comment">// 受众</span><br>ExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour)), <span class="hljs-comment">// 过期时间</span><br>NotBefore: <span class="hljs-literal">nil</span>,                                           <span class="hljs-comment">// 生效时间</span><br>IssuedAt:  jwt.NewNumericDate(time.Now()),                <span class="hljs-comment">// 签发时间</span><br>ID:        id,<br>&#125;<br>token := jwt.NewWithClaims(jwt.SigningMethodHS256, &amp;claims)<br><span class="hljs-keyword">return</span> token.SignedString([]<span class="hljs-type">byte</span>(Jwtkey))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1. 创建连接</span><br>listen, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, Address)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to listen: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 2. 创建服务器</span><br><span class="hljs-comment">// 2.1 开启tls认证</span><br><span class="hljs-keyword">var</span> opts []grpc.ServerOption<br>certFile := data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>)<br>keyFile := data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>)<br>creds, err := credentials.NewServerTLSFromFile(certFile, keyFile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to get credentials: %v&quot;</span>, err)<br>&#125;<br>opts = []grpc.ServerOption&#123;grpc.Creds(creds)&#125;<br><br>server := grpc.NewServer(opts...)<br><br><span class="hljs-comment">// 3. 注册服务</span><br>pb.RegisterGreeterServer(server, &amp;GreeterServer&#123;&#125;)<br><br><span class="hljs-comment">// 4. 启动服务器</span><br>err = server.Serve(listen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[GRPC 文档](<a href="https://grpc.p2hp.com/docs/guides/auth/index.html">Authentication | gRPC (p2hp.com)</a>)</span></span></li></ol><p><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></p></div></section></li></ol><p></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.基础教程</title>
      <link href="/posts/052ecc492222/"/>
      <url>/posts/052ecc492222/</url>
      
        <content type="html"><![CDATA[<h1 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h1><p>通过演练该示例，可以了解到：</p><ul><li>在<code>.proto</code>文件中定义服务。</li><li>使用<code>protobuf</code>编译器生成服务器和客户端代码。</li><li>使用<code>Go gRpc API</code>为服务编写简单的客户端和服务器。</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>proto3</li><li>grpc</li></ul><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><ol><li><p>下载[protobuf](<a href="https://github.com/protocolbuffers/protobuf/releases/tag/v26.1">Release Protocol Buffers v26.1 · protocolbuffers&#x2F;protobuf (github.com)</a>)解压把<code>bin</code>中的文件复制到<code>GOPATH</code>&#x2F;bin下</p></li><li><p>Protocol buffer compiler (protoc v.3) 安装编译器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest<br>$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest<br></code></pre></td></tr></table></figure></li><li><p>设置<code>GOPATH</code>全局变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:<span class="hljs-subst">$(go env GOPATH)</span>/bin&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>在新建目录下导入包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go mod init<br>$ go get google.golang.org/grpc <br></code></pre></td></tr></table></figure></li></ol><h1 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h1><p>定义服务<code>RouteGuide</code>，并定义好rpc方法。</p><p>创建<code>.proto</code>文件，并写入代码，如下：</p><p>grpc-learn&#x2F;route_guide&#x2F;routeguide&#x2F;route_guide.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">// 定义语法版本 默认是proto2</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;grpc-learn/route_guide/routeguide&quot;</span>;<br><br><span class="hljs-keyword">package</span> routeguide;<br><br><span class="hljs-comment">// 定义服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">RouteGuide</span> &#123;<br><br>  <span class="hljs-comment">// 一元rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> GetFeature(Point) <span class="hljs-keyword">returns</span> (Feature) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 服务器流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ListFeatures(Rectangle) <span class="hljs-keyword">returns</span> (stream Feature) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 客户端流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> RecordRoute(stream Point) <span class="hljs-keyword">returns</span> (RouteSummary) </span>&#123;&#125;<br><br>  <span class="hljs-comment">// 双向流式rpc</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> RouteChat(stream RouteNote) <span class="hljs-keyword">returns</span> (stream RouteNote) </span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义protobuf消息类型</span><br><span class="hljs-comment">// 点</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-comment">// 类型 字段名 = 该消息中的唯一编号</span><br>  <span class="hljs-comment">// 纬度</span><br>  <span class="hljs-type">int32</span> latitude = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 经度</span><br>  <span class="hljs-type">int32</span> longitude = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 经纬矩形</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">Rectangle</span> &#123;<br>  <span class="hljs-comment">// 矩形的一角</span><br>  Point lo = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 矩形的另一角</span><br>  Point hi = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 特征</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">Feature</span> &#123;<br>  <span class="hljs-comment">// 特征名</span><br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 检测特征所在点</span><br>  Point location =<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 发送点的消息</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">RouteNote</span> &#123;<br>  <span class="hljs-comment">// 发送消息的位置</span><br>  Point location = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 消息</span><br>  <span class="hljs-type">string</span> message = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// rpc RecordRoute 的响应结构体</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">RouteSummary</span> &#123;<br>  <span class="hljs-comment">// 接收到的点的数量</span><br>  <span class="hljs-type">int32</span> point_count = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 遍历路径时通过的已知的特征数</span><br>  <span class="hljs-type">int32</span> feature_count = <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">// 以米为单位的距离</span><br>  <span class="hljs-type">int32</span> distance = <span class="hljs-number">3</span>;<br>  <span class="hljs-comment">// 遍历的持续时间（以秒为单位）</span><br>  <span class="hljs-type">int32</span> elapsed_time = <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="生成客户端和服务端代码"><a href="#生成客户端和服务端代码" class="headerlink" title="生成客户端和服务端代码"></a>生成客户端和服务端代码</h1><p>在目录<code>grpc-learn/route_guide/routeguide/</code>下，输入命令生成go代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ protoc --go_out=. --go_opt=paths=source_relative \<br>    --go-grpc_out=. --go-grpc_opt=paths=source_relative \<br>    route_guide.proto<br></code></pre></td></tr></table></figure><p>生成两个go文件：</p><ul><li><code>route_guide.pb.go</code> : 包含了用于填充、序列化和检索请求和响应消息类型的所有<code>protobuf</code>代码。</li><li><code>route_guide_grpc.pb.go</code>：<ul><li>客户端所需RouteGuide服务中定义的方法的<code>interface</code>或<code>stub</code>。</li><li>服务器要实现的接口类型，即<code>RouteGuide</code>服务中定义的方法。</li></ul></li></ul><h1 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h1><p>创建服务器整体上可分为两部分：</p><ul><li>实现服务接口，即<code>route_guide_grpc.pb.go</code>中的<code>interface RouterGuideServer</code>。</li><li>创建并启动grpc服务器，监听来自客户端的请求，并派发请求到对应的已经实现的服务上。</li></ul><h2 id="实现RouteGuide"><a href="#实现RouteGuide" class="headerlink" title="实现RouteGuide"></a>实现RouteGuide</h2><p>创建<code>grpc-learn/route_guide/server/server.go</code>，并修改成main包。</p><ol><li><p>创建服务<code>routGuideServer</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> routeGuideServer <span class="hljs-keyword">struct</span> &#123;<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现服务接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> GetFeature(ctx context.Context, point *pb.Point) (*pb.Feature, <span class="hljs-type">error</span>) &#123;<br>        ...<br>&#125;<br>...<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> ListFeatures(rect *pb.Rectangle, stream pb.RouteGuide_ListFeaturesServer) <span class="hljs-type">error</span> &#123;<br>        ...<br>&#125;<br>...<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> RecordRoute(stream pb.RouteGuide_RecordRouteServer) <span class="hljs-type">error</span> &#123;<br>        ...<br>&#125;<br>...<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> RouteChat(stream pb.RouteGuide_RouteChatServer) <span class="hljs-type">error</span> &#123;<br>        ...<br>&#125;<br>...<br></code></pre></td></tr></table></figure></li></ol><h3 id="一元RPC"><a href="#一元RPC" class="headerlink" title="一元RPC"></a>一元RPC</h3><p>实现方法<code>GetFeature</code>，从已有的特征库中，查找是否符合<code>point</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> GetFeature(ctx context.Context, point *pb.Point) (*pb.Feature, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">for</span> _, feature := <span class="hljs-keyword">range</span> s.savedFeatures &#123;<br><span class="hljs-keyword">if</span> proto.Equal(feature.Location, point) &#123;<br><span class="hljs-keyword">return</span> feature, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> &amp;pb.Feature&#123;Location: point&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务器流式RPC"><a href="#服务器流式RPC" class="headerlink" title="服务器流式RPC"></a>服务器流式RPC</h3><p>实现方法<code>ListFeatures</code>，与<code>GetFeature</code>类似，在给出的参数<code>rect</code>中，查找已有的特征库中是否有在<code>rect</code>中的点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> ListFeatures(rect *pb.Rectangle, stream pb.RouteGuide_ListFeaturesServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> _, feature := <span class="hljs-keyword">range</span> s.savedFeatures &#123;<br><span class="hljs-keyword">if</span> inRange(feature.Location, rect) &#123;<br><span class="hljs-keyword">if</span> err := stream.SendMsg(feature); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inRange</span><span class="hljs-params">(point *pb.Point, rect *pb.Rectangle)</span></span> <span class="hljs-type">bool</span> &#123;<br>left := math.Min(<span class="hljs-type">float64</span>(rect.Lo.Longitude), <span class="hljs-type">float64</span>(rect.Hi.Longitude))<br>right := math.Max(<span class="hljs-type">float64</span>(rect.Lo.Longitude), <span class="hljs-type">float64</span>(rect.Hi.Longitude))<br>top := math.Max(<span class="hljs-type">float64</span>(rect.Lo.Latitude), <span class="hljs-type">float64</span>(rect.Hi.Latitude))<br>bottom := math.Min(<span class="hljs-type">float64</span>(rect.Lo.Latitude), <span class="hljs-type">float64</span>(rect.Hi.Latitude))<br><br><span class="hljs-keyword">if</span> <span class="hljs-type">float64</span>(point.Longitude) &gt;= left &amp;&amp;<br><span class="hljs-type">float64</span>(point.Longitude) &lt;= right &amp;&amp;<br><span class="hljs-type">float64</span>(point.Latitude) &gt;= bottom &amp;&amp;<br><span class="hljs-type">float64</span>(point.Latitude) &lt;= top &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端流式RPC"><a href="#客户端流式RPC" class="headerlink" title="客户端流式RPC"></a>客户端流式RPC</h3><p>实现方法<code>RecordRoute</code>，统计客户端发送的<code>point</code>的信息，在全部接收完后，返回线路信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> RecordRoute(stream pb.RouteGuide_RecordRouteServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> pointCount, featureCount, distance <span class="hljs-type">int32</span><br><span class="hljs-keyword">var</span> lastPoint *pb.Point<br>startTime := time.Now()<br><span class="hljs-keyword">for</span> &#123;<br>point, err := stream.Recv()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br>endTime := time.Now()<br><span class="hljs-keyword">return</span> stream.SendAndClose(&amp;pb.RouteSummary&#123;<br>PointCount:   pointCount,<br>FeatureCount: featureCount,<br>Distance:     distance,<br>ElapsedTime:  <span class="hljs-type">int32</span>(endTime.Sub(startTime).Seconds()),<br>&#125;)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>pointCount++<br><span class="hljs-keyword">for</span> _, feature := <span class="hljs-keyword">range</span> s.savedFeatures &#123;<br><span class="hljs-keyword">if</span> proto.Equal(feature.Location, point) &#123;<br>featureCount++<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> lastPoint != <span class="hljs-literal">nil</span> &#123;<br>distance += calcDistance(lastPoint, point)<br>&#125;<br>lastPoint = point<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calcDistance</span><span class="hljs-params">(p1 *pb.Point, p2 *pb.Point)</span></span> <span class="hljs-type">int32</span> &#123;<br><span class="hljs-keyword">const</span> CordFactor <span class="hljs-type">float64</span> = <span class="hljs-number">1e7</span><br><span class="hljs-keyword">const</span> R = <span class="hljs-type">float64</span>(<span class="hljs-number">6371000</span>) <span class="hljs-comment">// earth radius in metres</span><br>lat1 := toRadians(<span class="hljs-type">float64</span>(p1.Latitude) / CordFactor)<br>lat2 := toRadians(<span class="hljs-type">float64</span>(p2.Latitude) / CordFactor)<br>lng1 := toRadians(<span class="hljs-type">float64</span>(p1.Longitude) / CordFactor)<br>lng2 := toRadians(<span class="hljs-type">float64</span>(p2.Longitude) / CordFactor)<br><br>dlat := lat2 - lat1<br>dlng := lng2 - lng1<br><br>a := math.Sin(dlat/<span class="hljs-number">2</span>)*math.Sin(dlat/<span class="hljs-number">2</span>) +<br>math.Cos(lat1)*math.Cos(lat2)*<br>math.Sin(dlng/<span class="hljs-number">2</span>)*math.Sin(dlng/<span class="hljs-number">2</span>)<br>c := <span class="hljs-number">2</span> * math.Atan2(math.Sqrt(a), math.Sqrt(<span class="hljs-number">1</span>-a))<br><br>distance := R * c<br><span class="hljs-keyword">return</span> <span class="hljs-type">int32</span>(distance)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">toRadians</span><span class="hljs-params">(num <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> num * math.Pi / <span class="hljs-type">float64</span>(<span class="hljs-number">180</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向流式RPC"><a href="#双向流式RPC" class="headerlink" title="双向流式RPC"></a>双向流式RPC</h3><p>实现方法<code>RouteChat</code>，接收来自客户端的流，并不断读取，获取并保存，然后再发送给客户端。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> RouteChat(stream pb.RouteGuide_RouteChatServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>in, err := stream.Recv()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>key := serialize(in.Location)<br><br>s.mu.Lock()<br>s.routeNotes[key] = <span class="hljs-built_in">append</span>(s.routeNotes[key], in)<br><br>rn := <span class="hljs-built_in">make</span>([]*pb.RouteNote, <span class="hljs-built_in">len</span>(s.routeNotes[key]))<br><span class="hljs-built_in">copy</span>(rn, s.routeNotes[key])<br>s.mu.Unlock()<br><br><span class="hljs-keyword">for</span> _, note := <span class="hljs-keyword">range</span> rn &#123;<br><span class="hljs-keyword">if</span> err := stream.Send(note); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serialize</span><span class="hljs-params">(point *pb.Point)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d %d&quot;</span>, point.Latitude, point.Longitude)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>简单可以分为四步：</p><ol><li>监听端口</li><li>创建grpc服务器</li><li>注册服务</li><li>启动服务器</li></ol><p>其中可以加入tls认证，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">// 1.监听端口</span><br>listen, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;localhost:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">var</span> opts []grpc.ServerOption<br><span class="hljs-keyword">if</span> *tls &#123;<br><span class="hljs-keyword">if</span> *certFile == <span class="hljs-string">&quot;&quot;</span> &#123;<br>*certFile = data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> *keyFile == <span class="hljs-string">&quot;&quot;</span> &#123;<br>*keyFile = data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>)<br>&#125;<br>creds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to generate credentials: %v&quot;</span>, err)<br>&#125;<br>opts = []grpc.ServerOption&#123;grpc.Creds(creds)&#125;<br>&#125;<br><br><span class="hljs-comment">// 2.创建grpc服务器</span><br>grpcServer := grpc.NewServer(opts...)<br><span class="hljs-comment">// 3.注册服务</span><br>pb.RegisterRouteGuideServer(grpcServer, newServer())<br><span class="hljs-comment">// 4.启动服务器</span><br>err = grpcServer.Serve(listen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newServer</span><span class="hljs-params">()</span></span> *routeGuideServer &#123;<br>s := &amp;routeGuideServer&#123;routeNotes: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]*pb.RouteNote)&#125;<br>s.loadFeatures(*jsonDBFile)<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *routeGuideServer)</span></span> loadFeatures(filePath <span class="hljs-type">string</span>) &#123;<br><span class="hljs-keyword">var</span> data []<span class="hljs-type">byte</span><br><span class="hljs-keyword">if</span> filePath != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>data, err = os.ReadFile(filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to load default features: %v&quot;</span>, err)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>data = exampleData<br>&#125;<br><span class="hljs-keyword">if</span> err := json.Unmarshal(data, &amp;s.savedFeatures); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to load default features: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="创建客户端RPC"><a href="#创建客户端RPC" class="headerlink" title="创建客户端RPC"></a>创建客户端RPC</h1><p>创建go文件<code>grpc-learn/route_guide/server/client.go</code>。</p><p>简单可分为三步：</p><ol><li>创建grpc channel与 服务器通信。</li><li>创建客户端（client stub），用于调用rpc。</li><li>调用rpc。</li></ol><h2 id="创建存根"><a href="#创建存根" class="headerlink" title="创建存根"></a>创建存根</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 设置tls</span><br><span class="hljs-keyword">var</span> opts []grpc.DialOption<br><span class="hljs-keyword">if</span> *tls &#123;<br><span class="hljs-keyword">if</span> *caFile == <span class="hljs-string">&quot;&quot;</span> &#123;<br>*caFile = data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>)<br>&#125;<br>creds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to create TLS credentials: %v&quot;</span>, err)<br>&#125;<br>opts = <span class="hljs-built_in">append</span>(opts, grpc.WithTransportCredentials(creds))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>opts = <span class="hljs-built_in">append</span>(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))<br>&#125;<br><br><span class="hljs-comment">// 1.创建channel 通道</span><br><span class="hljs-comment">//conn, err := grpc.Dial(*serverAddr, opts...)</span><br>serverAddr := <span class="hljs-string">&quot;localhost:50051&quot;</span><br>conn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Failed to conn: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 2.设置一个stub客户端来执行RPC</span><br>client := pb.NewRouteGuideClient(conn)<br><br><span class="hljs-comment">// 3.访问服务器</span><br><span class="hljs-comment">// Looking for a valid feature</span><br>printFeature(client, &amp;pb.Point&#123;Latitude: <span class="hljs-number">409146138</span>, Longitude: <span class="hljs-number">-746188906</span>&#125;)<br><br><span class="hljs-comment">// Feature missing.</span><br>printFeature(client, &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">0</span>&#125;)<br><br><span class="hljs-comment">// Looking for features between 40, -75 and 42, -73.</span><br>printFeatures(client, &amp;pb.Rectangle&#123;<br>Lo: &amp;pb.Point&#123;Latitude: <span class="hljs-number">400000000</span>, Longitude: <span class="hljs-number">-750000000</span>&#125;,<br>Hi: &amp;pb.Point&#123;Latitude: <span class="hljs-number">420000000</span>, Longitude: <span class="hljs-number">-730000000</span>&#125;,<br>&#125;)<br><br><span class="hljs-comment">// RecordRoute</span><br>runRecordRoute(client)<br><br><span class="hljs-comment">// RouteChat</span><br>runRouteChat(client)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用服务"><a href="#调用服务" class="headerlink" title="调用服务"></a>调用服务</h2><h3 id="一元RPC-1"><a href="#一元RPC-1" class="headerlink" title="一元RPC"></a>一元RPC</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// printFeature gets the feature for the given point.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printFeature</span><span class="hljs-params">(client pb.RouteGuideClient, point *pb.Point)</span></span> &#123;<br>log.Printf(<span class="hljs-string">&quot;Getting feature for point (%d, %d)&quot;</span>, point.Latitude, point.Longitude)<br><span class="hljs-comment">// 设置超时时间</span><br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br><span class="hljs-comment">// 发送数据 一元rpc</span><br>feature, err := client.GetFeature(ctx, point)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.GetFeature failed: %v&quot;</span>, err)<br>&#125;<br>log.Println(feature)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务器流式RPC-1"><a href="#服务器流式RPC-1" class="headerlink" title="服务器流式RPC"></a>服务器流式RPC</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// printFeatures lists all the features within the given bounding Rectangle.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printFeatures</span><span class="hljs-params">(client pb.RouteGuideClient, rect *pb.Rectangle)</span></span> &#123;<br>log.Printf(<span class="hljs-string">&quot;Looking for features within %v&quot;</span>, rect)<br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">// 发送数据 服务器流式rpc</span><br>stream, err := client.ListFeatures(ctx, rect)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.ListFeatures failed: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>feature, err := stream.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.ListFeatures failed: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Feature: name: %q, point:(%v, %v)&quot;</span>, feature.GetName(),<br>feature.GetLocation().GetLatitude(), feature.GetLocation().GetLongitude())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端流式RPC-1"><a href="#客户端流式RPC-1" class="headerlink" title="客户端流式RPC"></a>客户端流式RPC</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runRecordRoute sends a sequence of points to server and expects to get a RouteSummary from server.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runRecordRoute</span><span class="hljs-params">(client pb.RouteGuideClient)</span></span> &#123;<br><span class="hljs-comment">// 创建随机数量的points</span><br><span class="hljs-comment">// 创建一个随机数</span><br>r := rand.New(rand.NewSource(time.Now().UnixNano()))<br>pointCount := <span class="hljs-type">int</span>(r.Int31n(<span class="hljs-number">100</span>)) + <span class="hljs-number">2</span> <span class="hljs-comment">// 至少2个点</span><br><span class="hljs-keyword">var</span> points []*pb.Point<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; pointCount; i++ &#123;<br>points = <span class="hljs-built_in">append</span>(points, randomPoint(r))<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Traversing %d points.&quot;</span>, <span class="hljs-built_in">len</span>(points))<br><br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Hour)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">// 发送遍历数据 客户端流式rpc</span><br>stream, err := client.RecordRoute(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.RecordRoute failed: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 遍历发送数据</span><br><span class="hljs-keyword">for</span> _, point := <span class="hljs-keyword">range</span> points &#123;<br><span class="hljs-keyword">if</span> err := stream.Send(point); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.RecordRoute: stream.Send(%v) failed: %v&quot;</span>, point, err)<br>&#125;<br>&#125;<br>reply, err := stream.CloseAndRecv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.RecordRoute failed: %v&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Route summary: %v&quot;</span>, reply)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomPoint</span><span class="hljs-params">(r *rand.Rand)</span></span> *pb.Point &#123;<br>lat := (r.Int31n(<span class="hljs-number">180</span>) - <span class="hljs-number">90</span>) * <span class="hljs-number">1e7</span><br>long := (r.Int31n(<span class="hljs-number">360</span>) - <span class="hljs-number">180</span>) * <span class="hljs-number">1e7</span><br><span class="hljs-keyword">return</span> &amp;pb.Point&#123;Latitude: lat, Longitude: long&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向流式RPC-1"><a href="#双向流式RPC-1" class="headerlink" title="双向流式RPC"></a>双向流式RPC</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runRouteChat receives a sequence of route notes, while sending notes for various locations.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runRouteChat</span><span class="hljs-params">(client pb.RouteGuideClient)</span></span> &#123;<br>notes := []*pb.RouteNote&#123;<br>&#123;Location: &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">1</span>&#125;, Message: <span class="hljs-string">&quot;First message&quot;</span>&#125;,<br>&#123;Location: &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">2</span>&#125;, Message: <span class="hljs-string">&quot;Second message&quot;</span>&#125;,<br>&#123;Location: &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">3</span>&#125;, Message: <span class="hljs-string">&quot;Third message&quot;</span>&#125;,<br>&#123;Location: &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">1</span>&#125;, Message: <span class="hljs-string">&quot;Fourth message&quot;</span>&#125;,<br>&#123;Location: &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">2</span>&#125;, Message: <span class="hljs-string">&quot;Fifth message&quot;</span>&#125;,<br>&#123;Location: &amp;pb.Point&#123;Latitude: <span class="hljs-number">0</span>, Longitude: <span class="hljs-number">3</span>&#125;, Message: <span class="hljs-string">&quot;Sixth message&quot;</span>&#125;,<br>&#125;<br><br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">// 连接服务器</span><br>stream, err := client.RouteChat(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.RouteChat failed: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 启动协程获取返回数据</span><br>waitc := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>in, err := stream.Recv()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-built_in">close</span>(waitc)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.RouteChat failed: %v&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Got message %s at point(%d, %d)&quot;</span>, in.Message, in.Location.Latitude, in.Location.Longitude)<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-keyword">for</span> _, note := <span class="hljs-keyword">range</span> notes &#123;<br><span class="hljs-keyword">if</span> err := stream.Send(note); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.RouteChat: stream.Send(%v) failed: %v&quot;</span>, note, err)<br>&#125;<br>&#125;<br>stream.CloseSend()<br>&lt;-waitc<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="GRPC-启动！"><a href="#GRPC-启动！" class="headerlink" title="GRPC, 启动！"></a>GRPC, 启动！</h1><ol><li><p>启动服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go run server/server.go<br></code></pre></td></tr></table></figure></li><li><p>启动客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go run client/client.go<br></code></pre></td></tr></table></figure></li></ol><p>客户端输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">2023/04/01 10:44:32 Getting feature <span class="hljs-keyword">for</span> point (409146138, -746188906)<br>2023/04/01 10:44:32 name:<span class="hljs-string">&quot;Berkshire Valley Management Area Trail, Jefferson, NJ, USA&quot;</span>  location:&#123;latitude:409146138  longitude:-746188906&#125;<br>2023/04/01 10:44:32 Getting feature <span class="hljs-keyword">for</span> point (0, 0)<br>2023/04/01 10:44:32 location:&#123;&#125;<br>2023/04/01 10:44:32 Looking <span class="hljs-keyword">for</span> features within lo:&#123;latitude:400000000  longitude:-750000000&#125;  hi:&#123;latitude:420000000  longitude:-730000000&#125;<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;Patriots Path, Mendham, NJ 07945, USA&quot;</span>, point:(407838351, -746143763)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;101 New Jersey 10, Whippany, NJ 07981, USA&quot;</span>, point:(408122808, -743999179)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;U.S. 6, Shohola, PA 18458, USA&quot;</span>, point:(413628156, -749015468)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;5 Conners Road, Kingston, NY 12401, USA&quot;</span>, point:(419999544, -740371136)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;Mid Hudson Psychiatric Center, New Hampton, NY 10958, USA&quot;</span>, point:(414008389, -743951297)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;287 Flugertown Road, Livingston Manor, NY 12758, USA&quot;</span>, point:(419611318, -746524769)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;4001 Tremley Point Road, Linden, NJ 07036, USA&quot;</span>, point:(406109563, -742186778)<br>2023/04/01 10:44:32 Feature: name: <span class="hljs-string">&quot;352 South Mountain Road, Wallkill, NY 12589, USA&quot;</span>, point:<br>...<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://grpc.p2hp.com/docs/languages/go/basics/index.html">GRPC 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.快速开始</title>
      <link href="/posts/f79763432dce/"/>
      <url>/posts/f79763432dce/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li><p>下载[protobuf](<a href="https://github.com/protocolbuffers/protobuf/releases/tag/v26.1">Release Protocol Buffers v26.1 · protocolbuffers&#x2F;protobuf (github.com)</a>)解压把<code>bin</code>中的文件复制到<code>GOPATH</code>&#x2F;bin下</p></li><li><p>Protocol buffer compiler (protoc v.3) 安装编译器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest<br>$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest<br></code></pre></td></tr></table></figure></li><li><p>设置<code>GOPATH</code>全局变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:<span class="hljs-subst">$(go env GOPATH)</span>/bin&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="grpc的例子"><a href="#grpc的例子" class="headerlink" title="grpc的例子"></a>grpc的例子</h1><ol><li><p>获取例子代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> -b v1.55.0 --depth 1 https://github.com/grpc/grpc-go</span><br></code></pre></td></tr></table></figure></li><li><p>进入例子目录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ cd grpc-<span class="hljs-keyword">go</span>/examples/helloworld<br></code></pre></td></tr></table></figure></li><li><p>运行服务端</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> run greeter_server/main.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure></li><li><p>运行客户端</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> run greeter_client/main.<span class="hljs-keyword">go</span><br>Greeting: Hello world<br></code></pre></td></tr></table></figure><p>至此，已经运行grpc的客户端和服务端。</p></li></ol><h2 id="修改grpc的服务"><a href="#修改grpc的服务" class="headerlink" title="修改grpc的服务"></a>修改grpc的服务</h2><p>增加一个&#96;&#96;SayHelloAgain&#96;的方法：</p><p>helloworld&#x2F;helloworld.proto</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br>option go_package = <span class="hljs-string">&quot;google.golang.org/grpc/examples/helloworld/helloworld&quot;</span>;<br>option java_multiple_files = <span class="hljs-literal">true</span>;<br>option java_package = <span class="hljs-string">&quot;io.grpc.examples.helloworld&quot;</span>;<br>option java_outer_classname = <span class="hljs-string">&quot;HelloWorldProto&quot;</span>;<br><br><span class="hljs-keyword">package</span> helloworld;<br><br><span class="hljs-comment">// The greeting service definition.</span><br>service Greeter &#123;<br>  <span class="hljs-comment">// Sends a greeting</span><br>  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;<br>  <span class="hljs-comment">// Sends another greeting</span><br>  rpc SayHelloAgain (HelloRequest) returns (HelloReply) &#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// The request message containing the user&#x27;s name.</span><br>message HelloRequest &#123;<br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// The response message containing the greetings</span><br>message HelloReply &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生成grpc代码"><a href="#生成grpc代码" class="headerlink" title="生成grpc代码"></a>生成grpc代码</h2><p>在<code>examples/helloworld/helloworld</code>目录下，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ protoc --go_out=. --go_opt=paths=source_relative \<br>    --go-grpc_out=. --go-grpc_opt=paths=source_relative \<br>    helloworld/helloworld.proto<br></code></pre></td></tr></table></figure><p>该命令就会重新生成文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">helloworld.pb.<span class="hljs-keyword">go</span><br>helloworld_grpc.pb.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>helloworld&#x2F;greeter_server&#x2F;main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHelloAgain(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="hljs-string">&quot;Hello again &quot;</span> + in.GetName()&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>helloworld&#x2F;greeter_client&#x2F;main.go.main()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">r, err = c.SayHelloAgain(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;could not greet: %v&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;Greeting: %s&quot;</span>, r.GetMessage())<br></code></pre></td></tr></table></figure><h2 id="重新运行"><a href="#重新运行" class="headerlink" title="重新运行"></a>重新运行</h2><p>1.运行服务端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go run greeter_server/main.go<br></code></pre></td></tr></table></figure><p>2.运行客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go run greeter_client/main.go --name=Alice<br></code></pre></td></tr></table></figure><p>在客户端中输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">Greeting: Hello Alice<br>Greeting: Hello again Alice<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://grpc.p2hp.com/docs/index.html">GRPC 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.Keepalive</title>
      <link href="/posts/952be8a0fcc2/"/>
      <url>/posts/952be8a0fcc2/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc的<code>keepalive</code>是基于<code>HTTP/2</code>的<code>ping</code>机制，是一种在没有数据传输的情况下保持<code>HTTP/2</code>连接活动的方法。</p><p>这是通过定期向连接的另一方发送<code>PING</code>帧来完成的。</p><p><code>HTTP/2 keepalive</code>可以提高<code>HTTP/2</code>连接的性能和可靠性。</p><blockquote><p>与<code>health checking</code>不同，<code>health checking</code>只是服务器发出服务是否正常的信号，而<code>keepalive</code>仅与连接有关。</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p> 设置执行策略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> kp = keepalive.EnforcementPolicy&#123;<br>MinTime:             <span class="hljs-number">5</span> * time.Second, <span class="hljs-comment">// 当客户端ping的时间超过5秒，则终止该连接</span><br>PermitWithoutStream: <span class="hljs-literal">true</span>,            <span class="hljs-comment">// 当没有活跃的流时允许ping</span><br>&#125;<br><br>grpc.KeepaliveEnforcementPolicy(kp)<br></code></pre></td></tr></table></figure><p>设置服务器参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ksp = keepalive.ServerParameters&#123;<br>MaxConnectionIdle:     <span class="hljs-number">15</span> * time.Second, <span class="hljs-comment">// 如果客户端15秒以上闲置, 就发送GOAWAY</span><br>MaxConnectionAge:      <span class="hljs-number">30</span> * time.Second, <span class="hljs-comment">// 如果连接存活30秒以上，就发送GOAWAY</span><br>MaxConnectionAgeGrace: <span class="hljs-number">5</span> * time.Second,  <span class="hljs-comment">// 在强制关闭连接之前，请等待 5 秒钟让挂起的 RPC 完成</span><br>Time:                  <span class="hljs-number">5</span> * time.Second,  <span class="hljs-comment">// 如果客户端空闲 5 秒，则对客户端执行 ping 操作，以确保连接仍处于活动状态</span><br>Timeout:               <span class="hljs-number">1</span> * time.Second,  <span class="hljs-comment">// 等待 1 秒钟的 ping 确认，然后假设连接已失效</span><br>&#125;<br><br>grpc.KeepaliveParams(ksp)<br></code></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>设置客户端参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> kacp = keepalive.ClientParameters&#123;<br>Time:                <span class="hljs-number">10</span> * time.Second,<br>Timeout:             time.Second,<br>PermitWithoutStream: <span class="hljs-literal">true</span>,<br>&#125;<br><br>grpc.WithKeepaliveParams(kacp)<br></code></pre></td></tr></table></figure><p>加上运行参数<code>GODEBUG=http2debug=2</code>，可以在看到输出帧内容。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/keepalive&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50052</span>, <span class="hljs-string">&quot;port to serve on&quot;</span>)<br><br><span class="hljs-keyword">var</span> kp = keepalive.EnforcementPolicy&#123;<br>MinTime:             <span class="hljs-number">5</span> * time.Second, <span class="hljs-comment">// 当客户端ping的时间超过5秒，则终止该连接</span><br>PermitWithoutStream: <span class="hljs-literal">true</span>,            <span class="hljs-comment">// 当没有活跃的流时允许ping</span><br>&#125;<br><br><span class="hljs-keyword">var</span> ksp = keepalive.ServerParameters&#123;<br>MaxConnectionIdle:     <span class="hljs-number">15</span> * time.Second, <span class="hljs-comment">// 如果客户端15秒以上闲置, 就发送GOAWAY</span><br>MaxConnectionAge:      <span class="hljs-number">30</span> * time.Second, <span class="hljs-comment">// 如果连接存活30秒以上，就发送GOAWAY</span><br>MaxConnectionAgeGrace: <span class="hljs-number">5</span> * time.Second,  <span class="hljs-comment">// 在强制关闭连接之前，请等待 5 秒钟让挂起的 RPC 完成</span><br>Time:                  <span class="hljs-number">5</span> * time.Second,  <span class="hljs-comment">// 如果客户端空闲 5 秒，则对客户端执行 ping 操作，以确保连接仍处于活动状态</span><br>Timeout:               <span class="hljs-number">1</span> * time.Second,  <span class="hljs-comment">// 等待 1 秒钟的 ping 确认，然后假设连接已失效</span><br>&#125;<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>address := fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port)<br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, address)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to  listen port %d : %v&quot;</span>, *port, address)<br>&#125;<br><br>s := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kp), grpc.KeepaliveParams(ksp))<br>pb.RegisterEchoServer(s, &amp;server&#123;&#125;)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/keepalive&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;:50052&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-keyword">var</span> kacp = keepalive.ClientParameters&#123;<br>Time:                <span class="hljs-number">10</span> * time.Second,<br>Timeout:             time.Second,<br>PermitWithoutStream: <span class="hljs-literal">true</span>,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>conn, err := grpc.Dial(*addr,<br>grpc.WithTransportCredentials(insecure.NewCredentials()),<br>grpc.WithKeepaliveParams(kacp))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>c := pb.NewEchoClient(conn)<br><br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">3</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br>fmt.Println(<span class="hljs-string">&quot;Performing unary request&quot;</span>)<br>res, err := c.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: <span class="hljs-string">&quot;keepalive demo&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;unexpected error from UnaryEcho: %v&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;RPC response:&quot;</span>, res)<br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ Performing unary request<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote SETTINGS len=0<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> SETTINGS len=6, settings: MAX_FRAME_SIZE=16384<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> SETTINGS flags=ACK len=0<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote SETTINGS flags=ACK len=0<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote HEADERS flags=END_HEADERS stream=1 len=86<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote DATA flags=END_STREAM stream=1 len=21 data=<span class="hljs-string">&quot;\x00\x00\x00\x00\x10\n\x0ekeepalive demo&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> WINDOW_UPDATE len=4 (conn) incr=21<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING len=8 ping=<span class="hljs-string">&quot;\x02\x04\x10\x10\t\x0e\a\a&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> WINDOW_UPDATE len=4 (conn) incr=21<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING len=8 ping=<span class="hljs-string">&quot;\x02\x04\x10\x10\t\x0e\a\a&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> HEADERS flags=END_HEADERS stream=1 len=14<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote PING flags=ACK len=8 ping=<span class="hljs-string">&quot;\x02\x04\x10\x10\t\x0e\a\a&quot;</span><br>2024/04/16 21:06:42 http2: decoded hpack field header field <span class="hljs-string">&quot;:status&quot;</span> = <span class="hljs-string">&quot;200&quot;</span><br>2024/04/16 21:06:42 http2: decoded hpack field header field <span class="hljs-string">&quot;content-type&quot;</span> = <span class="hljs-string">&quot;application/grpc&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> DATA stream=1 len=21 data=<span class="hljs-string">&quot;\x00\x00\x00\x00\x10\n\x0ekeepalive demo&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> HEADERS flags=END_STREAM|END_HEADERS stream=1 len=24<br>2024/04/16 21:06:42 http2: decoded hpack field header field <span class="hljs-string">&quot;grpc-status&quot;</span> = <span class="hljs-string">&quot;0&quot;</span><br>2024/04/16 21:06:42 http2: decoded hpack field header field <span class="hljs-string">&quot;grpc-message&quot;</span> = <span class="hljs-string">&quot;&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote WINDOW_UPDATE len=4 (conn) incr=21<br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: wrote PING len=8 ping=<span class="hljs-string">&quot;\x02\x04\x10\x10\t\x0e\a\a&quot;</span><br>RPC response: message:<span class="hljs-string">&quot;keepalive demo&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING flags=ACK len=8 ping=<span class="hljs-string">&quot;\x02\x04\x10\x10\t\x0e\a\a&quot;</span><br>2024/04/16 21:06:47 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING len=8 ping=<span class="hljs-string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span><br>2024/04/16 21:06:47 http2: Framer 0xc0000ca000: wrote PING flags=ACK len=8 ping=<span class="hljs-string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span><br>2024/04/16 21:06:52 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING len=8 ping=<span class="hljs-string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span><br>2024/04/16 21:06:52 http2: Framer 0xc0000ca000: wrote PING flags=ACK len=8 ping=<span class="hljs-string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span><br>2024/04/16 21:06:57 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> GOAWAY len=16 LastStreamID=2147483647 ErrCode=NO_ERROR Debug=<span class="hljs-string">&quot;max_idle&quot;</span><br>2024/04/16 21:06:57 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING len=8 ping=<span class="hljs-string">&quot;\x01\x06\x01\b\x00\x03\x03\t&quot;</span><br>RPC response: message:<span class="hljs-string">&quot;keepalive demo&quot;</span><br>2024/04/16 21:06:42 http2: Framer 0xc0000ca000: <span class="hljs-built_in">read</span> PING flags=ACK len=8 ping=<span class="hljs-string">&quot;</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/grpc/grpc-go/tree/master/examples/features/keepalive">grpc-go&#x2F;examples&#x2F;features&#x2F;keepalive at master · grpc&#x2F;grpc-go (github.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/grpc/grpc-go/blob/master/Documentation/keepalive.md">grpc-go&#x2F;Documentation&#x2F;keepalive.md at master · grpc&#x2F;grpc-go (github.com)</a>[^3 ]:<a href="https://grpc.p2hp.com/docs/guides/keepalive/index.html">Keepalive | gRPC (p2hp.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.Interceptor</title>
      <link href="/posts/5ba0e6110fa0/"/>
      <url>/posts/5ba0e6110fa0/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc提供了简单的api来在每个ClientConn&#x2F;Server的基础上实现并安装拦截器。</p><p>拦截器拦截每个RPC调用的执行。</p><p>可以使用拦截器实现执行日志记录、身份验证&#x2F;授权、指标收集和许多其它可以跨rpc共享的功能。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>根据拦截rpc调用的类型，可以将拦截器分为两类。</p><ul><li>一元拦截器</li><li>流拦截器</li></ul><p>客户端和服务端都可以实现拦截器。</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="一元拦截器"><a href="#一元拦截器" class="headerlink" title="一元拦截器"></a>一元拦截器</h3><p>客户端的一元拦截器的类型为<code>UnaryClientInterceptor</code>，本质上是<code>func(ctx context.Context, method string, req, reply any, cc *ClientConn, invoker UnaryInvoker, opts ...CallOption) error</code>。</p><p>一元拦截器的实现通常可以分为三个部分：预处理、调用RPC方法和后处理。</p><ol><li>预处理： 根据用户传入的参数获取有关当前RPC调用的消息，如RPC上下文、方法字符串、请求和配置的calloptions。</li><li>调用RPC方法</li><li>后处理：一旦调用者返回应答和错误，用户就可以进行后处理。如，记录RPC计时和错误信息。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.WithUnaryInterceptor(unaryInterceptor)<br></code></pre></td></tr></table></figure><h3 id="流拦截器"><a href="#流拦截器" class="headerlink" title="流拦截器"></a>流拦截器</h3><p>与一元拦截器类似。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.WithStreamInterceptor(streamInterceptor))<br></code></pre></td></tr></table></figure><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="一元拦截器-1"><a href="#一元拦截器-1" class="headerlink" title="一元拦截器"></a>一元拦截器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.UnaryInterceptor(unaryInterceptor)<br></code></pre></td></tr></table></figure><h3 id="流拦截器-1"><a href="#流拦截器-1" class="headerlink" title="流拦截器"></a>流拦截器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.StreamInterceptor(streamInterceptor)<br></code></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/metadata&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;unary echoing message %v&quot;</span>, request.Message)<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>recv, err := stream.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;server: error receiving from stream: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;bidi echoing message %q\n&quot;</span>, recv.Message)<br>stream.Send(&amp;pb.EchoResponse&#123;Message: recv.Message&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unaryInterceptor</span><span class="hljs-params">(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span></span> (resp any, err <span class="hljs-type">error</span>) &#123;<br>md, ok := metadata.FromIncomingContext(ctx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.InvalidArgument, <span class="hljs-string">&quot;missing metadata: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">if</span> !valid(md[<span class="hljs-string">&quot;authorization&quot;</span>]) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.InvalidArgument, <span class="hljs-string">&quot;missing metadata: %v&quot;</span>, err)<br>&#125;<br><br>m, err := handler(ctx, req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>logger(<span class="hljs-string">&quot;RPC failed with error: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span> m, err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">valid</span><span class="hljs-params">(authorization []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(authorization) &lt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>token := strings.TrimPrefix(authorization[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;Bearer &quot;</span>)<br><span class="hljs-keyword">return</span> token == <span class="hljs-string">&quot;some-secret-token&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logger</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...any)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;LOG:\t&quot;</span>+format+<span class="hljs-string">&quot;\n&quot;</span>, a...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">streamInterceptor</span><span class="hljs-params">(srv any, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// authentication (token verification)</span><br>md, ok := metadata.FromIncomingContext(ss.Context())<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> status.Errorf(codes.InvalidArgument, <span class="hljs-string">&quot;missing metadata&quot;</span>)<br><br>&#125;<br><span class="hljs-keyword">if</span> !valid(md[<span class="hljs-string">&quot;authorization&quot;</span>]) &#123;<br><span class="hljs-keyword">return</span> status.Errorf(codes.InvalidArgument, <span class="hljs-string">&quot;invalid token&quot;</span>)<br><br>&#125;<br><br>err := handler(srv, newWrappedStream(ss))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>logger(<span class="hljs-string">&quot;RPC failed with error: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">type</span> wrappedStream <span class="hljs-keyword">struct</span> &#123;<br>grpc.ServerStream<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *wrappedStream)</span></span> RecvMsg(m any) <span class="hljs-type">error</span> &#123;<br>logger(<span class="hljs-string">&quot;Receive a message (Type: %T) at %s&quot;</span>, m, time.Now().Format(time.RFC3339))<br><span class="hljs-keyword">return</span> w.ServerStream.RecvMsg(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *wrappedStream)</span></span> SendMsg(m any) <span class="hljs-type">error</span> &#123;<br>logger(<span class="hljs-string">&quot;Send a message (Type: %T) at %v&quot;</span>, m, time.Now().Format(time.RFC3339))<br><span class="hljs-keyword">return</span> w.ServerStream.SendMsg(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newWrappedStream</span><span class="hljs-params">(ss grpc.ServerStream)</span></span> grpc.ServerStream &#123;<br><span class="hljs-keyword">return</span> &amp;wrappedStream&#123;ss&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%v&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// Create tls based credential.</span><br>creds, err := credentials.NewServerTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create credentials: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">var</span> opt = []grpc.ServerOption&#123;<br>grpc.Creds(creds),<br>grpc.UnaryInterceptor(unaryInterceptor),<br>grpc.StreamInterceptor(streamInterceptor),<br>&#125;<br>s := grpc.NewServer(opt...)<br><br>pb.RegisterEchoServer(s, &amp;server&#123;&#125;)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve； %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/oauth2&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/oauth&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-keyword">const</span> fallbackToken = <span class="hljs-string">&quot;some-secret-token&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logger</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...any)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;LOG:\t&quot;</span>+format+<span class="hljs-string">&quot;\n&quot;</span>, a...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(client pb.EchoClient, message <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>resp, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.UnaryEcho(_) = _, %v: &quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;UnaryEcho: &quot;</span>, resp.Message)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callBidiStreamingEcho</span><span class="hljs-params">(client pb.EchoClient)</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>c, err := client.BidirectionalStreamingEcho(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br><span class="hljs-keyword">if</span> err := c.Send(&amp;pb.EchoRequest&#123;Message: fmt.Sprintf(<span class="hljs-string">&quot;Request %d&quot;</span>, i+<span class="hljs-number">1</span>)&#125;); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to send request due to error: %v&quot;</span>, err)<br>&#125;<br>&#125;<br>c.CloseSend()<br><span class="hljs-keyword">for</span> &#123;<br>resp, err := c.Recv()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to receive response due to error: %v&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;BidiStreaming Echo: &quot;</span>, resp.Message)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unaryInterceptor</span><span class="hljs-params">(ctx context.Context, method <span class="hljs-type">string</span>, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> credsConfigured <span class="hljs-type">bool</span><br><span class="hljs-keyword">for</span> _, opt := <span class="hljs-keyword">range</span> opts &#123;<br>_, ok := opt.(grpc.PerRPCCredsCallOption)<br><span class="hljs-keyword">if</span> ok &#123;<br>credsConfigured = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> !credsConfigured &#123;<br>opts = <span class="hljs-built_in">append</span>(opts, grpc.PerRPCCredentials(oauth.TokenSource&#123;<br>oauth2.StaticTokenSource(&amp;oauth2.Token&#123;AccessToken: fallbackToken&#125;),<br>&#125;))<br>&#125;<br><br>start := time.Now()<br>err := invoker(ctx, method, req, reply, cc, opts...)<br>end := time.Now()<br>logger(<span class="hljs-string">&quot;RPC: %s, start time: %s, end time: %s, err: %v&quot;</span>, method, start.Format(<span class="hljs-string">&quot;Basic&quot;</span>), end.Format(time.RFC3339), err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">type</span> wrappedStream <span class="hljs-keyword">struct</span> &#123;<br>grpc.ClientStream<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *wrappedStream)</span></span> RecvMsg(m any) <span class="hljs-type">error</span> &#123;<br>logger(<span class="hljs-string">&quot;Receive a message (Type: %T) at %v&quot;</span>, m, time.Now().Format(time.RFC3339))<br><span class="hljs-keyword">return</span> w.ClientStream.RecvMsg(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *wrappedStream)</span></span> SendMsg(m any) <span class="hljs-type">error</span> &#123;<br>logger(<span class="hljs-string">&quot;Send a message (Type: %T) at %v&quot;</span>, m, time.Now().Format(time.RFC3339))<br><span class="hljs-keyword">return</span> w.ClientStream.SendMsg(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newWrappedStream</span><span class="hljs-params">(s grpc.ClientStream)</span></span> grpc.ClientStream &#123;<br><span class="hljs-keyword">return</span> &amp;wrappedStream&#123;s&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">streamInterceptor</span><span class="hljs-params">(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method <span class="hljs-type">string</span>, streamer grpc.Streamer, opts ...grpc.CallOption)</span></span> (grpc.ClientStream, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> credsConfigured <span class="hljs-type">bool</span><br><span class="hljs-keyword">for</span> _, o := <span class="hljs-keyword">range</span> opts &#123;<br>_, ok := o.(*grpc.PerRPCCredsCallOption)<br><span class="hljs-keyword">if</span> ok &#123;<br>credsConfigured = <span class="hljs-literal">true</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> !credsConfigured &#123;<br>opts = <span class="hljs-built_in">append</span>(opts, grpc.PerRPCCredentials(oauth.TokenSource&#123;<br>TokenSource: oauth2.StaticTokenSource(&amp;oauth2.Token&#123;AccessToken: fallbackToken&#125;),<br>&#125;))<br>&#125;<br>s, err := streamer(ctx, desc, cc, method, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> newWrappedStream(s), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>creds, err := credentials.NewClientTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>), <span class="hljs-string">&quot;x.test.example.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to load credentials: %v&quot;</span>, err)<br>&#125;<br><br>conn, err := grpc.Dial(*addr,<br>grpc.WithTransportCredentials(creds),<br>grpc.WithUnaryInterceptor(unaryInterceptor),<br>grpc.WithStreamInterceptor(streamInterceptor))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>rgc := pb.NewEchoClient(conn)<br>callUnaryEcho(rgc, <span class="hljs-string">&quot;hello world&quot;</span>)<br>callBidiStreamingEcho(rgc)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]: <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/interceptor">grpc-go&#x2F;examples&#x2F;features&#x2F;interceptor at master · grpc&#x2F;grpc-go (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.Health</title>
      <link href="/posts/04b5afc2625f/"/>
      <url>/posts/04b5afc2625f/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc提供了<code>health</code>包用于服务器将其系统健康状况传达给它们的客户端。</p><p>允许服务器应用程序发出它们不正常的信号，而不会破坏与客户端的连接。</p><p>如服务器本身是正常的，但是它依赖于另一个不可用的服务器。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>这种机制可以使用在外置负载均衡上，负责集中运行服务器的状况检查。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>其实不难看出，<code>health</code>包其实就是一个服务，<code>grpc_health_v1</code>包就使用<code>protobuf</code>生成的代码。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>服务端：</p><ol><li><p>创建health服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">healthCheck := health.NewServer()<br></code></pre></td></tr></table></figure></li><li><p>注册到grpc服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> healthpb <span class="hljs-string">&quot;google.golang.org/grpc/health/grpc_health_v1&quot;</span><br>healthpb.RegisterHealthServer(s, healthCheck)<br></code></pre></td></tr></table></figure></li><li><p>进行切换服务器状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">system = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 服务名 空字符串表示服务器全部服务的运行状况，而不单是单个服务的运行状态 </span><br>next := healthpb.HealthCheckResponse_SERVING<br>healthCheck.SetServingStatus(system, next)<br></code></pre></td></tr></table></figure><p>health服务可以设置4种状态：</p><ul><li><code>HealthCheckResponse_UNKNOWN</code> ：状态未知，一般在服务器实例启动时出现</li><li><code>HealthCheckResponse_SERVING</code>：状态健康，可以为请求提供服务       </li><li><code>HealthCheckResponse_NOT_SERVING</code>： 状态不健康，不能提供服务</li><li><code>HealthCheckResponse_SERVICE_UNKNOWN</code>：客户端请求的服务名未知</li></ul></li></ol><p>客户端：</p><ol><li><p>匿名导包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">_ <span class="hljs-string">&quot;google.golang.org/grpc/health&quot;</span><br></code></pre></td></tr></table></figure><p>其实就是赋值<code>HealthCheckFunc</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>internal.HealthCheckFunc = clientHealthCheck<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设置服务配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> serviceConfig = <span class="hljs-string">`&#123;</span><br><span class="hljs-string">&quot;loadBalancingPolicy&quot;: &quot;round_robin&quot;,</span><br><span class="hljs-string">&quot;healthCheckConfig&quot;: &#123;</span><br><span class="hljs-string">&quot;serviceName&quot;: &quot;&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;`</span><br><br>...<br><br>grpc.WithDefaultServiceConfig(serviceConfig)<br></code></pre></td></tr></table></figure></li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/health&quot;</span><br>healthpb <span class="hljs-string">&quot;google.golang.org/grpc/health/grpc_health_v1&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>port  = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br>sleep = flag.Duration(<span class="hljs-string">&quot;sleep&quot;</span>, time.Second*<span class="hljs-number">5</span>, <span class="hljs-string">&quot;duration between changes in health&quot;</span>)<br><br>system = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 空字符串表示系统的运行状况</span><br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: fmt.Sprintf(<span class="hljs-string">&quot;server port %d: %v&quot;</span>, *port, request.Message)&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br>s := grpc.NewServer()<br><span class="hljs-comment">// 创建health服务</span><br>healthCheck := health.NewServer()<br><span class="hljs-comment">// 注册health服务</span><br>healthpb.RegisterHealthServer(s, healthCheck)<br><span class="hljs-comment">// 注册echo服务</span><br>pb.RegisterEchoServer(s, &amp;server&#123;&#125;)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>next := healthpb.HealthCheckResponse_SERVING<br><br><span class="hljs-keyword">for</span> &#123;<br>healthCheck.SetServingStatus(system, next)<br><br><span class="hljs-keyword">if</span> next == healthpb.HealthCheckResponse_SERVING &#123;<br>next = healthpb.HealthCheckResponse_NOT_SERVING<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>next = healthpb.HealthCheckResponse_SERVING<br>&#125;<br><br>time.Sleep(*sleep)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>_ <span class="hljs-string">&quot;google.golang.org/grpc/health&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/resolver&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/resolver/manual&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> serviceConfig = <span class="hljs-string">`&#123;</span><br><span class="hljs-string">&quot;loadBalancingPolicy&quot;: &quot;round_robin&quot;, // 轮询策略</span><br><span class="hljs-string">&quot;healthCheckConfig&quot;: &#123;</span><br><span class="hljs-string">&quot;serviceName&quot;: &quot;&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;`</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(c pb.EchoClient)</span></span> &#123;<br>ctx, cancelFunc := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br>r, err := c.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: <span class="hljs-string">&quot;hello&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;UnaryEcho: _,&quot;</span>, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;UnaryEcho: &quot;</span>, r.GetMessage())<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>r := manual.NewBuilderWithScheme(<span class="hljs-string">&quot;whatever&quot;</span>)<br>r.InitialState(resolver.State&#123;<br>Addresses: []resolver.Address&#123;<br>&#123;Addr: <span class="hljs-string">&quot;localhost:50051&quot;</span>&#125;,<br>&#123;Addr: <span class="hljs-string">&quot;localhost:50052&quot;</span>&#125;,<br>&#125;,<br>&#125;)<br><br>address := fmt.Sprintf(<span class="hljs-string">&quot;%s:///unused&quot;</span>, r.Scheme())<br><br>options := []grpc.DialOption&#123;<br>grpc.WithTransportCredentials(insecure.NewCredentials()),<br>grpc.WithBlock(),      <span class="hljs-comment">// 调用阻塞 直到dial连接成功</span><br>grpc.WithResolvers(r), <span class="hljs-comment">// 启用负载均衡</span><br>grpc.WithDefaultServiceConfig(serviceConfig),<br>&#125;<br><br>conn, err := grpc.Dial(address, options...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;grpc.Dial(%q): %v&quot;</span>, address, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>echoClient := pb.NewEchoClient(conn)<br><br><span class="hljs-keyword">for</span> &#123;<br>callUnaryEcho(echoClient)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go run ./server.go -port=50051 -<span class="hljs-built_in">sleep</span>=5s<br>$ go run ./server.go -port=50052 -<span class="hljs-built_in">sleep</span>=10s<br><br>$ go run ./client.go<br></code></pre></td></tr></table></figure><p>控制台输出如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho: _, rpc error: code = Unavailable desc = last connection error: connection active but health check failed. status=NOT_SERVING<br>UnaryEcho: _, rpc error: code = Unavailable desc = last connection error: connection active but health check failed. status=NOT_SERVING<br>UnaryEcho: _, rpc error: code = Unavailable desc = last connection error: connection active but health check failed. status=NOT_SERVING<br>UnaryEcho: _, rpc error: code = Unavailable desc = last connection error: connection active but health check failed. status=NOT_SERVING<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho:  server port 50051: hello<br>UnaryEcho: _, rpc error: code = Unavailable desc = last connection error: connection active but health check failed. status=NOT_SERVING<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br>UnaryEcho:  server port 50052: hello<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]: <a href="https://github.com/grpc/proposal/blob/master/A17-client-side-health-checking.md">proposal&#x2F;A17-client-side-health-checking.md at master · grpc&#x2F;proposal (github.com)</a><br>[^2 ]: <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/health">grpc-go&#x2F;examples&#x2F;features&#x2F;health at master · grpc&#x2F;grpc-go (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.flow-control</title>
      <link href="/posts/d8532d4941a7/"/>
      <url>/posts/d8532d4941a7/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>流量控制：指的是在网络传输中，发送方主动限制自身发送数据的速率，以适用接收方处理数据的速度。</p><p>如果过快发送数据，接收方来不及处理，数据会被积压到内存中，当内存的缓存区被填满后，新接收的数据将被丢弃，发送方将不得不重新发送，就会导致网络宽带的浪费。</p><p>流量控制可以防止数据丢失，提高性能和可靠性。</p><p>TCP协议规定了流量控制的算法，而grpc基于TCP，使用<code>HTTP/2</code>进行通信，那么grpc其实依赖于<code>HTTP/2</code>的WindowUpdate Frame实现应用层的流量控制。</p><p>grpc的流量控制，仅对流式rpc有效，对一元rpc无用。</p><p>流量控制是双向的。</p><p>在默认的情况下，grpc自动进行流量控制，当然也是可以进行覆盖默认并显示控制。</p><p>grpc有三种流量控制方式：</p><ul><li>BDP采样流量控制</li><li>connect level流量控制</li><li>stream level流量控制</li></ul><h1 id="BDP采样流量控制"><a href="#BDP采样流量控制" class="headerlink" title="BDP采样流量控制"></a>BDP采样流量控制</h1><p>BDP，<code>Bandwidth and Delay Product</code>，带宽(单位 bps)和延迟(单位 s)的乘积(单位 bit)，也是客户端于服务端之间允许在<code>Flying</code>状态的最大数据量。<code>Flying</code>指的是发送了但还未收到Ack的时间段。</p><p>实际发送速率乘以延迟得到的值越接近BDP说明流量控制算法效率就越高。</p><h2 id="术语概念"><a href="#术语概念" class="headerlink" title="术语概念"></a>术语概念</h2><p>在<code>HTTP/2</code>中，没有实现流量控制的具体算法，只是定义了几个基本概念。</p><ul><li>流量控制窗口<code>Flow Control Window</code> : 其实就是一个简单的值，指的是发送端被允许传输的字节数。其大小是接收端的缓存能力的衡量。</li><li><code>WINDOW_UPDATE帧</code>: <code>HTTP/2</code>定义的帧类型的一种，用于通知对端增加窗口值，指定增加的大小。</li></ul><blockquote><p>客户端服务端说法过于局限，在协议里一般是发送端和接收端。</p></blockquote><h2 id="grpc流程"><a href="#grpc流程" class="headerlink" title="grpc流程"></a>grpc流程</h2><ol><li><p>client保有一个流量控制窗口的初始值（window）默认65535(64kb)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">defaultWindowSize = <span class="hljs-number">65535</span><br><span class="hljs-comment">// The initial window size for flow control.</span><br>initialWindowSize             = defaultWindowSize <br></code></pre></td></tr></table></figure></li><li><p>client会发送<code>Magic</code>帧到服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Send connection preface to server.</span><br>n, err := t.conn.Write(clientPreface)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ClientPreface is the string that must be sent by new</span><br><span class="hljs-comment">// connections from clients.</span><br>ClientPreface = <span class="hljs-string">&quot;PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>client会发送一个<code>SETTING</code>帧, server的window初始值设定由<code>SETTING</code>帧的<code>SETTINGS_INITIAL_WINDOW_SIZE</code>决定。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ss []http2.Setting<br><br><span class="hljs-keyword">if</span> t.initialWindowSize != defaultWindowSize &#123;<br>ss = <span class="hljs-built_in">append</span>(ss, http2.Setting&#123;<br>ID:  http2.SettingInitialWindowSize,<br>Val: <span class="hljs-type">uint32</span>(t.initialWindowSize),<br>&#125;)<br>&#125;<br>...<br>err = t.framer.fr.WriteSettings(ss...)<br></code></pre></td></tr></table></figure></li><li><p>接着client发送一个<code>WINDOW_UPDATE帧</code>，因为还没发送<code>DATA</code>帧，所以还是0.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Adjust the connection flow control window if needed.</span><br><span class="hljs-keyword">if</span> delta := <span class="hljs-type">uint32</span>(icwz - defaultWindowSize); delta &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> err := t.framer.fr.WriteWindowUpdate(<span class="hljs-number">0</span>, delta); err != <span class="hljs-literal">nil</span> &#123;<br>err = connectionErrorf(<span class="hljs-literal">true</span>, err, <span class="hljs-string">&quot;transport: failed to write window update: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>client开启读循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">readerErrCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">error</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> t.reader(readerErrCh)<br>...<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>t.loopy = newLoopyWriter(clientSide, t.framer, t.controlBuf, t.bdpEst, t.conn, t.logger)<br><span class="hljs-keyword">if</span> err := t.loopy.run(); !isIOError(err) &#123;<br><span class="hljs-comment">// Immediately close the connection, as the loopy writer returns</span><br><span class="hljs-comment">// when there are no more active streams and we were draining (the</span><br><span class="hljs-comment">// server sent a GOAWAY).  For I/O errors, the reader will hit it</span><br><span class="hljs-comment">// after draining any remaining incoming data.</span><br>t.conn.Close()<br>&#125;<br><span class="hljs-built_in">close</span>(t.writerDone)<br>&#125;()<br></code></pre></td></tr></table></figure></li><li><p>在创建连接后，server也会发送<code>SETTING</code>帧，也是包含window。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Send initial settings as connection preface to client.</span><br>isettings := []http2.Setting&#123;&#123;<br>ID:  http2.SettingMaxFrameSize,<br>Val: http2MaxFrameLen,<br>&#125;&#125;<br><span class="hljs-keyword">if</span> iwz != defaultWindowSize &#123;<br>isettings = <span class="hljs-built_in">append</span>(isettings, http2.Setting&#123;<br>ID:  http2.SettingInitialWindowSize,<br>Val: <span class="hljs-type">uint32</span>(iwz)&#125;)<br>&#125;<br>...<br><span class="hljs-keyword">if</span> err := framer.fr.WriteSettings(isettings...); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, connectionErrorf(<span class="hljs-literal">false</span>, err, <span class="hljs-string">&quot;transport: %v&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>server也会发送<code>WINDOW_UPDATE帧</code>，也是0。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Adjust the connection flow control window if needed.</span><br><span class="hljs-keyword">if</span> delta := <span class="hljs-type">uint32</span>(icwz - defaultWindowSize); delta &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> err := framer.fr.WriteWindowUpdate(<span class="hljs-number">0</span>, delta); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, connectionErrorf(<span class="hljs-literal">false</span>, err, <span class="hljs-string">&quot;transport: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>server开始验证<code>Magic</code>帧。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Check the validity of client preface.</span><br>preface := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(clientPreface))<br><span class="hljs-keyword">if</span> _, err := io.ReadFull(t.conn, preface); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// In deployments where a gRPC server runs behind a cloud load balancer</span><br><span class="hljs-comment">// which performs regular TCP level health checks, the connection is</span><br><span class="hljs-comment">// closed immediately by the latter.  Returning io.EOF here allows the</span><br><span class="hljs-comment">// grpc server implementation to recognize this scenario and suppress</span><br><span class="hljs-comment">// logging to reduce spam.</span><br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, io.EOF<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, connectionErrorf(<span class="hljs-literal">false</span>, err, <span class="hljs-string">&quot;transport: http2Server.HandleStreams failed to receive the preface from client: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> !bytes.Equal(preface, clientPreface) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, connectionErrorf(<span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;transport: http2Server.HandleStreams received bogus greeting from client: %q&quot;</span>, preface)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>server确认<code>SETTING</code>帧。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">frame, err := t.framer.fr.ReadFrame()<br><span class="hljs-keyword">if</span> err == io.EOF || err == io.ErrUnexpectedEOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, connectionErrorf(<span class="hljs-literal">false</span>, err, <span class="hljs-string">&quot;transport: http2Server.HandleStreams failed to read initial settings frame: %v&quot;</span>, err)<br>&#125;<br>atomic.StoreInt64(&amp;t.lastRead, time.Now().UnixNano())<br>sf, ok := frame.(*http2.SettingsFrame)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, connectionErrorf(<span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;transport: http2Server.HandleStreams saw invalid preface type %T from client&quot;</span>, frame)<br>&#125;<br>t.handleSettings(sf)<br></code></pre></td></tr></table></figure></li><li><p>server开启读循环。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>t.loopy = newLoopyWriter(serverSide, t.framer, t.controlBuf, t.bdpEst, t.conn, t.logger)<br>t.loopy.ssGoAwayHandler = t.outgoingGoAwayHandler<br>err := t.loopy.run()<br><span class="hljs-built_in">close</span>(t.loopyWriterDone)<br><span class="hljs-keyword">if</span> !isIOError(err) &#123;<br><span class="hljs-comment">// Close the connection if a non-I/O error occurs (for I/O errors</span><br><span class="hljs-comment">// the reader will also encounter the error and close).  Wait 1</span><br><span class="hljs-comment">// second before closing the connection, or when the reader is done</span><br><span class="hljs-comment">// (i.e. the client already closed the connection or a connection</span><br><span class="hljs-comment">// error occurred).  This avoids the potential problem where there</span><br><span class="hljs-comment">// is unread data on the receive side of the connection, which, if</span><br><span class="hljs-comment">// closed, would lead to a TCP RST instead of FIN, and the client</span><br><span class="hljs-comment">// encountering errors.  For more info:</span><br><span class="hljs-comment">// https://github.com/grpc/grpc-go/issues/5358</span><br>timer := time.NewTimer(time.Second)<br><span class="hljs-keyword">defer</span> timer.Stop()<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-t.readerDone:<br><span class="hljs-keyword">case</span> &lt;-timer.C:<br>&#125;<br>t.conn.Close()<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><p>以上就完成后握手环节。</p><ol><li><p>当client发送数据，即<code>DATA</code>帧，到server。</p><p>server收到<code>DATA</code>帧时，<code>bdpEstimator</code>记录收到的字节数，并发送<code>bdpPing</code>帧。</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go">size := f.Header().Length<br><span class="hljs-keyword">var</span> sendBDPPing <span class="hljs-type">bool</span><br><span class="hljs-keyword">if</span> t.bdpEst != <span class="hljs-literal">nil</span> &#123;<br>sendBDPPing = t.bdpEst.add(size)<br>&#125;<br>...<br><span class="hljs-keyword">if</span> sendBDPPing &#123;<br><span class="hljs-comment">// Avoid excessive ping detection (e.g. in an L7 proxy)</span><br><span class="hljs-comment">// by sending a window update prior to the BDP ping.</span><br><span class="hljs-keyword">if</span> w := t.fc.reset(); w &gt; <span class="hljs-number">0</span> &#123;<br>t.controlBuf.put(&amp;outgoingWindowUpdate&#123;<br>streamID:  <span class="hljs-number">0</span>,<br>increment: w,<br>&#125;)<br>&#125;<br>    <span class="hljs-comment">// 发送bdpPing</span><br>t.controlBuf.put(bdpPing)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>client接收到<code>Ping</code>帧时，会立刻发送一个<code>ackPing</code>帧。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Client)</span></span> handlePing(f *http2.PingFrame) &#123;<br><span class="hljs-keyword">if</span> f.IsAck() &#123;<br><span class="hljs-comment">// Maybe it&#x27;s a BDP ping.</span><br><span class="hljs-keyword">if</span> t.bdpEst != <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-comment">// 计算window值</span><br>t.bdpEst.calculate(f.Data)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br>pingAck := &amp;ping&#123;ack: <span class="hljs-literal">true</span>&#125;<br><span class="hljs-built_in">copy</span>(pingAck.data[:], f.Data[:])<br>t.controlBuf.put(pingAck)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>server收到<code>ackPing</code>帧时，会将统计好的字节数（从发出<code>bdpPing</code>帧到收到<code>ackPing</code>帧之间的字节数），计算出1.5RTT（往返时间）收到所有字节总和就是bdp。然后根据这个流量大小发送<code>WINDOW_UPDATE</code>帧和<code>SETTING</code>帧。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *bdpEstimator)</span></span> calculate(d [<span class="hljs-number">8</span>]<span class="hljs-type">byte</span>) &#123;<br><span class="hljs-comment">// Check if the ping acked for was the bdp ping.</span><br><span class="hljs-keyword">if</span> bdpPing.data != d &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>b.mu.Lock()<br>rttSample := time.Since(b.sentAt).Seconds()<br><span class="hljs-keyword">if</span> b.sampleCount &lt; <span class="hljs-number">10</span> &#123;<br><span class="hljs-comment">// Bootstrap rtt with an average of first 10 rtt samples.</span><br>b.rtt += (rttSample - b.rtt) / <span class="hljs-type">float64</span>(b.sampleCount)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Heed to the recent past more.</span><br>b.rtt += (rttSample - b.rtt) * <span class="hljs-type">float64</span>(alpha)<br>&#125;<br>b.isSent = <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment">// 计算当前的bdp</span><br>bwCurrent := <span class="hljs-type">float64</span>(b.sample) / (b.rtt * <span class="hljs-type">float64</span>(<span class="hljs-number">1.5</span>))<br><span class="hljs-keyword">if</span> bwCurrent &gt; b.bwMax &#123;<br>b.bwMax = bwCurrent<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-type">float64</span>(b.sample) &gt;= beta*<span class="hljs-type">float64</span>(b.bdp) &amp;&amp; bwCurrent == b.bwMax &amp;&amp; b.bdp != bdpLimit &#123;<br>sampleFloat := <span class="hljs-type">float64</span>(b.sample)<br>b.bdp = <span class="hljs-type">uint32</span>(gamma * sampleFloat)<br><span class="hljs-keyword">if</span> b.bdp &gt; bdpLimit &#123;<br>b.bdp = bdpLimit<br>&#125;<br>bdp := b.bdp<br>b.mu.Unlock()<br>b.updateFlowControl(bdp)<br><span class="hljs-keyword">return</span><br>&#125;<br>b.mu.Unlock()<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Server)</span></span> updateFlowControl(n <span class="hljs-type">uint32</span>) &#123;<br>t.mu.Lock()<br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> t.activeStreams &#123;<br>s.fc.newLimit(n)<br>&#125;<br>t.initialWindowSize = <span class="hljs-type">int32</span>(n)<br>t.mu.Unlock()<br>    <span class="hljs-comment">// 更新WINDOW_UPDATE帧的值</span><br>t.controlBuf.put(&amp;outgoingWindowUpdate&#123;<br>streamID:  <span class="hljs-number">0</span>,<br>increment: t.fc.newLimit(n),<br>&#125;)<br>    <span class="hljs-comment">// 更新SETTING帧中的`SETTINGS_INITIAL_WINDOW_SIZE`值</span><br>t.controlBuf.put(&amp;outgoingSettings&#123;<br>ss: []http2.Setting&#123;<br>&#123;<br>ID:  http2.SettingInitialWindowSize,<br>Val: n,<br>&#125;,<br>&#125;,<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的当server发送<code>DATA</code>帧，也会走一样的流程。</p></li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>流量控制是双向的。</p></blockquote><p><strong>BDP对grpc的影响是动态，还是全局影响。</strong></p><h1 id="Connection-Level流量控制"><a href="#Connection-Level流量控制" class="headerlink" title="Connection Level流量控制"></a>Connection Level流量控制</h1><p>BDP是基于HTTP&#x2F;2端对端做的流量控制，而Connection Level是针对TCP链接做的流量控制，即client和server之间的TCP链接。</p><blockquote><p>Connection Level流量控制是限制server的流量，而不是client。</p></blockquote><h2 id="grpc流程-1"><a href="#grpc流程-1" class="headerlink" title="grpc流程"></a>grpc流程</h2><p>在链接建立时，server会被分配一个<code>sendQuota</code>，默认值是默认的窗口值，65535字节，64kb。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newLoopyWriter</span><span class="hljs-params">(s side, fr *framer, cbuf *controlBuffer, bdpEst *bdpEstimator, conn net.Conn, logger *grpclog.PrefixLogger)</span></span> *loopyWriter &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>l := &amp;loopyWriter&#123;<br>side:          s,<br>cbuf:          cbuf,<br>sendQuota:     defaultWindowSize, <span class="hljs-comment">// 流量配额</span><br>oiws:          defaultWindowSize,<br>estdStreams:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">uint32</span>]*outStream),<br>activeStreams: newOutStreamList(),<br>framer:        fr,<br>hBuf:          &amp;buf,<br>hEnc:          hpack.NewEncoder(&amp;buf),<br>bdpEst:        bdpEst,<br>conn:          conn,<br>logger:        logger,<br>&#125;<br><span class="hljs-keyword">return</span> l<br>&#125;<br></code></pre></td></tr></table></figure><p>其实简单来说，这个限流的就是通过改变<code>sendQuota</code>来达成的。</p><p>当server接收到client的<code>WINDOW_UPDATE</code>帧时，增加配额。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *loopyWriter)</span></span> incomingWindowUpdateHandler(w *incomingWindowUpdate) &#123;<br><span class="hljs-comment">// Otherwise update the quota.</span><br><span class="hljs-keyword">if</span> w.streamID == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-comment">// 增加配额</span><br>l.sendQuota += w.increment<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// Find the stream and update it.</span><br><span class="hljs-keyword">if</span> str, ok := l.estdStreams[w.streamID]; ok &#123;<br>str.bytesOutStanding -= <span class="hljs-type">int</span>(w.increment)<br><span class="hljs-keyword">if</span> strQuota := <span class="hljs-type">int</span>(l.oiws) - str.bytesOutStanding; strQuota &gt; <span class="hljs-number">0</span> &amp;&amp; str.state == waitingOnStreamQuota &#123;<br>str.state = active<br>l.activeStreams.enqueue(str)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当server发送数据到client时，发送的数据包含header和data，减少配额。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *loopyWriter)</span></span> processData() (<span class="hljs-type">bool</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">// 配额为0，即不能发送数据</span><br><span class="hljs-keyword">if</span> l.sendQuota == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">nil</span><br>&#125;<br>    ...<br>    <span class="hljs-comment">// 发送消息中的 头部和data 大小</span><br>size := hSize + dSize<br>...<br>    <span class="hljs-comment">// 减少配额</span><br>l.sendQuota -= <span class="hljs-type">uint32</span>(size)<br>...<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而client也要进行配合，可以理解成当server的<code>sendQuota</code>不够时，client就会通知server增加<code>sendQuota</code>。</p><p>client需要维护<code>trInFlow</code>的结构体，并在构建<code>HTTP\2</code>时初始化为当前窗口值， 以达成流量控制。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> trInFlow <span class="hljs-keyword">struct</span> &#123;<br>limit               <span class="hljs-type">uint32</span><br>unacked             <span class="hljs-type">uint32</span><br>effectiveWindowSize <span class="hljs-type">uint32</span><br>&#125;<br><br>...<br>fc:                    &amp;trInFlow&#123;limit: <span class="hljs-type">uint32</span>(icwz)&#125;,<br></code></pre></td></tr></table></figure><p>然后client在<code>go t.reader()</code>中对<code>DATA</code>帧进行处理，<code>trInFlow.onData()</code>将积累并判断收到的字节数<code>unacked</code>是否超过<code>limit/4</code>这个阈值，如果超过了，那就发送<code>WINDOW_UPDATE</code>帧，置零<code>unacked</code>，这个机制能够避免频繁地发送<code>WINDOW_UPDATE</code>占用网络宽带。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Client)</span></span> handleData(f *http2.DataFrame) &#123;<br>...<br><span class="hljs-keyword">if</span> w := t.fc.onData(size); w &gt; <span class="hljs-number">0</span> &#123;<br>t.controlBuf.put(&amp;outgoingWindowUpdate&#123;<br>streamID:  <span class="hljs-number">0</span>,<br>increment: w,<br>&#125;)<br>&#125;<br>    ...<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *trInFlow)</span></span> onData(n <span class="hljs-type">uint32</span>) <span class="hljs-type">uint32</span> &#123;<br>f.unacked += n<br><span class="hljs-keyword">if</span> f.unacked &gt;= f.limit/<span class="hljs-number">4</span> &#123;<br>w := f.unacked<br>f.unacked = <span class="hljs-number">0</span><br>f.updateEffectiveWindowSize()<br><span class="hljs-keyword">return</span> w<br>&#125;<br>f.updateEffectiveWindowSize()<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h2><p>server通过<code>sendQuota</code>来限流，而client配合server维护<code>trInFlow</code>，<code>trInFlow.unacked</code>记录收到的字节数，<code>trInFlow.limit</code>为默认的window值（64kb）。</p><p>当<code>trInFlow.unacked&gt;=f.limit/4</code>时，发送<code>WINDOW_UPDATE</code>帧<code>n</code>到server。</p><p>server收到后，更新<code>sendQuota+=n</code>。</p><p>当server响应时，判断<code>sendQuota</code>是否等于0，如果是，则停止响应；否则响应数据<code>n，</code>并更新<code>sendQuota=-n</code>。</p><h1 id="Stream-Level-流量控制"><a href="#Stream-Level-流量控制" class="headerlink" title="Stream Level 流量控制"></a>Stream Level 流量控制</h1><p>BDP是基于HTTP&#x2F;2端对端做的流量控制，Connection Level是针对server和client的链接做的流量控制，而stream Level是对tcp链接中的stream进行流量控制。</p><p>多个<code>stream</code>可以共享同一个<code>connection</code>。</p><p>多个<code>stream</code>能够实现对同一个tcp连接的多路复用。</p><p>可以看得出，grpc的流量控制越来越精细化，从全局到connection，再到stream。</p><p>即stream受stream level控制，又受connection level控制，还受全局的BDP采样流量控制。</p><h1 id="grpc流程-2"><a href="#grpc流程-2" class="headerlink" title="grpc流程"></a>grpc流程</h1><p>与connection level类似，stream level也是使用类似的结构体去做限流，只不过<code>trInFlow</code>所属于transport （connection），<code>inFlow</code>所属于stream。</p><p>client和server都维护着<code>inFlow</code>，即stream level流量控制是双向的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> inFlow <span class="hljs-keyword">struct</span> &#123;<br>mu sync.Mutex<br><span class="hljs-comment">// stream能够接收的数据上限，默认为65535字节，即BDP采样流量控制后的bdp</span><br>limit <span class="hljs-type">uint32</span><br><span class="hljs-comment">// stream接收到但还未消费（未读取）的数据量</span><br>pendingData <span class="hljs-type">uint32</span><br><span class="hljs-comment">// stream收到且消费了（已读未回）的数据量，但还没window_update，用于避免频繁window_update</span><br>pendingUpdate <span class="hljs-type">uint32</span><br><span class="hljs-comment">// delta是子limit基础上额外增加的数据量，当尝试去读取超过limit大小的数据时，可以临时在limit上增加delta,来读取数据</span><br>delta <span class="hljs-type">uint32</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当client连接上server后，调用流式rpc，发送<code>Header</code>帧并创建client stream。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go">main.main (client.<span class="hljs-keyword">go</span>:<span class="hljs-number">194</span>) <br>main.runRouteChat (client.<span class="hljs-keyword">go</span>:<span class="hljs-number">121</span>) <br>routeguide.(*routeGuideClient).RouteChat (route_guide_grpc.pb.<span class="hljs-keyword">go</span>:<span class="hljs-number">160</span>)        <br>grpc.(*ClientConn).NewStream (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">169</span>) <br>grpc.newClientStream (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">254</span>) <br>grpc.newClientStream.func3 (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">219</span>)<br>grpc.newClientStreamWithParams (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">362</span>) <br>grpc.(*clientStream).withRetry (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">777</span>) <br>grpc.newClientStreamWithParams.func2 (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">353</span>) <br>grpc.(*csAttempt).newStream (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">503</span>) <br>transport.(*http2Client).NewStream (http2_client.<span class="hljs-keyword">go</span>:<span class="hljs-number">730</span>) <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Client)</span></span> NewStream(ctx context.Context, callHdr *CallHdr) (*Stream, <span class="hljs-type">error</span>) &#123;<br>...<br>    <span class="hljs-comment">// 构建headerFrame</span><br>    hdr := &amp;headerFrame&#123;<br>hf:        headerFields,<br>endStream: <span class="hljs-literal">false</span>,<br>initStream: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(id <span class="hljs-type">uint32</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>t.mu.Lock()<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle transport closure in loopy instead and remove this</span><br><span class="hljs-comment">// initStream is never called when transport is draining.</span><br><span class="hljs-keyword">if</span> t.state == closing &#123;<br>t.mu.Unlock()<br>cleanup(ErrConnClosing)<br><span class="hljs-keyword">return</span> ErrConnClosing<br>&#125;<br><span class="hljs-keyword">if</span> channelz.IsOn() &#123;<br>t.channelz.SocketMetrics.StreamsStarted.Add(<span class="hljs-number">1</span>)<br>t.channelz.SocketMetrics.LastLocalStreamCreatedTimestamp.Store(time.Now().UnixNano())<br>&#125;<br><span class="hljs-comment">// If the keepalive goroutine has gone dormant, wake it up.</span><br><span class="hljs-keyword">if</span> t.kpDormant &#123;<br>t.kpDormancyCond.Signal()<br>&#125;<br>t.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;,<br>onOrphaned: cleanup,<br>wq:         s.wq,<br>&#125;<br>    ...<br>    <span class="hljs-keyword">for</span>&#123;<br>        <span class="hljs-comment">// 写入controBuf 交给looper.write处理并发送headerFrame</span><br>        success, err := t.controlBuf.executeAndPut(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(it any)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> checkForHeaderListSize(it) &amp;&amp; checkForStreamQuota(it)<br>&#125;, hdr)<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> s, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在server端，接收到<code>Header</code>帧时，初始化stream，并赋值限流结构体<code>inFlow</code>，其中<code>limit</code>赋值transport 的<code>initialWindowSize</code>，如果没有特意设置的话，还是65535bit。（64kb）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.(*Server).handleRawConn.func1 (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">949</span>)<br>grpc.(*Server).serveStreams (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1013</span>)<br>transport.(*http2Server).HandleStreams (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">672</span>) <br>transport.(*http2Server).operateHeaders (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">388</span>) <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Server)</span></span> operateHeaders(ctx context.Context, frame *http2.MetaHeadersFrame, handle <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Stream)</span></span>) <span class="hljs-type">error</span> &#123;<br>...<br>s := &amp;Stream&#123;<br>id:               streamID,<br>st:               t,<br>buf:              buf,<br>fc:               &amp;inFlow&#123;limit: <span class="hljs-type">uint32</span>(t.initialWindowSize)&#125;,<br>headerWireLength: <span class="hljs-type">int</span>(frame.Header().Length),<br>&#125;<br>    ...<br>    <br>    s.requestRead = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> &#123;<br>        <span class="hljs-comment">// 当接收到数据`DATA`帧时，根据`DATA`帧的header,设置预估windows大小</span><br>t.adjustWindow(s, <span class="hljs-type">uint32</span>(n))<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>client发送<code>DATA</code>帧到server，将数据长度加载到<code>DATA</code>帧的header中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go">main.main (client.<span class="hljs-keyword">go</span>:<span class="hljs-number">194</span>)<br>main.runRouteChat (client.<span class="hljs-keyword">go</span>:<span class="hljs-number">141</span>)<br>routeguide.(*routeGuideRouteChatClient).Send (route_guide_grpc.pb.<span class="hljs-keyword">go</span>:<span class="hljs-number">179</span>)<br>grpc.(*clientStream).SendMsg (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">893</span>)<br>grpc.prepareMsg (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">1779</span>)<br>grpc.msgHeader (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">710</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">msgHeader</span><span class="hljs-params">(data, compData []<span class="hljs-type">byte</span>)</span></span> (hdr []<span class="hljs-type">byte</span>, payload []<span class="hljs-type">byte</span>) &#123;<br>hdr = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, headerLen)<br><span class="hljs-keyword">if</span> compData != <span class="hljs-literal">nil</span> &#123;<br>hdr[<span class="hljs-number">0</span>] = <span class="hljs-type">byte</span>(compressionMade)<br>data = compData<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>hdr[<span class="hljs-number">0</span>] = <span class="hljs-type">byte</span>(compressionNone)<br>&#125;<br><br><span class="hljs-comment">// Write length of payload into buf</span><br>binary.BigEndian.PutUint32(hdr[payloadLen:], <span class="hljs-type">uint32</span>(<span class="hljs-built_in">len</span>(data)))<br><span class="hljs-keyword">return</span> hdr, data<br>&#125;<br></code></pre></td></tr></table></figure><p>当server接收到来自client的<code>Data</code>帧时，<code>t.adjustWindows</code>会根据<code>DATA</code>帧的header中的数据大小(即<code>DATA</code>帧大小)，评估server最佳的窗口值。这一步提前调整是为了提高效率。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.(*Server).serveStreams.func2<span class="hljs-number">.1</span> (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1019</span>) <br>grpc.(*Server).handleStream (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1784</span>) <br>grpc.(*Server).processStreamingRPC (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1663</span>) <br>routeguide._RouteGuide_RouteChat_Handler (route_guide_grpc.pb.<span class="hljs-keyword">go</span>:<span class="hljs-number">316</span>) <br>main.(*routeGuideServer).RouteChat (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">125</span>) <br>routeguide.(*routeGuideRouteChatServer).Recv (route_guide_grpc.pb.<span class="hljs-keyword">go</span>:<span class="hljs-number">335</span>) <br>grpc.(*serverStream).RecvMsg (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">1717</span>) <br>grpc.recv (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">833</span>) <br>grpc.recvAndDecompress (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">753</span>)<br>grpc.(*parser).recvMsg (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">614</span>) <br>transport.(*Stream).Read (transport.<span class="hljs-keyword">go</span>:<span class="hljs-number">508</span>) <br>transport.(*http2Server).operateHeaders.func4 (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">611</span>) <br>transport.(*http2Server).adjustWindow (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">721</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Server)</span></span> adjustWindow(s *Stream, n <span class="hljs-type">uint32</span>) &#123;<br>    <span class="hljs-comment">// 如果预估发现delta&gt;0 即发送window update给serve,提升server的窗口值</span><br><span class="hljs-keyword">if</span> w := s.fc.maybeAdjust(n); w &gt; <span class="hljs-number">0</span> &#123; <br>t.controlBuf.put(&amp;outgoingWindowUpdate&#123;streamID: s.id, increment: w&#125;)<br>&#125;<br>&#125;<br><br>transport.(*inFlow).maybeAdjust (flowcontrol.<span class="hljs-keyword">go</span>:<span class="hljs-number">146</span>) <br><br><span class="hljs-comment">// n指的是`data frame`的字节量 包含在data frame的header中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *inFlow)</span></span> maybeAdjust(n <span class="hljs-type">uint32</span>) <span class="hljs-type">uint32</span> &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-type">uint32</span>(math.MaxInt32) &#123;<br>n = <span class="hljs-type">uint32</span>(math.MaxInt32)<br>&#125;<br>f.mu.Lock()<br><span class="hljs-keyword">defer</span> f.mu.Unlock()<br><span class="hljs-comment">// estSenderQuota 是接收方在不更新窗口的情况下可以发送的最大字节数。这只是推测，因为接收方不清楚发送方有多少数据已经发送但还没接收到</span><br>estSenderQuota := <span class="hljs-type">int32</span>(f.limit - (f.pendingData + f.pendingUpdate))<br><span class="hljs-comment">// estUntransmittedData 是发送方可能尚未发送的最大字节数。值为 0 或更小表示我们已经收到的所有或更多的字节数超过应用程序请求读取的字节数。</span><br>estUntransmittedData := <span class="hljs-type">int32</span>(n - f.pendingData) <span class="hljs-comment">// 如果是负数 强制转换成int32 即0</span><br><br>    <span class="hljs-comment">// 发送方还没发送完的字节数大于发送方可发送的最大字节数，下面进行扩大delta</span><br><span class="hljs-keyword">if</span> estUntransmittedData &gt; estSenderQuota &#123;<br><span class="hljs-comment">// Sender&#x27;s window shouldn&#x27;t go more than 2^31 - 1 as specified in the HTTP spec.</span><br>        <span class="hljs-comment">// 如果一次性接收，如果超过最大窗口值，则delta=maxWindowSize - f.limit</span><br><span class="hljs-keyword">if</span> f.limit+n &gt; maxWindowSize &#123;<br>f.delta = maxWindowSize - f.limit<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// windows值可以增加n,可以发送window_update给发送方进行配置</span><br>f.delta = n<br>&#125;<br><span class="hljs-keyword">return</span> f.delta<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>server预估完成后，就会去处理<code>DATA</code>帧中的数据，增加待消费字节数<code>f.pendingData += n</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.(*Server).handleRawConn.func1 (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">949</span>)<br>grpc.(*Server).serveStreams (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1013</span>)<br>transport.(*http2Server).HandleStreams (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">683</span>)<br>transport.(*http2Server).handleData (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">804</span>)<br>transport.(*inFlow).onData (flowcontrol.<span class="hljs-keyword">go</span>:<span class="hljs-number">179</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *inFlow)</span></span> onData(n <span class="hljs-type">uint32</span>) <span class="hljs-type">error</span> &#123;<br>f.mu.Lock()<br>    <span class="hljs-comment">// 增加pendingData</span><br>f.pendingData += n<br>    <span class="hljs-comment">// 如果待消费和待更新的数据超出最大限制，返回错误，即积压的数据过大来不及消费</span><br><span class="hljs-keyword">if</span> f.pendingData+f.pendingUpdate &gt; f.limit+f.delta &#123;<br>limit := f.limit<br>rcvd := f.pendingData + f.pendingUpdate<br>f.mu.Unlock()<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;received %d-bytes data exceeding the limit %d bytes&quot;</span>, rcvd, limit)<br>&#125;<br>f.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>server开始消费已接收到的数据，<code>onRead</code>会不断消除之前提前调整阶段（<code>maybeAdjust</code>）允许<code>client</code>发送大量数据而临时增加的<code>delta</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go">grpc.(*Server).serveStreams.func2<span class="hljs-number">.1</span> (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1019</span>)<br>grpc.(*Server).handleStream (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1784</span>) <br>grpc.(*Server).processStreamingRPC (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">1663</span>)<br>routeguide._RouteGuide_RouteChat_Handler (route_guide_grpc.pb.<span class="hljs-keyword">go</span>:<span class="hljs-number">316</span>) <br>main.(*routeGuideServer).RouteChat (server.<span class="hljs-keyword">go</span>:<span class="hljs-number">125</span>) <br>routeguide.(*routeGuideRouteChatServer).Recv (route_guide_grpc.pb.<span class="hljs-keyword">go</span>:<span class="hljs-number">335</span>) <br>grpc.(*serverStream).RecvMsg (stream.<span class="hljs-keyword">go</span>:<span class="hljs-number">1717</span>) <br>grpc.recv (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">833</span>) <br>grpc.recvAndDecompress (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">753</span>) <br>grpc.(*parser).recvMsg (rpc_util.<span class="hljs-keyword">go</span>:<span class="hljs-number">631</span>) <br>transport.(*Stream).Read (transport.<span class="hljs-keyword">go</span>:<span class="hljs-number">509</span>)<br>io.ReadFull (io.<span class="hljs-keyword">go</span>:<span class="hljs-number">354</span>)<br>io.ReadAtLeast (io.<span class="hljs-keyword">go</span>:<span class="hljs-number">335</span>) <br>transport.(*transportReader).Read (transport.<span class="hljs-keyword">go</span>:<span class="hljs-number">530</span>) <br>transport.(*http2Server).operateHeaders.func5 (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">623</span>)<br>transport.(*http2Server).updateWindow (http2_server.<span class="hljs-keyword">go</span>:<span class="hljs-number">731</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Server)</span></span> updateWindow(s *Stream, n <span class="hljs-type">uint32</span>) &#123;<br><span class="hljs-keyword">if</span> w := s.fc.onRead(n); w &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-comment">// 消费数据的数据超过接收数据的速度，可以适当增加window值</span><br>t.controlBuf.put(&amp;outgoingWindowUpdate&#123;streamID: s.id,<br>increment: w,<br>&#125;)<br>&#125;<br>&#125;<br><br>transport.(*inFlow).onRead (flowcontrol.<span class="hljs-keyword">go</span>:<span class="hljs-number">198</span>)<br><span class="hljs-comment">// 当应用开始消费数据时，onRead返回window值，发送window_update给发送方</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *inFlow)</span></span> onRead(n <span class="hljs-type">uint32</span>) <span class="hljs-type">uint32</span> &#123;<br>f.mu.Lock()<br><span class="hljs-keyword">if</span> f.pendingData == <span class="hljs-number">0</span> &#123;<br>f.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>    <span class="hljs-comment">// 减少待消费数据量</span><br>f.pendingData -= n<br><span class="hljs-keyword">if</span> n &gt; f.delta &#123; <span class="hljs-comment">// 如果是首次，那么delta就是提前调整时需要window update的增量，此操作为了不断平衡之前的delta。</span><br>n -= f.delta <span class="hljs-comment">// n &gt; delta 说明增量已经平衡好了，无需增量也可以，到当前最佳的window</span><br>f.delta = <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>f.delta -= n <span class="hljs-comment">// n &lt;= delta 增量delta减少，以进行下一轮平衡</span><br>n = <span class="hljs-number">0</span><br>&#125;<br>f.pendingUpdate += n <span class="hljs-comment">// 增加待window update数据量</span><br><span class="hljs-keyword">if</span> f.pendingUpdate &gt;= f.limit/<span class="hljs-number">4</span> &#123; <span class="hljs-comment">// 如果超过了limit/4，则需要window update 避免频繁进行window update</span><br>wu := f.pendingUpdate<br>f.pendingUpdate = <span class="hljs-number">0</span><br>f.mu.Unlock()<br><span class="hljs-keyword">return</span> wu<br>&#125;<br>f.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，stream level 流量控制也是双向，client端也是如此。</p><h2 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h2><p>stream level 流量控制从考虑应用消费stream中数据的速度出发，那么流量控制是一个不断平衡到最佳速度的一个过程。</p><p>也可以理解成，stream level 流量控制是一个不断试错的过程，grpc引入<code>delta</code>是作为一个幅度调整，先评估一个较大的值，然后不断平衡成小的值，而这个平衡幅度就是每次数据的大小<code>n</code>，同时又不断积累<code>pendingUpdate</code>，达到一定量(<code>limit/4</code>)时，进行<code>window update</code>更新<code>n</code>，然后进入新一轮提前调整。</p><p><img src="/posts/d8532d4941a7/image-20240409030333839.png" alt="image-20240409030333839"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]: <a href="https://datatracker.ietf.org/doc/html/rfc7540">RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP&#x2F;2) (ietf.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.Error-detail</title>
      <link href="/posts/0efd3da8069a/"/>
      <url>/posts/0efd3da8069a/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc提供用于自定义错误信息的接口<code>protoiface.MessageV1</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MessageV1 <span class="hljs-keyword">interface</span> &#123;<br>Reset()<br>String() <span class="hljs-type">string</span><br>ProtoMessage()<br>&#125;<br></code></pre></td></tr></table></figure><p>grpc的依赖包<code>google.golang.org/genproto/googleapis/rpc/errdetails</code>已经定义好一些模型。</p><p>error_details.pb.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">ErrorInfo <span class="hljs-comment">// 错误信息 原因 域 元数据</span><br>RetryInfo <span class="hljs-comment">// 重试错误 包含重试同一个请求之间的等待时间</span><br>DebugInfo <span class="hljs-comment">// 调试信息 包含错误发生的堆栈位置， 错误详情</span><br>QuotaFailure <span class="hljs-comment">// 配额错误 包含一个违反配额的信息</span><br>PreconditionFailure <span class="hljs-comment">// 前提条件错误 </span><br>BadRequest<span class="hljs-comment">// 请求失败 侧重于请求语法错误，如使用错误的请求方法 包含了哪些错误字段</span><br>RequestInfo<span class="hljs-comment">// 请求详情 包含请求id,服务器需要的元数据（超时，加密方法，压缩方法）</span><br>ResourceInfo <span class="hljs-comment">// 资源详情 资源类型 资源名称 资源所有者 描述</span><br>Help<span class="hljs-comment">// 帮助 提供指向文档或可操作的链接</span><br>LocalizedMessage<span class="hljs-comment">// 本地化错误信息 包含本地（locale cn en-US）错误信息</span><br>QuotaFailure_Violation<br>PreconditionFailure_Violation<br>BadRequest_FieldViolation<br>Help_Link<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>服务器：</p><p>grpc提供了<code>status</code>处理状态：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">st := status.New(codes.ResourceExhausted, <span class="hljs-string">&quot;Request limit exceeded.&quot;</span>)<br></code></pre></td></tr></table></figure><p>以及可以自定义状态详情的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">ds, err := st.WithDetails(<br>&amp;epb.QuotaFailure&#123;<br>Violations: []*epb.QuotaFailure_Violation&#123;&#123;<br>Subject:     fmt.Sprintf(<span class="hljs-string">&quot;message:%s&quot;</span>, request.Message),<br>Description: <span class="hljs-string">&quot;Limit one echo per message&quot;</span>,<br>&#125;&#125;,<br>&#125;, <br>)<br></code></pre></td></tr></table></figure><p>客户端：</p><p>获取错误，并输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">resp, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>s := status.Convert(err)<br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> s.Details() &#123;<br><span class="hljs-keyword">switch</span> info := d.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *epb.QuotaFailure:<br>log.Printf(<span class="hljs-string">&quot;Quota failure: %s&quot;</span>, info)<br><span class="hljs-keyword">default</span>:<br>log.Printf(<span class="hljs-string">&quot;Unexpected type: %s&quot;</span>, info)<br>&#125;<br>&#125;<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>例子：一个请求参数只能访问一次，否则返回资源耗尽错误<code>ResourceExhausted</code>，并返回错误详情。</p><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>epb <span class="hljs-string">&quot;google.golang.org/genproto/googleapis/rpc/errdetails&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>mu    sync.Mutex<br>count <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> <span class="hljs-comment">// 用于统计资源使用次数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br>s.mu.Lock()<br><span class="hljs-keyword">defer</span> s.mu.Unlock()<br><br>s.count[request.Message]++<br><span class="hljs-keyword">if</span> s.count[request.Message] &gt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// 资源用尽了</span><br>st := status.New(codes.ResourceExhausted, <span class="hljs-string">&quot;Request limit exceeded.&quot;</span>)<br>ds, err := st.WithDetails(<br>&amp;epb.QuotaFailure&#123;<br>Violations: []*epb.QuotaFailure_Violation&#123;&#123;<br>Subject:     fmt.Sprintf(<span class="hljs-string">&quot;message:%s&quot;</span>, request.Message),<br>Description: <span class="hljs-string">&quot;Limit one echo per message&quot;</span>,<br>&#125;&#125;,<br>&#125;,<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, st.Err()<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ds.Err()<br>&#125;<br><br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br>s := grpc.NewServer()<br><br>pb.RegisterEchoServer(s, &amp;server&#123;count: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;&#125;&#125;)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;faled to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br>epb <span class="hljs-string">&quot;google.golang.org/genproto/googleapis/rpc/errdetails&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> address = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-comment">// 创建连接</span><br>conn, err := grpc.Dial(*address, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 创建客户端</span><br>client := pb.NewEchoClient(conn)<br>callUnaryEcho(client, <span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(client pb.EchoClient, message <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br>resp, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 错误转换</span><br>s := status.Convert(err)<br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> s.Details() &#123;<br><span class="hljs-keyword">switch</span> info := d.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *epb.QuotaFailure:<br>log.Printf(<span class="hljs-string">&quot;Quota failure: %s&quot;</span>, info)<br><span class="hljs-keyword">default</span>:<br>log.Printf(<span class="hljs-string">&quot;Unexpected type: %s&quot;</span>, info)<br>&#125;<br>&#125;<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;UnaryEcho: %v&quot;</span>, resp.Message)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]: <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/error_details">grpc-go&#x2F;examples&#x2F;features&#x2F;error_details at master · grpc&#x2F;grpc-go (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.Encryption</title>
      <link href="/posts/cef707177d92/"/>
      <url>/posts/cef707177d92/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文是grpc加密通信的三个案例，<code>TLS</code>、<code>mTLS</code>和<code>ALTS</code>。</p><h1 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h1><p>TLS(<code>Transport Layer Security</code>) 传输层安全协议，其前身就是安全套接层<code>SSL</code>(Secure Sockets Layer)。</p><p>TLS使用了<code>X.509</code>认证。</p><p>TLS是一种常用的端到端通信安全的加密协议。</p><p>一般会有3个证书：</p><ul><li><code>server_cert.pem</code> 该证书包含了服务器公钥。</li><li><code>server_key.pem</code> 包含了服务器私钥。</li><li><code>ca_cert.pem</code> 包含了可以验证服务器证书的证书。</li></ul><p>在服务器端，可以使用<code>credentials.NewServerTLSFromFile</code>创建服务器凭证，即<code>server.cert.pem</code>和<code>server_key.pem</code>。</p><p>在客户端，可以使用<code>credential.NewClientTLSFrmFile</code>创建客户端凭证，使用的证书时<code>ca_cert.pem</code>，且例子中使用的是<code>x.test.example.com</code>是创建证书时指定的服务器名。</p><p>创建完凭证了后，服务器在启动时加载<code>grpc.Creds</code>到<code>serverOption</code>；客户端可以在连接服务器时，加载<code>grpc.WithTransportCredentials</code>-&gt;<code>DialOption</code>。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 创建tls凭证</span><br>creds, err := credentials.NewServerTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create credentials: %v&quot;</span>, err)<br>&#125;<br><br>s := grpc.NewServer(grpc.Creds(creds))<br><br>pb.RegisterEchoServer(s, &amp;server&#123;&#125;)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;faled to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> address = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 创建tls凭证</span><br>creds, err := credentials.NewClientTLSFromFile(data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>), <span class="hljs-string">&quot;x.test.example.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to load credentials: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 创建连接</span><br>conn, err := grpc.Dial(*address, grpc.WithTransportCredentials(creds))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 创建客户端</span><br>client := pb.NewEchoClient(conn)<br>callUnaryEcho(client, <span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(client pb.EchoClient, message <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br>resp, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.UnaryEcho(_) = _, %v: &quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;UnaryEcho: %v&quot;</span>, resp.Message)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="mTLS"><a href="#mTLS" class="headerlink" title="mTLS"></a>mTLS</h1><p>mTLS(mutual TLS)，即互TLS， 客户端和服务器互相认证对方。</p><p>在普通TLS中，服务器提供服务器证书给客户端验证，客户端通过使用一个或多个可信任CA文件对服务器进行身份验证。</p><p>在mTLS中，服务器有一个受信任的CA文件列表，用于验证客户端提供的证书，客户端还向服务器通过客户端证书以进行身份验证。</p><p>那么需要使用6个证书：</p><ul><li><code>server_cert.pem</code> 服务器公钥</li><li><code>server_key.pem</code> 服务器私钥</li><li><code>server_ca_cert.pem</code> 验证服务器证书的证书 （颁发机构的证书）</li><li><code>client_cert.pem</code> 客户端公钥</li><li><code>client_key.pem</code> 客户端私钥</li><li><code>clinet_ca_cert.pem</code> 验证客户端证书的证书 （颁发机构的证书）</li></ul><p>服务器：</p><p>读取服务器证书，公钥和私钥：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">creds, err := tls.LoadX509KeyPair(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>))<br></code></pre></td></tr></table></figure><p>读取客户端提供的证书，用于验证客户端证书的证书：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">ca := x509.NewCertPool()<br><span class="hljs-comment">// 读取客户端证书</span><br>caFilePath := data.Path(<span class="hljs-string">&quot;x509/client_ca_cert.pem&quot;</span>)<br>caBytes, err := os.ReadFile(caFilePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to read ca cert %q: %v&quot;</span>, caFilePath, err)<br>&#125;<br><span class="hljs-comment">// 添加客户端证书</span><br><span class="hljs-keyword">if</span> ok := ca.AppendCertsFromPEM(caBytes); !ok &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to parse %q&quot;</span>, caFilePath)<br>&#125;<br></code></pre></td></tr></table></figure><p>tls配置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">tlsConfig := &amp;tls.Config&#123;<br>ClientAuth:   tls.RequireAndVerifyClientCert, <span class="hljs-comment">// 需求并验证客户端凭证</span><br>Certificates: []tls.Certificate&#123;creds&#125;,       <span class="hljs-comment">// tls 证书相关</span><br>ClientCAs:    ca,                             <span class="hljs-comment">// 需要验证的客户端凭证</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用tls配置创建grpc服务器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">s := grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConfig)))<br></code></pre></td></tr></table></figure><p>客户端：</p><p>与服务器类似，只不过使用的是服务器的证书。</p><p>读取客户端的证书，私钥和公钥：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">cert, err := tls.LoadX509KeyPair(data.Path(<span class="hljs-string">&quot;x509/client_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/client_key.pem&quot;</span>))<br></code></pre></td></tr></table></figure><p>读取服务器提供的证书，用于验证服务器证书的证书：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建凭证池</span><br>ca := x509.NewCertPool()<br><span class="hljs-comment">// 读取客户端凭证</span><br>caFilePath := data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>)<br>caBytes, err := os.ReadFile(caFilePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to read ca cert %q: %v&quot;</span>, caFilePath, err)<br>&#125;<br><span class="hljs-comment">// 添加客户端凭证到凭证池</span><br><span class="hljs-keyword">if</span> ok := ca.AppendCertsFromPEM(caBytes); !ok &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to parse %q&quot;</span>, caFilePath)<br>&#125;<br></code></pre></td></tr></table></figure><p>tls配置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 配置tls</span><br>tlsConfig := &amp;tls.Config&#123;<br>ServerName:   <span class="hljs-string">&quot;x.test.example.com&quot;</span>,    <span class="hljs-comment">// 验证返回证书上的主机名，除非给出 InsecureSkipVerify。它也包含在客户端的握手中以支持虚拟主机，除非它是 IP 地址。</span><br>Certificates: []tls.Certificate&#123;cert&#125;, <span class="hljs-comment">// 客户端证书</span><br>RootCAs:      ca,                      <span class="hljs-comment">// 定义客户端在验证服务器证书时使用的一组根证书颁发机构。如果 RootCAs 为 nil，则 TLS 使用主机的根 CA 集。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用tls配置进行连接：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建连接</span><br>conn, err := grpc.Dial(*address, grpc.WithTransportCredentials(credentials.NewTLS(tlsConfig)))<br></code></pre></td></tr></table></figure><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;crypto/tls&quot;</span><br><span class="hljs-string">&quot;crypto/x509&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 创建tls凭证</span><br>creds, err := tls.LoadX509KeyPair(data.Path(<span class="hljs-string">&quot;x509/server_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/server_key.pem&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create credentials: %v&quot;</span>, err)<br>&#125;<br><br>ca := x509.NewCertPool()<br><span class="hljs-comment">// 读取客户端证书</span><br>caFilePath := data.Path(<span class="hljs-string">&quot;x509/client_ca_cert.pem&quot;</span>)<br>caBytes, err := os.ReadFile(caFilePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to read ca cert %q: %v&quot;</span>, caFilePath, err)<br>&#125;<br><span class="hljs-comment">// 添加客户端证书</span><br><span class="hljs-keyword">if</span> ok := ca.AppendCertsFromPEM(caBytes); !ok &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to parse %q&quot;</span>, caFilePath)<br>&#125;<br><br>tlsConfig := &amp;tls.Config&#123;<br>ClientAuth:   tls.RequireAndVerifyClientCert, <span class="hljs-comment">// 需求并验证客户端凭证</span><br>Certificates: []tls.Certificate&#123;creds&#125;,       <span class="hljs-comment">// tls 证书相关</span><br>ClientCAs:    ca,                             <span class="hljs-comment">// 需要验证的客户端凭证</span><br>&#125;<br><br>s := grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConfig)))<br><br>pb.RegisterEchoServer(s, &amp;server&#123;&#125;)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;faled to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;crypto/tls&quot;</span><br><span class="hljs-string">&quot;crypto/x509&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials&quot;</span><br><span class="hljs-string">&quot;grpc-learn/data&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> address = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(client pb.EchoClient, message <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancelFunc()<br><br>resp, err := client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.UnaryEcho(_) = _, %v: &quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;UnaryEcho: %v&quot;</span>, resp.Message)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 创建tls客户端凭证</span><br>cert, err := tls.LoadX509KeyPair(data.Path(<span class="hljs-string">&quot;x509/client_cert.pem&quot;</span>), data.Path(<span class="hljs-string">&quot;x509/client_key.pem&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to load client cert: %v&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 创建凭证池</span><br>ca := x509.NewCertPool()<br><span class="hljs-comment">// 读取客户端凭证</span><br>caFilePath := data.Path(<span class="hljs-string">&quot;x509/ca_cert.pem&quot;</span>)<br>caBytes, err := os.ReadFile(caFilePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to read ca cert %q: %v&quot;</span>, caFilePath, err)<br>&#125;<br><span class="hljs-comment">// 添加客户端凭证到凭证池</span><br><span class="hljs-keyword">if</span> ok := ca.AppendCertsFromPEM(caBytes); !ok &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to parse %q&quot;</span>, caFilePath)<br>&#125;<br><br><span class="hljs-comment">// 配置tls</span><br>tlsConfig := &amp;tls.Config&#123;<br>ServerName:   <span class="hljs-string">&quot;x.test.example.com&quot;</span>,    <span class="hljs-comment">// 验证返回证书上的主机名，除非给出 InsecureSkipVerify。它也包含在客户端的握手中以支持虚拟主机，除非它是 IP 地址。</span><br>Certificates: []tls.Certificate&#123;cert&#125;, <span class="hljs-comment">// 客户端证书</span><br>RootCAs:      ca,                      <span class="hljs-comment">// 定义客户端在验证服务器证书时使用的一组根证书颁发机构。如果 RootCAs 为 nil，则 TLS 使用主机的根 CA 集。</span><br>&#125;<br><br><span class="hljs-comment">// 创建连接</span><br>conn, err := grpc.Dial(*address, grpc.WithTransportCredentials(credentials.NewTLS(tlsConfig)))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 创建客户端</span><br>client := pb.NewEchoClient(conn)<br>callUnaryEcho(client, <span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ALTS"><a href="#ALTS" class="headerlink" title="ALTS"></a>ALTS</h1><blockquote><p>注意：ALTS只能在GCP（Google Cloud Platform，谷歌云原生平台）上使用。<a href="https://groups.google.com/forum/#!forum/grpc-io">更多信息</a></p></blockquote><p>ALTS是谷歌的应用层传输安全，支持互相认证和传输加密。</p><p>服务器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">altsTC := alts.NewServerCreds(alts.DefaultServerOptions())<br>s := grpc.NewServer(grpc.Creds(altsTC))<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">altsTC := alts.NewClientCreds(alts.DefaultClientOptions())<br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(altsTC))<br></code></pre></td></tr></table></figure><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Copyright 2018 gRPC authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// Binary server is an example server.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/alts&quot;</span><br><br>pb <span class="hljs-string">&quot;google.golang.org/grpc/examples/features/proto/echo&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> ecServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *ecServer)</span></span> UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: req.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// Create alts based credential.</span><br>altsTC := alts.NewServerCreds(alts.DefaultServerOptions())<br><br>s := grpc.NewServer(grpc.Creds(altsTC))<br><br><span class="hljs-comment">// Register EchoServer on the server.</span><br>pb.RegisterEchoServer(s, &amp;ecServer&#123;&#125;)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Copyright 2018 gRPC authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// Binary client is an example client.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/alts&quot;</span><br>ecpb <span class="hljs-string">&quot;google.golang.org/grpc/examples/features/proto/echo&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">callUnaryEcho</span><span class="hljs-params">(client ecpb.EchoClient, message <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>resp, err := client.UnaryEcho(ctx, &amp;ecpb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;client.UnaryEcho(_) = _, %v: &quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;UnaryEcho: &quot;</span>, resp.Message)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// Create alts based credential.</span><br>altsTC := alts.NewClientCreds(alts.DefaultClientOptions())<br><br><span class="hljs-comment">// Set up a connection to the server.</span><br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(altsTC))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// Make a echo client and send an RPC.</span><br>rgc := ecpb.NewEchoClient(conn)<br>callUnaryEcho(rgc, <span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]: <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/encryption">grpc-go&#x2F;examples&#x2F;features&#x2F;encryption at master · grpc&#x2F;grpc-go (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.Debugging</title>
      <link href="/posts/6fc2adb3fd94/"/>
      <url>/posts/6fc2adb3fd94/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc提供debug工具<code>Channelz</code>，该工具提供了有关连接的全部运行时信息。</p><p>它的目的时帮助实时调试程序，可以快速定位grpc调用出现问题的原因。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>客户端和服务器都要进行注册<code>channelz</code>服务。</p><p>客户端：</p><p>客户端需要单独启动服务器，用于注册channelz服务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建搭载channelz服务的服务器</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, *addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> lis.Close()<br>s := grpc.NewServer()<br><span class="hljs-comment">// 注册channelz服务到服务器</span><br>service.RegisterChannelzServiceToServer(s)<br><span class="hljs-keyword">go</span> s.Serve(lis)<br><span class="hljs-keyword">defer</span> s.Stop()<br></code></pre></td></tr></table></figure><p>服务器：</p><p>同样的，服务器也要一个服务器用于注册channelz服务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:50051&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> lis.Close()<br><br>s := grpc.NewServer()<br><span class="hljs-comment">// 注册channelz服务</span><br>service.RegisterChannelzServiceToServer(s)<br><span class="hljs-keyword">go</span> s.Serve(lis)<br><span class="hljs-keyword">defer</span> s.Stop()<br></code></pre></td></tr></table></figure><p>可以打开日志进行调试，在运行环境变量中加入环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">GRPC_GO_LOG_VERBOSITY_LEVEL=99<br>GRPC_GO_LOG_SEVERITY_LEVEL=info<br></code></pre></td></tr></table></figure><p>该变量可以使得出，控制台输出grpc日志。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>显然，<code>channelz</code>是一个内部定义好的服务。</p><p>service.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> serverImpl <span class="hljs-keyword">struct</span> &#123;<br>channelzgrpc.UnimplementedChannelzServer<br>&#125;<br></code></pre></td></tr></table></figure><p>它是实现了接口<code>channelzServer</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ChannelzServer <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// Gets all root channels (i.e. channels the application has directly</span><br><span class="hljs-comment">// created). This does not include subchannels nor non-top level channels.</span><br>    <span class="hljs-comment">// 获取所有根channel</span><br>GetTopChannels(context.Context, *GetTopChannelsRequest) (*GetTopChannelsResponse, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Gets all servers that exist in the process.</span><br>    <span class="hljs-comment">// 获取所有服务器</span><br>GetServers(context.Context, *GetServersRequest) (*GetServersResponse, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Returns a single Server, or else a NOT_FOUND code.</span><br>    <span class="hljs-comment">// 获取单个服务器</span><br>GetServer(context.Context, *GetServerRequest) (*GetServerResponse, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Gets all server sockets that exist in the process.</span><br>    <span class="hljs-comment">// 获取服务器的socket</span><br>GetServerSockets(context.Context, *GetServerSocketsRequest) (*GetServerSocketsResponse, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Returns a single Channel, or else a NOT_FOUND code.</span><br>    <span class="hljs-comment">// 获取单个channel</span><br>GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Returns a single Subchannel, or else a NOT_FOUND code.</span><br>    <span class="hljs-comment">// 获取子channel</span><br>GetSubchannel(context.Context, *GetSubchannelRequest) (*GetSubchannelResponse, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Returns a single Socket or else a NOT_FOUND code.</span><br>    <span class="hljs-comment">// 获取单个socket</span><br>GetSocket(context.Context, *GetSocketRequest) (*GetSocketResponse, <span class="hljs-type">error</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>返回的是服务器运行时的详细信息。</p><p>实现一个客户端对该服务进行访问即可。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>客户端向指定服务器负载均衡发出1000个rpc调用，负载均衡使用了轮询策略，且每个rpc调用都有者150ms的超时设置。</p><p>服务器则拥有3个服务器监听三个端口，其中一个服务器设置了100ms~200ms的延迟。</p><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/channelz/service&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/resolver&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/resolver/manual&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 创建搭载channelz服务的服务器</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, *addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> lis.Close()<br>s := grpc.NewServer()<br>service.RegisterChannelzServiceToServer(s)<br><span class="hljs-keyword">go</span> s.Serve(lis)<br><span class="hljs-keyword">defer</span> s.Stop()<br><br><span class="hljs-comment">//  手动创建resolver和dial</span><br>r := manual.NewBuilderWithScheme(<span class="hljs-string">&quot;whatever&quot;</span>)<br><span class="hljs-keyword">var</span> opts = []grpc.DialOption&#123;<br>grpc.WithTransportCredentials(insecure.NewCredentials()),<br>grpc.WithResolvers(r),<br>grpc.WithDefaultServiceConfig(<span class="hljs-string">`&#123;&quot;loadBalancingPolicy&quot;:&quot;round_robin&quot;&#125;`</span>),<br>&#125;<br><br>conn, err := grpc.Dial(r.Scheme()+<span class="hljs-string">&quot;:///test.server&quot;</span>, opts...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect server: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 手动提供解析地址</span><br>r.UpdateState(resolver.State&#123;Addresses: []resolver.Address&#123;&#123;Addr: <span class="hljs-string">&quot;:10001&quot;</span>&#125;, &#123;Addr: <span class="hljs-string">&quot;:10002&quot;</span>&#125;, &#123;Addr: <span class="hljs-string">&quot;:10003&quot;</span>&#125;&#125;&#125;)<br>c := pb.NewEchoClient(conn)<br><br><span class="hljs-comment">// 调用并打印响应</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>ctx, cancelFunc := context.WithTimeout(context.Background(), <span class="hljs-number">150</span>*time.Millisecond)<br><span class="hljs-keyword">defer</span> cancelFunc()<br>r, err := c.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: <span class="hljs-string">&quot;hello&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;could not echo: %v&quot;</span>, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;echo: %v&quot;</span>, r.Message)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 等待用户退出程序 ctrl+c</span><br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/channelz/service&quot;</span><br>    <span class="hljs-string">&quot;google.golang.org/grpc/reflection&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>ports = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;:10001&quot;</span>, <span class="hljs-string">&quot;:10002&quot;</span>, <span class="hljs-string">&quot;:10003&quot;</span>&#125;<br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> slowServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *slowServer)</span></span> UnaryEcho(ctx context.Context, request *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 延迟100~200ms</span><br>time.Sleep(time.Duration(<span class="hljs-number">100</span>+rand.Intn(<span class="hljs-number">100</span>)) * time.Millisecond)<br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: request.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:50051&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> lis.Close()<br><br>s := grpc.NewServer()<br><span class="hljs-comment">// 注册channelz服务</span><br>service.RegisterChannelzServiceToServer(s)<br>    <span class="hljs-comment">// 注册反射 使用grpcurl工具调试</span><br>reflection.Register(s)<br><span class="hljs-keyword">go</span> s.Serve(lis)<br><span class="hljs-keyword">defer</span> s.Stop()<br><br><span class="hljs-comment">// 启动3个服务</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, ports[i])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> lis.Close()<br><br>s := grpc.NewServer()<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">2</span> &#123;<br>pb.RegisterEchoServer(s, &amp;slowServer&#123;&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>pb.RegisterEchoServer(s, &amp;server&#123;&#125;)<br>&#125;<br><span class="hljs-keyword">go</span> s.Serve(lis)<br>&#125;<br><br><span class="hljs-comment">// 等待用户退出程序</span><br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，客户端输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs sh">2024/04/06 20:50:52 INFO: [core] [Server <span class="hljs-comment">#1] Server created</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] Channel created</span><br>2024/04/06 20:50:52 INFO: [core] [Server <span class="hljs-comment">#1 ListenSocket #3] ListenSocket created</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] original dial target is: &quot;whatever:///test.server&quot;</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] parsed dial target is: resolver.Target&#123;URL:url.URL&#123;Scheme:&quot;whatever&quot;, Opaque:&quot;&quot;, User:(*url.Userinfo)(nil), Host:&quot;&quot;, Path:&quot;/test.server&quot;, RawPath:&quot;&quot;, OmitHost:false, ForceQuery:false, RawQuery:&quot;&quot;, Fragment:&quot;&quot;, RawFragment:&quot;&quot;&#125;&#125;</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] Channel authority set to &quot;test.server&quot;</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] Channel exiting idle mode</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] Resolver state updated: &#123;</span><br>  <span class="hljs-string">&quot;Addresses&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;Addr&quot;</span>: <span class="hljs-string">&quot;:10001&quot;</span>,<br>      <span class="hljs-string">&quot;ServerName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;Attributes&quot;</span>: null,<br>      <span class="hljs-string">&quot;BalancerAttributes&quot;</span>: null,<br>      <span class="hljs-string">&quot;Metadata&quot;</span>: null<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;Addr&quot;</span>: <span class="hljs-string">&quot;:10002&quot;</span>,<br>      <span class="hljs-string">&quot;ServerName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;Attributes&quot;</span>: null,<br>      <span class="hljs-string">&quot;BalancerAttributes&quot;</span>: null,<br>      <span class="hljs-string">&quot;Metadata&quot;</span>: null<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;Addr&quot;</span>: <span class="hljs-string">&quot;:10003&quot;</span>,<br>      <span class="hljs-string">&quot;ServerName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;Attributes&quot;</span>: null,<br>      <span class="hljs-string">&quot;BalancerAttributes&quot;</span>: null,<br>      <span class="hljs-string">&quot;Metadata&quot;</span>: null<br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;Endpoints&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;Addresses&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;Addr&quot;</span>: <span class="hljs-string">&quot;:10001&quot;</span>,<br>          <span class="hljs-string">&quot;ServerName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-string">&quot;Attributes&quot;</span>: null,<br>          <span class="hljs-string">&quot;BalancerAttributes&quot;</span>: null,<br>          <span class="hljs-string">&quot;Metadata&quot;</span>: null<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;Attributes&quot;</span>: null<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;Addresses&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;Addr&quot;</span>: <span class="hljs-string">&quot;:10002&quot;</span>,<br>          <span class="hljs-string">&quot;ServerName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-string">&quot;Attributes&quot;</span>: null,<br>          <span class="hljs-string">&quot;BalancerAttributes&quot;</span>: null,<br>          <span class="hljs-string">&quot;Metadata&quot;</span>: null<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;Attributes&quot;</span>: null<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;Addresses&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;Addr&quot;</span>: <span class="hljs-string">&quot;:10003&quot;</span>,<br>          <span class="hljs-string">&quot;ServerName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-string">&quot;Attributes&quot;</span>: null,<br>          <span class="hljs-string">&quot;BalancerAttributes&quot;</span>: null,<br>          <span class="hljs-string">&quot;Metadata&quot;</span>: null<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;Attributes&quot;</span>: null                                                                                                                           0003<span class="hljs-string">&quot;, ServerName: &quot;</span><span class="hljs-string">&quot;, &#125;] &lt;nil&gt;&#125;] &lt;nil&gt; &lt;nil&gt;&#125; &lt;nil&gt;&#125;: &quot;</span>:10001<span class="hljs-string">&quot;, ServerName: &quot;</span><span class="hljs-string">&quot;, &#125;] &lt;nil&gt;&#125; &#123;[&#123;Addr: &quot;</span>:10002<span class="hljs-string">&quot;, ServerName: &quot;</span><span class="hljs-string">&quot;, &#125;] &lt;nil&gt;&#125; &#123;[&#123;Addr: &quot;</span>:10<br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #4] Subchannel created</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #5] Subchannel created</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #4] Subchannel Connectivity change to CONNECTING</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #6] Subchannel created</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #5] Subchannel Connectivity change to CONNECTING</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #6] Subchannel picks a new address &quot;:10003&quot; to connect</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #4] Subchannel picks a new address &quot;:10001&quot; to connect</span><br>2024/04/06 20:50:52 INFO: [balancer] base.baseBalancer: handle SubConn state change: 0xc000096090, CONNECTING<br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #5] Subchannel Connectivity change to READY</span><br>2024/04/06 20:50:52 INFO: [balancer] base.baseBalancer: handle SubConn state change: 0xc0001ceae0, READY<br>2024/04/06 20:50:52 INFO: [roundrobin] roundrobinPicker: Build called with info: &#123;map[SubConn(<span class="hljs-built_in">id</span>:5):&#123;&#123;Addr: <span class="hljs-string">&quot;:10002&quot;</span>, ServerName: <span class="hljs-string">&quot;&quot;</span>, &#125;&#125;]&#125;<br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2] Channel Connectivity change to READY</span><br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #6] Subchannel Connectivity change to READY</span><br>2024/04/06 20:50:52 INFO: [balancer] base.baseBalancer: handle SubConn state change: 0xc000096090, READY<br>2024/04/06 20:50:52 INFO: [core] [Channel <span class="hljs-comment">#2 SubChannel #4] Subchannel Connectivity change to READY</span><br>2024/04/06 20:50:52 INFO: [roundrobin] roundrobinPicker: Build called with info: &#123;map[SubConn(<span class="hljs-built_in">id</span>:6):&#123;&#123;Addr: <span class="hljs-string">&quot;:10003&quot;</span>, ServerName: <span class="hljs-string">&quot;&quot;</span>, &#125;&#125; SubConn(<span class="hljs-built_in">id</span>:5):&#123;&#123;Addr: <span class="hljs-string">&quot;:10002&quot;</span>, ServerName: <span class="hljs-string">&quot;&quot;</span>, &#125;&#125;]&#125;<br>2024/04/06 20:50:52 INFO: [balancer] base.baseBalancer: handle SubConn state change: 0xc0001cea20, READY<br>2024/04/06 20:50:52 INFO: [roundrobin] roundrobinPicker: Build called with info: &#123;map[SubConn(<span class="hljs-built_in">id</span>:6):&#123;&#123;Addr: <span class="hljs-string">&quot;:10003&quot;</span>, ServerName: <span class="hljs-string">&quot;&quot;</span>, &#125;&#125; SubConn(<span class="hljs-built_in">id</span>:4):&#123;&#123;Addr: <span class="hljs-string">&quot;:10001&quot;</span>, ServerName: <span class="hljs-string">&quot;&quot;</span>, &#125;&#125; SubConn(<span class="hljs-built_in">id</span>:5):&#123;&#123;Addr: <span class="hljs-string">&quot;:10002&quot;</span>, ServerName: <span class="hljs-string">&quot;&quot;</span>, &#125;&#125;]&#125;<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:52 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:53 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:54 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:55 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:56 could not <span class="hljs-built_in">echo</span>: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br>2024/04/06 20:50:56 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:56 <span class="hljs-built_in">echo</span>: hello<br>2024/04/06 20:50:56 <span class="hljs-built_in">echo</span>: hello<br>...<br></code></pre></td></tr></table></figure><p>可以使用第三方工具进行调试，第三方工具其实就是实现了对<code>channelz</code>服务进行访问。</p><h2 id="grpc-zpages"><a href="#grpc-zpages" class="headerlink" title="grpc-zpages"></a>grpc-zpages</h2><p>这是grpc官方的可视化调试工具: <a href="https://github.com/grpc/grpc-experiments/tree/master/gdebug">grpc-experiments&#x2F;gdebug at master · grpc&#x2F;grpc-experiments (github.com)</a></p><p>由于多年没维护，现已不再适用。</p><h2 id="channelzcli"><a href="#channelzcli" class="headerlink" title="channelzcli"></a>channelzcli</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go install github.com/kazegusuri/channelzcli@latest<br></code></pre></td></tr></table></figure><p>使用文档：<a href="https://github.com/kazegusuri/channelzcli">kazegusuri&#x2F;channelzcli: channelzcli is a command line tool for gRPC channelz service. (github.com)</a></p><p>注意将<code>GOPATH/bin</code>设置成环境变量。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>列表显示</p><p>可以显示<code>channel</code>，<code>server</code>的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ channelzcli -k --addr localhost:50051 list server<br>ID      Name    LocalAddr       Calls   Success Fail    LastCall<br>1       &lt;none&gt;  [::]:50051      19      18      0       0ms<br>3       &lt;none&gt;  [::]:10001      333     333     0       22m<br>5       &lt;none&gt;  [::]:10002      334     334     0       22m<br>7       &lt;none&gt;  [::]:10003      333     175     158     22m<br></code></pre></td></tr></table></figure><h4 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h4><p>顾名思义，就是输出指定的<code>channel</code>或<code>server</code>的详细信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ channelzcli -k --addr localhost:50051 describe server 7<br>ID:     7<br>Name:<br>Calls:<br>  Started:              333<br>  Succeeded:            175<br>  Failed:               158<br>  LastCallStarted:      2024-04-06 10:55:12.923086 +0000 UTC<br></code></pre></td></tr></table></figure><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><p>显示<code>channel</code>或<code>server</code>详细信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ channelzcli -k --addr localhost:50051 tree server<br>ID: 1, Name:<br>    [Calls]: Started:25 Succeeded:24, Failed:0, Last:0ms<br>    [Socket] ID:2, Name:[::]:50051, RemoteName:, Local IP:::, Port:50051<br><br>ID: 3, Name:<br>    [Calls]: Started:333 Succeeded:333, Failed:0, Last:25m<br>    [Socket] ID:4, Name:[::]:10001, RemoteName:, Local IP:::, Port:10001<br><br>ID: 5, Name:<br>    [Calls]: Started:334 Succeeded:334, Failed:0, Last:25m<br>    [Socket] ID:6, Name:[::]:10002, RemoteName:, Local IP:::, Port:10002<br><br>ID: 7, Name:<br>    [Calls]: Started:333 Succeeded:175, Failed:158, Last:25m<br>    [Socket] ID:8, Name:[::]:10003, RemoteName:, Local IP:::, Port:10003<br></code></pre></td></tr></table></figure><h2 id="grpcurl"><a href="#grpcurl" class="headerlink" title="grpcurl"></a>grpcurl</h2><p>一个更全面的调试工具，不但可以获取grpc服务的信息，还可以进行远程调用。</p><p>官方地址：<a href="https://github.com/fullstorydev/grpcurl">fullstorydev&#x2F;grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers (github.com)</a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest<br></code></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>最简单是开启反射，其次还有<code>proto</code>文件和<code>protoset file</code>。</p><p>开启反射, 这里是在channelz服务上开启反射</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">reflection.Register(s)<br></code></pre></td></tr></table></figure><p>获取服务列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ grpcurl -plaintext localhost:50051 list<br>grpc.channelz.v1.Channelz<br>grpc.reflection.v1.ServerReflection<br>grpc.reflection.v1alpha.ServerReflection<br></code></pre></td></tr></table></figure><p>获取服务上的可调用方法列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ grpcurl -plaintext localhost:50051 list grpc.channelz.v1.Channelz<br>grpc.channelz.v1.Channelz.GetChannel<br>grpc.channelz.v1.Channelz.GetServer<br>grpc.channelz.v1.Channelz.GetServerSockets<br>grpc.channelz.v1.Channelz.GetServers<br>grpc.channelz.v1.Channelz.GetSocket<br>grpc.channelz.v1.Channelz.GetSubchannel<br>grpc.channelz.v1.Channelz.GetTopChannels<br></code></pre></td></tr></table></figure><p>获取服务器信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go">grpcurl -plaintext localhost:<span class="hljs-number">50051</span> grpc.channelz.v1.Channelz/GetServers<br>&#123;<br>  <span class="hljs-string">&quot;server&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;ref&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serverId&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;callsStarted&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>,<br>        <span class="hljs-string">&quot;callsSucceeded&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>,<br>        <span class="hljs-string">&quot;lastCallStartedTimestamp&quot;</span>: <span class="hljs-string">&quot;2024-04-06T12:48:40.293448300Z&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;listenSocket&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;socketId&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br>          <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;[::]:50051&quot;</span><br>        &#125;<br>      ]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;ref&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serverId&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;callsStarted&quot;</span>: <span class="hljs-string">&quot;333&quot;</span>,<br>        <span class="hljs-string">&quot;callsSucceeded&quot;</span>: <span class="hljs-string">&quot;333&quot;</span>,<br>        <span class="hljs-string">&quot;lastCallStartedTimestamp&quot;</span>: <span class="hljs-string">&quot;2024-04-06T12:47:14.268581700Z&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;listenSocket&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;socketId&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>,<br>          <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;[::]:10001&quot;</span><br>        &#125;<br>      ]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;ref&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serverId&quot;</span>: <span class="hljs-string">&quot;5&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;callsStarted&quot;</span>: <span class="hljs-string">&quot;334&quot;</span>,<br>        <span class="hljs-string">&quot;callsSucceeded&quot;</span>: <span class="hljs-string">&quot;334&quot;</span>,<br>        <span class="hljs-string">&quot;lastCallStartedTimestamp&quot;</span>: <span class="hljs-string">&quot;2024-04-06T12:47:14.269089100Z&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;listenSocket&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;socketId&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>,<br>          <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;[::]:10002&quot;</span><br>        &#125;<br>      ]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;ref&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serverId&quot;</span>: <span class="hljs-string">&quot;7&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;callsStarted&quot;</span>: <span class="hljs-string">&quot;333&quot;</span>,<br>        <span class="hljs-string">&quot;callsSucceeded&quot;</span>: <span class="hljs-string">&quot;174&quot;</span>,<br>        <span class="hljs-string">&quot;callsFailed&quot;</span>: <span class="hljs-string">&quot;159&quot;</span>,<br>        <span class="hljs-string">&quot;lastCallStartedTimestamp&quot;</span>: <span class="hljs-string">&quot;2024-04-06T12:47:14.161516300Z&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;listenSocket&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;socketId&quot;</span>: <span class="hljs-string">&quot;8&quot;</span>,<br>          <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;[::]:10003&quot;</span><br>        &#125;<br>      ]<br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面结果可知，端口号为10003的服务器，接收到333个调用，成功了174，失败了159个。</p><p>就可以定位到那个服务器出现了问题。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]: <a href="https://github.com/fullstorydev/grpcurl">fullstorydev&#x2F;grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers (github.com)</a><br>[^2 ]: <a href="https://github.com/kazegusuri/channelzcli">kazegusuri&#x2F;channelzcli: channelzcli is a command line tool for gRPC channelz service. (github.com)</a><br>[^3 ]:  <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/debugging">grpc-go&#x2F;examples&#x2F;features&#x2F;debugging at master · grpc&#x2F;grpc-go (github.com)</a><br>[^4 ]:  <a href="https://grpc.io/blog/a-short-introduction-to-channelz/">A short introduction to Channelz | gRPC</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.Deadline</title>
      <link href="/posts/71f004ec13fb/"/>
      <url>/posts/71f004ec13fb/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Deadline</code>语义上是截止日期的意思，但一般场景下，都叫超时。</p><p>超时是指客户端不愿意超过一定时间来等待服务器的响应。</p><p>在分布式系统架构中，超时尤为重要，何时放弃请求有利于提高服务器的资源利用率和降低延迟。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在客户端的调用时，在上下文中加入超时即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>req := &amp;pb.EchoRequest&#123;Message: message&#125;<br>_, err := c.UnaryEcho(ctx, req)<br></code></pre></td></tr></table></figure><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>grpc的超时设计是基于标准包<code>context</code>。</p><p>客户端</p><p>当发起请求时，进入到该方法组装请求头，并把剩余超时时间（截止时间-现在时间）写入请求头<code>grpc-timeout</code>。</p><p>http2_client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Client)</span></span> createHeaderFields(ctx context.Context, callHdr *CallHdr) ([]hpack.HeaderField, <span class="hljs-type">error</span>) &#123;<br>...<br><span class="hljs-keyword">if</span> dl, ok := ctx.Deadline(); ok &#123;<br><span class="hljs-comment">// Send out timeout regardless its value. The server can detect timeout context by itself.</span><br><span class="hljs-comment">// TODO(mmukhi): Perhaps this field should be updated when actually writing out to the wire.</span><br>        <span class="hljs-comment">// 截止日期-现在的时间 = 剩余超时时间</span><br>timeout := time.Until(dl)<br>        <span class="hljs-comment">// 将超时时间写入请求头</span><br>headerFields = <span class="hljs-built_in">append</span>(headerFields, hpack.HeaderField&#123;Name: <span class="hljs-string">&quot;grpc-timeout&quot;</span>, Value: grpcutil.EncodeDuration(timeout)&#125;)<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器</p><p>服务器接收到请求后，将请求头信息解析，可以找到客户端设置的超时时间<code>grpc-timeout</code>，这里格式化后，将超时时间加入到服务器的上下文中，</p><p><code>s.ctx, s.cancel = context.WithTimeout(ctx, timeout)</code>；</p><p>http2_server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *http2Server)</span></span> operateHeaders(ctx context.Context, frame *http2.MetaHeadersFrame, handle <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Stream)</span></span>) <span class="hljs-type">error</span> &#123;<br>    ...<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;grpc-timeout&quot;</span>:<br>timeoutSet = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>    <span class="hljs-comment">// 转换超时时间</span><br><span class="hljs-keyword">if</span> timeout, err = decodeTimeout(hf.Value); err != <span class="hljs-literal">nil</span> &#123;<br>headerError = status.Newf(codes.Internal, <span class="hljs-string">&quot;malformed grpc-timeout: %v&quot;</span>, err)<br>&#125;<br>...<br><span class="hljs-keyword">if</span> timeoutSet &#123;<br>        <span class="hljs-comment">// 将客户端的超时时间加入到服务器的context</span><br>s.ctx, s.cancel = context.WithTimeout(ctx, timeout)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.ctx, s.cancel = context.WithCancel(ctx)<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>但是有个疑惑，这个是超时时间并没有把数据从客户端到服务器之间的时间去掉，而是直接设置？</p><p>如果中间传输很慢，那么就与设定的超时时间有误差，grpc是怎么解决问题呢？</p><p>其实在<code>context</code>中，有一个<code>Done()</code>的<code>channel</code>，并有一个<code>timer</code>进行计时。</p><p>context.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithTimeout</span><span class="hljs-params">(parent Context, timeout time.Duration)</span></span> (Context, CancelFunc) &#123;<br><span class="hljs-keyword">return</span> WithDeadline(parent, time.Now().Add(timeout))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadline</span><span class="hljs-params">(parent Context, d time.Time)</span></span> (Context, CancelFunc) &#123;<br><span class="hljs-keyword">return</span> WithDeadlineCause(parent, d, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadlineCause</span><span class="hljs-params">(parent Context, d time.Time, cause <span class="hljs-type">error</span>)</span></span> (Context, CancelFunc) &#123;<br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br><span class="hljs-comment">// The current deadline is already sooner than the new one.</span><br><span class="hljs-keyword">return</span> WithCancel(parent)<br>&#125;<br>c := &amp;timerCtx&#123;<br>deadline: d,<br>&#125;<br>c.cancelCtx.propagateCancel(parent, c)<br>    <span class="hljs-comment">// 截止日期-当前时间 = 超时时间</span><br>dur := time.Until(d)<br><span class="hljs-keyword">if</span> dur &lt;= <span class="hljs-number">0</span> &#123;<br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded, cause) <span class="hljs-comment">// deadline has already passed</span><br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">false</span>, Canceled, <span class="hljs-literal">nil</span>) &#125;<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br><span class="hljs-keyword">if</span> c.err == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 计时器</span><br>c.timer = time.AfterFunc(dur, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-comment">// 当计时器完成时，即超时，就会进行取消 错误就是`DeadlineExceeded`</span><br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded, cause)<br>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled, <span class="hljs-literal">nil</span>) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，可以知道，直接将<code>Done channel</code>关闭了，<code>close(d)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err, cause <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> cause == <span class="hljs-literal">nil</span> &#123;<br>cause = err<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">if</span> c.err != <span class="hljs-literal">nil</span> &#123;<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// already canceled</span><br>&#125;<br>c.err = err<br>c.cause = cause<br>d, _ := c.done.Load().(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">if</span> d == <span class="hljs-literal">nil</span> &#123;<br>c.done.Store(closedchan)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 关闭了Done</span><br><span class="hljs-built_in">close</span>(d)<br>&#125;<br><span class="hljs-keyword">for</span> child := <span class="hljs-keyword">range</span> c.children &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>child.cancel(<span class="hljs-literal">false</span>, err, cause)<br>&#125;<br>c.children = <span class="hljs-literal">nil</span><br>c.mu.Unlock()<br><br><span class="hljs-keyword">if</span> removeFromParent &#123;<br>removeChild(c.Context, c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么等待接收<code>Done()</code>将不再阻塞，回到<code>grpc</code>。</p><p>客户端</p><p>一直循环直到完成，或发送错误，<code> case &lt;-ctx.Done():</code>接收到信息后，<code>errStr = ctx.Err().Error()</code>拿到<code>context</code>错误后，根据错误类型<code>DeadlineExceeded</code>，返回错误<code>status.Error(codes.DeadlineExceeded, errStr)</code>。</p><p>即不需要等待服务器响应，就抛出错误<code>DeadlineExceeded</code>。</p><p>picker_wrapper.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pw *pickerWrapper)</span></span> pick(ctx context.Context, failfast <span class="hljs-type">bool</span>, info balancer.PickInfo) (transport.ClientTransport, balancer.PickResult, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-keyword">var</span> lastPickErr <span class="hljs-type">error</span><br><br>    <span class="hljs-comment">// 一直循环 直到完成 或发生错误</span><br><span class="hljs-keyword">for</span> &#123;<br>pw.mu.Lock()<br><span class="hljs-keyword">if</span> pw.done &#123;<br>pw.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, balancer.PickResult&#123;&#125;, ErrClientConnClosing<br>&#125;<br><br><span class="hljs-keyword">if</span> pw.picker == <span class="hljs-literal">nil</span> &#123;<br>ch = pw.blockingCh<br>&#125;<br><span class="hljs-keyword">if</span> ch == pw.blockingCh &#123;<br><span class="hljs-comment">// This could happen when either:</span><br><span class="hljs-comment">// - pw.picker is nil (the previous if condition), or</span><br><span class="hljs-comment">// - has called pick on the current picker.</span><br>pw.mu.Unlock()<br><span class="hljs-keyword">select</span> &#123;<br>                <span class="hljs-keyword">case</span> &lt;-ctx.Done(): <span class="hljs-comment">// 只要close(ctx.done) 就会返回错误DeadlineExceeded</span><br><span class="hljs-keyword">var</span> errStr <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> lastPickErr != <span class="hljs-literal">nil</span> &#123;<br>errStr = <span class="hljs-string">&quot;latest balancer error: &quot;</span> + lastPickErr.Error()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>errStr = ctx.Err().Error()<br>&#125;<br><span class="hljs-keyword">switch</span> ctx.Err() &#123;<br><span class="hljs-keyword">case</span> context.DeadlineExceeded:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, balancer.PickResult&#123;&#125;, status.Error(codes.DeadlineExceeded, errStr)<br><span class="hljs-keyword">case</span> context.Canceled:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, balancer.PickResult&#123;&#125;, status.Error(codes.Canceled, errStr)<br>&#125;<br><span class="hljs-keyword">case</span> &lt;-ch:<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>...<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="超时在不同服务器之间传递"><a href="#超时在不同服务器之间传递" class="headerlink" title="超时在不同服务器之间传递"></a>超时在不同服务器之间传递</h1><p>当服务器需要调用另一个服务器来生成响应，即服务器充当客户端。在go中，超时是默认可以自动传递的。下面是流程图：</p><p><img src="/posts/71f004ec13fb/image-20240404204103666.png" alt="image-20240404204103666"></p><p>值得注意的是，由于每个机器可能存在时间不一样，所以grpc在调用中传递的是超时时间，而不是截止时间。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = flag.String(<span class="hljs-string">&quot;addr&quot;</span>, <span class="hljs-string">&quot;localhost:50051&quot;</span>, <span class="hljs-string">&quot;the address to connect to&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unaryCall</span><span class="hljs-params">(c pb.EchoClient, requestID <span class="hljs-type">int</span>, message <span class="hljs-type">string</span>, want codes.Code)</span></span> &#123;<br><span class="hljs-comment">// 设置超时</span><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">10</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">// 创建请求数据</span><br>req := &amp;pb.EchoRequest&#123;Message: message&#125;<br><br><span class="hljs-comment">// 调用rpc</span><br>_, err := c.UnaryEcho(ctx, req)<br>got := status.Code(err)<br>log.Printf(<span class="hljs-string">&quot;[%v] wanted = %v, got = %v\n&quot;</span>, requestID, want, got)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">streamingCall</span><span class="hljs-params">(c pb.EchoClient, requestID <span class="hljs-type">int</span>, message <span class="hljs-type">string</span>, want codes.Code)</span></span> &#123;<br><span class="hljs-comment">// 设置超时</span><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br><br>stream, err := c.BidirectionalStreamingEcho(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;Stream err: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>err = stream.Send(&amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;Send error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>_, err = stream.Recv()<br><br>got := status.Code(err)<br>log.Printf(<span class="hljs-string">&quot;[%v] wanted = %v, got = %v\n&quot;</span>, requestID, want, got)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br>conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect server %s:%v&quot;</span>, *addr, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>c := pb.NewEchoClient(conn)<br><br><span class="hljs-comment">// 成功请求</span><br><span class="hljs-comment">//unaryCall(c, 1, &quot;world&quot;, codes.OK)</span><br><span class="hljs-comment">// 超时</span><br>unaryCall(c, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;delay&quot;</span>, codes.DeadlineExceeded)<br><span class="hljs-comment">// 成功广播</span><br>unaryCall(c, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;[propagate me]world&quot;</span>, codes.OK)<br><span class="hljs-comment">// 超时广播</span><br>unaryCall(c, <span class="hljs-number">4</span>, <span class="hljs-string">&quot;[propagate me][propagate me]world&quot;</span>, codes.DeadlineExceeded)<br><span class="hljs-comment">// 成功</span><br>streamingCall(c, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;[propagate me]world&quot;</span>, codes.OK)<br><span class="hljs-comment">// 超时广播</span><br>streamingCall(c, <span class="hljs-number">6</span>, <span class="hljs-string">&quot;[propagate me][propagate me]world&quot;</span>, codes.DeadlineExceeded)<br>&#125;<br></code></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/codes&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br>pb <span class="hljs-string">&quot;grpc-learn/feature/proto/echo&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;the port to serve on&quot;</span>)<br><br><span class="hljs-keyword">type</span> echoServer <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedEchoServer<br>client pb.EchoClient<br>cc     *grpc.ClientConn<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *echoServer)</span></span> UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, <span class="hljs-type">error</span>) &#123;<br>message := req.Message<br><span class="hljs-comment">// 如果是广播消息，将其发送出去</span><br><span class="hljs-keyword">if</span> strings.HasPrefix(message, <span class="hljs-string">&quot;[propagate me]&quot;</span>) &#123;<br>time.Sleep(<span class="hljs-number">800</span> * time.Millisecond)<br>message = strings.TrimPrefix(message, <span class="hljs-string">&quot;[propagate me]&quot;</span>)<br><span class="hljs-keyword">return</span> e.client.UnaryEcho(ctx, &amp;pb.EchoRequest&#123;Message: message&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;delay&quot;</span> &#123;<br>time.Sleep(<span class="hljs-number">1500</span> * time.Millisecond)<br>&#125;<br><br><span class="hljs-keyword">return</span> &amp;pb.EchoResponse&#123;Message: req.Message&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *echoServer)</span></span> BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>in, err := stream.Recv()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">return</span> status.Error(codes.InvalidArgument, <span class="hljs-string">&quot;request message not received&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>message := in.Message<br><span class="hljs-comment">// 如果是广播消息，将其发送出去</span><br><span class="hljs-keyword">if</span> strings.HasPrefix(message, <span class="hljs-string">&quot;[propagate me]&quot;</span>) &#123;<br>time.Sleep(<span class="hljs-number">800</span> * time.Millisecond)<br>message = strings.TrimPrefix(message, <span class="hljs-string">&quot;[propagate me]&quot;</span>)<br>res, err := e.client.UnaryEcho(stream.Context(), &amp;pb.EchoRequest&#123;Message: message&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>stream.Send(res)<br>&#125;<br><br><span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;delay&quot;</span> &#123;<br>time.Sleep(<span class="hljs-number">1500</span> * time.Millisecond)<br>&#125;<br><br>stream.Send(&amp;pb.EchoResponse&#123;Message: message&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Close 实现Closable接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *echoServer)</span></span> Close() &#123;<br>e.cc.Close()<br>&#125;<br><br><span class="hljs-comment">// 创建grpc服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newEchoServer</span><span class="hljs-params">()</span></span> *echoServer &#123;<br><span class="hljs-comment">// 创建连接</span><br>address := fmt.Sprintf(<span class="hljs-string">&quot;localhost:%v&quot;</span>, *port)<br>conn, err := grpc.Dial(address, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to connect server port %d: %v&quot;</span>, *port, err)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;echoServer&#123;client: pb.NewEchoClient(conn), cc: conn&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-comment">// 监听端口</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;server listening at %v\n&quot;</span>, lis.Addr())<br><br><span class="hljs-comment">// 创建grpc服务器</span><br>s := grpc.NewServer()<br><span class="hljs-comment">// 创建echoServer</span><br>eServer := newEchoServer()<br><span class="hljs-keyword">defer</span> eServer.Close()<br><br><span class="hljs-comment">// 注册服务</span><br>pb.RegisterEchoServer(s, eServer)<br><br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[^1 ]:<a href="https://grpc.p2hp.com/docs/guides/deadlines/index.html">Deadlines | gRPC (p2hp.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.grpc简介</title>
      <link href="/posts/97db5630a275/"/>
      <url>/posts/97db5630a275/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>grpc基于服务的思想，指定可以使用其参数远程调用的方法以及返回值。</p><p>客户端应用程序可以直接调用服务器应用程序上的方法。</p><p>虽然调用对象在另一台机器上，grpc可以使得像调用本地对象一样。</p><p><img src="/posts/97db5630a275/image-20240331152537516.png" alt="image-20240331152537516"></p><h1 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h1><p>默认情况下，grpc是使用<code>Protocol</code>协议进行服务之间的数据交换。</p><p><code>protocol</code>作为grpc默认的接口定义语言(IDL)，用于描述服务接口和有效负载学习的结构。</p><p>虽然grpc默认<code>Protocol</code>版本是<code>proto2</code>，官方建议使用<code>proto3</code>。</p><h1 id="四种服务方法"><a href="#四种服务方法" class="headerlink" title="四种服务方法"></a>四种服务方法</h1><ul><li><p><code>一元RPC</code>：客户端向服务器发送单个请求并获得单次响应，就像普通的函数调用一样。·</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">rpc <span class="hljs-title function_">SayHello</span><span class="hljs-params">(HelloRequest)</span> returns (HelloResponse);<br></code></pre></td></tr></table></figure></li><li><p><code>服务器流式RPC</code>：客户端向服务器发送请求并获取用于读取一系列信息的流。客户端从返回流中读取信息，直到没有信息。grpc保证了信息流在单个RPC调用中的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rpc <span class="hljs-title function_">LotsOfReplies</span><span class="hljs-params">(HelloRequest)</span> returns (stream HelloResponse);<br></code></pre></td></tr></table></figure></li><li><p><code>客户端流式RPC</code>：客户端发送信息流到服务器，只要客户端写完信息，就可以等待服务器端读取并返回响应信息。同样的grpc保证了信息的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rpc <span class="hljs-title function_">LotsOfGreetings</span><span class="hljs-params">(stream HelloRequest)</span> returns (HelloResponse);<br></code></pre></td></tr></table></figure></li><li><p><code>双向流式RPC</code>：客户端和服务器端都可以使用读写流。两个流独立运行，因此客户端和服务器端都可以按照其顺序进行读写：如，服务器端可以等待接受所有客户端信息后，再响应；或者服务器端交替读取信息并响应；再或者读取和写入的其它组合。每个信息的顺序都能被保证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rpc <span class="hljs-title function_">BidiHello</span><span class="hljs-params">(stream HelloRequest)</span> returns (stream HelloResponse);<br></code></pre></td></tr></table></figure></li></ul><h2 id="RPC生命周期"><a href="#RPC生命周期" class="headerlink" title="RPC生命周期"></a>RPC生命周期</h2><h2 id="一元RPC"><a href="#一元RPC" class="headerlink" title="一元RPC"></a>一元RPC</h2><ol><li>一旦客户端调用<code>stub</code>方法，就会通知服务器端RPC被调用了，并从调用中取获取该调用的元数据，如方法名，以及指定的截至时间（如果有）等。</li><li>然后服务器端会发回自己初始元数据（在任何响应前一定会发送），或等待客户端的请求信息。</li><li>一旦服务器端收到客户端的请求信息，就会创建和填充响应，然后将响应、状态信息、可选的尾部元数据一起返回给客户端。</li><li>如果响应状态为ok，则客户端就拿到响应信息，从而完成客户端的调用。</li></ol><h2 id="服务器流式RPC"><a href="#服务器流式RPC" class="headerlink" title="服务器流式RPC"></a>服务器流式RPC</h2><p>类似于一元RPC，不同的是服务器端响应客户端的是返回信息流。在发送完所有信息后，服务器的状态信息、可选的尾部元数据也会发送到客户端。一旦客户端接收完成，调用就完成了。</p><h2 id="客户端流式RPC"><a href="#客户端流式RPC" class="headerlink" title="客户端流式RPC"></a>客户端流式RPC</h2><p>类似于一元RPC，不同之处是在于客户端向服务器端发送的是信息流而不是单个信息。服务器响应的是单个信息（也包含服务器的状态信息、可选的尾部元数据），但不一定是在接收到所有来自客户端的信息之后。</p><h2 id="双向流式RPC"><a href="#双向流式RPC" class="headerlink" title="双向流式RPC"></a>双向流式RPC</h2><p>在双向流式RPC中，客户端发起调用，服务器接收到客户端元数据、方法名和截止日期，服务器可以选择发回自身的初始化元数据，或者等待客户端开始流式传递信息。</p><p>客户端和服务器端是基于应用程序的，所以两个流是相互独立的。那么客户端和服务器都可以按任何顺序读取和写入信息。例如，服务器可以等到客户端发送完所有信息后再响应，或客户端和服务器交替请求响应。</p><h1 id="其它一些功能"><a href="#其它一些功能" class="headerlink" title="其它一些功能"></a>其它一些功能</h1><ul><li><p>Deadlines&#x2F;Timeouts</p><p>grpc可以设定截止时间&#x2F;超时时间。</p><p>客户端可以指定等待RPC调用完成的截止时间。</p><p>服务器可以查询有哪些RPC超时了，或还有多久超时。</p></li><li><p>终止RPC</p><p>在grpc中，客户端和服务器对于调用是否成功都有独立的确定。所以，有时候会产生不对等的成功结论，如，服务端成功完成了，但客户端以超时了定义调用失败了。</p></li><li><p>取消RPC</p><p>客户端和服务端都可以随时取消RPC。取消操作会立即终止RPC，调用将不再进一步。</p><blockquote><p>取消前的操作不会被回滚！</p></blockquote></li></ul><h1 id="Metadata-元数据"><a href="#Metadata-元数据" class="headerlink" title="Metadata 元数据"></a>Metadata 元数据</h1><p>格式：键值对</p><p>键： 字符串，不区分大小写</p><p>值：字符串或二进制数据</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> grpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.查询</title>
      <link href="/posts/cd06b11e1d12/"/>
      <url>/posts/cd06b11e1d12/</url>
      
        <content type="html"><![CDATA[<h1 id="检索单个对象"><a href="#检索单个对象" class="headerlink" title="检索单个对象"></a>检索单个对象</h1><h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取第一条记录（主键升序）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFirst</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br>db.First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Take"><a href="#Take" class="headerlink" title="Take"></a>Take</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取一条记录，没有指定排序字段</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestTake</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br>db.Take(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL LIMIT 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取最后一条记录（主键降序）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestLast</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br>db.Last(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` DESC LIMIT 1</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>First</code>和<code>Last</code>只有在<code>struct</code>是指针或提供<code>db.Model()</code>指定model时，方法才有效。</p><p>如果model没有定义主键，则按model的第一个字段进行排序。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// First 和 Last 规则</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestRule</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br><br><span class="hljs-comment">// 生效</span><br>db.First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br>result := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<br><br><span class="hljs-comment">// 生效</span><br>db.Model(&amp;User&#123;&#125;).First(&amp;result)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-comment">// 不生效</span><br>db.Table(<span class="hljs-string">&quot;tb_user&quot;</span>).First(&amp;result)<br><span class="hljs-comment">// model value required</span><br><br><span class="hljs-comment">// 生效</span><br>db.Table(<span class="hljs-string">&quot;tb_user&quot;</span>).Take(&amp;result)<br><span class="hljs-comment">// SELECT * FROM `tb_user` LIMIT 1</span><br><br><span class="hljs-comment">// 没有主键的 使用First/Last的排序为第一个字段，Code</span><br><span class="hljs-keyword">type</span> Language <span class="hljs-keyword">struct</span> &#123;<br>Code <span class="hljs-type">string</span><br>Name <span class="hljs-type">string</span><br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;Language&#123;&#125;)<br>db.First(&amp;Language&#123;&#125;)<br><span class="hljs-comment">// SELECT * FROM `tb_language` ORDER BY `tb_language`.`code` LIMIT 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="错误：ErrRecordNotFound"><a href="#错误：ErrRecordNotFound" class="headerlink" title="错误：ErrRecordNotFound"></a>错误：ErrRecordNotFound</h2><p>当找不到记录时，返回<code>ErrRecordNotFound</code>错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查询返回result</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestResult</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br>result := db.First(&amp;user)<br>fmt.Println(<span class="hljs-string">&quot;返回记录数: &quot;</span>, result.RowsAffected)<br>fmt.Println(<span class="hljs-string">&quot;返回错误：&quot;</span>, result.Error)<br><br><span class="hljs-comment">// 检查错误 是否为查询不到</span><br>errors.Is(result.Error, gorm.ErrRecordNotFound)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用<code>db.limit(1).Find(&amp;user)</code>来避免<code>ErrRecordNotFound</code>错误，且<code>Find</code>可以接受<code>struct</code>和<code>slice</code>的数据。</p></blockquote><h2 id="根据主键检索"><a href="#根据主键检索" class="headerlink" title="根据主键检索"></a>根据主键检索</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> user User<br><br>db.First(&amp;user, <span class="hljs-number">1</span>)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`id` = 1 AND `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-comment">// ID为int,使用字符串也可以</span><br>db.First(&amp;user, <span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`id` = &#x27;1&#x27; AND `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1 ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-keyword">var</span> users []User<br>db.Find(&amp;users, []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`id` IN (1,2,3) AND `tb_user`.`deleted_at` IS NULL</span><br>db.Find(&amp;users, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`id` IN (&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;) AND `tb_user`.`deleted_at` IS NULL</span><br><br>db.First(&amp;user, <span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE id = &#x27;1&#x27; AND `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1 ORDER BY `tb_user`.`id` LIMIT 1</span><br></code></pre></td></tr></table></figure><p>如果表由主键，则可以使用主键构建查询条件，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> user1 = User&#123;Model: gorm.Model&#123;<br>ID: <span class="hljs-number">1</span>,<br>&#125;&#125;<br>db.First(&amp;user1)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1 ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-keyword">var</span> result User<br>db.Model(user1).First(&amp;result)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br></code></pre></td></tr></table></figure><blockquote><p>如果model包含gorm的特定字段类型，如<code>gorm.DeletedAt</code>，则会在查询中加上查询条件<code>deleted_at IS NULL </code>。</p></blockquote><h1 id="检索全部对象"><a href="#检索全部对象" class="headerlink" title="检索全部对象"></a>检索全部对象</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> users []User<br>db.Find(&amp;users)<br></code></pre></td></tr></table></figure><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><h2 id="String-条件"><a href="#String-条件" class="headerlink" title="String 条件"></a>String 条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// String 条件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSelectByString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br><span class="hljs-keyword">var</span> users []User<br><br><span class="hljs-comment">// =</span><br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>).First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE name = &#x27;zhansan&#x27; AND `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-comment">// &lt;&gt; 不等于</span><br>db.Where(<span class="hljs-string">&quot;name &lt;&gt; ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE name &lt;&gt; &#x27;zhansan&#x27; AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// IN</span><br>db.Where(<span class="hljs-string">&quot;name IN ?&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE name IN (&#x27;zhansan&#x27;,&#x27;lisi&#x27;) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// LIKE</span><br>db.Where(<span class="hljs-string">&quot;name LIKE ?&quot;</span>, <span class="hljs-string">&quot;%zhansan%&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE name LIKE &#x27;%zhansan%&#x27; AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// AND</span><br>db.Where(<span class="hljs-string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-number">22</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (name = &#x27;zhansan&#x27; AND age &gt;= 22) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// Time</span><br>db.Where(<span class="hljs-string">&quot;updated_at &gt; ?&quot;</span>, time.Now().AddDate(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE updated_at &gt; &#x27;2023-05-01 13:40:43.356&#x27; AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// BETWEEN</span><br>db.Where(<span class="hljs-string">&quot;created_at BETWEEN ? AND ?&quot;</span>, time.Now().AddDate(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), time.Now()).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (created_at BETWEEN &#x27;2023-05-01 13:40:43.357&#x27; AND &#x27;2024-03-29 13:40:43.357&#x27;) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// 如果对象设置了主键，条件查询将不会覆盖主键的值，而是AND</span><br><span class="hljs-keyword">var</span> user1 = User&#123;Model: gorm.Model&#123;ID: <span class="hljs-number">1</span>&#125;&#125;<br>db.Where(<span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-number">2</span>).First(&amp;user1)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE id = 2 AND `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1 ORDER BY `tb_user`.`id` LIMIT 1</span><br><span class="hljs-comment">// record not found 的错误，所以要注意数据模型的id在查询前要设置为nil。</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Struct-Map-条件"><a href="#Struct-Map-条件" class="headerlink" title="Struct &amp; Map 条件"></a>Struct &amp; Map 条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Struct &amp; Map 条件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestStructAndMap</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br><span class="hljs-keyword">var</span> users []User<br><br><span class="hljs-comment">// Struct</span><br>db.Where(&amp;User&#123;Name: <span class="hljs-string">&quot;zhansan&quot;</span>, Age: <span class="hljs-number">20</span>&#125;).First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`tb_user`.`name` = &#x27;zhansan&#x27; AND `tb_user`.`age` = 20)</span><br><span class="hljs-comment">// AND `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-comment">// Map</span><br>db.Where(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`age` = 20 AND `name` = &#x27;zhansan&#x27;)</span><br><span class="hljs-comment">//AND `tb_user`.`deleted_at` IS NULL</span><br>db.Where(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: []<span class="hljs-type">int64</span>&#123;<span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`age` IN (20,30) AND `name` = &#x27;zhansan&#x27;)</span><br><span class="hljs-comment">// AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// Slice of primary keys</span><br>db.Where([]<span class="hljs-type">int64</span>&#123;<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>&#125;).Find(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`id` IN (20,21,22) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// 注意：如果查询条件是零值，`0`、`&#x27;&#x27;`、`false`等，gorm将不会构造其sql查询</span><br>db.Where(&amp;User&#123;Name: <span class="hljs-string">&quot;zhansan&quot;</span>, Age: <span class="hljs-number">0</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`name` = &#x27;zhansan&#x27; AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// 为了能用零值作为查询条件，可以使用map查询</span><br>db.Where(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">0</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`Age` = 0 AND `Name` = &#x27;zhansan&#x27;) AND `tb_user`.`deleted_at` IS NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指定结构体查询字段"><a href="#指定结构体查询字段" class="headerlink" title="指定结构体查询字段"></a>指定结构体查询字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 指定结构体查询字段</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestStructParam</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 可以将相关字段名称或dbname传递指定在查询条件中使用的struct的哪些特定值</span><br><span class="hljs-keyword">var</span> users []User<br><br>db.Where(&amp;User&#123;Name: <span class="hljs-string">&quot;zhansan&quot;</span>&#125;, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`tb_user`.`name` = &#x27;zhansan&#x27; AND `tb_user`.`age` = 0)</span><br><span class="hljs-comment">//AND `tb_user`.`deleted_at` IS NULL</span><br><br>db.Where(&amp;User&#123;Name: <span class="hljs-string">&quot;zhansan&quot;</span>&#125;, <span class="hljs-string">&quot;Age&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`age` = 0 AND `tb_user`.`deleted_at` IS NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内联条件"><a href="#内联条件" class="headerlink" title="内联条件"></a>内联条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 内联条件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestInnerCond</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br><span class="hljs-keyword">var</span> users []User<br><br>db.First(&amp;user, <span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE id = &#x27;1&#x27; AND `tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br>db.Find(&amp;user, <span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE name = &#x27;zhansan&#x27; AND `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1</span><br><br>db.Find(&amp;users, <span class="hljs-string">&quot;name &lt;&gt; ? ANd age &gt; ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-number">20</span>)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (name &lt;&gt; &#x27;zhansan&#x27; ANd age &gt; 20) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// Struct</span><br>db.Find(&amp;users, User&#123;Age: <span class="hljs-number">20</span>&#125;)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`age` = 20 AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// Map</span><br>db.Find(&amp;users, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>&#125;)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `age` = 20 AND `tb_user`.`deleted_at` IS NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Not-条件"><a href="#Not-条件" class="headerlink" title="Not 条件"></a>Not 条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Not条件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestNot</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br><span class="hljs-keyword">var</span> users []User<br><br><span class="hljs-comment">// Not</span><br>db.Not(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>).First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE NOT name = &#x27;zhansan&#x27; AND</span><br><span class="hljs-comment">//`tb_user`.`deleted_at` IS NULL ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-comment">// Not In</span><br>db.Not(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>&#125;&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `name` NOT IN (&#x27;zhansan&#x27;,&#x27;lisi&#x27;)</span><br><span class="hljs-comment">//AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// Struct</span><br>db.Not(User&#123;Name: <span class="hljs-string">&quot;zhansan&quot;</span>, Age: <span class="hljs-number">20</span>&#125;).First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`tb_user`.`name` &lt;&gt; &#x27;zhansan&#x27; AND `tb_user`.`age` &lt;&gt; 20)</span><br><span class="hljs-comment">//AND `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1 ORDER BY `tb_user`.`id` LIMIT 1</span><br><br><span class="hljs-comment">// Not In slice of primary keys</span><br>db.Not([]<span class="hljs-type">int64</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;).First(&amp;user)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`id` NOT IN (1,2,3)</span><br><span class="hljs-comment">//AND `tb_user`.`deleted_at` IS NULL AND `tb_user`.`id` = 1 ORDER BY `tb_user`.`id` LIMIT 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Or-条件"><a href="#Or-条件" class="headerlink" title="Or 条件"></a>Or 条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestOr</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> users []User<br><br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>).Or(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (name = &#x27;zhansan&#x27; OR name = &#x27;lisi&#x27;) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// struct</span><br>db.Where(User&#123;Name: <span class="hljs-string">&quot;zhansan&quot;</span>&#125;).Or(User&#123;Name: <span class="hljs-string">&quot;lisi&quot;</span>, Age: <span class="hljs-number">22</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (`tb_user`.`name` = &#x27;zhansan&#x27;</span><br><span class="hljs-comment">// OR (`tb_user`.`name` = &#x27;lisi&#x27; AND `tb_user`.`age` = 22)) AND `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// Map</span><br>db.Where(<span class="hljs-string">&quot;name = &#x27;zhansan&#x27;&quot;</span>).Or(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE (name = &#x27;zhansan&#x27;</span><br><span class="hljs-comment">//OR (`age` = 20 AND `name` = &#x27;zhansan&#x27;)) AND `tb_user`.`deleted_at` IS NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="查询特定字段"><a href="#查询特定字段" class="headerlink" title="查询特定字段"></a>查询特定字段</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查询特定字段</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSelect</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> users []User<br><br>db.Select(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT `name`,`age` FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// slice</span><br>db.Select([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT `name`,`age` FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// sql</span><br><span class="hljs-comment">// COALESCE 返回参数中第一个非空数据，如果都是NULL,则返回NULL</span><br>db.Table(<span class="hljs-string">&quot;tb_user&quot;</span>).Select(<span class="hljs-string">&quot;COALESCE(age,?) AS age&quot;</span>, <span class="hljs-number">42</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT COALESCE(age,42) AS age FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 排序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestOrder</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> users []User<br><br>db.Order(<span class="hljs-string">&quot;age desc, name&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY age desc, name</span><br><br><span class="hljs-comment">// 多个排序</span><br>db.Order(<span class="hljs-string">&quot;age desc&quot;</span>).Order(<span class="hljs-string">&quot;name&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY age desc,name</span><br><br><span class="hljs-comment">// clause sql排序</span><br>db.Clauses(clause.OrderBy&#123;<br>Expression: clause.Expr&#123;<br>SQL:                <span class="hljs-string">&quot;FIELD(id,?)&quot;</span>,<br>Vars:               []<span class="hljs-keyword">interface</span>&#123;&#125;&#123;[]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;&#125;,<br>WithoutParentheses: <span class="hljs-literal">true</span>,<br>&#125;&#125;).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY FIELD(id,1,2,3)</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Limit-Offset"><a href="#Limit-Offset" class="headerlink" title="Limit &amp; Offset"></a>Limit &amp; Offset</h1><p><code>Limit</code> 指定要查询的记录数<br><code>Offset</code> 指的是返回记录之前要跳过的记录数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestLimitAndOffset</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> users []User<br>db.Limit(<span class="hljs-number">3</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL LIMIT 3</span><br><br><span class="hljs-comment">// Limit(-1) 无效查询条件 即没有限制</span><br><span class="hljs-keyword">var</span> users1, users2 []User<br>db.Limit(<span class="hljs-number">2</span>).Find(&amp;users1).Limit(<span class="hljs-number">-1</span>).Find(&amp;users2)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL LIMIT 5</span><br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL</span><br><br><span class="hljs-comment">// mysql中offset与limit一起使用。</span><br>db.Offset(<span class="hljs-number">3</span>).Limit(<span class="hljs-number">10</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL LIMIT 10 OFFSET 3</span><br><br><span class="hljs-comment">// limit 查询条件穿透 offset(-1)取消offset查询条件</span><br>db.Offset(<span class="hljs-number">2</span>).Limit(<span class="hljs-number">10</span>).Find(&amp;users1).Offset(<span class="hljs-number">-1</span>).Find(&amp;users2)<br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL LIMIT 10 OFFSET 2</span><br><span class="hljs-comment">// SELECT * FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL LIMIT 10</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Group-By-Having"><a href="#Group-By-Having" class="headerlink" title="Group By &amp; Having"></a>Group By &amp; Having</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestGroupByAndHaving</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">type</span> Result <span class="hljs-keyword">struct</span> &#123;<br>Date  time.Time<br>Total <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> result1 Result<br><br>db.Model(&amp;User&#123;&#125;).<br>Select(<span class="hljs-string">&quot;name, sum(age) as total&quot;</span>).<br>Where(<span class="hljs-string">&quot;name LIKE ?&quot;</span>, <span class="hljs-string">&quot;zhansan%&quot;</span>).<br>Group(<span class="hljs-string">&quot;name&quot;</span>).<br>Find(&amp;result1)<br><span class="hljs-comment">// SELECT name, sum(age) as total FROM `tb_user`</span><br><span class="hljs-comment">//WHERE name LIKE &#x27;zhansan%&#x27; AND `tb_user`.`deleted_at` IS NULL GROUP BY `name`</span><br><br><span class="hljs-comment">// having 该语句等价于上面的sql</span><br>db.Model(&amp;User&#123;&#125;).<br>Select(<span class="hljs-string">&quot;name, sum(age) as total&quot;</span>).<br>Group(<span class="hljs-string">&quot;name&quot;</span>).<br>Having(<span class="hljs-string">&quot;name LIKE ?&quot;</span>, <span class="hljs-string">&quot;zhansan%&quot;</span>).<br>Find(&amp;result1)<br><span class="hljs-comment">//  SELECT name, sum(age) as total FROM `tb_user`</span><br><span class="hljs-comment">// WHERE `tb_user`.`deleted_at` IS NULL GROUP BY `name` HAVING name LIKE &#x27;zhansan%&#x27;</span><br><br><span class="hljs-keyword">type</span> Order <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>Amount <span class="hljs-type">int64</span><br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;Order&#123;&#125;)<br><br>db.Create([]Order&#123;&#123;Amount: <span class="hljs-number">10</span>&#125;, &#123;Amount: <span class="hljs-number">20</span>&#125;, &#123;Amount: <span class="hljs-number">30</span>&#125;&#125;)<br><br>rows, err := db.Table(<span class="hljs-string">&quot;tb_order&quot;</span>).<br>Select(<span class="hljs-string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).<br>Group(<span class="hljs-string">&quot;date(created_at)&quot;</span>).<br>Rows()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br>&#125;<br><span class="hljs-keyword">defer</span> rows.Close()<br><span class="hljs-keyword">for</span> rows.Next() &#123;<br><span class="hljs-keyword">var</span> date time.Time<br><span class="hljs-keyword">var</span> amount <span class="hljs-type">int</span><br>err := rows.Scan(&amp;date, &amp;amount)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br>&#125;<br>fmt.Println(date, amount)<br>&#125;<br><span class="hljs-comment">// SELECT date(created_at) as date, sum(amount) as total FROM `tb_order` GROUP BY date(created_at)</span><br><br>rows, _ = db.Table(<span class="hljs-string">&quot;tb_order&quot;</span>).<br>Select(<span class="hljs-string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).<br>Group(<span class="hljs-string">&quot;date(created_at)&quot;</span>).<br>Having(<span class="hljs-string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="hljs-number">100</span>).<br>Rows()<br><span class="hljs-keyword">defer</span> rows.Close()<br><span class="hljs-keyword">for</span> rows.Next() &#123;<br><span class="hljs-keyword">var</span> date time.Time<br><span class="hljs-keyword">var</span> amount <span class="hljs-type">int</span><br>err := rows.Scan(&amp;date, &amp;amount)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br>&#125;<br>fmt.Println(date, amount)<br>&#125;<br><span class="hljs-comment">// SELECT date(created_at) as date, sum(amount) as total FROM `tb_order`</span><br><span class="hljs-comment">// GROUP BY date(created_at) HAVING sum(amount) &gt; 100</span><br><br><span class="hljs-keyword">var</span> results []Result<br>db.Table(<span class="hljs-string">&quot;tb_order&quot;</span>).<br>Select(<span class="hljs-string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).<br>Group(<span class="hljs-string">&quot;date(created_at)&quot;</span>).<br>Having(<span class="hljs-string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="hljs-number">100</span>).<br>Scan(&amp;results)<br><span class="hljs-comment">// SELECT date(created_at) as date, sum(amount) as total FROM `tb_order`</span><br><span class="hljs-comment">//GROUP BY date(created_at) HAVING sum(amount) &gt; 100</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 返回不重复记录</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDistinct</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> users []User<br>db.Distinct(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>).Order(<span class="hljs-string">&quot;name, age desc&quot;</span>).Find(&amp;users)<br><span class="hljs-comment">// SELECT DISTINCT `name`,`age` FROM `tb_user` WHERE `tb_user`.`deleted_at` IS NULL ORDER BY name, age desc</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestJoins</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">type</span> email <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>Email  <span class="hljs-type">string</span><br>UserId <span class="hljs-type">int64</span><br>&#125;<br>db.AutoMigrate(&amp;email&#123;&#125;)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>Name  <span class="hljs-type">string</span><br>Email <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">var</span> results []result<br>db.Model(&amp;User&#123;&#125;).<br>Select(<span class="hljs-string">&quot;tb_user.name, tb_email.email&quot;</span>).<br>Joins(<span class="hljs-string">&quot;left join tb_email on tb_email.user_id = tb_user.id&quot;</span>).<br>Scan(&amp;results)<br><span class="hljs-comment">// SELECT tb_user.name, tb_email.email FROM `tb_user`</span><br><span class="hljs-comment">// left join tb_email on tb_email.user_id = tb_user.id WHERE `tb_user`.`deleted_at` IS NULL</span><br><br>rows, _ := db.Table(<span class="hljs-string">&quot;tb_user&quot;</span>).<br>Select(<span class="hljs-string">&quot;tb_user.name, tb_email.email&quot;</span>).<br>Joins(<span class="hljs-string">&quot;left join tb_email on tb_user.id = tb_email.user_id&quot;</span>).<br>Rows()<br><span class="hljs-keyword">for</span> rows.Next() &#123;<br><span class="hljs-keyword">var</span> name, email <span class="hljs-type">string</span><br>rows.Scan(&amp;name, &amp;email)<br>fmt.Println(name, email)<br>&#125;<br><br><span class="hljs-keyword">type</span> creditCard <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>UserId <span class="hljs-type">int64</span><br>Number <span class="hljs-type">string</span><br>&#125;<br>db.AutoMigrate(&amp;creditCard&#123;&#125;)<br><br><span class="hljs-keyword">var</span> user User<br>db.Joins(<span class="hljs-string">&quot;JOIN tb_email ON tb_email.user_id = tb_user.id AND tb_email.email = ?&quot;</span>, <span class="hljs-string">&quot;wer@xyz.com&quot;</span>).<br>Joins(<span class="hljs-string">&quot;JOIN tb_credit_card ON tb_credit_card.user_id = tb_user.id&quot;</span>).<br>Where(<span class="hljs-string">&quot;tb_credit_card.number = ?&quot;</span>, <span class="hljs-string">&quot;111111111&quot;</span>).<br>Find(&amp;user)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Joins-预加载"><a href="#Joins-预加载" class="headerlink" title="Joins 预加载"></a>Joins 预加载</h2><p> 预加载前提是表之间是外键关联。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestEagerLoading</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">type</span> company <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>CompanyName <span class="hljs-type">string</span><br>&#125;<br>db.AutoMigrate(&amp;company&#123;&#125;)<br><br><span class="hljs-keyword">var</span> user User<br>db.Joins(<span class="hljs-string">&quot;company&quot;</span>).Find(&amp;user)<br><br>db.InnerJoins(<span class="hljs-string">&quot;company&quot;</span>).Find(&amp;user)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Joins-衍生表"><a href="#Joins-衍生表" class="headerlink" title="Joins 衍生表"></a>Joins 衍生表</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDerivedTable</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Id  <span class="hljs-type">int</span><br>Age <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Order <span class="hljs-keyword">struct</span> &#123;<br>UserId     <span class="hljs-type">int</span><br>FinishedAt *time.Time<br>&#125;<br>db.AutoMigrate(&amp;Order&#123;&#125;)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>UserId     <span class="hljs-type">int</span><br>FinishedAt time.Time<br>&#125;<br><span class="hljs-keyword">var</span> results []result<br>query := db.Table(<span class="hljs-string">&quot;tb_order&quot;</span>).<br>Select(<span class="hljs-string">&quot;MAX(tb_order.finished_at) as latest&quot;</span>).<br>Joins(<span class="hljs-string">&quot;left join tb_user user on tb_order.user_id = user.id&quot;</span>).<br>Where(<span class="hljs-string">&quot;user.age &gt; ?&quot;</span>, <span class="hljs-number">18</span>).<br>Group(<span class="hljs-string">&quot;tb_order.user_id&quot;</span>)<br>db.Model(&amp;Order&#123;&#125;).Joins(<span class="hljs-string">&quot;join (?) q on tb_order.finished_at = q.latest&quot;</span>, query).Scan(&amp;results)<br>fmt.Println(results)<br><span class="hljs-comment">// SELECT `tb_order`.`user_id`,`tb_order`.`finished_at` FROM `tb_order`</span><br><span class="hljs-comment">//join (SELECT MAX(tb_order.finished_at) as latest FROM `tb_order`</span><br><span class="hljs-comment">//left join tb_user user on tb_order.user_id = user.id</span><br><span class="hljs-comment">//WHERE user.age &gt; 18 GROUP BY `tb_order`.`user_id`) q on tb_order.finished_at = q.latest</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestScan</span><span class="hljs-params">(t *testing.T)</span></span> &#123; <br><span class="hljs-keyword">type</span> Result <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> result Result<br>db.Table(<span class="hljs-string">&quot;users&quot;</span>).Select(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>).Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>).Scan(&amp;result)<br><br><span class="hljs-comment">// Raw SQL</span><br>db.Raw(<span class="hljs-string">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>).Scan(&amp;result)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gorm.io/docs/">GORM 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> gorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.高级查询</title>
      <link href="/posts/874c69da2af1/"/>
      <url>/posts/874c69da2af1/</url>
      
        <content type="html"><![CDATA[<h1 id="智能选择字段"><a href="#智能选择字段" class="headerlink" title="智能选择字段"></a>智能选择字段</h1>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> gorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.创建</title>
      <link href="/posts/53612c859d2e/"/>
      <url>/posts/53612c859d2e/</url>
      
        <content type="html"><![CDATA[<h1 id="创建记录"><a href="#创建记录" class="headerlink" title="创建记录"></a>创建记录</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">birthday, _ := time.Parse(<span class="hljs-string">&quot;2006-01-02&quot;</span>, <span class="hljs-string">&quot;1993-12-15&quot;</span>)<br>user := User&#123;<br>Name:     <span class="hljs-string">&quot;WER&quot;</span>,<br>Age:      <span class="hljs-number">18</span>,<br>Birthday: &amp;birthday,<br>&#125;<br><span class="hljs-comment">// 创建记录 成功后会回填数据到&amp;user</span><br>result := db.Create(&amp;user)<br><span class="hljs-comment">//  INSERT INTO `tb_user` (`created_at`,`updated_at`,`deleted_at`,`name`,`age`,`birthday`) VALUES</span><br><span class="hljs-comment">// (&#x27;2024-03-27 21:52:11.627&#x27;,&#x27;2024-03-27 21:52:11.627&#x27;,NULL,&#x27;WER&#x27;,18,&#x27;1993-12-15 08:00:00&#x27;)</span><br><span class="hljs-comment">// 打印错误</span><br>fmt.Println(result.Error)<br><span class="hljs-comment">// 打印插入记录的条数</span><br>fmt.Println(result.RowsAffected)<br></code></pre></td></tr></table></figure><h2 id="指定字段赋值"><a href="#指定字段赋值" class="headerlink" title="指定字段赋值"></a>指定字段赋值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建记录并为指定字段赋值</span><br>db.Select(<span class="hljs-string">&quot;Name&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-string">&quot;CreatedAt&quot;</span>).Create(&amp;user)<br><span class="hljs-comment">// INSERT INTO `tb_user` (`created_at`,`updated_at`,`name`,`age`) VALUES</span><br><span class="hljs-comment">//(&#x27;2024-03-27 21:52:11.627&#x27;,&#x27;2024-03-27 21:52:11.627&#x27;,&#x27;WER&#x27;,18)</span><br></code></pre></td></tr></table></figure><h2 id="忽略某些字段"><a href="#忽略某些字段" class="headerlink" title="忽略某些字段"></a>忽略某些字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建记录并忽略某些字段</span><br>db.Omit(<span class="hljs-string">&quot;Name&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-string">&quot;CreatedAt&quot;</span>, <span class="hljs-string">&quot;ID&quot;</span>).Create(&amp;user)<br></code></pre></td></tr></table></figure><h1 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h1><p>只需将slice传递给<code>Create</code>方法即可，生成sql来插入数据，并返回所有主键，而且还会触发<code>Hook</code>，将记录分割成多个批次。当然，这些都会在事务下来处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 批量插入</span><br><span class="hljs-keyword">var</span> users = []User&#123;&#123;Name: <span class="hljs-string">&quot;盖伦&quot;</span>&#125;, &#123;Name: <span class="hljs-string">&quot;艾希&quot;</span>&#125;, &#123;Name: <span class="hljs-string">&quot;蛮王&quot;</span>&#125;&#125;<br>db.Create(&amp;users)<br><span class="hljs-keyword">for</span> _, u := <span class="hljs-keyword">range</span> users &#123;<br><span class="hljs-built_in">println</span>(u.ID)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指定批次大小"><a href="#指定批次大小" class="headerlink" title="指定批次大小"></a>指定批次大小</h2><h2 id="单次指定"><a href="#单次指定" class="headerlink" title="单次指定"></a>单次指定</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">db.CreateInBatches(&amp;user, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><h2 id="全局指定"><a href="#全局指定" class="headerlink" title="全局指定"></a>全局指定</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;CreateBatchSize: <span class="hljs-number">1000</span>&#125;)<br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">db := db.Session(&amp;gorm.Session&#123;CreateBatchSize: <span class="hljs-number">1000</span>&#125;)<br></code></pre></td></tr></table></figure><p>全局指定批次大小后，所有的create和关联操作时所有的<code>INSERT</code>行为都会遵循初始化时的配置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">users = [<span class="hljs-number">5000</span>]User&#123;&#123;Name: <span class="hljs-string">&quot;jinzhu&quot;</span>, Pets: []Pet&#123;pet1, pet2, pet3&#125;&#125;...&#125;<br><br>db.Create(&amp;users)<br><span class="hljs-comment">// INSERT INTO users xxx (5 batches)</span><br><span class="hljs-comment">// INSERT INTO pets xxx (15 batches)</span><br></code></pre></td></tr></table></figure><h1 id="创建Hook钩子"><a href="#创建Hook钩子" class="headerlink" title="创建Hook钩子"></a>创建Hook钩子</h1><p><code>gorm</code>允许用户提供实现接口来自定义钩子函数。</p><ul><li><p><code>BeforeSave</code></p></li><li><p><code>BeforeCreate</code></p></li><li><p><code>AfterSave</code></p></li><li><p><code>AfterCreate</code></p></li></ul><p>在创建前插入<code>uuid</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> BeforeCreate(tx *gorm.DB) (err <span class="hljs-type">error</span>) &#123;<br>  u.UUID = uuid.New()<br><br>    <span class="hljs-keyword">if</span> u.Role == <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>        <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;invalid role&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="跳过hooks"><a href="#跳过hooks" class="headerlink" title="跳过hooks"></a>跳过hooks</h2><p>跳过hooks，可以使用<code>SkipHooks</code>会话模式，例子如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="hljs-literal">true</span>&#125;).Create(&amp;user)<br><br>DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="hljs-literal">true</span>&#125;).Create(&amp;users)<br><br>DB.Session(&amp;gorm.Session&#123;SkipHooks: <span class="hljs-literal">true</span>&#125;).CreateInBatches(users, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：当使用map来创建时，钩子函数不会执行，关联不会被保存且不会回写主键。</p></blockquote><h1 id="使用SQL表达式、Context-Valuer创建记录"><a href="#使用SQL表达式、Context-Valuer创建记录" class="headerlink" title="使用SQL表达式、Context Valuer创建记录"></a>使用SQL表达式、Context Valuer创建记录</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// create form map</span><br>db.Model(&amp;user).Create(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;wer&quot;</span>,<br><span class="hljs-string">&quot;Birthday&quot;</span>: clause.Expr&#123;<br>SQL:  <span class="hljs-string">&quot;cast(? as date)&quot;</span>,<br>Vars: []<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;19931215&quot;</span>&#125;,<br>&#125;,<br>&#125;)<br><span class="hljs-comment">// INSERT INTO `tb_user` (`birthday`,`name`) VALUES (cast(&#x27;19931215&#x27; as date),&#x27;wer&#x27;)</span><br></code></pre></td></tr></table></figure><h2 id="Customized-Data-Types"><a href="#Customized-Data-Types" class="headerlink" title="Customized Data Types"></a>Customized Data Types</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Location <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">// sql.Scanner interface</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(loc *Location)</span></span> Scan(v <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 从数据库驱动扫描数据插入到struct</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// schema.GormDataTypeInterface</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(loc *Location)</span></span> GormDataType() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;geometry&quot;</span><br>&#125;<br><br><span class="hljs-comment">// gorm.Valuer interface</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(loc Location)</span></span> GormValue(ctx context.Context, db *gorm.DB) clause.Expr &#123;<br><span class="hljs-keyword">return</span> clause.Expr&#123;<br>SQL:  <span class="hljs-string">&quot;ST_PointFromText(?)&quot;</span>,<br>Vars: []<span class="hljs-keyword">interface</span>&#123;&#125;&#123;fmt.Sprintf(<span class="hljs-string">&quot;POINT(%d %d)&quot;</span>, loc.X, loc.Y)&#125;,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Worker <span class="hljs-keyword">struct</span> &#123;<br>Name     <span class="hljs-type">string</span><br>Location Location<br>&#125;<br><br>db.Create(&amp;Worker&#123;<br>Name:     <span class="hljs-string">&quot;WER&quot;</span>,<br>Location: Location&#123;X: <span class="hljs-number">100</span>, Y: <span class="hljs-number">100</span>&#125;,<br>&#125;)<br><span class="hljs-comment">// INSERT INTO `tb_worker` (`name`,`location`) VALUES (&#x27;WER&#x27;,ST_PointFromText(&#x27;POINT(100 100)&#x27;))</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="关联创建"><a href="#关联创建" class="headerlink" title="关联创建"></a>关联创建</h1><p>创建关联数据时，当关联值非零，这些关联数据会被插入，而关联数据的<code>Hooks</code>方法会被调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> CreditCard <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>Number <span class="hljs-type">string</span><br>UserId <span class="hljs-type">uint</span><br>&#125;<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>Name       <span class="hljs-type">string</span><br>CreditCard CreditCard<br>&#125;<br><br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;, &amp;CreditCard&#123;&#125;)<br><br>db.Create(&amp;User&#123;<br>Name:       <span class="hljs-string">&quot;WER&quot;</span>,<br>CreditCard: CreditCard&#123;Number: <span class="hljs-string">&quot;1201010210&quot;</span>&#125;,<br>&#125;)<br><span class="hljs-comment">// INSERT INTO `tb_credit_card` (`created_at`,`updated_at`,`deleted_at`,`number`,`user_id`)</span><br><span class="hljs-comment">//VALUES  (&#x27;2024-03-28 16:07:19.373&#x27;,&#x27;2024-03-28 16:07:19.373&#x27;,NULL,&#x27;1201010210&#x27;,1) ON DUPLICATE KEY UPDATE `user_id`=VALUES(`user_id`)</span><br><span class="hljs-comment">// INSERT INTO `tb_user` (`created_at`,`updated_at`,`deleted_at`,`name`)</span><br><span class="hljs-comment">//VALUES (&#x27;2024-03-28 16:07:19.372&#x27;,&#x27;2024-03-28 16:07:19.372&#x27;,NULL,&#x27;WER&#x27;)</span><br></code></pre></td></tr></table></figure><p>可以使用<code>Select</code>、<code>Omit</code>方法来跳过关联更新，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 跳过`CreditCard`字段</span><br>db.Omit(<span class="hljs-string">&quot;CreditCard&quot;</span>).Create(&amp;user)<br><span class="hljs-comment">// 跳过所有关联</span><br>db.Omit(clause.Associations).Create(&amp;user)<br></code></pre></td></tr></table></figure><h1 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h1><p>可以通过结构体<code>Tag</code>：<code>default</code>字段来定义默认值，示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  ID   <span class="hljs-type">int64</span><br>  Name <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;default:galeone&quot;`</span><br>  Age  <span class="hljs-type">int64</span>  <span class="hljs-string">`gorm:&quot;default:18&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这些默认值会被当做结构体字段的<code>零值</code>插入到数据库中。</p><blockquote><p>当结构体字段为零值时，即<code>0</code>、<code>&#39;&#39;</code>、<code>false</code>，这些字段值不会被保存到数据库中，可以通过指针类型或者实现<code>Scanner</code>&#x2F;<code>Valuer</code>接口来避免这种情况。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  gorm.Model<br>  Name <span class="hljs-type">string</span><br>  Age  *<span class="hljs-type">int</span>           <span class="hljs-string">`gorm:&quot;default:18&quot;`</span><br>  Active sql.NullBool <span class="hljs-string">`gorm:&quot;default:true&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果要让字段在数据库中拥有默认值则必须使用<code>default</code>标签来为结构体字段设置默认值。</p><p>如果想在数据库迁移（<code>AutoMigrate</code>）时跳过默认值，则可以使用<code>default:(-).</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>ID        <span class="hljs-type">int64</span><br>FirstName <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;default:galeone&quot;`</span><br>LastName  <span class="hljs-type">string</span><br>FullName  <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;-&gt;;type:VARCHAR(100) GENERATED ALWAYS AS (concat(first_name,&#x27; &#x27;,last_name)) VIRTUAL;default:(-);&quot;`</span><br>Age       *<span class="hljs-type">int</span>   <span class="hljs-string">`gorm:&quot;default:18&quot;`</span><br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)<br><br>db.Create(&amp;User&#123;LastName: <span class="hljs-string">&quot;go&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p> <strong>SQLite</strong> 不支持批量插入的时候使用默认值。可以跳过hook函数来设置默认值。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Pet)</span></span> BeforeCreate(tx *gorm.DB) (err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> p.Name == <span class="hljs-string">&quot;&quot;</span> &#123;<br>        p.Name = <span class="hljs-string">&quot;cat&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Pet <span class="hljs-keyword">struct</span> &#123;<br>   <span class="hljs-comment">// Name string `gorm:&quot;default:cat&quot;`</span><br>    Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// 在SqlLite中，这是不允许的, 所以GORM会通过构建错误的SQL来返回错误:</span><br><span class="hljs-comment">// INSERT INTO `pets` (`name`) VALUES (&quot;dog&quot;),(DEFAULT) RETURNING `name`</span><br>db.Create(&amp;[]Pet&#123;&#123;Name: <span class="hljs-string">&quot;dog&quot;</span>&#125;, &#123;&#125;&#125;)<br></code></pre></td></tr></table></figure><h1 id="Upsert和冲突"><a href="#Upsert和冲突" class="headerlink" title="Upsert和冲突"></a>Upsert和冲突</h1><blockquote><p><code>upsert</code>是数据库插入操作的扩展，如果唯一字段已经存在，则将本次新增插入操作变成更新操作，否则就正常执行插入操作。</p></blockquote><p>GORM为不同数据库提供了对Upsert的兼容性支持。</p><h2 id="冲突时不做任何操作"><a href="#冲突时不做任何操作" class="headerlink" title="冲突时不做任何操作"></a>冲突时不做任何操作</h2><p>如果发生冲突了，什么也不干，不更新也不插入记录。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUpsert1</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>ID        <span class="hljs-type">int64</span><br>FirstName <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;default:galeone&quot;`</span><br>LastName  <span class="hljs-type">string</span><br>FullName  <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;-&gt;;type:VARCHAR(100) GENERATED ALWAYS AS (concat(first_name,&#x27; &#x27;,last_name)) VIRTUAL;default:(-);&quot;`</span><br>Age       *<span class="hljs-type">int</span>   <span class="hljs-string">`gorm:&quot;default:18&quot;`</span><br>&#125;<br><br>result := db.Clauses(clause.OnConflict&#123;DoNothing: <span class="hljs-literal">true</span>&#125;).Create(&amp;User&#123;ID: <span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">// INSERT INTO `tb_user` (`first_name`,`last_name`,`age`,`id`)</span><br><span class="hljs-comment">// VALUES (&#x27;galeone&#x27;,&#x27;&#x27;,18,1) ON DUPLICATE KEY UPDATE `id`=`id`</span><br>fmt.Println(result.RowsAffected) <span class="hljs-comment">// 0 没有插入记录</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冲突时更新指定字段的指定值"><a href="#冲突时更新指定字段的指定值" class="headerlink" title="冲突时更新指定字段的指定值"></a>冲突时更新指定字段的指定值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUpsert2</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>user1 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">1</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;zhansan&quot;</span>,<br>Age:  <span class="hljs-number">20</span>,<br>&#125;<br>user2 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">2</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;lisi&quot;</span>,<br>Age:  <span class="hljs-number">21</span>,<br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)<br><span class="hljs-keyword">var</span> users = []User&#123;user1, user2&#125;<br>db.Clauses(clause.OnConflict&#123;<br>Columns:   []clause.Column&#123;&#123;Name: <span class="hljs-string">&quot;id&quot;</span>&#125;&#125;,<br>DoUpdates: clause.Assignments(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">32</span>&#125;),<br>&#125;).Create(&amp;users)<br><span class="hljs-comment">// 主键id冲突时，不新增，更新user中的`Age`为32</span><br><span class="hljs-comment">// INSERT INTO `tb_user` (`created_at`,`updated_at`,`deleted_at`,`name`,`age`,`birthday`,`id`)</span><br><span class="hljs-comment">// VALUES (&#x27;2024-03-28 21:55:43.997&#x27;,&#x27;2024-03-28 21:55:43.997&#x27;,NULL,&#x27;zhansan&#x27;,20,NULL,1),</span><br><span class="hljs-comment">//(&#x27;2024-03-28 21:55:43.997&#x27;,&#x27;2024-03-28 21:55:43.997&#x27;,NULL,&#x27;lisi&#x27;,21,NULL,2) ON DUPLICATE KEY UPDATE `Age`=32</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用SQL指定冲突时的值"><a href="#使用SQL指定冲突时的值" class="headerlink" title="使用SQL指定冲突时的值"></a>使用SQL指定冲突时的值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUpsert3</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>user1 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">1</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;zhansan&quot;</span>,<br>Age:  <span class="hljs-number">33</span>,<br>&#125;<br>user2 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">2</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;lisi&quot;</span>,<br>Age:  <span class="hljs-number">22</span>,<br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)<br><span class="hljs-keyword">var</span> users = []User&#123;user1, user2&#125;<br><br>db.Clauses(clause.OnConflict&#123;<br>Columns:   []clause.Column&#123;&#123;Name: <span class="hljs-string">&quot;id&quot;</span>&#125;&#125;,<br>DoUpdates: clause.Assignments(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;age&quot;</span>: gorm.Expr(<span class="hljs-string">&quot;GREATEST(age, VALUES(age))&quot;</span>)&#125;),<br>&#125;).Create(&amp;users)<br><span class="hljs-comment">// 当id冲突时，将更新age, 谁大更新谁的</span><br><span class="hljs-comment">// INSERT INTO `tb_user` (`created_at`,`updated_at`,`deleted_at`,`name`,`age`,`birthday`,`id`)</span><br><span class="hljs-comment">// VALUES (&#x27;2024-03-28 22:02:30.666&#x27;,&#x27;2024-03-28 22:02:30.666&#x27;,NULL,&#x27;zhansan&#x27;,33,NULL,1),</span><br><span class="hljs-comment">// (&#x27;2024-03-28 22:02:30.666&#x27;,&#x27;2024-03-28 22:02:30.666&#x27;,NULL,&#x27;lisi&#x27;,22,NULL,2) ON DUPLICATE KEY UPDATE `age`=GREATEST(age, VALUES(age))</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冲突时更新某些字段"><a href="#冲突时更新某些字段" class="headerlink" title="冲突时更新某些字段"></a>冲突时更新某些字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go">unc TestUpsert4(t *testing.T) &#123;<br>user1 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">1</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;zhansan1&quot;</span>,<br>Age:  <span class="hljs-number">33</span>,<br>&#125;<br>user2 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">2</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;lisi1&quot;</span>,<br>Age:  <span class="hljs-number">22</span>,<br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)<br><span class="hljs-keyword">var</span> users = []User&#123;user1, user2&#125;<br>db.Clauses(clause.OnConflict&#123;<br>Columns:   []clause.Column&#123;&#123;Name: <span class="hljs-string">&quot;id&quot;</span>&#125;&#125;,<br>DoUpdates: clause.AssignmentColumns([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>&#125;),<br>&#125;).Create(&amp;users)<br>    <span class="hljs-comment">// 发生冲突时，更新字段`name`、`age`</span><br><span class="hljs-comment">// INSERT INTO `tb_user` (`created_at`,`updated_at`,`deleted_at`,`name`,`age`,`birthday`,`id`)</span><br><span class="hljs-comment">// VALUES (&#x27;2024-03-28 22:07:36.064&#x27;,&#x27;2024-03-28 22:07:36.064&#x27;,NULL,&#x27;zhansan1&#x27;,33,NULL,1),</span><br><span class="hljs-comment">//(&#x27;2024-03-28 22:07:36.064&#x27;,&#x27;2024-03-28 22:07:36.064&#x27;,NULL,&#x27;lisi1&#x27;,22,NULL,2) ON DUPLICATE KEY UPDATE `name`=VALUES(`name`),`age`=VALUES(`age`)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冲突时更新所有字段"><a href="#冲突时更新所有字段" class="headerlink" title="冲突时更新所有字段"></a>冲突时更新所有字段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUpsert5</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>user1 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">1</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;zhansan2&quot;</span>,<br>Age:  <span class="hljs-number">34</span>,<br>&#125;<br>user2 := User&#123;<br>Model: gorm.Model&#123;<br>ID: <span class="hljs-number">2</span>,<br>&#125;,<br>Name: <span class="hljs-string">&quot;lisi2&quot;</span>,<br>Age:  <span class="hljs-number">23</span>,<br>&#125;<br>db.Set(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)<br><span class="hljs-keyword">var</span> users = []User&#123;user1, user2&#125;<br>db.Clauses(clause.OnConflict&#123;<br>UpdateAll: <span class="hljs-literal">true</span>,<br>&#125;).Create(&amp;users)<br><span class="hljs-comment">// 当主键冲突时，更新全部字段除了默认值的字段和主键</span><br><span class="hljs-comment">// INSERT INTO `tb_user` (`created_at`,`updated_at`,`deleted_at`,`name`,`age`,`birthday`,`id`)</span><br><span class="hljs-comment">//VALUES (&#x27;2024-03-28 22:10:37.117&#x27;,&#x27;2024-03-28 22:10:37.117&#x27;,NULL,&#x27;zhansan2&#x27;,34,NULL,1),</span><br><span class="hljs-comment">//(&#x27;2024-03-28 22:10:37.117&#x27;,&#x27;2024-03-28 22:10:37.117&#x27;,NULL,&#x27;lisi2&#x27;,23,NULL,2)</span><br><span class="hljs-comment">//ON DUPLICATE KEY UPDATE `updated_at`=&#x27;2024-03-28 22:10:37.117&#x27;,`deleted_at`=VALUES(`deleted_at`),`name`=VALUES(`name`),`age`=VALUES(`age`),`birthday`=VALUES(`birthday`)</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gorm.io/docs/">GORM 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> gorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.定义model</title>
      <link href="/posts/d13da7423df4/"/>
      <url>/posts/d13da7423df4/</url>
      
        <content type="html"><![CDATA[<h1 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h1><p>go中是使用struct进行编写model，由下几种数据类型组成：</p><ul><li>go的基本数据类型</li><li>实现<code>Scanner</code>、<code>Valuer</code>接口的自定义类型及其指针或别名</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  ID           <span class="hljs-type">uint</span><span class="hljs-comment">// 主键</span><br>  Name         <span class="hljs-type">string</span><span class="hljs-comment">// 单数字符串字段</span><br>  Email        *<span class="hljs-type">string</span><span class="hljs-comment">// 字符串指针，允许null值</span><br>  Age          <span class="hljs-type">uint8</span><span class="hljs-comment">// 无符号int8类型 8bit</span><br>  Birthday     *time.Time<span class="hljs-comment">// time.Time指针类型，允许null值</span><br>  MemberNumber sql.NullString<span class="hljs-comment">// sql.NullString 用于处理可null字符串</span><br>  ActivedAt    sql.NullTime<span class="hljs-comment">// sql.NullTime用于处理可null时间</span><br>  CreatedAt    time.Time<span class="hljs-comment">// 由gorm自动管理的创建时间</span><br>  UpdatedAt    time.Time<span class="hljs-comment">// 由gorm自动管理的创建时间</span><br>&#125;<br></code></pre></td></tr></table></figure><p>指针类型可以允许null值。</p><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><p><code>gorm</code>倾向于约定，而不是配置。</p><p>下面列举几种约定：</p><ul><li>使用<code>ID</code>作为主键</li><li>使用结构体名的蛇形复数作为表名，如<code>UserInfo</code>&gt;<code>user_infoes</code></li><li>字段名的蛇形作为列名，如<code>userName</code>&gt; <code>user_name</code></li><li><code>CreatedAt</code>表示创建时间，当创建记录时，且该字段为零值时，自动填充当前时间</li><li><code>UpdatedAt</code>表示更新时间，当更新记录时，且该字段为零值时，自动填充当前时间</li><li><code>DeletedAt</code>表示软删除，当删除记录时，且该字段为零值时，自动填充当前时间</li></ul><p>如<code>gorm.Model</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Model <span class="hljs-keyword">struct</span> &#123;<br>ID        <span class="hljs-type">uint</span> <span class="hljs-string">`gorm:&quot;primarykey&quot;`</span><br>CreatedAt time.Time<br>UpdatedAt time.Time<br>DeletedAt DeletedAt <span class="hljs-string">`gorm:&quot;index&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h1><h2 id="字段级权限控制"><a href="#字段级权限控制" class="headerlink" title="字段级权限控制"></a>字段级权限控制</h2><p>作用范围：可导出的字段。</p><p>使用标签进行字段级别的权限控制。</p><ul><li><code>gorm:&quot;&lt;-:create&quot;</code> ：允许读和创建</li><li><code>gorm:&quot;&lt;-:update&quot;</code>：允许读和更新</li><li><code>gorm:&quot;&lt;-&quot;</code>：允许读和写（创建与更新）</li><li><code>gorm:&quot;&lt;-:false&quot;</code>：允许读，禁止写</li><li><code>gorm:&quot;-&gt;&quot;</code>：只读（除非有自定义配置，否则禁止写）</li><li><code>gorm:&quot;-&gt;;&lt;-:create&quot;</code>：允许读和写，创建</li><li><code>gorm:&quot;-&gt;:false;&lt;-:create&quot;</code>：仅创建（禁止从 db 读）</li><li><code>gorm:&quot;-&quot;</code> ：通过 struct 读写会忽略该字段</li><li><code>gorm:&quot;-:all&quot;</code>：通过 struct 读写、迁移会忽略该字段</li><li><code>gorm:&quot;-:migration&quot;</code>：通过 struct 迁移会忽略该字段</li></ul><blockquote><p>注意：使用 GORM Migrator 创建表时，不会创建被忽略的字段</p></blockquote><h2 id="自动填充创建-更新时间"><a href="#自动填充创建-更新时间" class="headerlink" title="自动填充创建&#x2F;更新时间"></a>自动填充创建&#x2F;更新时间</h2><p><code>gorm</code>约定使用<code>CreatedAt</code>、<code>UpdateAt</code>自动填充时间。</p><p>如果是其它字段可以使用<code>autoCreateTime</code>、<code>autoUpdateTime</code>标签。</p><p>如果要使用毫秒或者纳秒（UNIX）时间戳，而不是<code>time</code>，只需要把字段类型<code>time.Time</code>改成<code>int64</code>类型即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  CreatedAt time.Time <span class="hljs-comment">// 在创建时，如果该字段值为零值，则使用当前时间填充</span><br>  UpdatedAt <span class="hljs-type">int</span>       <span class="hljs-comment">// 在创建时该字段值为零值或者在更新时，使用当前时间戳秒数填充</span><br>  Updated   <span class="hljs-type">int64</span> <span class="hljs-string">`gorm:&quot;autoUpdateTime:nano&quot;`</span> <span class="hljs-comment">// 使用时间戳纳秒数填充更新时间</span><br>  Updated   <span class="hljs-type">int64</span> <span class="hljs-string">`gorm:&quot;autoUpdateTime:milli&quot;`</span> <span class="hljs-comment">// 使用时间戳毫秒数填充更新时间</span><br>  Created   <span class="hljs-type">int64</span> <span class="hljs-string">`gorm:&quot;autoCreateTime&quot;`</span>      <span class="hljs-comment">// 使用时间戳秒数填充创建时间</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌入结构体"><a href="#嵌入结构体" class="headerlink" title="嵌入结构体"></a>嵌入结构体</h2><h3 id="匿名结构体字段"><a href="#匿名结构体字段" class="headerlink" title="匿名结构体字段"></a>匿名结构体字段</h3><p>对于匿名字段，gorm会将其字段包含在父结构体中，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  gorm.Model<br>  Name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-comment">// 等效于</span><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>  ID        <span class="hljs-type">uint</span>           <span class="hljs-string">`gorm:&quot;primaryKey&quot;`</span><br>  CreatedAt time.Time<br>  UpdatedAt time.Time<br>  DeletedAt gorm.DeletedAt <span class="hljs-string">`gorm:&quot;index&quot;`</span><br>  Name <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="非匿名结构体字段"><a href="#非匿名结构体字段" class="headerlink" title="非匿名结构体字段"></a>非匿名结构体字段</h3><p>通过标签<code>embedded</code>嵌入，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Author <span class="hljs-keyword">struct</span> &#123;<br>    Name  <span class="hljs-type">string</span><br>    Email <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Blog <span class="hljs-keyword">struct</span> &#123;<br>  ID      <span class="hljs-type">int</span><br>  Author  Author <span class="hljs-string">`gorm:&quot;embedded&quot;`</span><br>  Upvotes <span class="hljs-type">int32</span><br>&#125;<br><span class="hljs-comment">// 等效于</span><br><span class="hljs-keyword">type</span> Blog <span class="hljs-keyword">struct</span> &#123;<br>  ID    <span class="hljs-type">int64</span><br>  Name  <span class="hljs-type">string</span><br>  Email <span class="hljs-type">string</span><br>  Upvotes  <span class="hljs-type">int32</span><br>&#125;<br></code></pre></td></tr></table></figure><p>标签 <code>embeddedPrefix</code> 来为 db 中的字段名添加前缀，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Blog <span class="hljs-keyword">struct</span> &#123;<br>  ID      <span class="hljs-type">int</span><br>  Author  Author <span class="hljs-string">`gorm:&quot;embedded;embeddedPrefix:author_&quot;`</span>  <span class="hljs-comment">// 即在表blog中，新增author_name,author_email</span><br>  Upvotes <span class="hljs-type">int32</span><br>&#125;<br><span class="hljs-comment">// 等效于</span><br><span class="hljs-keyword">type</span> Blog <span class="hljs-keyword">struct</span> &#123;<br>  ID          <span class="hljs-type">int64</span><br>  AuthorName <span class="hljs-type">string</span><br>  AuthorEmail <span class="hljs-type">string</span><br>  Upvotes     <span class="hljs-type">int32</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字段标签"><a href="#字段标签" class="headerlink" title="字段标签"></a>字段标签</h2><p>在声明model时，tag是可选的，tag大小写不敏感，但建议使用驼峰风格。</p><table><thead><tr><th align="left">标签名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">column</td><td align="left">指定 db 列名</td></tr><tr><td align="left">type</td><td align="left">列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如：<code>not null</code>、<code>size</code>, <code>autoIncrement</code>… 像 <code>varbinary(8)</code> 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如：<code>MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT</code></td></tr><tr><td align="left">serializer</td><td align="left">指定将数据序列化或反序列化到数据库中的序列化器, 例如: <code>serializer:json/gob/unixtime</code></td></tr><tr><td align="left">size</td><td align="left">定义列数据类型的大小或长度，例如 <code>size: 256</code></td></tr><tr><td align="left">primaryKey</td><td align="left">将列定义为主键</td></tr><tr><td align="left">unique</td><td align="left">将列定义为唯一键</td></tr><tr><td align="left">default</td><td align="left">定义列的默认值</td></tr><tr><td align="left">precision</td><td align="left">指定列的精度</td></tr><tr><td align="left">scale</td><td align="left">指定列大小</td></tr><tr><td align="left">not null</td><td align="left">指定列为 NOT NULL</td></tr><tr><td align="left">autoIncrement</td><td align="left">指定列为自动增长</td></tr><tr><td align="left">autoIncrementIncrement</td><td align="left">自动步长，控制连续记录之间的间隔</td></tr><tr><td align="left">embedded</td><td align="left">嵌套字段</td></tr><tr><td align="left">embeddedPrefix</td><td align="left">嵌入字段的列名前缀</td></tr><tr><td align="left">autoCreateTime</td><td align="left">创建时追踪当前时间，对于 <code>int</code> 字段，它会追踪时间戳秒数，您可以使用 <code>nano</code>&#x2F;<code>milli</code> 来追踪纳秒、毫秒时间戳，例如：<code>autoCreateTime:nano</code></td></tr><tr><td align="left">autoUpdateTime</td><td align="left">创建&#x2F;更新时追踪当前时间，对于 <code>int</code> 字段，它会追踪时间戳秒数，您可以使用 <code>nano</code>&#x2F;<code>milli</code> 来追踪纳秒、毫秒时间戳，例如：<code>autoUpdateTime:milli</code></td></tr><tr><td align="left">index</td><td align="left">根据参数创建索引，多个字段使用相同的名称则创建复合索引，查看 <a href="https://gorm.io/zh_CN/docs/indexes.html">索引</a> 获取详情</td></tr><tr><td align="left">uniqueIndex</td><td align="left">与 <code>index</code> 相同，但创建的是唯一索引</td></tr><tr><td align="left">check</td><td align="left">创建检查约束，例如 <code>check:age &gt; 13</code>，查看 <a href="https://gorm.io/zh_CN/docs/constraints.html">约束</a> 获取详情</td></tr><tr><td align="left">&lt;-</td><td align="left">设置字段写入的权限， <code>&lt;-:create</code> 只创建、<code>&lt;-:update</code> 只更新、<code>&lt;-:false</code> 无写入权限、<code>&lt;-</code> 创建和更新权限</td></tr><tr><td align="left">-&gt;</td><td align="left">设置字段读的权限，<code>-&gt;:false</code> 无读权限</td></tr><tr><td align="left">-</td><td align="left">忽略该字段，<code>-</code> 表示无读写，<code>-:migration</code> 表示无迁移权限，<code>-:all</code> 表示无读写迁移权限</td></tr><tr><td align="left">comment</td><td align="left">迁移时为字段添加注释</td></tr></tbody></table><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gorm.io/docs/">GORM 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> gorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.连接数据库</title>
      <link href="/posts/edfdcddae0d0/"/>
      <url>/posts/edfdcddae0d0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>当前数据库用的是<code>mysql</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">dsn := <span class="hljs-string">&quot;root:1234@tcp(192.168.31.109:3306)/practice?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br>_, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="添加mysql配置"><a href="#添加mysql配置" class="headerlink" title="添加mysql配置"></a>添加mysql配置</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 配置</span><br>db, err := gorm.Open(mysql.New(mysql.Config&#123;<br>DSN:                       dsn,   <span class="hljs-comment">// DSN data source name</span><br>DefaultStringSize:         <span class="hljs-number">256</span>,   <span class="hljs-comment">// string 类型字段的默认长度</span><br>DisableDatetimePrecision:  <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持</span><br>DontSupportRenameIndex:    <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引</span><br>DontSupportRenameColumn:   <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列</span><br>SkipInitializeWithVersion: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 根据当前 MySQL 版本自动配置</span><br>&#125;), &amp;gorm.Config&#123;&#125;)<br></code></pre></td></tr></table></figure><h1 id="添加gorm配置"><a href="#添加gorm配置" class="headerlink" title="添加gorm配置"></a>添加gorm配置</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;<br>SkipDefaultTransaction: <span class="hljs-literal">false</span>,<span class="hljs-comment">// 跳过默认事务</span><br>NamingStrategy: schema.NamingStrategy&#123; <span class="hljs-comment">// 命名策略</span><br>TablePrefix:   <span class="hljs-string">&quot;tb_&quot;</span>,<span class="hljs-comment">// 表名前缀</span><br>SingularTable: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 表名是否为单数，如果是false, User-&gt;tb_users</span><br>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="配置连接池"><a href="#配置连接池" class="headerlink" title="配置连接池"></a>配置连接池</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">sqlDb, _ := db.DB()<br><span class="hljs-comment">// 最大空闲连接数</span><br>sqlDb.SetMaxIdleConns(<span class="hljs-number">10</span>)<br><span class="hljs-comment">// 最大连接数</span><br>sqlDb.SetMaxOpenConns(<span class="hljs-number">100</span>)<br><span class="hljs-comment">// 连接可复用最大存活时间，如果小于0，则连接不会被关闭</span><br>sqlDb.SetConnMaxLifetime(time.Hour)<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gorm.io/docs/">GORM 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> gorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.快速入门</title>
      <link href="/posts/ade027eea3d7/"/>
      <url>/posts/ade027eea3d7/</url>
      
        <content type="html"><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>全功能ORM</li><li>关联 (<code>Has One</code>，<code>Has Many</code>，<code>Belongs To</code>，<code>Many To Many</code>，<code>多态</code>，<code>单表继承</code>)</li><li>Create，Save，Update，Delete，Find 中钩子方法</li><li>支持 <code>Preload</code>、<code>Joins</code> 的预加载</li><li>事务，嵌套事务，Save Point，Rollback To Saved Point</li><li>Context、预编译模式、DryRun 模式</li><li>批量插入，FindInBatches，Find&#x2F;Create with Map，使用 SQL 表达式、Context Valuer 进行 CRUD</li><li>SQL 构建器，Upsert，数据库锁，Optimizer&#x2F;Index&#x2F;Comment Hint，命名参数，子查询</li><li>复合主键，索引，约束</li><li>自动迁移表</li><li>自定义 Logger</li><li>灵活的可扩展插件 API：Database Resolver（多数据库，读写分离）、Prometheus…</li><li>每个特性都经过了测试的重重考验</li><li>开发者友好</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get -u gorm.io/gorm<br><span class="hljs-keyword">go</span> get gorm.io/driver/mysql<br></code></pre></td></tr></table></figure><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm/schema&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Product <span class="hljs-keyword">struct</span> &#123;<br>gorm.Model<br>Code  <span class="hljs-type">string</span><br>Price <span class="hljs-type">uint</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 连接数据库</span><br>dsn := <span class="hljs-string">&quot;root:1234@tcp(192.168.31.109:3306)/practice?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br>db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;<br>SkipDefaultTransaction: <span class="hljs-literal">false</span>,<br>NamingStrategy: schema.NamingStrategy&#123;<br>TablePrefix:   <span class="hljs-string">&quot;tb_&quot;</span>,<br>SingularTable: <span class="hljs-literal">true</span>,<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;连接数据库失败：%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 创建表合并到数据库</span><br>db.AutoMigrate(&amp;Product&#123;&#125;)<br><br><span class="hljs-comment">// create</span><br>db.Create(&amp;Product&#123;Code: <span class="hljs-string">&quot;C01&quot;</span>, Price: <span class="hljs-number">100</span>&#125;)<br><br><span class="hljs-comment">// update</span><br><span class="hljs-keyword">var</span> product Product<br><span class="hljs-comment">// 更新单个字段</span><br>db.Model(&amp;product).Update(<span class="hljs-string">&quot;Price&quot;</span>, <span class="hljs-number">200</span>).Where(<span class="hljs-string">&quot;Code&quot;</span>, <span class="hljs-string">&quot;C01&quot;</span>)<br><span class="hljs-comment">// 更新多个字段</span><br>db.Model(&amp;product).Updates(&amp;Product&#123;Price: <span class="hljs-number">200</span>, Code: <span class="hljs-string">&quot;K01&quot;</span>&#125;).Where(<span class="hljs-string">&quot;Code&quot;</span>, <span class="hljs-string">&quot;C01&quot;</span>)<br><span class="hljs-comment">// 仅更新非零值字段</span><br>db.Model(&amp;product).Updates(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;Price&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;Code&quot;</span>: <span class="hljs-string">&quot;F42&quot;</span>&#125;).Where(<span class="hljs-string">&quot;Code&quot;</span>, <span class="hljs-string">&quot;K01&quot;</span>)<br><br><span class="hljs-comment">// read</span><br><span class="hljs-comment">// 查找主键为1的记录</span><br>db.First(&amp;product, <span class="hljs-number">1</span>)<br><span class="hljs-comment">// 查找code字段值为F42的记录</span><br>db.First(&amp;product, <span class="hljs-string">&quot;code = ?&quot;</span>, <span class="hljs-string">&quot;F42&quot;</span>)<br><br><span class="hljs-comment">// delete</span><br><span class="hljs-comment">// 删除主键id为1的记录</span><br>db.Delete(&amp;product, <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://gorm.io/docs/">GORM 文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> gorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.goctl</title>
      <link href="/posts/e725e07a3e28/"/>
      <url>/posts/e725e07a3e28/</url>
      
        <content type="html"><![CDATA[<h1 id="指令概览"><a href="#指令概览" class="headerlink" title="指令概览"></a>指令概览</h1><p><img src="/posts/e725e07a3e28/goctl-6fcfe4bce2787b1122816329e94db82a.png" alt="img"></p><h1 id="文件命名风格"><a href="#文件命名风格" class="headerlink" title="文件命名风格"></a>文件命名风格</h1><h2 id="格式化符号表"><a href="#格式化符号表" class="headerlink" title="格式化符号表"></a>格式化符号表</h2><table><thead><tr><th>格式化符号</th><th>格式化后的字符串</th><th>说明</th></tr></thead><tbody><tr><td><code>gozero</code></td><td><code>welcometogozero</code></td><td>lower case</td></tr><tr><td><code>goZero</code></td><td><code>welcomeToGoZero</code></td><td>camel case</td></tr><tr><td><code>go_zero</code></td><td><code>welcome_to_go_zero</code></td><td>snake case</td></tr><tr><td><code>Go#zero</code></td><td><code>Welcome#to#go#zero</code></td><td>自定义分隔符，如分割符 <code>#</code></td></tr><tr><td><code>GOZERO</code></td><td><code>WELCOMETOGOZERO</code></td><td>upper case</td></tr><tr><td><code>_go#zero_</code></td><td><code>_welcome#to#go#zero_</code></td><td>前缀、后缀及自定义分割符，这里使用 <code>_</code> 作为前缀和后缀，使用 <code>#</code> 作为分割符</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成 lower case 文件和目录示例</span><br>$ goctl api new demo --style gozero<br><span class="hljs-comment"># 生成 snake case 文件和目录示例</span><br>$ goctl api new demo --style go_zero<br><span class="hljs-comment"># 生成 camel case 文件和目录示例</span><br>$ goctl api new demo --style goZero<br></code></pre></td></tr></table></figure><h1 id="goctl-api"><a href="#goctl-api" class="headerlink" title="goctl api"></a>goctl api</h1><h2 id="快速生成-Go-HTTP-服务"><a href="#快速生成-Go-HTTP-服务" class="headerlink" title="快速生成 Go HTTP 服务"></a>快速生成 Go HTTP 服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl api new 服务名<br></code></pre></td></tr></table></figure><h2 id="根据-api-文件生成-Go-HTTP-代码"><a href="#根据-api-文件生成-Go-HTTP-代码" class="headerlink" title="根据 api 文件生成 Go HTTP 代码"></a>根据 api 文件生成 Go HTTP 代码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl api go --api 文件名.api --<span class="hljs-built_in">dir</span> .<br></code></pre></td></tr></table></figure><h1 id="goctl-rpc"><a href="#goctl-rpc" class="headerlink" title="goctl rpc"></a>goctl rpc</h1><h2 id="生成proto文件"><a href="#生成proto文件" class="headerlink" title="生成proto文件"></a>生成proto文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl rpc --o 文件名.proto<br></code></pre></td></tr></table></figure><h2 id="生成rpc服务代码"><a href="#生成rpc服务代码" class="headerlink" title="生成rpc服务代码"></a>生成rpc服务代码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl rpc new 服务名<br></code></pre></td></tr></table></figure><h2 id="根据proto文件生成rpc服务代码"><a href="#根据proto文件生成rpc服务代码" class="headerlink" title="根据proto文件生成rpc服务代码"></a>根据proto文件生成rpc服务代码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl rpc protoc 文件名.proto --go_out=. --go-rpc_out=. --zrpc_out=.<br></code></pre></td></tr></table></figure><p>其中<code>-m</code>可以表示是否生成多个rpc服务，根据proto文件中的service的数量生成对应数量的rpc服务。</p><h1 id="goctl-model"><a href="#goctl-model" class="headerlink" title="goctl model"></a>goctl model</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="从sql文件生成model"><a href="#从sql文件生成model" class="headerlink" title="从sql文件生成model"></a>从sql文件生成model</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl model mysql ddl -c --src sql文件名.sql --<span class="hljs-built_in">dir</span> 生成代码的目录<br></code></pre></td></tr></table></figure><p><code>-c</code>是否生成带缓存的代码</p><h3 id="从数据库连接生成model"><a href="#从数据库连接生成model" class="headerlink" title="从数据库连接生成model"></a>从数据库连接生成model</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gotcl model mysql datasource --url 数据库连接 -t 表名 --<span class="hljs-built_in">dir</span> 生成代码的目录<br></code></pre></td></tr></table></figure><h1 id="goctl-docker"><a href="#goctl-docker" class="headerlink" title="goctl docker"></a>goctl docker</h1><h2 id="生成Dockerfile文件"><a href="#生成Dockerfile文件" class="headerlink" title="生成Dockerfile文件"></a>生成Dockerfile文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl docker --go 主函数文件名.go --exe 主函数文件名<br></code></pre></td></tr></table></figure><h1 id="goctl-env"><a href="#goctl-env" class="headerlink" title="goctl env"></a>goctl env</h1><h2 id="查看goctl环境变量"><a href="#查看goctl环境变量" class="headerlink" title="查看goctl环境变量"></a>查看goctl环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl <span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">GOCTL_OS=windows// 操作系统<br>GOCTL_ARCH=amd64// 系统架构<br>GOCTL_HOME=C:\Users\WER\.goctl// goctl配置目录<br>GOCTL_DEBUG=False// 是否开始debug模式 True/False<br>GOCTL_CACHE=C:\Users\WER\.goctl\cache // 缓存目录<br>GOCTL_EXPERIMENTAL=on// 是否开启试验性功能 on/off<br>GOCTL_VERSION=1.6.4// goctl版本<br>PROTOC_VERSION=26.1// protoc版本<br>PROTOC_GEN_GO_VERSION=v1.33.0// protoc_gen_go插件版本<br>PROTO_GEN_GO_GRPC_VERSION=1.3.0// proto_gen_grpc插件版本<br></code></pre></td></tr></table></figure><h2 id="检查goctl依赖环境"><a href="#检查goctl依赖环境" class="headerlink" title="检查goctl依赖环境"></a>检查goctl依赖环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl <span class="hljs-built_in">env</span> check --verbose<br></code></pre></td></tr></table></figure><p>如果依赖缺少，可以加上<code>--install</code>或<code>-i</code>，安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl <span class="hljs-built_in">env</span> check --verbose --install<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl <span class="hljs-built_in">env</span> install<br></code></pre></td></tr></table></figure><h1 id="goctl-kube"><a href="#goctl-kube" class="headerlink" title="goctl kube"></a>goctl kube</h1><h2 id="快速生成k8s配置文件"><a href="#快速生成k8s配置文件" class="headerlink" title="快速生成k8s配置文件"></a>快速生成k8s配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ goctl kube deploy -name deployment名称 -namespace k8s域名空间 -image 镜像名称 -o yaml文件名称 -port 监听端口<br></code></pre></td></tr></table></figure><p>具体参数表格如下：</p><table><thead><tr><th>参数字段</th><th>参数类型</th><th>是否必填</th><th>默认值</th><th>参数说明</th></tr></thead><tbody><tr><td>branch</td><td>string</td><td>NO</td><td>空字符串</td><td>远程模板所在 git 分支名称，仅当 <code>remote</code> 有值时使用</td></tr><tr><td>home</td><td>string</td><td>NO</td><td><code>$&#123;HOME&#125;/.goctl</code></td><td>本地模板文件目录</td></tr><tr><td>image</td><td>string</td><td>YES</td><td>空字符串</td><td>镜像名称</td></tr><tr><td>imagePullPolicy</td><td>string</td><td>YES</td><td>空字符串</td><td>镜像拉取策略，Always：总是拉取，Never：从不拉取，IfNotPresent：不存在时拉取</td></tr><tr><td>limitCpu</td><td>int</td><td>NO</td><td><code>1000</code></td><td>cpu 资源使用上限</td></tr><tr><td>limitMem</td><td>int</td><td>NO</td><td><code>1024</code></td><td>内存资源使用上限</td></tr><tr><td>maxReplicas</td><td>int</td><td>NO</td><td><code>10</code></td><td>最大保副本数</td></tr><tr><td>minReplicas</td><td>int</td><td>NO</td><td><code>3</code></td><td>最小保副本数</td></tr><tr><td>name</td><td>string</td><td>YES</td><td>空字符串</td><td>deployment 名称</td></tr><tr><td>namespace</td><td>string</td><td>YES</td><td>空字符串</td><td>k8s 域名空间</td></tr><tr><td>nodePort</td><td>int</td><td>YES</td><td>0</td><td>需要暴露的服务端口</td></tr><tr><td>o</td><td>string</td><td>YES</td><td>空字符串</td><td>yaml 文件名称</td></tr><tr><td>port</td><td>int</td><td>YES</td><td>0</td><td>需要监听的端口</td></tr><tr><td>remote</td><td>string</td><td>NO</td><td>空字符串</td><td>远程模板所在 git 仓库地址，当此字段传值时，优先级高于 <code>home</code> 字段值</td></tr><tr><td>replicas</td><td>int</td><td>NO</td><td><code>3</code></td><td>副本数</td></tr><tr><td>requestCpu</td><td>int</td><td>NO</td><td><code>500</code></td><td>cpu 需求额度</td></tr><tr><td>requestMem</td><td>int</td><td>NO</td><td><code>512</code></td><td>内存需求额度</td></tr><tr><td>revisions</td><td>int</td><td>NO</td><td><code>1</code></td><td>保留的版本数量，便于回滚</td></tr><tr><td>secret</td><td>string</td><td>NO</td><td>空字符串</td><td>拉取镜像的密钥</td></tr><tr><td>serviceAccount</td><td>string</td><td>NO</td><td>空字符串</td><td>服务账户</td></tr><tr><td>targetPort</td><td>int</td><td>NO</td><td>0</td><td>目标 port</td></tr></tbody></table><h1 id="goctl-quickstart"><a href="#goctl-quickstart" class="headerlink" title="goctl quickstart"></a>goctl quickstart</h1><h2 id="快速生成单体或微服务"><a href="#快速生成单体或微服务" class="headerlink" title="快速生成单体或微服务"></a>快速生成单体或微服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">mkdir</span> quickstart &amp;&amp; <span class="hljs-built_in">cd</span> quickstart<br>$ goctl quickstart --service-type 服务类型<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数字段</th><th>参数类型</th><th>是否必填</th><th>默认值</th><th>参数说明</th></tr></thead><tbody><tr><td>service-type</td><td>string</td><td>NO</td><td>mono</td><td>生成 demo 服务类型，mono：单体服务，micro：微服务</td></tr></tbody></table><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://go-zero.dev/docs/tutorials/cli/overview">指令概览 | go-zero Documentation</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> go-zero </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> go-zero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.快速开始</title>
      <link href="/posts/9bc5aec70087/"/>
      <url>/posts/9bc5aec70087/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>下面通过短链微服务来演示通过<code>go-zero</code>快速创建微服务的过程。</p><p>什么是短链服务？</p><p>短链服务就是将长的URL网址，通过程序计算方式，转换成简短的网址字符串。</p><h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="/posts/9bc5aec70087/shorturl-arch.png" alt="shorturl-arch"></p><h1 id="逻辑分层"><a href="#逻辑分层" class="headerlink" title="逻辑分层"></a>逻辑分层</h1><ul><li><p>API Gateway</p><p><img src="/posts/9bc5aec70087/shorturl-api.png" alt="shorturl-api"></p></li><li><p>RPC</p><p><img src="/posts/9bc5aec70087/shorturl-rpc.png" alt="shorturl-rpc"></p></li><li><p>model</p><p><img src="/posts/9bc5aec70087/shorturl-model-1713877648491.png" alt="shorturl-model"></p></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="docker安装etcd"><a href="#docker安装etcd" class="headerlink" title="docker安装etcd"></a>docker安装<code>etcd</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker pull etcd:latest<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/etcd_docker/data<br>sudo <span class="hljs-built_in">chmod</span> 777 /opt/etcd_docker/data<br>sudo docker run -d \<br>--name etcd-server  \<br>--publish 2379:2379 \<br>--publish 2380:2380 \<br>    --<span class="hljs-built_in">env</span> ALLOW_NONE_AUTHENTICATION=<span class="hljs-built_in">yes</span>  \<br>    --<span class="hljs-built_in">env</span> ETCD_ADVERTISE_CLIENT_URLS=http://etcd-server:2379 \<br>    -v /opt/etcd_docker/data:/bitnami/etcd/data    bitnami/etcd:latest<br></code></pre></td></tr></table></figure><h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装<code>mysql</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker pull mysql:latest<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/mysql_docker<br>sudo <span class="hljs-built_in">chmod</span> 777 /opt/mysql_docker<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/mysql_docker/conf<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/mysql_docker/logs<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/mysql_docker/data<br>sudo vim /opt/mysql_docker/conf/my.cnf<br></code></pre></td></tr></table></figure><p>写入my.cnf配置内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># For advice on how to change settings please see</span><br><span class="hljs-comment"># http://dev.mysql.com/doc/refman/8.3/en/server-configuration-defaults.html</span><br><br>[mysqld]<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="hljs-comment"># innodb_buffer_pool_size = 128M</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="hljs-comment"># changes to the binary log between backups.</span><br><span class="hljs-comment"># log_bin</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="hljs-comment"># join_buffer_size = 128M</span><br><span class="hljs-comment"># sort_buffer_size = 2M</span><br><span class="hljs-comment"># read_rnd_buffer_size = 2M</span><br><br><span class="hljs-comment"># Remove leading # to revert to previous value for default_authentication_plugin,</span><br><span class="hljs-comment"># this will increase compatibility with older clients. For background, see:</span><br><span class="hljs-comment"># https://dev.mysql.com/doc/refman/8.3/en/server-system-variables.html#sysvar_default_authentication_plugin</span><br><span class="hljs-comment"># default-authentication-plugin=mysql_native_password</span><br>host-cache-size=0<br>skip-name-resolve<br>datadir=/var/lib/mysql<br>socket=/var/run/mysqld/mysqld.sock<br>secure-file-priv=/var/lib/mysql-files<br>user=mysql<br><br>pid-file=/var/run/mysqld/mysqld.pid<br>[client]<br>socket=/var/run/mysqld/mysqld.sock<br><br>!includedir /etc/mysql/conf.d/<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker run \<br>--name mysqlserver \<br>    -v /opt/mysql_docker/conf/my.cnf:/etc/my.cnf \<br>    -v /opt/mysql_docker/logs/mysqld.log:/var/log/mysqld.log \<br>    -v /opt/mysql_docker/data:/var/lib/mysql \<br>    -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 mysql:latest<br></code></pre></td></tr></table></figure><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装<code>redis</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker pull redis:latest<br></code></pre></td></tr></table></figure><p>创建挂载目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">mkdir</span> -p /opt/redis_docker/conf<br>sudo <span class="hljs-built_in">chmod</span> 777 /opt/redis_docker<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/redis_docker/data<br></code></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker run \<br>--restart=always \<br>-p 6379:6379 \<br>--name redis-server \<br>-v /opt/redis_docker/conf/redis.conf:/etc/redis/redis.conf \<br>-v /opt/redis_docker/data:/data \<br>-d \<br>redis:latest redis-server /etc/redis/redis.conf \<br>--appendonly <span class="hljs-built_in">yes</span> \<br>--requirepass 123456<br></code></pre></td></tr></table></figure><h2 id="安装goctl工具"><a href="#安装goctl工具" class="headerlink" title="安装goctl工具"></a>安装goctl工具</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># go 1.16 及以下版本</span><br>GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl@latest<br><span class="hljs-comment"># go1.16 以上版本</span><br>GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest<br></code></pre></td></tr></table></figure><h2 id="安装protoc和protoc-gen-go"><a href="#安装protoc和protoc-gen-go" class="headerlink" title="安装protoc和protoc-gen-go"></a>安装<code>protoc</code>和<code>protoc-gen-go</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl <span class="hljs-built_in">env</span> install --verbose --force<br></code></pre></td></tr></table></figure><h2 id="构建工作目录"><a href="#构建工作目录" class="headerlink" title="构建工作目录"></a>构建工作目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p shorturl<br></code></pre></td></tr></table></figure><h1 id="编写API-Gateway代码"><a href="#编写API-Gateway代码" class="headerlink" title="编写API Gateway代码"></a>编写API Gateway代码</h1><ol><li><p>创建api目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p shorturl/api<br></code></pre></td></tr></table></figure></li><li><p>在目录<code>shorturl/api</code>下生成<code>api/shorturl.api</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh">syntax = <span class="hljs-string">&quot;v1&quot;</span><br><br><span class="hljs-built_in">type</span> (<br>expandReq &#123;<br>shorten string `form:<span class="hljs-string">&quot;shorten&quot;</span>`<br>&#125;<br>expandResp &#123;<br>url string `json:<span class="hljs-string">&quot;url&quot;</span>`<br>&#125;<br>)<br><br><span class="hljs-built_in">type</span> (<br>shortenReq &#123;<br>url string `form:<span class="hljs-string">&quot;url&quot;</span>`<br>&#125;<br>shortenResp &#123;<br>shorten string `json:<span class="hljs-string">&quot;shorten&quot;</span>`<br>&#125;<br>)<br><br>service shorturl-api &#123;<br>@handler ShortenHandler<br>get /shorten (shortenReq) returns (shortenResp)<br><br>@handler ExpandHandler<br>get /expend (expandReq) returns (expandResp)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在目录<code>shorturl/api</code>下，使用goctl生成代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl api go -api shorturl.api -<span class="hljs-built_in">dir</span> .<br></code></pre></td></tr></table></figure><p>生成的文件结构如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">D:.<br>│  go.mod<br>│  shorturl.api<br>│  shorturl.go// mian<br>│<br>├─etc<br>│      shorturl-api.yaml// 配置文件<br>│<br>└─internal<br>    ├─config<br>    │      config.go// 定义配置<br>    │<br>    ├─handler<br>    │      expandhandler.go // 实现expandhandler<br>    │      routes.go// 定义路由<br>    │      shortenhandler.go// 实现shortenhandler<br>    │<br>    ├─logic<br>    │      expandlogic.go// <span class="hljs-built_in">expand</span>的逻辑处理<br>    │      shortenlogic.go// shorten的逻辑处理<br>    │<br>    ├─svc<br>    │      servicecontext.go// 服务依赖的上下文<br>    │<br>    └─types<br>            types.go// 定义请求，响应的结构体<br></code></pre></td></tr></table></figure></li><li><p>整理依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go mod tidy<br></code></pre></td></tr></table></figure></li><li><p>启动API Gateway服务，默认端口为8888</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go run .\shorturl.go -f .\etc\shorturl-api.yaml<br></code></pre></td></tr></table></figure></li><li><p>测试API Gateway服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl <span class="hljs-string">&quot;http://localhost:8888/shorten?url=https://go-zero.dev&quot;</span><br></code></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">StatusCode        : 200<br>StatusDescription : OK<br>Content           : null<br>RawContent        : HTTP/1.1 200 OK<br>                    Traceparent: 00-aa8a6873b07f1e769c41bb916de7fb5e-579a075af261081e-00<br>                    Content-Length: 4<br>                    Content-Type: application/json; charset=utf-8<br>                    Date: Wed, 24 Apr 2024 07:15:10 GMT<br><br>                    null<br>Forms             : &#123;&#125;<br>Headers           : &#123;[Traceparent, 00-aa8a6873b07f1e769c41bb916de7fb5e-579a075af261081e-00], [Content-Length, 4], [Cont<br>                    ent-Type, application/json; charset=utf-8], [Date, Wed, 24 Apr 2024 07:15:10 GMT]&#125;<br>Images            : &#123;&#125;<br>InputFields       : &#123;&#125;<br>Links             : &#123;&#125;<br>ParsedHtml        : System.__ComObject<br>RawContentLength  : 4<br></code></pre></td></tr></table></figure><p>可以看出API Gateway只返回了null，接下来应该在rpc服务中实现业务逻辑。</p></li></ol><h1 id="编写transform-rpc服务"><a href="#编写transform-rpc服务" class="headerlink" title="编写transform rpc服务"></a>编写transform rpc服务</h1><ol><li><p>在<code>shorturl</code>目录下创建<code>rpc/transform</code>目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p rpc/transform<br></code></pre></td></tr></table></figure></li><li><p>在<code>rpc/transform</code>目录下，使用goctl创建<code>transform.proto</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpctl rpc -o transform.proto<br></code></pre></td></tr></table></figure><p>修改文件内容如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> transform;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;./transform&quot;</span>;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">expandReq</span>&#123;<br>  <span class="hljs-type">string</span> shorten = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">expandResp</span>&#123;<br>  <span class="hljs-type">string</span> url = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">shortenReq</span>&#123;<br>  <span class="hljs-type">string</span> url = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">shortenResp</span>&#123;<br>  <span class="hljs-type">string</span> shorten = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">service  </span><span class="hljs-title class_">transformer</span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> expand(expandReq) <span class="hljs-keyword">returns</span>(expandResp)</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> shorten(shortenReq) <span class="hljs-keyword">returns</span>(shortenResp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用goctl生成rpc代码，在<code>rpc/transform</code>目录下执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl rpc protoc .\transform.proto --go_out=. --go-grpc_out=. --zrpc_out=.<br></code></pre></td></tr></table></figure><p>文件结构如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh">D:.<br>│  go.mod<br>│  transform.go// main<br>│  transform.proto<br>│<br>├─etc<br>│      transform.yaml// 配置文件<br>│<br>├─internal<br>│  ├─config<br>│  │      config.go// 配置定义<br>│  │<br>│  ├─logic<br>│  │      expandlogic.go// <span class="hljs-built_in">expand</span>逻辑实现<br>│  │      shortenlogic.go// shorten逻辑实现<br>│  │<br>│  ├─server<br>│  │      transformerserver.go// 服务调用入口<br>│  │<br>│  └─svc<br>│          servicecontext.go// 服务上下文，传递依赖<br>│<br>├─transform<br>│      transform.pb.go<br>│      transform_grpc.pb.go<br>│<br>└─transformer<br>        transformer.go// 提供外部调用方法<br></code></pre></td></tr></table></figure></li><li><p>整理依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go mod tidy<br></code></pre></td></tr></table></figure></li><li><p>go.18版本后可以使用<code>go work</code>进行工作空间管理</p><p>在<code>shorturl</code>目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">go work init<br>go work use api<br>go work use rpc/transform<br></code></pre></td></tr></table></figure></li><li><p>启动etcd服务，如果未开启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo docker start etcd-server<br></code></pre></td></tr></table></figure></li><li><p>启动transform服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go run transform.go -f etc/transform.yaml<br>Starting rpc server at 127.0.0.1:8080...<br></code></pre></td></tr></table></figure></li><li><p>查看服务注册情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo docker -it etcd-server bash<br>$ ETCDCTL_API=3 etcdctl get transform.rpc --prefix<br>transform.rpc/7587878241927984646<br>192.168.31.249:8080<br></code></pre></td></tr></table></figure></li></ol><h1 id="API-Gateway调用transform-rpc服务"><a href="#API-Gateway调用transform-rpc服务" class="headerlink" title="API Gateway调用transform rpc服务"></a>API Gateway调用transform rpc服务</h1><ol><li><p>修改配置文件<code>shorturl/api/etc/shorturl-api.yaml</code>，增加如下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Transform:</span><br>  <span class="hljs-attr">Etcd:</span><br>    <span class="hljs-attr">Hosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">localhost:2379</span><br>    <span class="hljs-attr">Key:</span> <span class="hljs-string">transform.rpc</span><br></code></pre></td></tr></table></figure><p>通过etcd自动发现可用的transform服务</p></li><li><p>修改<code>shorturl/api/internal/config/config.go</code>，增加transfrom服务依赖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;<br>rest.RestConf<br>Transform zrpc.RpcClientConf<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改<code>shorturl/api/internal/svc/servicecontext.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ServiceContext <span class="hljs-keyword">struct</span> &#123;<br>Config      config.Config<br>Transformer transformer.Transformer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServiceContext</span><span class="hljs-params">(c config.Config)</span></span> *ServiceContext &#123;<br><span class="hljs-keyword">return</span> &amp;ServiceContext&#123;<br>Config:      c,<br>Transformer: transformer.NewTransformer(zrpc.MustNewClient(c.Transform)),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难看出，其实就是定义了transfrom的<code>grpc client</code></p><p>通过<code>ServiceContext</code>可以在不同的业务逻辑中传递依赖</p></li><li><p>修改<code>Expand</code>逻辑，<code>shorturl/api/internal/logic/expandlogic.go</code>的<code>Expand</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ExpandLogic)</span></span> Expand(req *types.ExpandReq) (resp *types.ExpandResp, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// todo: add your logic here and delete this line</span><br><br>rpcResp, err := l.svcCtx.Transformer.Expand(l.ctx, &amp;transformer.ExpandReq&#123;<br>Shorten: req.Shorten,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">return</span> &amp;types.ExpandResp&#123;Url: rpcResp.Url&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里通过<code>serviceContext</code>调用了Transformer的rpc方法<code>Expand</code></p></li><li><p>修改<code>shorten</code>逻辑，<code>shorturl/api/internal/logic/shortenlogic.go</code>的<code>shorten</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ShortenLogic)</span></span> Shorten(req *types.ShortenReq) (resp *types.ShortenResp, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// todo: add your logic here and delete this line</span><br>rpcResp, err := l.svcCtx.Transformer.Shorten(l.ctx, &amp;transformer.ShortenReq&#123;Url: req.Url&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;types.ShortenResp&#123;Shorten: rpcResp.Shorten&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="集成mysql和redis"><a href="#集成mysql和redis" class="headerlink" title="集成mysql和redis"></a>集成mysql和redis</h1><ol><li><p>在docker中的mysql，创建数据库<code>gozero</code>，和表<code>shorturl</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo docker <span class="hljs-built_in">exec</span> -it mysql-server bash<br>sh-4.4<span class="hljs-comment"># mysql -u root -p</span><br>mysql&gt; create database gozero;<br>mysql&gt; use gozero<br>mysql&gt; CREATE TABLE `shorturl`<br>(<br>  `shorten` varchar(255) NOT NULL COMMENT <span class="hljs-string">&#x27;shorten key&#x27;</span>,<br>  `url` varchar(255) NOT NULL COMMENT <span class="hljs-string">&#x27;original url&#x27;</span>,<br>  PRIMARY KEY(`shorten`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br></code></pre></td></tr></table></figure></li><li><p>创建目录<code>rpc/transform/model</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p rpc/transform/model<br></code></pre></td></tr></table></figure></li><li><p>在目录<code>rpc/transform/model</code>下创建<code>shorturl.sql</code>，并填写内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim shorturl.sql<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `shorturl`<br>(<br>  `shorten` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;shorten key&#x27;</span>,<br>  `url` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;original url&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(`shorten`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>goctl</code>生成model代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">goctl model mysql ddl -c -src shorturl.sql -<span class="hljs-built_in">dir</span> .<br></code></pre></td></tr></table></figure><p><code>-c</code>表示使用<code>redis cache</code></p><p>生成的文件结构如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">shorturl.sql<br>shorturlmodel.go// 拓展代码<br>shorturlmodel_gen.go// CRUD+cache 代码<br>vars.go// 定义常量和变量<br></code></pre></td></tr></table></figure></li><li><p>整理依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go mod tidy<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件，<code>rpc/transform/etc/transform.yaml</code>，新增<code>mysql</code>和<code>redis</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># mysql</span><br><span class="hljs-attr">DataSource:</span> <span class="hljs-string">root:123456@tcp(localhost:3306)/gozero?charset=utf8mb4&amp;parseTime=True&amp;loc=Local</span><br><span class="hljs-attr">Table:</span> <span class="hljs-string">shorturl</span><br><span class="hljs-comment"># redis</span><br><span class="hljs-attr">Cache:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">Host:</span> <span class="hljs-number">172.22</span><span class="hljs-number">.106</span><span class="hljs-number">.16</span><span class="hljs-string">:6379</span><br>      <span class="hljs-attr">Pass:</span> <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>增加<code>mysql</code>和<code>redis</code>配置，修改<code>rpc/transform/internal/config/config.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;<br>zrpc.RpcServerConf<br>DataSource <span class="hljs-type">string</span><br>Table      <span class="hljs-type">string</span><br>Cache      cache.CacheConf<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新增model依赖，修改<code>rpc/transform/internal/svc/servicecontext.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ServiceContext <span class="hljs-keyword">struct</span> &#123;<br>Config config.Config<br>Model  model.ShorturlModel<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServiceContext</span><span class="hljs-params">(c config.Config)</span></span> *ServiceContext &#123;<br><span class="hljs-keyword">return</span> &amp;ServiceContext&#123;<br>Config: c,<br>Model:  model.NewShorturlModel(sqlx.NewMysql(c.DataSource), c.Cache),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改<code>expand</code>逻辑，修改<code>rpc/transform/internal/logic/expandlogic.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ExpandLogic)</span></span> Expand(in *transform.ExpandReq) (*transform.ExpandResp, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// todo: add your logic here and delete this line</span><br>res, err := l.svcCtx.Model.FindOne(l.ctx, in.Shorten)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;transform.ExpandResp&#123;<br>Url: res.Url,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改<code>shorten</code>逻辑，修改<code>rpc/transform/internal/logic/shortenlogic.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ShortenLogic)</span></span> Shorten(in *transform.ShortenReq) (*transform.ShortenResp, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// todo: add your logic here and delete this line</span><br>key := hash.Md5Hex([]<span class="hljs-type">byte</span>(in.Url))[:<span class="hljs-number">6</span>]<br>_, err := l.svcCtx.Model.Insert(l.ctx, &amp;model.Shorturl&#123;<br>Shorten: key,<br>Url:     in.Url,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;transform.ShortenResp&#123;<br>Shorten: key,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><ol><li><p>在docker中启动<code>redis</code>、<code>mysql</code>、<code>etcd</code></p></li><li><p>启动rpc服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go run transform.go -f etc/transform.yaml<br></code></pre></td></tr></table></figure></li><li><p>启动api服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go run shorturl.go -f etc/shorturl-api.yaml<br></code></pre></td></tr></table></figure></li><li><p>调用api shorten</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl http://localhost:8888/shorten?url=https://go-zero.dev<br></code></pre></td></tr></table></figure><p>返回如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">StatusCode        : 200<br>StatusDescription : OK<br>Content           : &#123;<span class="hljs-string">&quot;shorten&quot;</span>:<span class="hljs-string">&quot;b0434f&quot;</span>&#125;<br>RawContent        : HTTP/1.1 200 OK<br>                    Traceparent: 00-abd5977341fee34535b08c4fb836e6d5-c453e537567c2dbf-00<br>                    Content-Length: 20<br>                    Content-Type: application/json; charset=utf-8<br>                    Date: Thu, 25 Apr 2024 06:51:15 GMT<br><br>                    &#123;<span class="hljs-string">&quot;short...</span><br><span class="hljs-string">Forms             : &#123;&#125;</span><br><span class="hljs-string">Headers           : &#123;[Traceparent, 00-abd5977341fee34535b08c4fb836e6d5-c453e537567c2dbf-00], [Content-Length, 20], [Con </span><br><span class="hljs-string">                    tent-Type, application/json; charset=utf-8], [Date, Thu, 25 Apr 2024 06:51:15 GMT]&#125;</span><br><span class="hljs-string">Images            : &#123;&#125;</span><br><span class="hljs-string">InputFields       : &#123;&#125;</span><br><span class="hljs-string">Links             : &#123;&#125;</span><br><span class="hljs-string">ParsedHtml        : System.__ComObject</span><br><span class="hljs-string">RawContentLength  : 20</span><br></code></pre></td></tr></table></figure></li><li><p>调用api expand</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl http://localhost:8888/expand?shorten=b0434f<br></code></pre></td></tr></table></figure><p>返回如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">StatusCode        : 200<br>StatusDescription : OK<br>Content           : &#123;<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;https://go-zero.dev&quot;</span>&#125;<br>RawContent        : HTTP/1.1 200 OK<br>                    Traceparent: 00-4437efa1257eeb28414563521bb87510-d9d8b6f1bbb159e1-00<br>                    Content-Length: 29<br>                    Content-Type: application/json; charset=utf-8<br>                    Date: Thu, 25 Apr 2024 06:53:04 GMT<br><br>                    &#123;<span class="hljs-string">&quot;url&quot;</span>:...<br>Forms             : &#123;&#125;<br>Headers           : &#123;[Traceparent, 00-4437efa1257eeb28414563521bb87510-d9d8b6f1bbb159e1-00], [Content-Length, 29], [Con <br>                    tent-Type, application/json; charset=utf-8], [Date, Thu, 25 Apr 2024 06:53:04 GMT]&#125;<br>Images            : &#123;&#125;<br>InputFields       : &#123;&#125;<br>Links             : &#123;&#125;<br>ParsedHtml        : System.__ComObject<br>RawContentLength  : 29<br></code></pre></td></tr></table></figure></li></ol><h1 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h1><p>压测只测试了<code>expand</code>接口，使用<code>vegeta</code>进行压测</p><p>把日志等级改成<code>error</code>，防止过多的info影响压测结果，应该在每个yaml配置文件加上：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Log:</span><br>  <span class="hljs-attr">Level:</span> <span class="hljs-string">error</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;GET http://localhost:8888/expand?shorten=b0434f&quot;</span> | vegeta attack -duration 30s -rate 0 -max-workers 100 -output report.bin | vegeta report report.bin<br>Requests      [total, rate, throughput]  81084, 2702.78, 2700.73<br>Duration      [total, attack, <span class="hljs-built_in">wait</span>]      30.022961s, 30.0002055s, 22.7555ms<br>Latencies     [mean, 50, 95, 99, max]    37.006091ms, 35.182472ms, 48.566103ms, 64.785917ms, 107.8033ms<br>Bytes In      [total, mean]              2351436, 29.00<br>Bytes Out     [total, mean]              0, 0.00<br>Success       [ratio]                    100.00%<br>Status Codes  [code:count]               200:81084<br>Error Set:<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> go-zero </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> go-zero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin集成logrus</title>
      <link href="/posts/95727cb0ffc9/"/>
      <url>/posts/95727cb0ffc9/</url>
      
        <content type="html"><![CDATA[<h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/sirupsen/logrus<br></code></pre></td></tr></table></figure><h1 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h1><p>为何要集成logrus?</p><p>gin的日志框架有一定的局限性，而logrus得益于hook机制及结构化日志记录。</p><p>如何集成？</p><ol><li><p>导包 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/sirupsen/logrus<br></code></pre></td></tr></table></figure></li><li><p>首先gin里的请求日志需要替换成logrus，而全局日志（如<code>log.Info()</code>）和请求日志又不一样，即<code>Formatter</code>不一样。</p><p>请求日志记录是在中间件中输出，而全局日志是开发者自己根据业务情况写的。</p><p>日志设想是根据日期去分隔，即<code>hook</code>是一样的，那么<code>hook</code>可以用同一个对象。</p><p>请求日志的<code>Formatter</code>，是在这里不需要输出日志等级，即用<code>Info</code>等级输出，但不带<code>Info</code>字眼，则<code>Formatter</code>直接输出<code>message</code>。</p><p>全局日志需要格式化输出，即带日志等级输出。</p></li><li><p>建立文件结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">├─hook <span class="hljs-comment">// 自定义hook</span><br>├─<span class="hljs-built_in">log</span><span class="hljs-comment">// 日志存放</span><br>├─logger <span class="hljs-comment">// 日志全局配置</span><br>└─middleware <span class="hljs-comment">// gin日志中间件</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="定义hook"><a href="#定义hook" class="headerlink" title="定义hook"></a>定义hook</h2><p>hook&#x2F;hook.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> hook<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// DefaultHook 定义默认hook</span><br><span class="hljs-keyword">var</span> DefaultHook = &amp;FileHook&#123;LogPath: <span class="hljs-string">&quot;logrus/log&quot;</span>, App: <span class="hljs-string">&quot;WER&quot;</span>&#125;<br><br><span class="hljs-keyword">type</span> FileHook <span class="hljs-keyword">struct</span> &#123;<br>file     *os.File  <span class="hljs-comment">// 写入的文件</span><br>LogPath  <span class="hljs-type">string</span>    <span class="hljs-comment">// 日志记录的目录</span><br>fileDate <span class="hljs-type">string</span>   <span class="hljs-comment">// 日志记录的日期</span><br>App      <span class="hljs-type">string</span>   <span class="hljs-comment">// 项目名</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *FileHook)</span></span> Levels() []logrus.Level &#123;<br><span class="hljs-keyword">return</span> logrus.AllLevels<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *FileHook)</span></span> Fire(entry *logrus.Entry) <span class="hljs-type">error</span> &#123;<br>fileDate := time.Now().Format(<span class="hljs-string">&quot;200601021504&quot;</span>)<br><span class="hljs-keyword">if</span> fileDate != f.fileDate || f.fileDate == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">if</span> f.file == <span class="hljs-literal">nil</span> &#123;<br>f.file.Close()<br>&#125;<br>err := os.MkdirAll(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, f.LogPath, fileDate), os.ModePerm)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 创建日志文件</span><br>f.file, err = os.OpenFile(fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s-%s.log&quot;</span>, f.LogPath, fileDate, fileDate, f.App),<br>os.O_CREATE|os.O_WRONLY|os.O_APPEND,<br><span class="hljs-number">0600</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Errorf(err.Error())<br><span class="hljs-keyword">return</span> err<br>&#125;<br>f.fileDate = fileDate<br>&#125;<br><br>line, _ := entry.String()<br>_, err := f.file.Write([]<span class="hljs-type">byte</span>(line))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义全局日志"><a href="#定义全局日志" class="headerlink" title="定义全局日志"></a>定义全局日志</h2><p>logger&#x2F;logger.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> logger<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gin_learn/logrus/hook&quot;</span><br>log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Black <span class="hljs-type">int</span> = <span class="hljs-literal">iota</span><br>Red<br>Green<br>Yellow<br>Blue<br>Amaranth<br>Ultramarine<br>White<br>)<br><br><span class="hljs-keyword">type</span> LogFormatter <span class="hljs-keyword">struct</span> &#123;<br>Prefix <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *LogFormatter)</span></span> Format(entry *log.Entry) ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> color <span class="hljs-type">int</span><br><span class="hljs-keyword">switch</span> entry.Level &#123;<br><span class="hljs-keyword">case</span> log.TraceLevel:<br>color = Amaranth<br><span class="hljs-keyword">case</span> log.DebugLevel:<br>color = Ultramarine<br><span class="hljs-keyword">case</span> log.InfoLevel:<br>color = Green<br><span class="hljs-keyword">case</span> log.WarnLevel:<br>color = Yellow<br><span class="hljs-keyword">case</span> log.ErrorLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.FatalLevel:<br>color = Red<br><span class="hljs-keyword">case</span> log.PanicLevel:<br>color = Red<br><span class="hljs-keyword">default</span>:<br>color = White<br>&#125;<br><br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> entry.Buffer != <span class="hljs-literal">nil</span> &#123;<br>buf = entry.Buffer<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>buf = &amp;bytes.Buffer&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> line <span class="hljs-type">string</span><br><span class="hljs-comment">// 是否允许访问函数和行号</span><br><span class="hljs-keyword">if</span> entry.HasCaller() &#123;<br><span class="hljs-comment">// 函数名</span><br>funcVal := entry.Caller.Function<br><span class="hljs-comment">// 函数所在文件路径</span><br>filePath := path.Base(entry.Caller.File)<br><span class="hljs-comment">// 文件路径+行号</span><br>fileVal := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, filePath, entry.Caller.Line)<br><br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s %s %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>fileVal,<br>funcVal,<br>entry.Message,<br>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>line = fmt.Sprintf(<span class="hljs-string">&quot;[%s]\033[%d%dm[%s]\033[0m [%s] %s\n&quot;</span>,<br>f.Prefix,<br><span class="hljs-number">3</span>,<br>color,<br>strings.ToUpper(entry.Level.String()),<br>entry.Time.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>entry.Message,<br>)<br>&#125;<br>buf.WriteString(line)<br><br><span class="hljs-keyword">return</span> buf.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>log.AddHook(hook.DefaultHook)<br>log.SetReportCaller(<span class="hljs-literal">true</span>)<br>log.SetFormatter(&amp;LogFormatter&#123;Prefix: hook.DefaultHook.App&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h1><p>middlewar&#x2F;logger.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> logger<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;gin_learn/logrus/hook&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>log = logrus.New()<br>)<br><br><span class="hljs-keyword">const</span> (<br>green   = <span class="hljs-string">&quot;\033[97;42m&quot;</span><br>white   = <span class="hljs-string">&quot;\033[90;47m&quot;</span><br>yellow  = <span class="hljs-string">&quot;\033[90;43m&quot;</span><br>red     = <span class="hljs-string">&quot;\033[97;41m&quot;</span><br>blue    = <span class="hljs-string">&quot;\033[97;44m&quot;</span><br>magenta = <span class="hljs-string">&quot;\033[97;45m&quot;</span><br>cyan    = <span class="hljs-string">&quot;\033[97;46m&quot;</span><br>reset   = <span class="hljs-string">&quot;\033[0m&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> LogFormatter <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *LogFormatter)</span></span> Format(entry *logrus.Entry) ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> entry.Buffer != <span class="hljs-literal">nil</span> &#123;<br>buf = entry.Buffer<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>buf = &amp;bytes.Buffer&#123;&#125;<br>&#125;<br><br>buf.WriteString(entry.Message)<br><span class="hljs-keyword">return</span> buf.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Logger</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// Start timer</span><br>start := time.Now()<br>path := c.Request.URL.Path<br>raw := c.Request.URL.RawQuery<br><br><span class="hljs-comment">// Process request</span><br>c.Next()<br><br><span class="hljs-comment">// Stop timer</span><br>timeStamp := time.Now()<br>latency := timeStamp.Sub(start)<br><br>clientIP := c.ClientIP()<br>method := c.Request.Method<br>statusCode := c.Writer.Status()<br>errorMessage := c.Errors.ByType(gin.ErrorTypePrivate).String()<br><br><span class="hljs-keyword">if</span> raw != <span class="hljs-string">&quot;&quot;</span> &#123;<br>path = path + <span class="hljs-string">&quot;?&quot;</span> + raw<br>&#125;<br>statusColor := statusCodeColor(statusCode)<br>resetColor := <span class="hljs-string">&quot;\033[0m&quot;</span><br>methodColor := methodColor(method)<br><br>log.Infof(<span class="hljs-string">&quot;[GIN] %v |%s %3d %s| %13v | %15s |%s %-7s %s %#v\n%s&quot;</span>,<br>timeStamp.Format(<span class="hljs-string">&quot;2006/01/02 - 15:04:05&quot;</span>),<br>statusColor, statusCode, resetColor,<br>latency,<br>clientIP,<br>methodColor, method, resetColor,<br>path,<br>errorMessage,<br>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">statusCodeColor</span><span class="hljs-params">(code <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> code &gt;= http.StatusOK &amp;&amp; code &lt; http.StatusMultipleChoices:<br><span class="hljs-keyword">return</span> green<br><span class="hljs-keyword">case</span> code &gt;= http.StatusMultipleChoices &amp;&amp; code &lt; http.StatusBadRequest:<br><span class="hljs-keyword">return</span> white<br><span class="hljs-keyword">case</span> code &gt;= http.StatusBadRequest &amp;&amp; code &lt; http.StatusInternalServerError:<br><span class="hljs-keyword">return</span> yellow<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> red<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">methodColor</span><span class="hljs-params">(method <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> method &#123;<br><span class="hljs-keyword">case</span> http.MethodGet:<br><span class="hljs-keyword">return</span> blue<br><span class="hljs-keyword">case</span> http.MethodPost:<br><span class="hljs-keyword">return</span> cyan<br><span class="hljs-keyword">case</span> http.MethodPut:<br><span class="hljs-keyword">return</span> yellow<br><span class="hljs-keyword">case</span> http.MethodDelete:<br><span class="hljs-keyword">return</span> red<br><span class="hljs-keyword">case</span> http.MethodPatch:<br><span class="hljs-keyword">return</span> green<br><span class="hljs-keyword">case</span> http.MethodHead:<br><span class="hljs-keyword">return</span> magenta<br><span class="hljs-keyword">case</span> http.MethodOptions:<br><span class="hljs-keyword">return</span> white<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> reset<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>log.AddHook(hook.DefaultHook)<br>log.SetReportCaller(<span class="hljs-literal">true</span>)<br>log.SetFormatter(&amp;LogFormatter&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="导入中间件及全局日志"><a href="#导入中间件及全局日志" class="headerlink" title="导入中间件及全局日志"></a>导入中间件及全局日志</h2><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>_ <span class="hljs-string">&quot;gin_learn/logrus/logger&quot;</span> <span class="hljs-comment">// 匿名导入，可以执行init函数，实现初始化全局日志</span><br><span class="hljs-string">&quot;gin_learn/logrus/middleware&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>r := gin.New()<br><br><span class="hljs-comment">// 导入中间件</span><br>r.Use(logger.Logger())<br><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>log.Info(<span class="hljs-string">&quot;request&quot;</span>)<br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;ok&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h1><ul><li>其实还可以加入logrus的<code>Field</code>机制，加入<code>request_id</code>，实现链路追踪，有助于开发人员解决bug。</li><li><code>hook</code>函数可以加入日志过期功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/posts/23ff3a9507d4/"/>
      <url>/posts/23ff3a9507d4/</url>
      
        <content type="html"><![CDATA[<p>sudo docker cp f1e7f2c629e0:&#x2F;var&#x2F;log&#x2F;mysqld.log &#x2F;opt&#x2F;mysql_docker&#x2F;logs&#x2F;mysqld.log</p><p>sudo docker cp f1e7f2c629e0:&#x2F;etc&#x2F;my.cnf &#x2F;opt&#x2F;mysql_docker&#x2F;conf&#x2F;conf.d</p><p>sudo docker cp f1e7f2c629e0:&#x2F;var&#x2F;lib&#x2F;mysql &#x2F;opt&#x2F;mysql_docker&#x2F;data</p><p>sudo docker run –name mysqlserver -v &#x2F;opt&#x2F;mysql_docker&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -v &#x2F;opt&#x2F;mysql_docker&#x2F;logs&#x2F;mysqld.log:&#x2F;var&#x2F;log&#x2F;mysqld.log -v &#x2F;opt&#x2F;mysql_docker&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d -i -p 3306:3306 mysql:latest</p><p>&#x2F;opt&#x2F;mysql_docker&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d 挂载mysql的配置目录到新建的目录下-v &#x2F;opt&#x2F;mysql_docker&#x2F;logs:&#x2F;logs 挂载日志目录-v &#x2F;opt&#x2F;mysql_docker&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql 挂载数据目录-e MYSQL_ROOT_PASSWORD&#x3D;123456 设置mysql密码</p><p>sudo docker run -d –name etcd-server      –publish 2379:2379     –publish 2380:2380     –env ALLOW_NONE_AUTHENTICATION&#x3D;yes     –env ETCD_ADVERTISE_CLIENT_URLS&#x3D;<a href="http://etcd-server:2379/">http://etcd-server:2379</a> -v &#x2F;opt&#x2F;etcd_docker&#x2F;data:&#x2F;bitnami&#x2F;etcd&#x2F;data    bitnami&#x2F;etcd:latest*</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传文件</title>
      <link href="/posts/a6e83b941443/"/>
      <url>/posts/a6e83b941443/</url>
      
        <content type="html"><![CDATA[<h1 id="单文件"><a href="#单文件" class="headerlink" title="单文件"></a>单文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 为multipart forms设置内存限制，默认为32Mib</span><br>r.MaxMultipartMemory = <span class="hljs-number">8</span> &lt;&lt; <span class="hljs-number">20</span> <span class="hljs-comment">// 8 Mib</span><br><br>r.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br><span class="hljs-comment">// 单文件</span><br>file, err := c.FormFile(<span class="hljs-string">&quot;filename&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Println(file.Filename)<br><br><span class="hljs-comment">// 保存文件到指定目录</span><br>dst := <span class="hljs-string">&quot;./&quot;</span> + file.Filename<br>err = c.SaveUploadedFile(file, dst)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.String(http.StatusOK, fmt.Sprintf(<span class="hljs-string">&quot;&#x27;%s&#x27;  uploaded! &quot;</span>, file.Filename))<br>&#125;)<br><br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 为multipart forms设置内存限制，默认为32Mib</span><br>r.MaxMultipartMemory = <span class="hljs-number">8</span> &lt;&lt; <span class="hljs-number">20</span> <span class="hljs-comment">// 8 Mib</span><br><br>r.POST(<span class="hljs-string">&quot;/multi_upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br><span class="hljs-comment">// 多文件</span><br>form, err := c.MultipartForm()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>files := form.File[<span class="hljs-string">&quot;upload[]&quot;</span>]<br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>log.Println(file.Filename)<br><br>dst := <span class="hljs-string">&quot;./&quot;</span> + file.Filename<br>err := c.SaveUploadedFile(file, dst)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>c.String(http.StatusOK, fmt.Sprintf(<span class="hljs-string">&quot;%d files upload!&quot;</span>, <span class="hljs-built_in">len</span>(files)))<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数的原始数据</title>
      <link href="/posts/a28905649b40/"/>
      <url>/posts/a28905649b40/</url>
      
        <content type="html"><![CDATA[<p><code>getRawData</code>返回的是请求body里的数据流。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.POST(<span class="hljs-string">&quot;/raw&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>data, err := c.GetRawData()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(data)) <span class="hljs-comment">// 获取原始参数</span><br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>form</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs text">----------------------------193918797666064817025572<br>Content-Disposition: form-data; name=&quot;username&quot;<br><br>wer<br>----------------------------193918797666064817025572<br>Content-Disposition: form-data; name=&quot;age&quot;<br><br>30<br>----------------------------193918797666064817025572<br>Content-Disposition: form-data; name=&quot;accountInfo[id]&quot;<br><br>1<br>----------------------------193918797666064817025572<br>Content-Disposition: form-data; name=&quot;accountInfo[amount]&quot;<br><br>99999999<br>----------------------------193918797666064817025572<br>Content-Disposition: form-data; name=&quot;height&quot;<br><br>184<br>----------------------------193918797666064817025572<br>Content-Disposition: form-data; name=&quot;language&quot;<br><br>c,c++,go,java,oc,swift,rust<br>----------------------------193918797666064817025572--<br><br>/*<br>form:<br>Content-Disposition: form-data; name=&quot;username&quot;<br><br>wer<br><br>x-www-form-urlencoded: <br><br>*/<br></code></pre></td></tr></table></figure></li><li><p>x-www-form-urlencoded</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">name=wer&amp;age=30<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载文件</title>
      <link href="/posts/ed7d1dd00b60/"/>
      <url>/posts/ed7d1dd00b60/</url>
      
        <content type="html"><![CDATA[<h1 id="直接响应下载"><a href="#直接响应下载" class="headerlink" title="直接响应下载"></a>直接响应下载</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 直接响应下载文件</span><br>r.GET(<span class="hljs-string">&quot;/download&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 设置文件流格式，唤起浏览器下载</span><br>c.Header(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>)<br><span class="hljs-comment">// 指定下载文件名 附件形式</span><br>c.Header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=1.png&quot;</span>)<br><span class="hljs-comment">// 设置传输编码格式 二进制</span><br>c.Header(<span class="hljs-string">&quot;Content-Transfer-Encoding&quot;</span>, <span class="hljs-string">&quot;binary&quot;</span>)<br><span class="hljs-comment">// 提交文件</span><br>c.File(<span class="hljs-string">&quot;assert/img.png&quot;</span>)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是前后端分离，一般情况下载由前端封装，后端返回文件即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">c.Header(<span class="hljs-string">&quot;filename&quot;</span>,<span class="hljs-string">&quot;1.png&quot;</span>)<br>c.File(<span class="hljs-string">&quot;assert/img.png&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中间件</title>
      <link href="/posts/c9f3ef43070e/"/>
      <url>/posts/c9f3ef43070e/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Gin允许开发者在处理请求的过程中，加入中间件，即<code>hook</code>函数（钩子函数），意义与<code>java</code>中的过滤器，拦截器类似。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>Gin的中间件其实就是<code>HandlerFunc</code>类型的对象，而<code>HandlerFunc</code>其实就是<code>func(*Context)</code>函数。</p><h1 id="单独请求的中间件"><a href="#单独请求的中间件" class="headerlink" title="单独请求的中间件"></a>单独请求的中间件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;m1----in&quot;</span>)<br><span class="hljs-comment">// 执行下一个中间件 顺序其实就是先进后出</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">m1----in</span><br><span class="hljs-comment">m2----in</span><br><span class="hljs-comment">index---in</span><br><span class="hljs-comment">index---out</span><br><span class="hljs-comment">m2----out</span><br><span class="hljs-comment">m1----out</span><br><span class="hljs-comment">*/</span><br>c.Next()<br>fmt.Println(<span class="hljs-string">&quot;m1----out&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;m2----in&quot;</span>)<br><span class="hljs-comment">// 中止 不在继续</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">m1----in</span><br><span class="hljs-comment">m1----out</span><br><span class="hljs-comment">m2----in</span><br><span class="hljs-comment">m2----out</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//c.Abort()</span><br>c.Next()<br>fmt.Println(<span class="hljs-string">&quot;m2----out&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 单独为请求设置任意的中间件</span><br><span class="hljs-comment">// 响应顺序与写入顺序一致</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">m1----in</span><br><span class="hljs-comment">m1----out</span><br><span class="hljs-comment">m2----in</span><br><span class="hljs-comment">m2----out</span><br><span class="hljs-comment">index---in</span><br><span class="hljs-comment">index---out</span><br><span class="hljs-comment">*/</span><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, m1, m2, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;index---in&quot;</span>)<br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;ok&quot;</span>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;index---out&quot;</span>)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;m---in&quot;</span>)<br>c.Next()<br>fmt.Println(<span class="hljs-string">&quot;m---out&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 注册全局中间件</span><br>r.Use(m)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">m---in</span><br><span class="hljs-comment">index---in</span><br><span class="hljs-comment">index---out</span><br><span class="hljs-comment">m---out</span><br><span class="hljs-comment">*/</span><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;index---in&quot;</span>)<br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;ok&quot;</span>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;index---out&quot;</span>)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="中间件传值"><a href="#中间件传值" class="headerlink" title="中间件传值"></a>中间件传值</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;m---in&quot;</span>)<br><span class="hljs-comment">// 中间件传值</span><br>c.Set(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;23131241&quot;</span>)<br>c.Next()<br>call, ok := c.Get(<span class="hljs-string">&quot;callback&quot;</span>)<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Println(call) <span class="hljs-comment">// 23131241</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;m---out&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;m---in&quot;</span>)<br><span class="hljs-comment">// 取值</span><br>token, ok := c.Get(<span class="hljs-string">&quot;token&quot;</span>)<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Println(token) <span class="hljs-comment">// 23131241</span><br>&#125;<br>c.Set(<span class="hljs-string">&quot;callback&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;m---out&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 注册全局中间件</span><br>r.Use(m)<br>r.Use(m1)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">m---in</span><br><span class="hljs-comment">index---in</span><br><span class="hljs-comment">index---out</span><br><span class="hljs-comment">m---out</span><br><span class="hljs-comment">*/</span><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;index---in&quot;</span>)<br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;ok&quot;</span>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;index---out&quot;</span>)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数绑定Bind</title>
      <link href="/posts/5a60c248c269/"/>
      <url>/posts/5a60c248c269/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Gin的参数绑定可以将请求中的参数结构化成所需的模型。</p><p>Gin目前支持JSON、XML、yaml、AML、路径参数、标准表单值、query参数的绑定。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>要使用参数绑定，需要在结构体的成员变量加上对应的<code>tag</code>: <code>json:&quot;fieldname&quot;</code>、<code>xml:&quot;fieldname&quot;</code>、<code>yaml:&quot;fieldname&quot;</code>、<code>form:&quot;fieldname&quot;</code>、<code>uri:&quot;fieldname&quot;</code>等。</p><p>更多标签用法可以查看<a href="https://pkg.go.dev/github.com/go-playground/validator/v10#hdr-Baked_In_Validators_and_Tags">文档</a>。</p><p>Gin提供了两类绑定方法：</p><ul><li>Must bind<ul><li>方法：<code>Bind</code>、<code>BindJSON</code>、<code>BindXML</code>、<code>BindQuery</code>、<code>BindYAML</code></li><li>特性：如果发生绑定错误，则请求停止，并触发<code>c.AbortWithError(400, err).SetType(ErrorTypeBind)</code>。响应状态码被设置为400， 并<code>Content-Type</code>被设置成<code>text\plain; charset=utf-8</code>。后续再去修改响应状态码，Gin则会输出警告<code>[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422</code>。</li></ul></li><li>Should bind<ul><li>方法：<code>ShouldBind</code>、<code>ShoulBindJSON</code>、<code>ShouldBindXML</code>、<code>ShouldBindQuery</code>、<code>ShouldBindYaml</code></li><li>特性：如果发生绑定错误，Gin会返回错误并由开发者处理错误和请求。</li></ul></li></ul><p>当使用<code>Bind</code>和<code>ShouldBind</code>方法时，Gin会尝试根据Content-Type推断如何绑定，如果明确知道绑定数据格式，可以直接使用<code>MustBindWith</code>和<code>ShouldBindWith</code>。</p><p>可以在必须绑定字段后加上tag， <code>binding:&quot;required&quot;</code>，如果绑定时是空值，Gin会报错。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; form:&quot;user&quot; xml:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; form:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// BindJson &#123;&quot;user&quot;:&quot;wer&quot;,&quot;password&quot;:&quot;123&quot;&#125;</span><br>r.POST(<span class="hljs-string">&quot;/loginJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> json Login<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> json.User != <span class="hljs-string">&quot;wer&quot;</span> || json.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; form:&quot;user&quot; xml:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; form:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// BindXML &lt;root&gt;&lt;user&gt;wer&lt;/user&gt;&lt;password&gt;123&lt;/password&gt;&lt;/root&gt;</span><br>r.POST(<span class="hljs-string">&quot;/loginXML&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> xml Login<br><span class="hljs-keyword">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> xml.User != <span class="hljs-string">&quot;wer&quot;</span> || xml.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; form:&quot;user&quot; xml:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; form:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// BindQuery ?user=wer&amp;password=123</span><br>r.POST(<span class="hljs-string">&quot;/loginQuery&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> query Login<br><span class="hljs-keyword">if</span> err := c.ShouldBindQuery(&amp;query); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> query.User != <span class="hljs-string">&quot;wer&quot;</span> || query.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`uri:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`uri:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// URI /wer/123</span><br>r.POST(<span class="hljs-string">&quot;/loginUri/:user/:password&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> uri Login<br><span class="hljs-keyword">if</span> err := c.ShouldBindUri(&amp;uri); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> uri.User != <span class="hljs-string">&quot;wer&quot;</span> || uri.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Yaml"><a href="#Yaml" class="headerlink" title="Yaml"></a>Yaml</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; form:&quot;user&quot; xml:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; form:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// BindXML &lt;root&gt;&lt;user&gt;wer&lt;/user&gt;&lt;password&gt;123&lt;/password&gt;&lt;/root&gt;</span><br>r.POST(<span class="hljs-string">&quot;/loginXML&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> xml Login<br><span class="hljs-keyword">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> xml.User != <span class="hljs-string">&quot;wer&quot;</span> || xml.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p>表单请求包含：</p><ul><li><p><code>url的查询数据</code></p></li><li><p><code>表单数据</code></p><ul><li><code>表单值域</code></li><li><code>表单中的文件句柄</code></li></ul></li><li><p><code>Form</code>:  <code>url查询参数</code>，<code>表单的值域</code></p></li><li><p><code>PostForm</code>: <code>表单的值域</code></p></li><li><p><code>MultipartFrom</code>: <code>表单值域</code>、<code>表单中文件句柄</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; form:&quot;user&quot; xml:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; form:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// Multipart/Urlencoded绑定</span><br>r.POST(<span class="hljs-string">&quot;/loginForm&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> form Login<br><span class="hljs-comment">// 1. 显式绑定 指定绑定multipart form</span><br><span class="hljs-comment">//if err := c.ShouldBindWith(&amp;form, binding.Form); err != nil &#123;</span><br><span class="hljs-comment">//c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// 2. 根据请求头的Content-Type去自动选择绑定</span><br><span class="hljs-keyword">if</span> err := c.ShouldBind(&amp;form); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> form.User != <span class="hljs-string">&quot;wer&quot;</span> || form.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TOML"><a href="#TOML" class="headerlink" title="TOML"></a>TOML</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; form:&quot;user&quot; xml:&quot;user&quot; binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; form:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// TOML</span><br><span class="hljs-comment">// user = &quot;wer&quot;</span><br><span class="hljs-comment">// password = &quot;123&quot;</span><br>r.POST(<span class="hljs-string">&quot;/loginToml&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> toml Login<br><span class="hljs-keyword">if</span> err := c.ShouldBindTOML(&amp;toml); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br><br><span class="hljs-keyword">if</span> toml.User != <span class="hljs-string">&quot;wer&quot;</span> || toml.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;You are logged in. Welcome!&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速入门</title>
      <link href="/posts/00e89fa8a397/"/>
      <url>/posts/00e89fa8a397/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在go项目根目录下，下载Gin包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go get github.com/gin-gonic/gin</span><br></code></pre></td></tr></table></figure><p>等待下载完成后，即可引用。</p><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world"></a>Hello, world</h1><p>在项目中，创建<code>1.hello_world.go</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建默认路由</span><br>router := gin.Default()<br><span class="hljs-comment">// 配置路由规则</span><br>router.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 响应数据</span><br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello,world!&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 服务启动，默认为0.0.0.0:8080, 即该机器全部ip（如：127.0.0.1） 默认端口8080</span><br>router.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目后，进行测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl http://127.0.0.1:8080/index</span><br> <br> <br>StatusCode        : 200<br>StatusDescription : OK<br>Content           : hello,world!<br>RawContent        : HTTP/1.1 200 OK<br>                    Content-Length: 12<br>                    Content-Type: text/plain; charset=utf-8<br>                    Date: Wed, 20 Mar 2024 13:19:59 GMT<br><br>                    hello,world!<br>Forms             : &#123;&#125;<br>Headers           : &#123;[Content-Length, 12], [Content-Type, text/plain; charset=utf-8], [Date, Wed, 20 Mar 2024 13:19:59 GMT]&#125;                                          Images            : &#123;&#125;                                                                                                                                                InputFields       : &#123;&#125;                                                                                                                                                Links             : &#123;&#125;                                                                                                                                                <br>ParsedHtml        : System.__ComObject<br>RawContentLength  : 12<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应</title>
      <link href="/posts/d78c65a022bc/"/>
      <url>/posts/d78c65a022bc/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">text</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;我是字符串&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/text&quot;</span>, text)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">我是字符串<br></code></pre></td></tr></table></figure><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">json</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    <span class="hljs-comment">// gin.H是map[string]interface&#123;&#125;的重命名</span><br><span class="hljs-comment">//c.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;元神，启动！！！&quot;&#125;) </span><br><span class="hljs-comment">//c.JSON(http.StatusOK, 10) // 任意基本数据类型</span><br><br><span class="hljs-keyword">type</span> account <span class="hljs-keyword">struct</span> &#123;<br>UserName <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span> <span class="hljs-comment">// account.UserName在Json中变成了username</span><br>Age      <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;-&quot;`</span> <span class="hljs-comment">// 隐藏字段</span><br>&#125;<br>c.JSON(http.StatusOK, Account&#123;<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;123456&quot;</span>&#125;) <span class="hljs-comment">// 结构体，底层自动转换为json</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/json&quot;</span>, json)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="AsciiJson"><a href="#AsciiJson" class="headerlink" title="AsciiJson"></a>AsciiJson</h1><p>使用AsciiJson将非Ascii编码的字符(即unicode编码)转义成Ascii-only json。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/json&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>data := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;Go语言&quot;</span>,<br><span class="hljs-string">&quot;tag&quot;</span>:  <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>,<br>&#125;<br><span class="hljs-comment">// &#123;&quot;lang&quot;:&quot;Go语言&quot;,&quot;tag&quot;:&quot;\u003cbr\u003e&quot;&#125;</span><br>c.JSON(http.StatusOK, data)<br>&#125;)<br><br>r.GET(<span class="hljs-string">&quot;/asciijson&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>data := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;Go语言&quot;</span>,<br><span class="hljs-string">&quot;tag&quot;</span>:  <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>,<br>&#125;<br><span class="hljs-comment">// 将非Ascii编码的字符转义成Ascii-only json。</span><br><span class="hljs-comment">// &#123;&quot;lang&quot;:&quot;Go\u8bed\u8a00&quot;,&quot;tag&quot;:&quot;\u003cbr\u003e&quot;&#125;</span><br>c.AsciiJSON(http.StatusOK, data)<br><span class="hljs-comment">//c.JSON(http.StatusOK, data)</span><br>&#125;)<br><br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lang&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Go\u8bed\u8a00&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;\u003cbr\u003e&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="PureJson"><a href="#PureJson" class="headerlink" title="PureJson"></a>PureJson</h1><p>通常，<code>JSON</code>会将unicode字符替换特殊HTML字符，如’&lt;’变成’\u003c’。</p><p>如果要将这些字符编码，则可以使用<code>PureJson</code>，将unicode字符转换成特殊HTML字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 提供unicode实体</span><br>r.GET(<span class="hljs-string">&quot;/json&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// &#123;&quot;html&quot;:&quot;\u003cb\u003eHello, world!\u003c/b\u003e&quot;&#125;</span><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;html&quot;</span>: <span class="hljs-string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 提供字面量字符</span><br>r.GET(<span class="hljs-string">&quot;/pureJson&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// &#123;&quot;html&quot;:&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;&#125;</span><br>c.PureJSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;html&quot;</span>: <span class="hljs-string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">xml</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.XML(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;userName&quot;</span>: <span class="hljs-string">&quot;wer&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;data&quot;</span>: gin.H&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;go&quot;</span>&#125;&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/xml&quot;</span>, xml)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">userName</span>&gt;</span>wer<span class="hljs-tag">&lt;/<span class="hljs-name">userName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>go<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">yaml</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.YAML(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;userName&quot;</span>: <span class="hljs-string">&quot;wer&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;data&quot;</span>: gin.H&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;go&quot;</span>&#125;&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/yaml&quot;</span>, yaml)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">age:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">data:</span><br>    <span class="hljs-attr">code:</span> <span class="hljs-string">go</span><br><span class="hljs-attr">userName:</span> <span class="hljs-string">wer</span><br></code></pre></td></tr></table></figure><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="基本渲染"><a href="#基本渲染" class="headerlink" title="基本渲染"></a>基本渲染</h2><p>创建<code>templates</code>目录，并在该目录下创建<code>index.html</code>。</p><p>templates&#x2F;index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Go<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>hello,&#123;&#123;.username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在配置路由规则前，加载模板文件<code>LoadHTMLGlob()</code>或<code>LoadHTMLFiles</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">html</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, gin.H&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;wer&quot;</span>&#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>    r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br><span class="hljs-comment">//r.LoadHTMLFiles(&quot;templates/index.html&quot;)</span><br>    <br>r.GET(<span class="hljs-string">&quot;/heml&quot;</span>, html)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>&#96;响应：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Go<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>hello,wer<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="自定义模板渲染器"><a href="#自定义模板渲染器" class="headerlink" title="自定义模板渲染器"></a>自定义模板渲染器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()<br><br>temp := template.Must(template.ParseFiles(<span class="hljs-string">&quot;templates/index.html&quot;</span>))<br><br>r.SetHTMLTemplate(temp)<br><br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, gin.H&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;wer&quot;</span>&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()<br><br><span class="hljs-comment">// 自定义分隔符</span><br>r.Delims(<span class="hljs-string">&quot;&#123;[&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;]&#125;&quot;</span>)<br><br>r.SetFuncMap(template.FuncMap&#123;<br><span class="hljs-string">&quot;formatAsData&quot;</span>: formatAsDate,<br>&#125;)<br><br>r.LoadHTMLFiles(<span class="hljs-string">&quot;templates/testdata/raw.tmpl&quot;</span>)<br><br>r.GET(<span class="hljs-string">&quot;/raw&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;raw.tmpl&quot;</span>, gin.H&#123;<span class="hljs-string">&quot;now&quot;</span>: time.Date(<span class="hljs-number">2024</span>, <span class="hljs-number">03</span>, <span class="hljs-number">24</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, time.UTC)&#125;)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>raw.tmpl</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">date:&#123;[&#123; .now &#125;]&#125;<br></code></pre></td></tr></table></figure><h1 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h1><p><a href="https://github.com/protocolbuffers/protobuf">Protocol Buffers</a>（简写<code>protobuf</code>）是Google提出的一种轻便高效的结构化数据存储格式，常用于结构化数据的序列化，具有与语言无关、平台无关、可扩展特性。</p><p>常用于通讯协议、服务端数据交换等场景。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">protoBuf</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>reps := []<span class="hljs-type">int64</span>&#123;<span class="hljs-type">int64</span>(<span class="hljs-number">1</span>), <span class="hljs-type">int64</span>(<span class="hljs-number">2</span>)&#125;<br>label := <span class="hljs-string">&quot;test&quot;</span><br>data := &amp;protoexample.Test&#123;<br>Label: &amp;label,<br>Reps:  reps,<br>&#125;<br><span class="hljs-comment">// 数据在响应中变成二进制数据， 即被protoexample.Test protobuf序列化了的数据</span><br>c.ProtoBuf(http.StatusOK, data)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/protobuf&quot;</span>, protobuf)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>响应出来的是一堆二进制数据。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询参数Query</title>
      <link href="/posts/66a9c92ddb73/"/>
      <url>/posts/66a9c92ddb73/</url>
      
        <content type="html"><![CDATA[<p>Query即从url的查询参数中获取参数。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://path/to/query?[参数名1]=[参数值1]&amp;[参数名2]=[参数值2]<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>gin <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// http://127.0.0.1:8080/query?username=wer&amp;score=100,200,300&amp;studyInfo[id]=1&amp;studyInfo[name]=语文</span><br>r.GET(<span class="hljs-string">&quot;/query&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(c.Query(<span class="hljs-string">&quot;username&quot;</span>))     <span class="hljs-comment">// username=wer</span><br>fmt.Println(c.QueryArray(<span class="hljs-string">&quot;score&quot;</span>))   <span class="hljs-comment">// score=100,200,300 或 score=100&amp;score=200&amp;score=300</span><br>fmt.Println(c.QueryMap(<span class="hljs-string">&quot;studyInfo&quot;</span>)) <span class="hljs-comment">// studyInfo[id]=1&amp;studyInfo[name]=语文</span><br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志</title>
      <link href="/posts/bd6dc8c5f59e/"/>
      <url>/posts/bd6dc8c5f59e/</url>
      
        <content type="html"><![CDATA[<h1 id="将日志写入文件"><a href="#将日志写入文件" class="headerlink" title="将日志写入文件"></a>将日志写入文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    file, _ := os.OpenFile(<span class="hljs-string">&quot;log/gin.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0600</span>)<br>    <span class="hljs-keyword">defer</span> file.Close()<br>gin.DefaultWriter = io.MultiWriter(file, os.Stdout)<br><br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br>&#125;)<br><br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="自定义路由日志格式"><a href="#自定义路由日志格式" class="headerlink" title="自定义路由日志格式"></a>自定义路由日志格式</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>file, _ := os.Create(<span class="hljs-string">&quot;log/gin.log&quot;</span>)<br>    <span class="hljs-keyword">defer</span> file.Close()<br>gin.DefaultWriter = io.MultiWriter(file, os.Stdout)<br><br><span class="hljs-comment">// 启动时 输出路由信息 2024/03/23 23:06:26 [ wer] GET / main.main.func2 3</span><br>gin.DebugPrintRouteFunc = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(httpMethod, absolutePath, handlerName <span class="hljs-type">string</span>, nuHandlers <span class="hljs-type">int</span>)</span></span> &#123;<br>log.Printf(<span class="hljs-string">&quot;[ wer ] %s %s %s %d \n&quot;</span>,<br>httpMethod,<br>absolutePath,<br>handlerName,<br>nuHandlers,<br>)<br>&#125;<br><br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="查看路由数量信息"><a href="#查看路由数量信息" class="headerlink" title="查看路由数量信息"></a>查看路由数量信息</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查看总路由数量</span><br><span class="hljs-keyword">for</span> _, info := <span class="hljs-keyword">range</span> r.Routes() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s %s %s\n&quot;</span>, info.Method, info.Path, info.Handler)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义请求信息日志"><a href="#自定义请求信息日志" class="headerlink" title="自定义请求信息日志"></a>自定义请求信息日志</h1><ul><li><p><code>LoggerWithFormatter</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 定义请求信息日志格式</span><br>r.Use(gin.LoggerWithFormatter(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(params gin.LogFormatterParams)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;[ WER ] %s | %s%d%s | %s | %s | %s  %s\n&quot;</span>,<br>params.TimeStamp.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>params.MethodColor(), params.StatusCode, params.ResetColor(),<br>params.Latency,<br>params.ClientIP,<br>params.Method,<br>params.Path,<br>)<br>&#125;))<br></code></pre></td></tr></table></figure></li><li><p><code>LoggerWithConfig</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> logFormatter = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(params gin.LogFormatterParams)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;[ WER ] %s | %s%d%s | %s | %s | %s  %s\n&quot;</span>,<br>params.TimeStamp.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>),<br>params.MethodColor(), params.StatusCode, params.ResetColor(),<br>params.Latency,<br>params.ClientIP,<br>params.Method,<br>params.Path,<br>)<br>&#125;<br><span class="hljs-comment">// 定义请求信息日志格式</span><br><span class="hljs-comment">// 第一种方法</span><br><span class="hljs-comment">//r.Use(gin.LoggerWithFormatter(logFormatter))</span><br><br><span class="hljs-comment">// 第二种方法</span><br>r.Use(gin.LoggerWithConfig(gin.LoggerConfig&#123;<br>Formatter: logFormatter,<br>Output:    os.Stdout,<br>SkipPaths: <span class="hljs-literal">nil</span>,<br>&#125;))<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求头和响应头</title>
      <link href="/posts/c90d75f34831/"/>
      <url>/posts/c90d75f34831/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/header&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 请求头</span><br><span class="hljs-comment">// 不分大小写</span><br>fmt.Println(c.GetHeader(<span class="hljs-string">&quot;content-type&quot;</span>))<br>fmt.Println(c.Request.Header)<br><span class="hljs-comment">// header本质是map,所以区分大小写</span><br>fmt.Println(c.Request.Header[<span class="hljs-string">&quot;Content-Type&quot;</span>])<br><br><span class="hljs-comment">// 设置响应头</span><br>c.Header(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;asdjaklj79^*jslakh&quot;</span>)<br>c.Header(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单参数Form</title>
      <link href="/posts/f6ee75a1ecbd/"/>
      <url>/posts/f6ee75a1ecbd/</url>
      
        <content type="html"><![CDATA[<p>表单参数即是从表单中获取参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">username:wer</span><br><span class="hljs-comment">age:30</span><br><span class="hljs-comment">accountInfo[id]:1</span><br><span class="hljs-comment">accountInfo[amount]:99999999</span><br><span class="hljs-comment">height:184</span><br><span class="hljs-comment">language:c,c++,go,java,oc,swift,rust</span><br><span class="hljs-comment">*/</span><br><br>r.POST(<span class="hljs-string">&quot;/form&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(c.GetPostForm(<span class="hljs-string">&quot;username&quot;</span>))<br>fmt.Println(c.GetPostFormMap(<span class="hljs-string">&quot;accountInfo&quot;</span>))<br>fmt.Println(c.GetPostFormArray(<span class="hljs-string">&quot;language&quot;</span>))<br>fmt.Println(c.PostForm(<span class="hljs-string">&quot;age&quot;</span>))<br>fmt.Println(c.PostFormMap(<span class="hljs-string">&quot;accountInfo&quot;</span>))<br>fmt.Println(c.GetPostFormMap(<span class="hljs-string">&quot;accountInfo&quot;</span>))<br><span class="hljs-comment">// fmt.Println(c.FormFile(&quot;avatar&quot;))</span><br>fmt.Println(c.DefaultPostForm(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;180&quot;</span>)) <span class="hljs-comment">// 如果表单没有该参数，则返回默认值</span><br>fmt.Println(c.MultipartForm()) <span class="hljs-comment">// 所有参数，包含多媒体文件</span><br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径参数Param</title>
      <link href="/posts/80ceeac6365f/"/>
      <url>/posts/80ceeac6365f/</url>
      
        <content type="html"><![CDATA[<p>动态参数Param，即url的path上获取参数。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://path/to/[参数值]<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// http://127.0.0.1:8080/userInfo/123456</span><br>r.POST(<span class="hljs-string">&quot;/userInfo/:id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(c.Param(<span class="hljs-string">&quot;id&quot;</span>))<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由分组</title>
      <link href="/posts/57c8ef506fa3/"/>
      <url>/posts/57c8ef506fa3/</url>
      
        <content type="html"><![CDATA[<h1 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span> &#123;<br>Id       <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;id&quot;`</span><br>Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span><br>Age      <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;<br>Code <span class="hljs-type">string</span><br>Data any<br>Msg  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>id := c.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>userInfo := &amp;UserInfo&#123;<br>id,<br><span class="hljs-string">&quot;wer&quot;</span>,<br><span class="hljs-number">30</span>,<br>&#125;<br>c.JSON(http.StatusOK, Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Data: userInfo,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> userInfo UserInfo<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;userInfo); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0001&quot;</span>,<br>Msg:  err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(userInfo)<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Data: <span class="hljs-literal">nil</span>,<br>Msg:  <span class="hljs-string">&quot;更新成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>id := c.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;delete id: %s\n&quot;</span>, id)<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Msg:  <span class="hljs-string">&quot;删除成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> userInfo UserInfo<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;userInfo); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0001&quot;</span>,<br>Msg:  err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(userInfo)<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Data: <span class="hljs-literal">nil</span>,<br>Msg:  <span class="hljs-string">&quot;新增成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">orderList</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;200&quot;</span>,<br>Data: <span class="hljs-literal">nil</span>,<br>Msg:  <span class="hljs-string">&quot;请求成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 路由分组</span><br><span class="hljs-comment">// api</span><br>api := r.Group(<span class="hljs-string">&quot;api&quot;</span>)<br>&#123;<br><span class="hljs-comment">// 用户</span><br>userManager := api.Group(<span class="hljs-string">&quot;user_manager&quot;</span>)<br>&#123;<br><span class="hljs-comment">// 增加</span><br>userManager.POST(<span class="hljs-string">&quot;/&quot;</span>, addUser)<br><span class="hljs-comment">// 删除</span><br>userManager.DELETE(<span class="hljs-string">&quot;/:id&quot;</span>, deleteUser)<br><span class="hljs-comment">// 修改</span><br>userManager.PATCH(<span class="hljs-string">&quot;/:id&quot;</span>, updateUser)<br><span class="hljs-comment">// 查询</span><br>userManager.GET(<span class="hljs-string">&quot;/:id&quot;</span>, getUser)<br>&#125;<br><br><span class="hljs-comment">// 订单</span><br>order := api.Group(<span class="hljs-string">&quot;order&quot;</span>)<br>&#123;<br>order.GET(<span class="hljs-string">&quot;/list&quot;</span>, orderList)<br>&#125;<br>&#125;<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="路由分组-中间件-验证-token"><a href="#路由分组-中间件-验证-token" class="headerlink" title="路由分组+中间件+验证 token"></a>路由分组+中间件+验证 token</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span> &#123;<br>Id       <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;id&quot;`</span><br>Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span><br>Age      <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;<br>Code <span class="hljs-type">string</span><br>Data any<br>Msg  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>id := c.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>userInfo := &amp;UserInfo&#123;<br>id,<br><span class="hljs-string">&quot;wer&quot;</span>,<br><span class="hljs-number">30</span>,<br>&#125;<br>c.JSON(http.StatusOK, Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Data: userInfo,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> userInfo UserInfo<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;userInfo); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0001&quot;</span>,<br>Msg:  err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(userInfo)<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Data: <span class="hljs-literal">nil</span>,<br>Msg:  <span class="hljs-string">&quot;更新成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>id := c.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;delete id: %s\n&quot;</span>, id)<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Msg:  <span class="hljs-string">&quot;删除成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addUser</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> userInfo UserInfo<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;userInfo); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0001&quot;</span>,<br>Msg:  err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(userInfo)<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0000&quot;</span>,<br>Data: <span class="hljs-literal">nil</span>,<br>Msg:  <span class="hljs-string">&quot;新增成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">orderList</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;200&quot;</span>,<br>Data: <span class="hljs-literal">nil</span>,<br>Msg:  <span class="hljs-string">&quot;请求成功&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 路由分组</span><br><span class="hljs-comment">// api</span><br>api := r.Group(<span class="hljs-string">&quot;api&quot;</span>)<br>&#123;<br><span class="hljs-comment">// 用户 使用验证token的中间件</span><br>userManager := api.Group(<span class="hljs-string">&quot;user_manager&quot;</span>).Use(validateToken)<br>&#123;<br><span class="hljs-comment">// 增加</span><br>userManager.POST(<span class="hljs-string">&quot;/&quot;</span>, addUser)<br><span class="hljs-comment">// 删除</span><br>userManager.DELETE(<span class="hljs-string">&quot;/:id&quot;</span>, deleteUser)<br><span class="hljs-comment">// 修改</span><br>userManager.PATCH(<span class="hljs-string">&quot;/:id&quot;</span>, updateUser)<br><span class="hljs-comment">// 查询</span><br>userManager.GET(<span class="hljs-string">&quot;/:id&quot;</span>, getUser)<br>&#125;<br><br><span class="hljs-comment">// 订单</span><br>order := api.Group(<span class="hljs-string">&quot;order&quot;</span>)<br>&#123;<br>order.GET(<span class="hljs-string">&quot;/list&quot;</span>, orderList)<br>&#125;<br>&#125;<br><br>r.Run()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateToken</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>token := c.GetHeader(<span class="hljs-string">&quot;token&quot;</span>)<br><span class="hljs-comment">// jwt校验 。。。。</span><br><span class="hljs-comment">// 简单校验</span><br><span class="hljs-keyword">if</span> token == <span class="hljs-string">&quot;123&quot;</span> &#123;<br>c.Next()<br><span class="hljs-keyword">return</span><br>&#125;<br>c.JSON(http.StatusOK, &amp;Response&#123;<br>Code: <span class="hljs-string">&quot;0001&quot;</span>,<br>Msg:  <span class="hljs-string">&quot;token验证失败&quot;</span>,<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态文件服务</title>
      <link href="/posts/a79d93f065e5/"/>
      <url>/posts/a79d93f065e5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.Static(<span class="hljs-string">&quot;/assert&quot;</span>, <span class="hljs-string">&quot;assert&quot;</span>)<br><span class="hljs-comment">// 文件系统</span><br>r.StaticFS(<span class="hljs-string">&quot;/more_static&quot;</span>, http.Dir(<span class="hljs-string">&quot;assert&quot;</span>))<br><span class="hljs-comment">// 单个静态文件 relativePath 请求访问路径 filepath 文件目录</span><br>r.StaticFile(<span class="hljs-string">&quot;/favicon.ico&quot;</span>, <span class="hljs-string">&quot;assert/favicon.ico&quot;</span>)<br>r.StaticFileFS(<span class="hljs-string">&quot;/fs&quot;</span>, <span class="hljs-string">&quot;assert/img.png&quot;</span>, gin.Dir(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-literal">false</span>))<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重定向</title>
      <link href="/posts/b8bb40761f9a/"/>
      <url>/posts/b8bb40761f9a/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 301 永久重定向</span><br>r.GET(<span class="hljs-string">&quot;/redirect1&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;https://baidu.com&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 302 临时重定向</span><br>r.GET(<span class="hljs-string">&quot;/redirect2&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusFound, <span class="hljs-string">&quot;https://baidu.com&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 303 临时重定向</span><br>r.GET(<span class="hljs-string">&quot;/redirect3&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusSeeOther, <span class="hljs-string">&quot;https://baidu.com&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 308 永久重定向</span><br>r.GET(<span class="hljs-string">&quot;/redirect4&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusPermanentRedirect, <span class="hljs-string">&quot;https://baidu.com&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 307 临时重定向</span><br>r.GET(<span class="hljs-string">&quot;/redirect5&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.Redirect(http.StatusTemporaryRedirect, <span class="hljs-string">&quot;https://succeedwer.gitio.com&quot;</span>)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>301和308表示永久重定向，浏览器会缓存并且下次访问会直接跳转。</li><li>302和307表示临时重定向，浏览器会在每次访问时重新发送请求。</li></ul><p>301，302是在标准上是不允许重定向时改变请求方法，即将Post改成Get，但有些浏览器却允许修改重定向的请求方法。</p><p>303表示临时重定向，是为了给301，302做出规范，将错就错，是允许修改重定向的请求方法。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证器-基本使用</title>
      <link href="/posts/0a0bac247d6d/"/>
      <url>/posts/0a0bac247d6d/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Gin中对Bind数据进行验证，是用了<a href="https://pkg.go.dev/github.com/go-playground/validator/v10#hdr-Baked_In_Validators_and_Tags">github.com&#x2F;go-playground&#x2F;validator&#x2F;v10</a>进行验证。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`binding:&quot;required&quot;`</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`binding:&quot;required&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Login</code>实例中使用了<code>required</code>验证器，说明该字段是必须的，否则会报错。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">`binding:&quot;验证器1.验证器2&quot;`</span><br></code></pre></td></tr></table></figure><p>多个验证器用<code>,</code>分隔。</p><h1 id="常用验证器"><a href="#常用验证器" class="headerlink" title="常用验证器"></a>常用验证器</h1><p><strong>只有<code>required</code>和<code>omitempty</code>可以作用于结构体本身。</strong></p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><table><thead><tr><th align="center">特殊符号</th><th>释义</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">-</td><td>跳过验证</td><td align="center"><code>binding:&quot;-&quot;</code></td></tr><tr><td align="center">|</td><td>或，允许接受多个验证器的”或”操作符</td><td align="center">&#96;binding:”omitempty,rgb</td></tr><tr><td align="center">,</td><td>分隔验证器；注意逗号前后不能有空格</td><td align="center">&#96;binding:”omitempty,rgb</td></tr></tbody></table><h2 id="内置验证器"><a href="#内置验证器" class="headerlink" title="内置验证器"></a>内置验证器</h2><p>作用范围：<code>字段</code>、<code>struct</code>、<code>slice</code>、<code>number</code>、<code>string</code>、<code>map</code>、<code>pointer</code></p><table><thead><tr><th align="center">验证器</th><th align="left">释义</th><th>作用范围</th><th align="left">例子</th></tr></thead><tbody><tr><td align="center">structonly</td><td align="left">只允许用于结构体类型字段；用于嵌套结构，会对嵌套结构进行验证，但不会验证任何嵌套结构域。</td><td><code>struct</code></td><td align="left"><code>binding: &quot;structonly&quot;</code></td></tr><tr><td align="center">nostructlevel</td><td align="left">不允许运行任何结构级验证</td><td><code>struct</code></td><td align="left"><code>binding:&quot;nostructlevel&quot;</code></td></tr><tr><td align="center">omitempty</td><td align="left">忽略空；如果字段值为空，则跳过其它验证；只有值不为空时才会继续进行<code>omitempty</code>后面的验证。</td><td>所有</td><td align="left"><code>binding:&quot;omitempty&quot;</code></td></tr><tr><td align="center">omitnil</td><td align="left">忽略nil;  如果字段值为nil，则跳过其它验证。</td><td>所有</td><td align="left"><code>binding:&quot;omitnil&quot;</code></td></tr><tr><td align="center">required</td><td align="left">必填字段，即字段必须存在且值不能为零值；可以用指针跳过对零值的判断。</td><td>所有</td><td align="left"><code>binding:&quot;required&quot;</code></td></tr><tr><td align="center">required_if</td><td align="left">当所有<code>required_if</code>后的字段的值等于对应字段后面的值时，<code>required_if</code>修饰的字段是必填字段且值不能是零值。可以指定多个字段。修饰字段类型为<code>string</code>的值不能为””; <code>slice</code>、<code>map</code>、<code>pointer</code>、<code>interface</code>、<code>channel</code>和函数都确保值不是nil。<code>struct</code>确保值不能是零值。</td><td>所有</td><td align="left"><code>binding:&quot;required_if=Flag true IsEnable 1&quot;</code></td></tr><tr><td align="center">required_unless</td><td align="left">与<code>required_if</code>相反; 除非所有指定字段的值都不等于指定值，修饰字段就是<code>required</code>。</td><td>所有</td><td align="left"><code>binding:&quot;required_unless=Field1 foo Field2 bar&quot;</code></td></tr><tr><td align="center">required_with</td><td align="left">类似<code>required_if</code>; 只要任意指定字段存在，修饰字段就是<code>required</code>。</td><td>所有</td><td align="left"><code>binding:&quot;required_with=Field1 Field2&quot;</code></td></tr><tr><td align="center">required_with_all</td><td align="left">只要所有指定字段存在，修饰字段就是<code>required</code>。</td><td>所有</td><td align="left"><code>binding:&quot;required_with_all=Field1 Field2&quot;</code></td></tr><tr><td align="center">required_without</td><td align="left">与<code>required_with</code>相反；只要任意指定字段不存在，修饰字段就是必须字段。</td><td>所有</td><td align="left"><code>binding:&quot;required_without=Field1 Field2&quot;</code></td></tr><tr><td align="center">required_without_all</td><td align="left">与<code>required_with_all</code>相反；所有指定字段不存在，则修饰字段就是必须字段。</td><td>所有</td><td align="left"><code>binding:&quot;required_without_all=Field1 Field2&quot;</code></td></tr><tr><td align="center">excluded_if</td><td align="left">当全部写在指定字段后面的值与指定字段的值相同时，修饰字段一定不存在或为零值。</td><td>所有</td><td align="left"><code>binding:&quot;excluded_if=Field1 Field2&quot;</code></td></tr><tr><td align="center">excluded_unless</td><td align="left">当全部写在指定字段的值与指定字段的值都不相同时，修饰字段就要被排除，即不能存在。</td><td>所有</td><td align="left"><code>binding:&quot;excluded_unless=IsEnable 1 Flag true&quot;</code></td></tr><tr><td align="center">isdefault</td><td align="left">验证修饰字段是否为零值。如果为零值则验证通过，否则报错。</td><td>所有</td><td align="left"><code>binding:&quot;iddefault&quot;</code></td></tr><tr><td align="center">dive</td><td align="left">嵌套验证；作用于<code>slice</code>、<code>array</code>和<code>map</code>，<code>drive</code>后的验证器对slice<code>、</code>array<code>和</code>map&#96;的元素进行验证。</td><td><code>slice</code>、<code>array</code>、<code>map</code></td><td align="left"><code>binding:&quot;gt=0,dive,keys,eq=1,endkeys,required&quot;</code></td></tr><tr><td align="center">len</td><td align="left">&#x3D;大小；&#x3D;长度；&#x3D;容量；</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code></td><td align="left"><code>binding:&quot;len=10&quot;</code></td></tr><tr><td align="center">max</td><td align="left">&lt;&#x3D;最大值；&lt;&#x3D;最长长度；&lt;&#x3D;最大时间；</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;max=10&quot;</code> 或 <code>binding:&quot;max=1h30m&quot;</code></td></tr><tr><td align="center">min</td><td align="left">&gt;&#x3D;最小值；&gt;&#x3D;最短长度；&gt;&#x3D;最小时间；</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;min=10&quot;</code> 或 <code>binding:&quot;min=1h30m&quot;</code></td></tr><tr><td align="center">eq</td><td align="left">&#x3D;值；&#x3D;容量；&#x3D;时间</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;eq=10&quot;</code> 或 <code>binding:&quot;eq=1h30m&quot;</code></td></tr><tr><td align="center">ne</td><td align="left">与eq相反</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;ne=10&quot;</code> 或 <code>binding:&quot;ne=1h30m&quot;</code></td></tr><tr><td align="center">oneof</td><td align="left">值为其中之一; 空格分隔，如果字符串中有空格，需要单引号；</td><td><code>number</code>、<code>string</code></td><td align="left"><code>binding:&quot;oneof=red green&quot;</code>        <code>binding:&quot;oneof=&#39;red green&#39; &#39;blue yellow&#39;&quot;</code>        <code>binding:&quot;oneof=5 7 9&quot;</code></td></tr><tr><td align="center">gt</td><td align="left">&gt;值；&gt;长度；&gt;容量；&gt;时间；如修饰<code>time.Duration</code>时，没有值，则表示大于当前时间。</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;gt=10&quot;</code> 或 <code>binding:&quot;gt&quot;</code></td></tr><tr><td align="center">gte</td><td align="left">大于等于；与<code>gt</code>规则类似；</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;gte=10&quot;</code> 或 <code>binding:&quot;gte&quot;</code></td></tr><tr><td align="center">lt</td><td align="left">不到: 值；长度；容量；时间；</td><td><code>number</code>、<code>string</code>、<code>slice</code>、<code>array</code>、<code>map</code>、<code>time</code></td><td align="left"><code>binding:&quot;lt=10&quot;</code> 或 <code>binding:&quot;lt&quot;</code></td></tr><tr><td align="center">lte</td><td align="left">与<code>max</code>一样</td><td></td><td align="left"></td></tr><tr><td align="center">eqfield</td><td align="left">与指定字段验证规则一样</td><td><code>字段</code></td><td align="left"><code>binding:&quot;eqfield=ConfirmPassword&quot;</code></td></tr><tr><td align="center">nefield</td><td align="left">与指定字段的值不一致；可以在指定嵌套struct的字段，<code>necsfield=InnerStructField.Field</code></td><td><code>字段</code></td><td align="left"><code>binding:&quot;eqfield=Color2&quot;</code></td></tr><tr><td align="center">gtefield</td><td align="left">修饰字段的值大于等于指定字段的值；</td><td><code>字段</code></td><td align="left"></td></tr></tbody></table><p>补充<code>dive</code>例子：</p><p>slice</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">Score [][]<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;score&quot; binding:&quot;gt=0,dive,len=1,dive,required&quot;&quot;`</span><br><span class="hljs-comment">// gt=0 验证[] 外层数组长度大于0</span><br><span class="hljs-comment">// len=1 验证[]string 内层数组长度=1</span><br><span class="hljs-comment">// required 验证Score 必填字段</span><br><br>Score [][]<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;score&quot; binding:&quot;gt=0,dive,dive,required&quot;&quot;`</span><br><span class="hljs-comment">// gt=0 验证[] 外层数组长度大于0</span><br><span class="hljs-comment">// []string跳过验证</span><br><span class="hljs-comment">// required 验证Score 必填字段</span><br></code></pre></td></tr></table></figure><p>map</p><p><code>map</code>需要用到<code>keys</code>和<code>endkeys</code>，即它们之间的任何规则都适用于map的<code>key</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">Address <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;address&quot; binding:&quot;gt=0,dive,keys,eq=1|eq=2,endkeys,required&quot;`</span><br><span class="hljs-comment">// gt=0 验证map的键值对数量</span><br><span class="hljs-comment">// eq=1|eq=2 验证map的键为1或2</span><br><span class="hljs-comment">// required 验证address为必填字段</span><br><br>Address1 <span class="hljs-keyword">map</span>[[<span class="hljs-number">2</span>]<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;address1&quot; binding:&quot;gt=0,dive,keys,dive,eq=1|eq=2,endkeys,required&quot;`</span><br><span class="hljs-comment">// gt=0 验证map的键值对数量</span><br><span class="hljs-comment">// eq=1|eq=2 验证[2]string元素为1或2</span><br><span class="hljs-comment">// required 验证address1为必填字段</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证器-自定义</title>
      <link href="/posts/a71945e4bc54/"/>
      <url>/posts/a71945e4bc54/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot; binding:&quot;required&quot; msg:&quot;用户名不能为空&quot;`</span><br>Password <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;password&quot; binding:&quot;required&quot; msg:&quot;密码不能为空&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getValidMsg</span><span class="hljs-params">(pointer any, err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> msgs []<span class="hljs-type">string</span><br><span class="hljs-comment">// 反射获取类型</span><br>getObj := reflect.TypeOf(pointer)<br><span class="hljs-comment">// 断言错误是否为验证器错误</span><br><span class="hljs-keyword">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;<br><span class="hljs-keyword">for</span> _, e := <span class="hljs-keyword">range</span> errs &#123;<br><span class="hljs-keyword">if</span> f, exist := getObj.Elem().FieldByName(e.Field()); exist &#123;<br>msg := f.Tag.Get(<span class="hljs-string">&quot;msg&quot;</span>)<br>msgs = <span class="hljs-built_in">append</span>(msgs, msg)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msgs) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> strings.Join(msgs, <span class="hljs-string">&quot;,&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> err.Error()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.POST(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> user User<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;user); err != <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusOK, getValidMsg(&amp;user, err))<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(http.StatusOK, <span class="hljs-string">&quot;welcome!&quot;</span>)<br>&#125;)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin/binding&quot;</span><br><span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// Booking 包含绑定和验证的数据。</span><br><span class="hljs-keyword">type</span> Booking <span class="hljs-keyword">struct</span> &#123;<br>CheckIn  time.Time <span class="hljs-string">`form:&quot;check_in&quot; binding:&quot;required,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span><br>CheckOut time.Time <span class="hljs-string">`form:&quot;check_out&quot; binding:&quot;required,gtfield=CheckIn,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">var</span> bookabledate validator.Func = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(fl validator.FieldLevel)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> date, ok := fl.Field().Interface().(time.Time); ok &#123;<br>today := time.Now()<br><span class="hljs-keyword">if</span> today.After(date) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getBookable</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> booking Booking<br><span class="hljs-keyword">if</span> err := c.ShouldBindQuery(&amp;booking); err == <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Booking date are valid!&quot;</span>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;<br>err := v.RegisterValidation(<span class="hljs-string">&quot;bookabledate&quot;</span>, bookabledate)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>r.GET(<span class="hljs-string">&quot;/bookable&quot;</span>, getBookable)<br><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> 框架 </category>
          
          <category> Gin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建Go项目</title>
      <link href="/posts/adcfecfee3a0/"/>
      <url>/posts/adcfecfee3a0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文旨在手把手教你使用<code>go tool</code>创建Go项目。</p><h1 id="项目构成"><a href="#项目构成" class="headerlink" title="项目构成"></a>项目构成</h1><p>Go项目由以下构成：</p><ul><li><code>packages</code>: 一个目录即一个包。</li><li><code>module</code>：多个包组成一个模块。</li></ul><p><code>go.mod</code>文件定义了<code>module</code>的路径。</p><h1 id="第一个Go项目"><a href="#第一个Go项目" class="headerlink" title="第一个Go项目"></a>第一个Go项目</h1><p>创建一个项目名为<code>hello</code>的Go项目，其中包含路径为<code>example/user/hello</code>的模块，且在<code>go.mod</code>定义该模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> hello  <span class="hljs-comment"># 创建项目文件夹</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> hello</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go mod init example/user/hello</span><br>go: creating new go.mod: module example/user/hello<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> go.mod</span><br>module example/user/hello<br><br>go 1.20<br></code></pre></td></tr></table></figure><p>此时，项目目录如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hello <br>    go.mod<br></code></pre></td></tr></table></figure><p>仅有一个<code>go.mod</code>文件。</p><p>在hello目录下创建<code>hello.go</code>文件，并写入代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">package main<br><br>import &quot;fmt&quot;<br><br>func main() &#123;<br>fmt.Println(&quot;Hello, world.&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><p>项目目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hello<br>        go.mod<br>        hello.go<br></code></pre></td></tr></table></figure><p>到现在为止，项目已经创建完成了。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入包</title>
      <link href="/posts/50b3e49e0a6f/"/>
      <url>/posts/50b3e49e0a6f/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般情况下，可以将包分为3种：</p><ul><li>内置包</li><li>本地包</li><li>远程包</li></ul><h1 id="导入内置包"><a href="#导入内置包" class="headerlink" title="导入内置包"></a>导入内置包</h1><p>内置包指的是Go语言下的标准库中的包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br></code></pre></td></tr></table></figure><h1 id="导入本地包"><a href="#导入本地包" class="headerlink" title="导入本地包"></a>导入本地包</h1><p>本地包指的是开发者自定义的包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">improt <span class="hljs-string">&quot;模块名/包名&quot;</span><br></code></pre></td></tr></table></figure><h1 id="导入远程包"><a href="#导入远程包" class="headerlink" title="导入远程包"></a>导入远程包</h1><p>远程包指的是远程仓库的包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/darjun/go-daily-lib/commonregex&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis缓存</title>
      <link href="/posts/302875762140/"/>
      <url>/posts/302875762140/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis缓存大致流程：</p><ol><li>Client请求数据查询</li><li>先进行Redis缓存查询</li><li>如果Redis缓存数据存在，则返回缓存数据</li><li>如果Redis缓存数据不存在，则进行数据库查询</li><li>如果数据库查询数据存在，则进行Redis数据缓存，并返回数据到Client</li><li>如果数据库查询数据不存在，则不进行数据缓存，并返回查询结果到Client</li></ol><h1 id="1-缓存问题"><a href="#1-缓存问题" class="headerlink" title="1. 缓存问题"></a>1. 缓存问题</h1><h2 id="1-1-缓存穿透"><a href="#1-1-缓存穿透" class="headerlink" title="1.1 缓存穿透"></a>1.1 缓存穿透</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 缓存穿透是指数据查询时，进行redis缓存查询时，查询不到结果，再继续持久层数据库查询，仍然查询不到结果。看似很正常，如果用户量大，都出现这种问题，就会对持久层数据库造成很大的压力，甚至使持久层数据库崩溃，这时候出的问题，就叫缓存穿透。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>布隆过滤器<br>  暂时不写 主要是信息指纹匹配，不符合就直接返回Client, 根本不进入缓存查询。</li><li>缓存空对象<br>  当持久层查询不到结果，未命中，则将返回的空对象继续缓存，并设置一个很短的过期时间，如60秒，那么用户下次在缓存未失效时间内以同样的查询条件继续查询，就是直接返回空对象，从而就能大大降低数据库的压力。<br>  但是仍然会出现问题：<ul><li>如果存储空对象，当查询条件不同时，缓存就需要更多的内存空间去存储空对象，产生很多对应空对象的键。</li><li>给空对象设置过期时间，固然可以大大降低压力，当时当业务的一致性要求很高时，就会出现缓存数据和持久层数据的不一致，错过彼此。</li><li>如果存储的空对象群在某一时间点，集中过期失效，那么就会直接查询数据库持久层，持久层就会呈现周期性的压力波峰。</li></ul></li></ul><h2 id="1-2-缓存雪崩"><a href="#1-2-缓存雪崩" class="headerlink" title="1.2 缓存雪崩"></a>1.2 缓存雪崩</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p> 缓存雪崩，是指当缓存层出现设计上的问题或者致命错误，不能起缓存作用，那么所有查询就直接落到持久层，持久层压力暴增，甚至崩溃。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>Redis集群<br>  redis集群增加redis缓冲层的容错率，即使一台挂掉，仍然不影响工作流程。</li><li>数据预热<br>  在某个热门时间段前，先对有可能的数据先进行预缓存，这样大部分的查询就落在缓存层上，就不会导致数据库持久层过大的压力，而且设置不同的缓存过期时间，让缓存失效的时间点尽量均匀，不会出现某一时间点对持久层压力暴增。</li><li>限流降级<br>  在缓存失效时，通过加锁或队列来控制数据库写缓存的线程数量。如一个key只允许一个线程进行查询和写缓存，其他线程等待。</li></ul><h2 id="1-3-缓存击穿"><a href="#1-3-缓存击穿" class="headerlink" title="1.3 缓存击穿"></a>1.3 缓存击穿</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p> 缓存击穿，指的是缓存中，某个key的查询频率非常高，当这个key的失效的瞬间，持续的大并发量就会穿过缓存，直接落到持久层上，这就叫缓存击穿。</p><p>如秒杀活动</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>设置热门的key过期时间设置过期时间长点甚至永不过期，如秒杀活动中 热门商品数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群</title>
      <link href="/posts/2ada2362a03e/"/>
      <url>/posts/2ada2362a03e/</url>
      
        <content type="html"><![CDATA[<p>Redis集群常用的有三种模式：</p><ul><li>主从复制</li><li>哨兵模式</li><li>Redis Cluster</li></ul><h2 id="1-主从复制Replication"><a href="#1-主从复制Replication" class="headerlink" title="1. 主从复制Replication"></a>1. 主从复制Replication</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p> 这种模式下的Redis节点，有两种节点，主节点(master) 和从节点(slave)。 这种模式集群由一个主节点和多个从节点构成。</p><p> master会同步数据到slave节点，slave不会同步到master, 也就是master节点处理写操作，slave节点处理读操作，这叫分布式读写分离模型。</p><h3 id="1-2-1-2-实现"><a href="#1-2-1-2-实现" class="headerlink" title="1-2. 1.2 实现"></a>1-2. 1.2 实现</h3><p> 这里的实现是在同一个服务器上操作的，启动多个redis-server，并非单一个redis程序启动多个redis-server实例.</p><p>环境：Ubuntu server 19.10</p><p> Redis 6.2.1</p><p>有意思的是Redis5.0后，使用repilca替代了slave 说法，下面还是用slave。</p><p>步骤如下：</p><ul><li>复制redis  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/redis/<br>cp redis-6379 redis-6380 -R<br>cp redis-6379 redis-6381 -R<br></code></pre></td></tr></table></figure></li><li>修改master配置文件  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建redis配置文件文件夹</span><br>mkdir /etc/redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入安装目录</span><br>cd /usr/local/redis/redis-6379/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制配置文件到指定配置路径</span><br>cp ./redis.conf /etc/redis/6379.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建日志路径</span><br>mkdir /var/log/redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据保存路径</span><br>mkdir /var/lib/redis/6379<br>mkdir /var/lib/redis/6380<br>mkdir /var/lib/redis/6381<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改配置文件 使用/ 去查找</span><br>vim /etc/redis/6379.conf<br>...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改<span class="hljs-built_in">bind</span> 实现远程访问</span><br>bind 0.0.0.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改端口号 默认就是6379</span><br>prot 6379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改后台启动</span><br>daemonize yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启aof持久化</span><br>appendonly yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改日志文件路径 注意这里是文件 不是路径</span><br>logfile /var/log/redis/redis_6379.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改数据保持路径 这是路径</span><br>dir /var/lib/redis/6379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改进程文件pid路径</span><br>pidfile /var/run/redis_6379.pid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置密码</span><br>requirespass &#123;密码&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果设置了密码 slave实例的配置文件也要加上masterauth</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后发现6.0版本及其以上，default 不能通过连接master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">要设置acl权限管理(Access Control List)，就是要设置新用户</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">acl设置用户有2种方法</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 使用命令设置</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">加入redis-cli 客户端</span><br>redis-cli -p 6379<br>127.0.0.1:6379&gt; auth &#123;密码&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加新用户 一定要给该用户psync命令权限，psync是同步数据命令 +@<span class="hljs-built_in">read</span> 给予读的权限</span><br>127.0.0.1：6379&gt; acl setuser &#123;用户名&#125; on &gt;&#123;密码&#125; ~* +psync +@read<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如 acl setuser wer on &gt;123456 ~* +psync</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">但这种创建的用户是临时的，服务器重启就没有了</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 启用acl文件创建用户 如</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 在6379.conf 文件中，设置acl文件路径 并创建 (如果启用了 上面的requirespass 就会失效)</span><br>aclfile /etc/redis/users_6379.acl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存，并创建文件</span><br>touch /etc/redis/users_6379.acl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后可以用第一种方法命令设置用户</span><br>127.0.0.1：6379&gt; acl setuser &#123;用户名&#125; on &gt;&#123;密码&#125; ~* +psync +@read<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存到acl文件</span><br>127.0.0.1：6379&gt; acl save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">当启用acl文件,requirespass 就会失效，最好default设置密码</span><br>acl setuser default &gt;&#123;密码&#125;<br>...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件基本项已经修改完成</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果redis在配置前 有运行过 请检查数据和日志路径，进行删除</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空日志</span><br>rm -rf /var/log/redis/redis_6379.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除持久化文件数据 默认名没改就是dump.rdb 和 appendonly.aof 改了就去配置文件查看dbfname,appendfilename</span><br>rm -rf /var/lib/redis/6379/dump.rdb<br>rm -rf /var/lib/redis/6379/appendonly.aof<br></code></pre></td></tr></table></figure></li><li>修改slave配置文件  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">复制master配置文件</span><br>cd /etc/redis/<br>cp 6379.conf 6380.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改6380配置</span><br>vim 6380.conf<br>...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改端口号</span><br>port 6380<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置slave 5.0版本及之后</span><br>replicaof 127.0.0.1 6379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">5.0版本之前格式 slave master的ip地址 端口号</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">slaveof 127.0.0.1 6379</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改日志文件路径 注意这里是文件 不是路径</span><br>logfile /var/log/redis/redis_6380.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改数据保持路径 这是路径</span><br>dir /var/lib/redis/6380<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改进程文件pid路径</span><br>pidfile /var/run/redis_6380.pid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果master设置了密码 需要添加上密码</span><br>masterauth &#123;密码&#125; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加上用户 连接master的用户</span><br>masteruser wer<br>...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改6381配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接拷贝 6380.conf</span><br>cp 6380.conf 6381.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将上述的6380 改成6381 即可</span><br></code></pre></td></tr></table></figure></li><li>启动redis  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis目录b</span><br>cd /usr/loacal/redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动6379 6.2.1的命令路径就是src 有些版本是bin</span><br>cd ./redis-6379/src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>./redis-server /etc/redis/6379.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动6380</span><br>cd ./redis-6380/src<br>./redis-server /etc/redis/6380.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动6381</span><br>cd ./redis-6381/src<br>./redis-server /etc/redis/6381.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动客户端 在任何一个redis中都可以</span><br>cd ./redis-6379/src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">默认是6379端口</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./redis-cli</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">完整命令</span><br>./redis-cli -h 127.0.0.1 -p 6379<br>...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">master 6379</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果设置了密码</span> <br>127.0.0.1:6379&gt;auth &#123;密码&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输入info</span><br>127.0.0.1:6379&gt; info<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=127.0.0.1,port=0,state=online,offset=0,lag=0<br>slave1:ip=127.0.0.1,port=0,state=online,offset=0,lag=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">6380</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:0<br>master_sync_in_progress:0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">6381</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:1<br>master_sync_in_progress:0<br></code></pre></td></tr></table></figure></li><li>ACL 相关命令  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加入客户端</span><br>redis-cli -p 6379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询用户列表</span><br>acl list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取用户信息</span><br>acl getuser wer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除用户</span><br>acl deluser wer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加用户</span><br>acl setuser wer on &gt;123456 ~* +psync +@read<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看命令类别</span><br>acl cat<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看该类别下的所有命令</span><br>acl cat list<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-哨兵sentinel"><a href="#2-哨兵sentinel" class="headerlink" title="2. 哨兵sentinel"></a>2. 哨兵sentinel</h2><p> 主从模式，实现了读写分离，提高redis性能。但是，主从模式下只有一个主节点，主节点一旦宕机了，就无法进行写操作了。显然主从模式，并没有实现高可用(HA)。</p><h3 id="2-1-高可用"><a href="#2-1-高可用" class="headerlink" title="2.1 高可用"></a>2.1 高可用</h3><p>高可用的几点要素：</p><ul><li>在系统设计过程中尽量避免单点。</li><li>通过架构设计而保证系统高可用，其核心准则是：冗余。</li><li>实现自动故障转移。 如redis中的master_failover_state:no-failover</li></ul><h3 id="2-2-Redis-sentinel"><a href="#2-2-Redis-sentinel" class="headerlink" title="2.2 Redis sentinel"></a>2.2 Redis sentinel</h3><h4 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h4><p> sentinel(哨兵)是用于监控redis集群的工具，也就是说是管理redis集群的一个独立运行进程，是Redis高可用的解决方法。</p><p> sentinel 哨兵模式已经被集成在redis2.4之后的版本。</p><h4 id="2-2-2-原理"><a href="#2-2-2-原理" class="headerlink" title="2.2.2 原理"></a>2.2.2 原理</h4><p> Redis sentinel 监视一个或多个的redis master 以及其的slave。当某个master服务宕机了，sentinel就会自动把该master下的某个slave升级到master，用于替代宕机的master，以致于能继续处理请求，并且其它slave会同步新master的数据。</p><p> 同样的，Redis sentinel 也具备高可用性，也能实现集群。</p><h4 id="2-2-3-实现"><a href="#2-2-3-实现" class="headerlink" title="2.2.3 实现"></a>2.2.3 实现</h4><ul><li><p>配置sentinel<br>  在redis的包下，就存在sentinel，一样要修改配置文件。步骤如下：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">复制配置文件</span><br>cp /user/local/redis/redis_6379/sentinel.conf /etc/redis/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改配置文件</span><br>vim /etc/redis/sentinel.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口 默认不用改也行</span><br>port 26379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启后台启动 守护线程</span><br>daemonize yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改日志文件路径</span> <br>logfile /var/log/redis/sentinel.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置master ip</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判定master失效需要sentinel进行投票，quirum为至少多少票同意，master就被判定为失效</span><br>sentinel monitor mymaster 127.0.0.1 6379 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置master的密码 最好slave也设置一样的密码 所以slave 也要设置acl文件 设置一样的user passwordvi</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br>sentinel auth-pass mymaster &#123;密码&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置master用户 6.0起</span><br>sentinel auth-user mymaster wer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置sentinel认为master失去连接的判断时间 单位：ms</span><br>sentinel down-after-milliseconds mymaster 10000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置执行故障转移时，对新master的同步的slave节点的个数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">作为一个故障转移需要时间的一个标准，需要进行同步的slave节点越少，就越快，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果业务需要对slave节点进行查询，那么最好不要设置全部节点一起同步，以免无法查询</span><br>sentinel parallel-syncs mymaster 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置故障转移failover的超时时间</span><br>sentinel failover-timeout mymaster 60000<br><span class="hljs-meta prompt_"># </span><span class="language-bash">导致failover超时的原因:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 当两个sentinel对同一个master进行failover,后一个sentinel要等待前一个sentinel完成failover,那么就会需要两倍的超时时间</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 当发现slave同步到一个错误的新master，再强制同步一个正确的master，超时时间从检测到错误配置开始算。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 取消已经在进行的failover，发现有错误配置，没有被提升到master的slave节点 识别到SLAVEOF ON ONE</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 正在进行的failover,等待所有的slave被新master重新配置为新master的slave的时间。然而，即使配置完之后，sentinel也会对slave进行重新配置，但不会按照parallel-syncs进行配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">故障转移指的是，当master失去连接，sentinel将某一个slave节点升级成新的matser，其他slave节点完成对新master同步的过程</span><br></code></pre></td></tr></table></figure></li><li><p>启动sentinel</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/redis/redis-6379/src<br>./redis-sentinel /etc/redis/sentinel.conf<br></code></pre></td></tr></table></figure></li><li><p>查看日志文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /var/log/redis/sentinel.log<br></code></pre></td></tr></table></figure><p>  <img src="/posts/2ada2362a03e/1620143068494.png" alt="1620143068494.png"><br>  可以看到sentinel已经 监视6379 一个master 和6380 6381两个slave。<br>  但是两个slave节点宕机，这就是因为两个slave没有配置acl，sentinel没法通过slave的认证， 重新配置和master一样的acl文件，修改slave配置文件中的aclfile。</p></li><li><p>测试<br>  ​ 通过关闭master 6379 , 测试是否升级为新的master节点。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1：6379&gt; shutdown<br></code></pre></td></tr></table></figure><p>  在sentinel.log中发现并没有成功<br>  <img src="/posts/2ada2362a03e/1620143107235.png" alt="1620143107235.png"><br>  再去查看redis_6380.log，发现没有replconf权限<br>  <img src="/posts/2ada2362a03e/1620143130228.png" alt="1620143130228.png"><br>  所以，直接把用户权限改到+@all，不过这个给全部权限不好，怎么样准确给权限，以后再研究。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1：6379&gt; acl setuser wer +@all<br>127.0.0.1：6379&gt; acl save<br></code></pre></td></tr></table></figure><p>  再次关闭6379, 查看sentinel.log</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">+sdown slave 127.0.0.1:6381 127.0.0.1 6379 # 6379 master 宕机<br>+odown master mymaster 127.0.0.1 6379 #quorum 1/1<br>+new-epoch 1  # 开始第一次 failover<br>+try-failover master mymaster 127.0.0.1 6379 # 开发failover<br>+vote-for-leader 855ee66e09e740ca948775dd8d96018c87c3428d 1 # 投票选举leader<br>+elected-leader master mymaster 127.0.0.1 6379 # 之前被选举的leader<br>+failover-state-select-slave master mymaster 127.0.0.1 6379 # failover选择slave节点<br>+selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379 #选择6380 slave<br>+failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379 # 结束选择slave<br>+failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379 # 等待 6380 slave 完成晋升<br>+promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379 # 6380 slave 晋升完毕<br>+failover-state-reconf-slaves master mymaster 127.0.0.1 6379 #重新配置6379<br>+failover-end master mymaster 127.0.0.1 6379 # failover 完成<br>+switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380 #  转换6380为 master <br>+slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380 # 6381为6380的slave<br>+slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380# 6379为6380的slave<br>+sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380 #6379 宕机<br></code></pre></td></tr></table></figure><p>  查看6380 info</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=127.0.0.1,port=6381,state=online,offset=10742,lag=0<br></code></pre></td></tr></table></figure><p>  查看6381 info</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6380<br>master_link_status:up<br></code></pre></td></tr></table></figure><p>  正如自己所想的设置<br>  查看6379.conf ，并没有变化<br>  重启6379，查看info</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6380<br>master_link_status:down<br>master_last_io_seconds_ago:-1<br>master_sync_in_progress:0<br></code></pre></td></tr></table></figure><p>  发现master变成6380，但是没连接上<br>  查看redis_6379.log</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">MASTER &lt;-&gt; REPLICA sync started  # 开始同步<br>Non blocking connect for SYNC fired the event. <br>Master replied to PING, replication can continue... # master ping<br>(Non critical) Master does not understand REPLCONF listening-port: -NOAUTH Authentication required. # 认证没通过<br>(Non critical) Master does not understand REPLCONF capa: -NOAUTH Authentication required.<br>Partial resynchronization not possible (no cached master)<br>Unexpected reply to PSYNC from master: -NOAUTH Authentication required.<br>Retrying with SYNC...<br>MASTER aborted replication with an error: NOAUTH Authentication required.<br></code></pre></td></tr></table></figure><p>  然后去查看6379.conf</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">save 3600 1<br>save 300 100<br>save 60 10000<br>replicaof 127.0.0.1 6380<br></code></pre></td></tr></table></figure><p>  最末尾添加了replicaof 127.0.0.1 6380，却没有masteruser, masterauth，怪不得没有通过认证。<br>  手动添加，重新启动。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">masterauth &#123;密码&#125;<br>masteruser &#123;用户名&#125;<br></code></pre></td></tr></table></figure><p>  这就是redis sentinel为什么建议使用一样的用户名和密码了，因为sentinel在failover过程中重新配置(reconf)配置文件，如果主从用户名密码不一致，就会导致认证失败。<br>  查看6379 info</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6380<br>master_link_status:up<br>master_last_io_seconds_ago:1<br></code></pre></td></tr></table></figure><p>  成功<br>  测试slave读写，猜想：slave节点能读不能写。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1：6379&gt; get a<br>&quot;1&quot;<br>127.0.0.1：6379&gt; set a 2<br>(error) READONLY You can&#x27;t write against a read only replica.<br></code></pre></td></tr></table></figure><p>  猜想完全正确。</p></li><li><p>总结</p><ul><li>redis6.0版本后，主从的acl文件要打开，而且用于连接的user.password要一样。</li><li>用于连接的user, 权限要够，必须能做到sync,psync,reconf等等。(先使用+@all, 其他权限未知)</li><li>虽然用于连接的user用户拥有+@all权限，但是slave节点仍然无法set等其它的写操作，因为在redis2.6版本后配置文件被加入了replica-read-only yes，如果改为no，可以用slave写入一些缓存数据(key不同)，但是在和master同步后被删除。如果客户端由于错误配置而写入数据的话，就会导致问题。建议还是改成yes。</li></ul></li></ul><h2 id="3-Redis-Cluster"><a href="#3-Redis-Cluster" class="headerlink" title="3. Redis Cluster"></a>3. Redis Cluster</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>Redis Cluster是Redis的内置集群，在Redis3.0后推出的实现方案。以下是它的几个特点：</p><ul><li>Redis Cluster 是无中心节点的集群架构，依靠Gossip协议协同自动化修复集群的状态。</li><li>Redis Cluster 是去中心化，去中间件的，所以集群的每个节点(slave)都是平等的。</li><li>每个节点都保存着各自的数据和集群的状态。</li><li>每个节点都和其他节点连接，而且连接一直保持活跃，只要访问任意一个节点都能获取其它节点的值。</li></ul><h3 id="3-2-哈希槽-hash-slot-方式分配数据"><a href="#3-2-哈希槽-hash-slot-方式分配数据" class="headerlink" title="3.2 哈希槽(hash slot)方式分配数据"></a>3.2 哈希槽(hash slot)方式分配数据</h3><p>Redis Cluster，这种集群模式中，每个节点保存的数据并非完整，只有一部分数据。</p><p>这是因为集群采用哈希槽方式分配数据，Redis Cluster 默认分配了16384个<code>slot</code>，当set一个key时，会用<code>CRC6</code>算法来取模得到所属的<code>slot</code>，然后将这个key分到哈希槽区间的节点上，具体算法：<code>CRC16(key) % 16384</code>。</p><p>采用哈希槽方式来分配16384个<code>slot</code>，假设有3个节点组成集群，那么它们分别的<code>slot</code>区间为: [0 ,5460]，[5461, 10922]，[10923, 16383]。 可见它们是均分16348个<code>slot</code>。</p><p>如果设置一个key<code>my_name</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set my_name wer<br></code></pre></td></tr></table></figure><p>那么根据哈希槽算法：<code>CRC16(&#39;my_name&#39;)%16384 = 2412</code>，可得该key的值存储会被分配到[0, 5460]。</p><h3 id="3-3-Redis-Cluster的主从模式"><a href="#3-3-Redis-Cluster的主从模式" class="headerlink" title="3.3 Redis Cluster的主从模式"></a>3.3 Redis Cluster的主从模式</h3><p>Redis Cluster 为了保证数据的高可用性，加入主从模式，一个主节点对应一个或多个从节点，主节点负责数据存取，从节点复制从主节点拉去数据备份，当主节点宕机了，就会在从节点中选取一个当主节点，从而保证集群不会挂。</p><h3 id="3-4-Redis-Cluter-搭建"><a href="#3-4-Redis-Cluter-搭建" class="headerlink" title="3.4 Redis Cluter 搭建"></a>3.4 Redis Cluter 搭建</h3><h4 id="3-4-1-准备Redis节点"><a href="#3-4-1-准备Redis节点" class="headerlink" title="3.4.1 准备Redis节点"></a>3.4.1 准备Redis节点</h4><blockquote><p>配置： 主节点 3个</p><p> 从节点 3个</p><p> 端口号 7001~7006</p></blockquote><p>3个节点起才能进行投票，所以主节点要3个，每个主节点至少一个从节点，共6个节点。</p><p>Redis5.0 后不需要Redis.gem去搭建集群了, 不需要搭建Ruby环境了。</p><p>这次是在同一个机器中搭建的。</p><ul><li><p>复制节点</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/redis/<br>mkdir ./cluster<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制节点</span><br>cp /usr/local/redis/reids-6.2.1 ./node_7001<br>cp /usr/local/redis/reids-6.2.1 ./node_7002<br>cp /usr/local/redis/reids-6.2.1 ./node_7003<br>cp /usr/local/redis/reids-6.2.1 ./node_7004<br>cp /usr/local/redis/reids-6.2.1 ./node_7005<br>cp /usr/local/redis/reids-6.2.1 ./node_7006<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">复制配置文件到指定目录</span><br>mkdir /etc/redis/cluster<br>cp /user/local/redis-6.2.1/redis.conf /etc/redis/cluster/7001.conf<br>vim 7001.conf<br>···<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改绑定地址为 所有ip都可以访问 生产环境中 建议绑定</span><br>bind 0.0.0.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改端口号</span><br>port 7001<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启保护模式 默认是开启的 如果设置了密码 可以开启，否则要关闭</span><br>protected-mode yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启守护线程 后台启动</span><br>daemonize yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改pidfile</span> <br>pidfile /var/run/redis_7001.pid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改日志文件路径 注意：要手动创建路径</span><br>logfile /var/log/redis/cluster/7001.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改持久化文件路径 注意：要手动创建路径</span><br>dir /var/lib/redis/cluster/7001/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置master用户名</span><br>masteruser wer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置master密码</span><br>masteruser redis123<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启acl文件 redis6.0后 节点不能通过master节点默认用户default访问 注意：要手动创建文件</span><br>aclfile /etc/redis/cluster/users_7001.acl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启aof持久化</span><br>appendonly yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启集群</span><br>cluster-enabled yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改集群的配置文件(自动生成)</span><br>cluster-config-file nodes-7001.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改请求节点超时时间 默认15000 单位 ms</span><br>cluster-node-timeout 5000<br>···<br></code></pre></td></tr></table></figure><p>  复制配置文件 5份</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -R 7001.conf 7002.conf<br>cp -R 7001.conf 7003.conf<br>cp -R 7001.conf 7004.conf<br>cp -R 7001.conf 7005.conf<br>cp -R 7001.conf 7006.conf<br></code></pre></td></tr></table></figure><p>  批量修改配置文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim 7002.conf<br>···<br>使用命令<br>:%s/7001/7002/g<br>可以看到输出<br>6 substitutions on 6 lines<br>···<br></code></pre></td></tr></table></figure></li><li><p>创建acl文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/redis/cluster<br>touch users_7001.acl<br></code></pre></td></tr></table></figure><p>  使用redis-cli 客户端创建用户</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/redis/clustr/node_7001/src<br>./redis-cli -p 7001<br>···<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置默认用户密码</span><br>127.0.0.1：7001&gt; acl setuser default &gt;&#123;密码&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置集群用户</span><br>127.0.0.1：7001&gt; acl setuser wer on &gt;&#123;密码&#125; ~* +@all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存到acl文件</span><br>127.0.0.1：7001&gt; acl save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出</span><br>127.0.0.1：7001&gt; quit<br></code></pre></td></tr></table></figure><p>  复制acl文件 使用一样的用户和密码名</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/redis/cluster<br>cp users_7001.acl users_7002.acl<br>cp users_7001.acl users_7003.acl<br>cp users_7001.acl users_7004.acl<br>cp users_7001.acl users_7005.acl<br>cp users_7001.acl users_7006.acl<br></code></pre></td></tr></table></figure></li><li><p>启动节点<br>  这里有管理节点脚本，<a href="http://复制命名为cluster.sh/">复制命名为cluster.sh</a>, 修改脚本内，的IPS 和端口REDISPORTS 注意要对应上<br>  如果要用Jedis 来远程访问，必须使用redis部署服务器的外网地址，不能使用回环地址127.0.0.1！<br>  详情：请看<a href="/posts/238e29daecc1/">Jedis连接Redis Cluster的java.net.SocketTimeoutException: connect timed out</a>。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Author WER</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">CreateTime 4/25/2021</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">enter port</span><br>REDISPORTS=(7001 7002 7003 7004 7005 7006)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mathching ip with port defualt 127.0.0.1</span><br>IPS=(192.168.1.102 192.168.1.102 192.168.1.102 192.168.1.102 192.168.1.102 192.168.1.102)<br>CONF=/etc/redis/cluster/<br>EXEC=/src/redis-server<br>CLIEXEC=/src/redis-cli<br>PIDFILEPATH=/var/run/<br>if [ $&#123;#IPS[@]&#125; -ne $&#123;#REDISPORTS[@]&#125; ]<br>then<br>echo &quot;ERROR: IP count does not mathch PORT count, review cluter.sh on line 3, lin 5&quot;<br>echo &quot;IPS COUNT: $&#123;#IPS[@]&#125;, REDISPORTS COUNT: $&#123;#REDISPORTS[@]&#125;&quot;<br>exit 1<br>fi<br>case &quot;$1&quot; in<br>start)<br>for i in &quot;$&#123;!REDISPORTS[@]&#125;&quot;;<br>        do<br>IP=$&#123;IPS[i]&#125;<br>PORT=$&#123;REDISPORTS[i]&#125;<br>PARAMS=&quot;$PARAMS $IP:$PORT&quot;<br>                        PIDFILE=$&#123;PIDFILEPATH&#125;redis_$PORT.pid<br>if [ -f $PIDFILE ]<br>then<br>echo &quot;Redis server is running. IP: $IP PORT: $PORT&quot;<br>else<br>./node_$PORT$EXEC $CONF$PORT.conf<br>echo &quot;Starting Redis server... IP: $IP PORT: $PORT&quot;<br>fi<br>done<br>;;<br>stop)<br>for i in &quot;$&#123;!REDISPORTS[@]&#125;&quot;;<br>do<br>IP=$&#123;IPS[i]&#125;<br>PORT=$&#123;REDISPORTS[i]&#125;<br>                        PIDFILE=$&#123;PIDFILEPATH&#125;redis_$PORT.pid<br>if [ ! -f $PIDFILE ]<br>then<br>echo  &quot;Redis servier is not running... IP: $IP PORT: $PORT&quot;<br>else<br>PID=$(cat $PIDFILE)<br>echo &quot;Stopping Redis server... IP: $IP PORT: $PORT&quot;<br>if [ -n $&#123;2&#125; ];then<br>./node_$PORT$CLIEXEC -h $IP -p $PORT -a $2 shutdown<br>else<br>./node_$PORT$CLIEXEC -h $IP -p $PORT shutdown<br>fi<br>while [ -x /proc/$&#123;PID&#125; ]<br>do<br>echo &quot;PID: $PID, waiting for shutdown ... IP: $IP PORT: $PORT&quot;<br>sleep 1<br>done<br>echo &quot;Redis server stopped. IP: $IP PORT: $PORT&quot;<br>fi<br>done<br>;;<br>status)<br>for i in &quot;$&#123;!REDISPORTS[@]&#125;&quot;;<br>do<br>IP=$&#123;IPS[i]&#125;<br>PORT=$&#123;REDISPORTS[i]&#125;<br>                        PIDFILE=$&#123;PIDFILEPATH&#125;redis_$PORT.pid<br>PID=$(cat $PIDFILE)<br>if [ -x /proc/$&#123;PID&#125; ] &amp;&amp; [ -f $PIDFILE ]<br>then<br>echo &quot;Redis server is running. IP: $IP PORT: $PORT PID: $PID&quot;<br>else<br>echo &quot;Redis server is not running. IP: $IP PORT: $PORT&quot;<br>fi<br>done<br>;;<br>cluster)<br>                $0 start $2 $3<br>for i in &quot;$&#123;!REDISPORTS[@]&#125;&quot;;<br>        do<br>IP=$&#123;IPS[i]&#125;<br>PORT=$&#123;REDISPORTS[i]&#125;<br>PARAMS=&quot;$PARAMS $IP:$PORT&quot;<br>done<br>./node_$PORT$CLIEXEC --cluster create $PARAMS --cluster-replicas 1 --user $2 -a $3<br>;;<br>restart)<br><span class="hljs-meta prompt_">$</span><span class="language-bash">0 stop <span class="hljs-variable">$3</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">0 start <span class="hljs-variable">$2</span> <span class="hljs-variable">$3</span></span><br>;;<br>help)<br>echo &quot;Please user start, stop, restart, status help as first argument.&quot;<br>echo &quot;example:&quot; <br>echo &quot;./cluter.sh start &lt;username&gt; &lt;password&gt;&quot;<br>echo &quot;         eg:  ./cluter.sh start WER 12345&quot;<br>echo &quot;./cluter.sh stop &lt;password&gt;&quot;<br>echo &quot;         eg:  ./cluter.sh stop 12345&quot;<br>echo &quot;./cluter.sh restart &lt;username&gt; &lt;password&gt;&quot;<br>echo &quot;         eg:  ./cluter.sh restart WER 12345&quot;<br>echo &quot;./cluter.sh status&quot;<br>echo &quot;./cluter.sh cluter &lt;username&gt; &lt;pasword&gt;&quot;<br>echo &quot;         eg:  ./cluter.sh cluter WER 12345&quot;<br>echo &quot;./cluter.sh help&quot;<br>;;<br>*)<br>echo &quot;Please user start, stop, restart, status help as first argument.&quot;<br>;;<br>esac<br></code></pre></td></tr></table></figure><p>  <a href="http://保存为cluster.sh/">保存为cluster.sh</a>，保存在路径<code>/usr/local/redis/cluster/</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/redis/cluster/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行命令</span><br>./cluster.sh start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看帮助</span><br>./cluster.sh help<br></code></pre></td></tr></table></figure><p>  如果出现语法错误，说明当前系统脚本运行默认采用不是bash。<br>  修改系统默认的shell运行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg-reconfigure dash<br></code></pre></td></tr></table></figure><p>  选no<br>  Ubuntu系统为了启动快，默认使用了dash，而采用的是bash。<br>  启动成功</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Starting Redis server... IP: 192.168.1.102 PORT: 7001<br>Starting Redis server... IP: 192.168.1.102 PORT: 7002<br>Starting Redis server... IP: 192.168.1.102 PORT: 7003<br>Starting Redis server... IP: 192.168.1.102 PORT: 7004<br>Starting Redis server... IP: 192.168.1.102 PORT: 7005<br>Starting Redis server... IP: 192.168.1.102 PORT: 7006<br></code></pre></td></tr></table></figure><p>  查看进程</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps aux | grep redis<br>···<br>root      2477  0.6  0.0 135716  5292 ?        Ssl  18:41   0:06 ./node_7001/src/redis-server 0.0.0.0:7001 [cluster]<br>root      2483  0.6  0.0 135716  5236 ?        Ssl  18:41   0:06 ./node_7002/src/redis-server 0.0.0.0:7002 [cluster]<br>root      2489  0.6  0.1 135716  5608 ?        Ssl  18:41   0:06 ./node_7003/src/redis-server 0.0.0.0:7003 [cluster]<br>root      2495  0.5  0.1  57888  5552 ?        Ssl  18:41   0:05 ./node_7004/src/redis-server 0.0.0.0:7004 [cluster]<br>root      2501  0.5  0.0  57888  5504 ?        Ssl  18:41   0:05 ./node_7005/src/redis-server 0.0.0.0:7005 [cluster]<br>root      2507  0.6  0.0  57888  5420 ?        Ssl  18:41   0:05 ./node_7006/src/redis-server 0.0.0.0:7006 [cluster]<br>root      2526  0.0  0.0   6296   924 pts/1    S+   18:57   0:00 grep --color=auto redis<br>···<br></code></pre></td></tr></table></figure><p>  启动成功</p></li></ul><h4 id="3-4-2-搭建集群"><a href="#3-4-2-搭建集群" class="headerlink" title="3.4.2 搭建集群"></a>3.4.2 搭建集群</h4><p>节点已经启动了，但是仍然没创建集群.</p><p>可以使用脚本<code>./cluster.sh cluster &#123;用户名&#125; &#123;密码&#125;</code> 创建集群</p><p>也可以直接输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加入到任意一个redis-cli</span><br>cd /usr/local/redis/cluster/node_7001/src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输入创建集群命令</span><br>redis-cli --cluster create 192.168.1.102:7001 192.168.1.102:7002 192.168.1.102:7003 192.168.1.102:7004 192.168.1.102:7005 192.168.1.102:7006 --cluster-replicas 1 --user &#123;用户名&#125; -a &#123;密码&#125;<br></code></pre></td></tr></table></figure><p>该命令格式解读</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli --cluster create &#123;ip1&#125;:&#123;port1&#125; &#123;ip2&#125;:&#123;port2&#125; &#123;ipN&#125;:&#123;portN&#125; --cluster-replicas &#123;reolicas&#125; --user &#123;username&#125; -a &#123;password&#125;<br></code></pre></td></tr></table></figure><p><code>--cluster-replicas</code> 是指每个主节点的从节点数。</p><p>可看到输出， 为了jedis连接 换了路由分配地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes... <span class="hljs-comment">#分配哈希槽 计划</span></span><br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 192.168.1.102:7005 to 192.168.1.102:7001 # 原先slave分配计划<br>Adding replica 192.168.1.102:7006 to 192.168.1.102:7002<br>Adding replica 192.168.1.102:7004 to 192.168.1.102:7003<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Trying to optimize slaves allocation <span class="hljs-keyword">for</span> anti-affinity <span class="hljs-comment">#使用反关联性规则 优化slave的分配</span></span><br># 为了平衡各个服务器压力，将slave分配给master<br>[WARNING] Some slaves are in the same host as their master # 所有slave都在同一服务器<br>M: 30f10a03422c2b01bc3a0b89b406317c73a475fd 192.168.1.102:7001 # 重新分配slave <br>   slots:[0-5460] (5461 slots) master<br>M: 9dfb46bacd97eb36c6be4edc07095ae6327ce3ef 192.168.1.102:7002<br>   slots:[5461-10922] (5462 slots) master<br>M: 1df02bfed5039e5bc33d5e92ba317edf06905174 192.168.1.102:7003<br>   slots:[10923-16383] (5461 slots) master<br>S: 6543b0a7a6e9624d8912185803d461c16579a8cc 192.168.1.102:7004<br>   replicates 30f10a03422c2b01bc3a0b89b406317c73a475fd<br>S: 688c8cd11e12a7ac6e8f65894d6617cd01264f3d 192.168.1.102:7005<br>   replicates 9dfb46bacd97eb36c6be4edc07095ae6327ce3ef<br>S: 8813af22feed8ef5882e29383b45a18467e5d533 192.168.1.102:7006<br>   replicates 1df02bfed5039e5bc33d5e92ba317edf06905174<br>Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes # 是否同意这样的分配<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated        <span class="hljs-comment"># 节点配置更新</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node   <span class="hljs-comment"># 更新不同配置对不同节点</span></span>  <br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster <span class="hljs-comment"># 准备开会</span></span><br>Waiting for the cluster to join # 等待集群开会<br>..<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 192.168.1.102:7001) <span class="hljs-comment"># 集群正在检查 用的是node 7001</span></span><br>M: 30f10a03422c2b01bc3a0b89b406317c73a475fd 192.168.1.102:7001 # 实施上述的分配计划<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 8813af22feed8ef5882e29383b45a18467e5d533 192.168.1.102:7006<br>   slots: (0 slots) slave<br>   replicates 1df02bfed5039e5bc33d5e92ba317edf06905174<br>S: 6543b0a7a6e9624d8912185803d461c16579a8cc 192.168.1.102:7004<br>   slots: (0 slots) slave<br>   replicates 30f10a03422c2b01bc3a0b89b406317c73a475fd<br>M: 9dfb46bacd97eb36c6be4edc07095ae6327ce3ef 192.168.1.102:7002<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>S: 688c8cd11e12a7ac6e8f65894d6617cd01264f3d 192.168.1.102:7005<br>   slots: (0 slots) slave<br>   replicates 9dfb46bacd97eb36c6be4edc07095ae6327ce3ef<br>M: 1df02bfed5039e5bc33d5e92ba317edf06905174 192.168.1.102:7003<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>[OK] All nodes agree about slots configuration. # 所有节点同意<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots... <span class="hljs-comment"># 检查所有开放的slot</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage... <span class="hljs-comment"># 检查slot 覆盖率</span></span><br>[OK] All 16384 slots covered. # 16384个slot都被分配了<br></code></pre></td></tr></table></figure><p>可见master节点才会被分配哈希槽<code>hash slot</code>，因为master节点才能写数据，而slave节点只能读数据。</p><p>可以看到master节点有7001，7002，7003，与其对应的slave节点是7004，7005，7006。</p><p>查看集群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录redis-cli</span><br>cd /usr/local/redis/cluster/node_7001/src<br>./redis-cli -p 7001<br><br>···<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看集群信息</span><br>127.0.0.1:7001&gt; cluster info<br>···<br>cluster_state:ok<br>cluster_slots_assigned:16384 # 集群分配的哈希槽数<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6 # 6个已知节点<br>cluster_size:3<br>cluster_current_epoch:6<br>cluster_my_epoch:2<br>cluster_stats_messages_ping_sent:3438<br>cluster_stats_messages_pong_sent:3390<br>cluster_stats_messages_meet_sent:1<br>cluster_stats_messages_sent:6829<br>cluster_stats_messages_ping_received:3390<br>cluster_stats_messages_pong_received:3439<br>cluster_stats_messages_received:6829<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点</span><br>192.168.1.102:7001&gt; cluster nodes<br>8813af22feed8ef5882e29383b45a18467e5d533 192.168.1.102:7006@17006 slave 1df02bfed5039e5bc33d5e92ba317edf06905174 0 1619358137000 3 connected<br>6543b0a7a6e9624d8912185803d461c16579a8cc 192.168.1.102:7004@17004 slave 30f10a03422c2b01bc3a0b89b406317c73a475fd 0 1619358135466 1 connected<br>9dfb46bacd97eb36c6be4edc07095ae6327ce3ef 192.168.1.102:7002@17002 master - 0 1619358136000 2 connected 5461-10922<br>30f10a03422c2b01bc3a0b89b406317c73a475fd 192.168.1.102:7001@17001 myself,master - 0 1619358135000 1 connected 0-5460<br>688c8cd11e12a7ac6e8f65894d6617cd01264f3d 192.168.1.102:7005@17005 slave 9dfb46bacd97eb36c6be4edc07095ae6327ce3ef 0 1619358137000 2 connected<br>1df02bfed5039e5bc33d5e92ba317edf06905174 192.168.1.102:7003@17003 master - 0 1619358137471 3 connected 10923-16383<br></code></pre></td></tr></table></figure><h4 id="3-4-2-测试"><a href="#3-4-2-测试" class="headerlink" title="3.4.2 测试"></a>3.4.2 测试</h4><ul><li><p>测试存数据<br>  猜想：</p><ol><li><p>根据key值不同，<code>CRC16(key)%16384</code>算出<code>hash slot</code>，再将数据存储在<code>hash slot</code>所在节点。</p></li><li><p>根据集群去中心化的设计概念，在slave节点存储数据，一样能存储成功，只不过会通过master节点存储，slave节点备份。</p></li></ol><p>  实验：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输入连接集群命令 连接到slave节点 7005 只需要输入密码即可 因为各个节点的关联集群的用户密码一样 acl文件一样</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-c 表示cluster 集群 必须加上-c 能访问集群</span><br>cd /usr/local/redis/cluster/node_7001/src<br>redis-cli -c -h 192.168.1.102 -p 7005 -a &#123;密码&#125;<br>···<br>192.168.1.102:7005&gt; set a 1<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [15495] located at 192.168.1.102:7003</span><br>OK<br>192.168.1.102:7003&gt; set b 2<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3300] located at 192.168.1.102:7001</span><br>OK<br>192.168.1.102:7001&gt; set c 3<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [7365] located at 192.168.1.102:7002</span><br>OK<br></code></pre></td></tr></table></figure><br>  根据哈希槽策略分配存储数据的节点，猜想1正确。<br>  slave节点存储数据会重定向到确定分配的节点，再存储数据，猜想2正确。</p></li><li><p>测试取数据<br>  猜想：</p><ol><li>各个节点都能取到数据，通过计算key的哈希槽，重定向到该哈希槽对应的节点，再取值。</li></ol><p>  实验：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.1.102:7003&gt; get a<br>&quot;1&quot;<br>192.168.1.102:7003&gt; get b<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3300] located at 192.168.1.102:7001</span><br>&quot;2&quot;<br>192.168.1.102:7001&gt; get c<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [7365] located at 192.168.1.102:7002</span><br>&quot;3&quot;<br>192.168.1.102:7002&gt; get haha<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3662] located at 192.168.1.102:7001</span><br>(nil)<br></code></pre></td></tr></table></figure><br>  猜想正确，key的哈希槽不同，找到对应的master节点，取值，就算是没有存储的键值对依然如此。</p></li><li><p>测试slave节点的晋升<br>  猜想：</p><ol><li><p>当某一个master节点宕机，其对应的slave节点，会晋升为新master。</p></li><li><p>宕机后的master节点，重启后，变成新master节点的slave节点。</p></li></ol><p>  实验：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">shutdown master节点 7001</span> <br>redis-cli -h 192.168.1.102 -p 7001 -a &#123;密码&#125; shutdown<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 7001的slave节点 7004</span><br>redis -cli -h 192.168.1.102 -p 7004 -a &#123;密码&#125;<br>···<br>192.168.1.102:7004&gt; info<br>···<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master # 晋升为master<br>connected_slaves:0<br>master_failover_state:no-failover<br>master_replid:379758e0e31c118fa611d75df266b5cb940fab1f<br>master_replid2:589179e07c6a1557909e7cb0106e065bb85e2cf2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启7001 脚本启动 或者命令启动 redis-server /etc/redis/cluster/7001.conf</span><br>root@werserver:/usr/local/redis/cluster# ./cluster.sh start<br>Starting Redis server... IP: 192.168.1.102 PORT: 7001<br>Redis server is running. IP: 192.168.1.102 PORT: 7002<br>Redis server is running. IP: 192.168.1.102 PORT: 7003<br>Redis server is running. IP: 192.168.1.102 PORT: 7004<br>Redis server is running. IP: 192.168.1.102 PORT: 7005<br>Redis server is running. IP: 192.168.1.102 PORT: 7006<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看 7001 信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave  # 成为了7004的slave节点<br>master_host:192.168.1.102<br>master_port:7004<br>master_link_status:up <br></code></pre></td></tr></table></figure><br>  7001宕机后，7004成为了新master节点，重启7001节点，7001变成7004的slave节点。猜想正确。</p></li></ul><h3 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5 总结"></a>3.5 总结</h3><ol><li>搭建Redis 集群，如果非单机的话，尽量使用外网地址，不要用回环地址127.0.0.1。具体请看 <a href="/posts/238e29daecc1/">Jedis连接Redis Cluster的java.net.SocketTimeoutException: connect timed out</a>。</li><li>基于去中心化的设计理念，Redis集群的集群节点配置文件，存储在每个节点的资源路径下，即redis.conf下的dir路径下。</li></ol>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之Java基础</title>
      <link href="/posts/94b49ff474dd/"/>
      <url>/posts/94b49ff474dd/</url>
      
        <content type="html"><![CDATA[<h1 id="1-问题：Vector和ArrayList区别？"><a href="#1-问题：Vector和ArrayList区别？" class="headerlink" title="1. 问题：Vector和ArrayList区别？"></a>1. 问题：Vector和ArrayList区别？</h1><ul><li>相同点<ul><li>都使用数组结构实现的。</li></ul></li><li>不同点<ul><li>Vector是线程安全的，效率低。</li><li>ArrayList是线程不安全的，效率高。</li><li>Vector相对于ArrayList查询慢，因为线程安全。</li></ul></li></ul><h1 id="2-问题：ArrayList和LinkedList区别？"><a href="#2-问题：ArrayList和LinkedList区别？" class="headerlink" title="2. 问题：ArrayList和LinkedList区别？"></a>2. 问题：ArrayList和LinkedList区别？</h1><ul><li>相同点<ul><li>同属于Collection下的List接口的实现类。</li><li>都是用于存储引用数据类型，其长度都能自动增长。</li><li>都是线程不安全的。</li></ul></li><li>不同点<ul><li>ArrayList是基于数组实现的，而LinkedList是基于链表实现的。</li><li>ArrayList<ul><li>查询快，通过下标索引查找目标索引，遍历下标索引即可。</li><li>增删慢，在一般情况下在尾部添加元素快，但是总体不及LinkedList。</li><li>修改快，修改之前需要进行查询，查询快，修改也快。</li></ul></li><li>LinkedList<ul><li>增删快，实质就是改变前后节点的指针指向地址。</li><li>查询慢，即需要遍历链表。</li><li>修改慢，修改之前需要进行查询，所以慢。</li></ul></li></ul></li></ul><h1 id="3-问题：ArrayList如何进行实现自动增长-扩容-？"><a href="#3-问题：ArrayList如何进行实现自动增长-扩容-？" class="headerlink" title="3. 问题：ArrayList如何进行实现自动增长(扩容)？"></a>3. 问题：ArrayList如何进行实现自动增长(扩容)？</h1><ol><li>ArrayList扩容的实质是进行数组拷贝，将原本的数组元素拷贝到新的数组中。<br> <img src="/posts/94b49ff474dd/1620719761060.png" alt="1620719761060.png"></li><li>每次进行扩容时，新数组的容量是原本的1.5倍。<br> <img src="/posts/94b49ff474dd/1620719549286.png" alt="1620719549286.png"><br> ps: 使用ArrayList应该避免数组扩容影响性能，可以创建时指定容量，以避免发生扩容。默认容量是10。</li></ol><h1 id="4-问题：使用Araarys-asList-进行数组转集合，有什么需要注意的？"><a href="#4-问题：使用Araarys-asList-进行数组转集合，有什么需要注意的？" class="headerlink" title="4. 问题：使用Araarys.asList()进行数组转集合，有什么需要注意的？"></a>4. 问题：使用Araarys.asList()进行数组转集合，有什么需要注意的？</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] arr = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>&#125;;<br><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> Arrays.asList(arr);<br>list.add(<span class="hljs-string">&quot;D&quot;</span>);<br>System.out.println(list); <span class="hljs-comment">//java.lang.UnsupportedOperationException</span><br>System.out.println(list.get(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><ol><li><p>不能增加删除元素。<br> <code>Arrays.asList()</code>得到的<code>ArrayList</code>并非日常使用的<code>ArrayList</code>，而是<code>ArrayList</code>中的静态内部类，该内部类继承于抽象类<code>AbstractList</code>，而<code>AbstractList</code>定义了<code>add</code>，<code>remove</code>，直接返回异常<code>UnsupportedOperationException</code>，而静态内部类并没有重写<code>add</code>，<code>remove</code>。所以只要使用了<code>add</code>，<code>remove</code>就导致<code>UnsupportedOperationException</code>。</p></li><li><p>需要转换的数组只能存储引用数据类型，不能存储基本数据类型，如：<code>int</code>。<br> 基本数据类型数组装换成集合，会将整个数组当作一个元素进行存储。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>&#125;;<br><span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> Arrays.asList(arr1);<br>System.out.println(list1);<span class="hljs-comment">//[[I@e2534b2a]</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="5-问题：-HashMap和Hashtable的区别？"><a href="#5-问题：-HashMap和Hashtable的区别？" class="headerlink" title="5. 问题： HashMap和Hashtable的区别？"></a>5. 问题： HashMap和Hashtable的区别？</h1><ul><li>相同点：<ul><li>底层都是哈希算法，双列集合(数组+链表)。</li></ul></li><li>不同点：<ul><li>HashMap是线程不安全的，效率高，JDK1.2版本后。</li><li>Hashtable是线程安全的，效率低，JDK.1.0版本后。</li><li>HashMap可以存储null键和null值，而Hashtable不行（equals方法需要非空对象）。</li></ul></li></ul><h1 id="6-问题：HashMap的原理？"><a href="#6-问题：HashMap的原理？" class="headerlink" title="6. 问题：HashMap的原理？"></a>6. 问题：HashMap的原理？</h1><ol><li>数据结构<br> HashMap是双列集合，内部是数组加链表(或红黑树)，1.7时只是数组加链表。<br> 1.8中，链表节点数大于8，链表就会转换成红黑树，当红黑树节点数少于6，红黑树就会转变成链表。</li><li>插入原理<br> 流程图如下<br> <img src="/posts/94b49ff474dd/1620828997797.png" alt="1620828997797.png"><br> a. 一开始对数组是否为空进行判断，为空就初始化数组。<br> b. 通过<code>(n-1)&amp;hash</code>计算存储位置，<code>n</code>为数组长度，<code>hash</code>为录入键值对的<code>key</code>的<code>hash</code>值。<br> c. 得出指定位置，判断指定位置是否有数据，如果没有，直接创建节点存储数据。<br> d. 如果有，说明发生了<code>哈希冲突</code>，继续判断新数据和旧数据的<code>key</code>值，<code>hash</code>值是否相同，如果相同，新值替换旧值并返回。<br> e. 如果不相同，判断当前节点类型是否为红黑树节点，如果是，遍历红黑树，判断<code>key</code>值，<code>hash</code>值是否与存在的节点的<code>key</code>值，<code>hash</code>值相同；如果相同，替换旧值并返回，如果不相同，创建树节点并加入红黑树。<br> f. 如果不是红黑树节点，遍历当前链表，判断<code>key</code>值，<code>hash</code>值是否与存在的节点的<code>key</code>值，<code>hash</code>值相同；如果相同，替换旧值并替换，如果不相同，创建普通节点并加入链表。<br> g. 插入完成后，判断当前总节点数是否大于阈值，如果大于，对数组进行扩容到<code>n*2</code>的大小，即原本数组容量的2倍。</li></ol><h1 id="7-问题：1-8后对HashMap进行怎么样的优化，为什么？"><a href="#7-问题：1-8后对HashMap进行怎么样的优化，为什么？" class="headerlink" title="7. 问题：1.8后对HashMap进行怎么样的优化，为什么？"></a>7. 问题：1.8后对HashMap进行怎么样的优化，为什么？</h1><p>优化：</p><ol><li>数组+链表改成数组+链表(或红黑树)。</li><li>链表的插入方式由<code>头插法</code>改成<code>尾插法</code>。即插入时，数组上存储位置已有节点，1.7是将新节点放入到数组中，数组中原本节点变成新节点的后继节点。1.8是遍历链表，将新节点放在链表最后。</li><li>扩容时，1.7是需要对所有节点进行重新<code>hash</code>定位；1.8则不需要继续重新<code>hash</code>，经过简单的逻辑运算，重新定位，索引不变或索引+旧容量大小。</li><li>插入时，1.7需要先判断是否需要扩容，再插入；1.8先进行插入，插入完成后再进行扩容判断。</li><li>1.8对<code>hash函数</code>(扰动函数)做了优化，只进行了一次异或和移位，1.7做了4次移位和异或。</li></ol><p>原因：</p><ol><li>链表改成红黑树，防止发生<code>hash冲突</code>时，链表长度过长，可以将链表的时间复杂度<code>O(n)</code>降低到<code>O(logn)</code>。</li><li>1.7<code>头插法</code>扩容时，会导致链表反转，多线程情况下还会产生<code>环</code>的数据结构。而先<code>尾插法</code>插入后扩容则不会。</li><li>1.8对<code>hash</code>进行了改进，扩容时，计算数组的位置的掩码仅仅只是高位多了一个<code>1</code>。<code>(n-1)&amp;hash</code>下，扩容，即<code>(2n-1)&amp;hash</code>，即<code>(2n-1)</code>比<code>(n-1)</code>的高位多一个<code>1</code>，而<code>1</code>与<code>hash</code>进行<code>&amp;</code>逻辑运算，无非是和<code>0</code>和<code>1</code>，那么得到的结果也就是<code>原本位置</code>和<code>原本位置+原本数组的容量</code>两种结果。</li><li>因为1.7先扩容后插入，会导致链表反转，甚至产生<code>环</code>;而先插入，再扩容，则能避免。</li><li>移位和异或（扰动）做多了，边际效用不大，降低次数能提高效率。</li></ol><h1 id="8-问题：-HashMap初始化时如何设定初始容量大小？"><a href="#8-问题：-HashMap初始化时如何设定初始容量大小？" class="headerlink" title="8. 问题： HashMap初始化时如何设定初始容量大小？"></a>8. 问题： HashMap初始化时如何设定初始容量大小？</h1><p>HashMap默认初始化时，默认容量大小是<code>16</code>，负载因子是<code>0.75</code>，如果手动输入初始容量大小，如10，那么就会进行如下操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="hljs-number">1</span>); <span class="hljs-comment">//对-1进行无符号右移二进制0开头的个数 </span><br><span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>相当于返回16，那么16就是初始化容量大小，呈16，32，64，128….等比数列规律。</p><p>将<code>-1</code>进行无符号位移，<code>9</code>（10-1）的二进制0开头的个数，得出<code>15</code>，进行<code>+1</code>得到<code>16</code>。而此算法的出的初始容量，必定是2的整数幂。</p><p>为什么这么设计呢？在计算数组下标位置时，<code>(n-1)&amp;hash</code>时，<code>（n-1）</code>刚好是一个低位掩码，<code>&amp;</code>与运算后，高位全部归零，只保留了低位值，其实就相当于取余<code>%</code>运算，但是位运算<code>&amp;</code>更高效。保留下来的低位值必定是数组容量<code>n-1</code>内的值了。</p><h1 id="9-问题：HashMap的哈希函数式怎么设计的？"><a href="#9-问题：HashMap的哈希函数式怎么设计的？" class="headerlink" title="9. 问题：HashMap的哈希函数式怎么设计的？"></a>9. 问题：HashMap的哈希函数式怎么设计的？</h1><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>HashMap的<code>hash函数</code>是使用了<code>扰动函数</code>。原因有二：</p><ol><li>尽可能降低<code>hash碰撞</code>，越均匀分散越好。</li><li>因为高频操作，所以算法尽可能高效，故而使用位运算。</li></ol><p>对<code>key.hashCode()</code>进行高16位和低16位进行异或，有利于降低<code>hash碰撞</code>。</p><p>为什么呢？</p><p>已经知道对<code>key</code>进行<code>hashCode()</code>返回的结果是<code>int</code>类型散列值，<code>int</code>值范围为-232 ~ 231-1，显然40多亿映射空间，很难出现<code>hash碰撞</code>，但是内存也放不下，所以要对它进行取余运算，即<code>&amp;</code>运算，即<code>(n-1)&amp;hash</code>，得到的结果作为下标才能去访问数组。</p><p>HashMap的数组长度必定是2的整数幂，因此进行<code>&amp;</code>与运算时，就能截取出<code>hash</code>的低位值。问题来了，就算散列值分布再分散，只截取后几位，配置可谓是相当严重。如何解决呢？</p><p><code>扰动函数</code>(hash函数)，将<code>key.hashCode()</code>的值无符号向右移动<code>16</code>位再异或，相当于将高半区和低半区做异或<code>^</code>运算。那么就能混合哈希码的高位和地位，以此来加大低位的随机性，而混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p><h1 id="10-问题：HashMap是线程安全的么？"><a href="#10-问题：HashMap是线程安全的么？" class="headerlink" title="10. 问题：HashMap是线程安全的么？"></a>10. 问题：HashMap是线程安全的么？</h1><p>HashMap并非线程安全的，在多线程情况下，1.7会产生死循环，数据丢失以及数据覆盖的问题。1.8中会有数据覆盖的问题。</p><p>解决以下几种方法：</p><ol><li>Hashtable<br> Hashtable是直接在操作方法上加<code>synchronized</code>关键字，锁住整个数组，粒度大，并发量低。</li><li>Collection.synchronizedMap<br> Collection.synchronizedMap是使用Collections集合工具的内部类，通过传入Map封装出一个SynchronizedMap对象，内部定义一个对象锁，方法内通过对象锁实现。</li><li>ConcurrentHashMap<br> ConcurrentHashMap使用分段锁，降低锁粒度，让并发度大大提升。</li></ol><h1 id="11-问题：ConcurrentHashMap的分段锁实现原理？"><a href="#11-问题：ConcurrentHashMap的分段锁实现原理？" class="headerlink" title="11. 问题：ConcurrentHashMap的分段锁实现原理？"></a>11. 问题：ConcurrentHashMap的分段锁实现原理？</h1><p>ConcurrentHashMap成员变量使用<code>volatile</code>关键字修饰，免除了指令重排序，同时保证内存可见性，另外使用<code>CAS操作</code>和<code>synchronized</code>结合实现赋值操作，多线程操作只会锁住当前操作索引的节点。</p><p>如：线程A锁住A节点锁住链表，线程B锁住B节点所在链表，操作互不干涉。</p><ol><li>ConcurrentHashMap无论读操作和写操作都具有很高的性能。</li><li>读操作几乎不需要加锁，而写操作时通过锁分段技术只对所操作的段加锁而不影响其他段的操作。</li><li>ConcurrentHashMap能够最大支持<code>16个线程</code>执行并发操作，以及任意线程的读操作。</li><li>1.7 中使用分段锁<code>ReentrantLock + Segment</code>，相当于一个HashMap分成多段，每一段有一把锁，这样支持多线程访问。锁粒度：基于<code>Segment</code>，包含多个<code>HashEntry</code>。</li><li>1.8中使用<code>CAS + synchronized</code>，锁粒度大大降低，为<code>Node节点</code>。</li></ol><h1 id="12-问题：List、Set、Map三个接口的区别以及其常用实现类？"><a href="#12-问题：List、Set、Map三个接口的区别以及其常用实现类？" class="headerlink" title="12. 问题：List、Set、Map三个接口的区别以及其常用实现类？"></a>12. 问题：List、Set、Map三个接口的区别以及其常用实现类？</h1><ol><li>List、Set、Map都是Collection结构中的接口类。</li><li>List、Set是单列集合，Map是双列集合。</li><li>List、Set是基于Collection接口的，而Map是Collection容器内的两大基本接口之一(Collection,Map)。</li><li>List是有序的，可重复的，Set是无序的，不可重复的。</li><li>List常用实现类为<code>ArrayList</code>，<code>LinkedList</code>和<code>Vector</code>。</li><li>Set常用实现类为<code>HashSet</code>和<code>TreeSet</code>。</li><li>Map常用实现类为<code>HashMap</code>，<code>TreeMap</code>以及<code>HashMap</code>的子类<code>LinkedHashMap</code>。</li></ol><h1 id="13-问题：抽象类与接口的区别？"><a href="#13-问题：抽象类与接口的区别？" class="headerlink" title="13. 问题：抽象类与接口的区别？"></a>13. 问题：抽象类与接口的区别？</h1><ol><li>抽象类是用于捕捉子类的通用特征的，而接口则是抽象方法的结合。</li><li>抽象类不能实例化，只能作为子类的超类，是被用于创建继承层级里子类的模板，而接口只是一种形式，更像一种约定，无法做任何事。</li><li>抽象类使用<code>abstract</code>关键字修饰，子类使用<code>extends</code>关键字来继承抽象类；而接口使用<code>interface</code>关键字修饰，实现类使用<code>implements</code>关键字实现接口。</li><li>抽象类除了不能实例化抽象类之外，和普通Java类没有任何区别，能够拥有成员变量，构造器，方法等。</li><li>接口只能有常量(<code>public static final修饰(可省略)</code>)，抽象方法，默认方法(1.8)，静态方法(1.8)，私有方法（1.9），私有静态方法（1.9）。没有构造器。</li><li>一个类只能继承一个抽象类，但能实现多个接口。</li></ol><h1 id="14-问题：Java的代理是怎么样的？"><a href="#14-问题：Java的代理是怎么样的？" class="headerlink" title="14. 问题：Java的代理是怎么样的？"></a>14. 问题：Java的代理是怎么样的？</h1><p>代理涉及到代理模式，什么是代理模式呢？</p><p><code>代理模式</code>：A给B提供服务(协议)，并由A来控制对B的访问，称作A对B进行代理。代理模式是一种结构型设计模式。</p><p>代理模式角色分为三种：</p><p><code>Subject</code>（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法。如：协议（抽象层）</p><p><code>RealSubject</code>（真实主题角色）：真正实现业务逻辑的类。</p><p><code>Proxy</code>（代理主题角色）: 用来代理和封装真实主题。</p><ol><li>代理从字节码创建时机来说，分为<code>静态代理</code>和<code>动态代理</code>。</li></ol><ul><li>静态代理是程序运行之前就已经存在了字节码文件，代理关系已经确定了。</li><li>动态代理则是程序在运行期间有JVM根据反射等机制动态生成字节码，所以在运行之前不会存在代理类的字节码文件。</li></ul><ol><li>静态代理的优缺点：<ul><li>优点：可以很好避免目标对象的业务逻辑对外暴露，从而提高安全性；也可以在不影响目标对象的情况下，进行功能增强。</li><li>缺点：不同接口需要不同的代理对象实现，导致代码冗余。</li></ul></li><li>动态代理根据实现方式分为：<ul><li>JDK动态代理</li><li>CGLIB动态代理</li></ul></li><li>JDK动态代理：基于Java反射机制来实现的，即需要目标对象必须实现某一接口。<br> CGLib动态代理：基于ASM机制实现，通过生成目标对象的子类作为代理对象。</li><li>JDK动态代理<ul><li>优点：解决了静态代理中代理对象的冗余问题；最小化依赖关系，简化开发和维护成本；JDK自身的支持，比CGLIB更可靠；</li><li>缺点：JDK动态代理是基于接口设计实现的，必须依赖接口，否则会报异常<code>ClassCastException</code>。</li></ul></li><li>CGLIB代理<ul><li>优点：不需要用接口就能实现动态代理，采用ASM字节码增强技术。</li><li>缺点：创建代理对象的消耗比JDK动态代理要大，性能较与JDK要稍微差点。</li></ul></li><li>选择：<ul><li>对于无需频繁创建的的对象，如单例，使用CGLIB合适，反之使用JDK方式比较好。</li><li>由于CGLIB是采用动态创建子类的方法，对于<code>final</code>修饰的方法，无法进行代理。</li></ul></li></ol><h1 id="15-问题：堆和栈的区别？"><a href="#15-问题：堆和栈的区别？" class="headerlink" title="15. 问题：堆和栈的区别？"></a>15. 问题：堆和栈的区别？</h1><ol><li>数据结构，堆和栈是指数据结构。<ul><li>堆在数据结构中是满足父子节点大小关系的完全二叉树。</li><li>栈在数据结构中呈线性结构，具有先进后出的特点，如一个桶，先进会被压栈。</li></ul></li><li>操作系统中，堆和栈是指内存空间，更准确的叫法，应该是堆区（heap）和栈区（stack）。<ul><li>申请方式<ul><li>堆是需要程序员申请的，并指明大小的，手动申请，手动释放，如C里面的malloc和free，不过这一般由操作系统去回收。</li><li>栈是由编译器自动申请和自动释放的的。</li></ul></li><li>申请大小限制<ul><li>堆是<code>向高地址扩展</code>的<code>不连续的内存区域</code>。由于系统是用链表去存储空闲的内存地址，所有堆就是不连续的内存区域，而且链表遍历是从<code>低地址向高地址</code>的。堆的大小受限于系统的<code>有效虚拟内存空间</code>，因此堆获得的空间比较灵活，也比较大。</li><li>栈是<code>向低地址扩展</code>的一块<code>连续的内存区域</code>。栈顶地址和大小事先由系统规定好的，能获得的栈空间有限。</li></ul></li><li>申请效率<ul><li>堆由程序员分配，速度较慢，容易产生内存碎片。</li><li>栈由系统分配，速度快，但程序员无法控制。</li></ul></li><li>存储内容<ul><li>堆的存储内存由程序员决定，如对象等实例。</li><li>栈主要存储<code>局部变量</code>,如 <code>int a;</code> 在函数调用时，首先进栈的是主函数中函数调用后的下一条指令的地址，然后是函数的各个参数，在C中，参数是从右到左入栈的，再到局部变量，当函数调用结束后，局部变量出栈，然后是参数，然后栈顶指针指向的是最开始的存的地址，即主函数中的下一条指令。</li></ul></li></ul></li></ol><h1 id="16-问题：-常用的数据结构有什么？"><a href="#16-问题：-常用的数据结构有什么？" class="headerlink" title="16. 问题： 常用的数据结构有什么？"></a>16. 问题： 常用的数据结构有什么？</h1><p><img src="/posts/94b49ff474dd/1620910771269-1710861431583.png" alt="1620910771269.png"></p><p>还有其他的 如串，静态链表等。</p><h1 id="17-问题：Java的数据类型有哪些？"><a href="#17-问题：Java的数据类型有哪些？" class="headerlink" title="17. 问题：Java的数据类型有哪些？"></a>17. 问题：Java的数据类型有哪些？</h1><p><img src="/posts/94b49ff474dd/1620909999864.png" alt="1620909999864.png"></p><p>enter description here</p><h1 id="18-问题：Java常用的设计模式有哪些？"><a href="#18-问题：Java常用的设计模式有哪些？" class="headerlink" title="18. 问题：Java常用的设计模式有哪些？"></a>18. 问题：Java常用的设计模式有哪些？</h1><p>Java设计模式共有23种设计模式。</p><p><img src="/posts/94b49ff474dd/1620912198666.png" alt="1620912198666.png"></p><p>常用的有8种</p><ul><li>单例模式(Singleton)：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>建造者模式(Builder)：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>抽象工厂模式(Abstract Factory)：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>工厂方法模式(Factory Method)：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>观察者模式(Observer)：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>模板方法模式(Template Method)：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>装饰者模式(Decorator)：动态的给对象增加一些职责，即增加其额外的功能。</li><li>代理模式(Proxy)：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li></ul><h1 id="19-问题：设计模式的六大原则有哪些？"><a href="#19-问题：设计模式的六大原则有哪些？" class="headerlink" title="19. 问题：设计模式的六大原则有哪些？"></a>19. 问题：设计模式的六大原则有哪些？</h1><ul><li><code>单一职责原则</code>(Single Responsibility Principle)<ul><li>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</li></ul></li><li><code>开闭原则</code>(Open-Closed Principle, OCP)<ul><li>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</li></ul></li><li><code>里氏代换原则</code>(Liskov Substitution Principle, LSP)<ul><li>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</li></ul></li><li><code>依赖倒置原则</code>（Dependence Inversion Principle，DIP）<ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象，其核心思想是：要面向接口编程，不要面向实现编程。</li></ul></li><li><code>接口隔离原则</code>(Interface Segregation Principle, ISP)<ul><li>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</li></ul></li><li><code>迪米特法则</code>(Law of Demeter, LoD)也叫最少知识原则（Least Knowledge Principle，LKP)<ul><li>一个软件实体应当尽可能少地与其他实体发生相互作用。</li><li>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</li></ul></li></ul><h1 id="20-问题：讲一下单例模式？"><a href="#20-问题：讲一下单例模式？" class="headerlink" title="20. 问题：讲一下单例模式？"></a>20. 问题：讲一下单例模式？</h1><p>单例模式有5种写法，饿汉式，懒汉式，双重检查锁，静态内部类法，枚举法(推荐)。</p><blockquote><p>四大原则：</p><ol><li>构造器私有</li><li>返回值必须是以静态方法或枚举返回。</li><li>保证线程安全，只允许一个实例。</li><li>序列化和反序列化安全<br>延迟加载，并不一定要求。</li></ol></blockquote><ol><li>饿汉式（静态常量，或静态代码块）<br> 静态常量 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>   <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">return</span> INSTANCE;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure> 静态代码块 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>   <span class="hljs-keyword">static</span> &#123;<br>   instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">return</span> instance;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure> 优点: 写法简单，类装载时候就完成实例化了，避免线程同步的问题。<br> 缺点: 在类装载时就已经实例化了，未能达到懒加载(Lazy Load)效果，可能会造成内存浪费。</li><li>懒汉式(线程安全，同步代码块) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == instance)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure> 使用关键字volatile 进行限制，保证其对所有线程可见性，并且禁止对其进行指令重排序<br> 缺点： 效率仍然低，每次调用getInstance，会在synchronized进行排队</li><li>双重检查锁 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == instance) &#123;<br><span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == instance)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure> 进行多一层判断instance是否为空，大大提高并发，提高效率。<br> volatile 有两层语义：可见性 和禁止指令重排序<br> 可见性：在一个线程中对该变量的修改会马上由工作内存（Work Memory）写回主内存（Main Memory），所以会马上反应在其它线程的读取操作中。<br> 工作内存是线程独占的，而主内存是线程共享的。工作内存和主内存可以近似理解为实际电脑中的高速缓存和主存<br> 禁止指令重排序：由于编译器优化，在实际执行的时候可能与我们编写的顺序不同。编译器只保证程序执行结果与源代码相同，却不保证实际指令的顺序与源代码相同。<br> 这在单线程看起来没什么问题，然而一旦引入多线程，这种乱序就可能导致严重问题。volatile 关键字就可以从语义上解决这个问题。<br> 在jdk1.5后，volatile才能真正实现禁止指令重排序，1.5之前不能正确工作。<br> 所以在jdk1.5之前，双重检查锁是不安全的。</li><li>静态内部类法 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHodler</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> SingletonHodler.instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure> 静态内部类不会在outer类加载中被加载，只有等到调用静态内部类时，才会加载，起到懒加载的作用。<br> 同时静态内部类只会加载一次，也保证了线程安全。</li><li>枚举法 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span>&#123;<br>INSTANCE;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure> 使用枚举除了线程安全和防止反射强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。<br> 因此，Effective Java 推荐尽可能地使用枚举来实现单例。<br> <strong>注意：</strong> 除了枚举法之外，都需要额外的工作 (Serializable、transient、readResolve()) 来实现序列化，否则每次反序列化一个序列化对象实例时都会创建一个新的实例。而且还可以使用反射来破坏单例，需要对构造器进行修改，使得创建第二个实例时抛异常。而枚举法除了线程安全，防止反射强行调用构造器，还提供了自动序列化机制。</li></ol><h1 id="21-问题：排序算法有哪些？"><a href="#21-问题：排序算法有哪些？" class="headerlink" title="21. 问题：排序算法有哪些？"></a>21. 问题：排序算法有哪些？</h1><p><img src="/posts/94b49ff474dd/1620920417775.png" alt="1620920417775.png"></p><ol><li><p>冒泡算法 时间复杂度O(n2) 空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == arr || arr.length &lt; <span class="hljs-number">2</span>) &#123;<br>         <span class="hljs-keyword">return</span>;<br>     &#125;<br>     <span class="hljs-comment">// 第一个数不需要进行插入排序，所以从1开始</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &gt; <span class="hljs-number">0</span>; j--) &#123; <span class="hljs-comment">// i - 0的顺序，从i倒序比较  和左边的最大即arr[j] 比小，如果小，交换，继续和j-1比，如果大，直接跳出循环。</span><br>             <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j-<span class="hljs-number">1</span>])&#123;<br>                 <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                 arr[j] = arr[j-<span class="hljs-number">1</span>];<br>                 arr[j-<span class="hljs-number">1</span>] = temp;<br>             &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果比较后不需要交换，因为左边的数已经排序好的，所以不需要进行遍历比较</span><br>                <span class="hljs-keyword">break</span>;<br>             &#125;<br>          &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>插入排序 时间复杂度O(n2) 空间复杂度O(1)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == arr || arr.length &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 第一个数不需要进行插入排序，所以从1开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &gt; <span class="hljs-number">0</span>; j--) &#123; <span class="hljs-comment">// i - 0的顺序，从i倒序比较  和左边的最大即arr[j] 比小，如果小，交换，继续和j-1比，如果大，直接跳出循环。</span><br>                <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j-<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j-<span class="hljs-number">1</span>];<br>                    arr[j-<span class="hljs-number">1</span>] = temp;<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果比较后不需要交换，因为左边的数已经排序好的，所以不需要进行遍历比较</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>快速排序 时间复杂度O(nlogn) 空间复杂度O(1)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == arr || arr.length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (left &lt; <span class="hljs-number">0</span> || right &lt; <span class="hljs-number">0</span> || left &gt;= right) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//当left &gt;= right时 说明已经完全排序好了</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> right;<br><span class="hljs-type">int</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> arr[left];<br><span class="hljs-keyword">while</span> (i &lt; j)&#123;<br><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; ref) j--;<br><span class="hljs-keyword">if</span> (i &lt; j) arr[i++] = arr[j]; <span class="hljs-comment">//避免 i=j 时，进行无意义的赋值，当赋值完成后，i++,减少判断次数</span><br><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; ref) i++;<br><span class="hljs-keyword">if</span> (i &lt; j) arr[j--] = arr[i];<br>&#125;<br>arr[i] = ref;<br>quickSort1(arr, left, i - <span class="hljs-number">1</span>);<br>quickSort1(arr, i + <span class="hljs-number">1</span>, right);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>选择排序 时间复杂度O(n2) 空间复杂度O(1)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">```java<br><span class="hljs-comment">//每次选出最小的一个数，放在已排序的尾部</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == arr || arr.length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> minIdx;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>minIdx = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIdx])&#123;<br>minIdx = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (minIdx == i) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>arr[i] = arr[minIdx];<br>arr[minIdx] = temp;<br>&#125;<br>&#125;<br>```<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java，java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之Java多线程</title>
      <link href="/posts/67e6b503a66b/"/>
      <url>/posts/67e6b503a66b/</url>
      
        <content type="html"><![CDATA[<h1 id="1-问题：线程和进程的区别？"><a href="#1-问题：线程和进程的区别？" class="headerlink" title="1. 问题：线程和进程的区别？"></a>1. 问题：线程和进程的区别？</h1><ol><li><code>线程</code>(thread)是操作系统能够进行运算调度的最小单位。被包含于<code>进程</code>中，是<code>进程</code>的实际运行单位。</li><li><code>进程</code>是资源分配的基本单位，<code>线程</code>与资源分配无关，<code>线程</code>属于某一<code>进程</code>, 与<code>进程</code>内的其他<code>线程</code>共享<code>进程</code>的资源。</li></ol><h1 id="2-问题：线程的生命周期是怎么样的？"><a href="#2-问题：线程的生命周期是怎么样的？" class="headerlink" title="2. 问题：线程的生命周期是怎么样的？"></a>2. 问题：线程的生命周期是怎么样的？</h1><p>经典线程模型的生命周期分为5种状态：<code>新建</code>、<code>就绪</code>、<code>运行</code>、<code>等待</code>、<code>退出</code>。</p><p>而Java线程状态有6种，<code>新建(New)</code>，<code>就绪/运行(Runnable)</code>，<code>阻塞(Blocked)</code>，<code>等待(Waiting)</code>，<code>超时等待(Timed_Wait)</code>，<code>终止(Terminated)</code>。</p><p><img src="/posts/67e6b503a66b/1621102468107.png" alt="1621102468107.png"></p><ul><li><code>新建(NEW)</code><ul><li>实例化一个线程对象，但是线程对象并未使用<code>start()</code>方法启动线程这个阶段。即该阶段只在堆内存中为线程对象分配了内存空间，但是没有参与CPU资源的抢夺。</li></ul></li><li><code>就绪/运行(Runnable)</code><ul><li>指的是线程对象使用<code>start()</code>方法后到被cpu调度前的这个阶段。</li><li>就绪状态时，JVM就会为该线程创建方法的调用栈和计数器等。</li><li>但凡处于就绪状态的被视为活动，<code>isActive</code>测试线程是否处于就绪状态。</li><li>发生CPU调度，并选中某个Runable线程时，该线程进入运行状态，并开始调用<code>run()</code>方法中逻辑。</li></ul></li><li><code>阻塞(Blocked)</code><ul><li>线程在<code>等待有锁控制的资源</code>，就会进入阻塞状态。</li><li><code>IO 阻塞操作</code>也会导致进入阻塞状态，如查询数据库进入阻塞状态。</li></ul></li><li><code>等待(Waiting)</code><ul><li>当线程获取到锁，调用<code>wait()</code>，<code>join()</code>和<code>park()</code>方法，就会导致线程失去锁的所有权，进入等待队列，等待其他线程执行相应的。</li></ul></li><li><code>超时等待(Timed_Wait)</code><ul><li>有限时间的等待状态。如调用<code>sleep(long millis)</code>、<code>wait(long timeout)</code>、<code>join(long millis)</code>、<code>parkNanos(long nanos)</code>和 <code>parkUntil(long deadline)</code>。</li></ul></li><li><code>终止(Terminated)</code><ul><li>进入终止状态后，JVM会销毁线程对象，释放系统资源。以下是进入终止状态的几种情况：<ul><li>线程正常运行结束，进入终止状态。</li><li>线程运行过程中出现意外错误。</li><li>JVM异常结束，所有线程生命周期均被结束。</li></ul></li></ul></li></ul><p><strong>PS:</strong> <code>stop()</code> 在JDK 1.2版本被弃用了</p><blockquote><p>因为其天生是不安全的。停止一个线程会导致其解锁其上被锁定的所有监视器（监视器以在栈顶产生ThreadDeath异常的方式被解锁）。如果之前被这些监视器保护的任何对象处于不一致状态，其它线程看到的这些对象就会处于不一致状态。这种对象被称为受损的 （damaged）。当线程在受损的对象上进行操作时，会导致任意行为。这种行为可能微妙且难以检测，也可能会比较明显。不像其他未受检的（unchecked）异常， ThreadDeath 悄无声息的杀死及其他线程。因此，用户得不到程序可能会崩溃的警告。崩溃会在真正破坏发生后的任意时刻显现，甚至在数小时或数天之后。stop 的许多使用都应由只修改某些变量以指示目标线程应该停止运行的代码来取代。目标线程应定期检查该变量，并且如果该变量指示它要停止运行，则从其运行方法依次返回。如果目标线程等待很长时间（例如基于一个条件变量），则应使用 interrupt 方法来中断该等待。</p><p>Thread.stop()会导致线程不安全。</p></blockquote><h1 id="3-问题：介绍一下线程池？"><a href="#3-问题：介绍一下线程池？" class="headerlink" title="3. 问题：介绍一下线程池？"></a>3. 问题：介绍一下线程池？</h1><ol><li>线程池是预选创建线程，线程的集合叫线程池。</li><li>线程池能够自动管理线程的生命周期，避免线程的频繁创建和销毁，更专注于业务逻辑，提高性能。</li><li>Java中线程池如图所示：<br> <img src="/posts/67e6b503a66b/1621255349816.png" alt="1621255349816.png"> </li><li><code>Executors</code>是JDK1.5之后的类，提供静态方法创建线程池。<ul><li><code>newCachedThreadPool</code><br>  它是用来处理大量短时间工作任务的线程池，具有几个鲜明特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置时间超过60秒，则被终止并移除缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用SynchronousQueue作为工作队列。</li><li><code>newFixedThreadPool</code><br>  重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有nThreads个工作线程是活动的。这意味着，如果任务数量超过了活动线程数目，将在工作队列中等待空闲线程出现；如果工作线程退出，将会有新的工作线程被创建，以补足指定数目nThreads。</li><li><code>newSingleThreadExecutor</code><br>  它的特点在于工作线程数目限制为1，操作一个无界的工作队列，所以它保证了所有的任务都是被顺序执行，最多会有一个任务处于活动状态，并且不予许使用者改动线程池实例，因此可以避免改变线程数目。</li><li><code>newSingleThreadScheduledExecutor</code>和<code>newScheduledThreadPool</code><br>  创建的是个ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程。</li></ul></li><li><code>ThreadPoolExecutor</code>自定义线程池<ul><li><code>int corePoolSize</code> 核心池的大小</li><li><code>int maximumPoolSize</code> 线程池最大线程数</li><li><code>long keepAliveTime</code> 保持时间&#x2F;额外线程的存活时间</li><li><code>TimeUnit unit</code> 时间单位</li><li><code>BlockingQueue&lt;Runnable&gt; workQueue</code> 任务队列</li><li><code>ThreadFactory threadFactory</code> 线程工厂</li><li><code>RejectedExecutionHandler handler</code> 异常的捕捉器</li></ul></li><li><code>ScheduledThreadPoolExecutor</code>是<code>ThreadPoolExecutor</code>的子类。用于定时任务，最大线程数是<code>Integer.Max</code> &#x3D; 231 - 1。</li><li><code>ForkJoinPool</code>则是为了<code>ForkJoinTask</code>定制的线程池，与通常意义的线程池有所不同。<ul><li>主要用于实现“分而治之”的算法，特别是分治之后递归调用的函数，例如 quick sort 等。</li><li>最适合的是计算密集型的任务，如果存在 I&#x2F;O，线程间同步，sleep() 等会造成线程长时间阻塞的情况时，最好配合使用 <code>ManagedBlocker</code>。</li></ul></li></ol><h1 id="4-问题：线程如何创建Task？"><a href="#4-问题：线程如何创建Task？" class="headerlink" title="4. 问题：线程如何创建Task？"></a>4. 问题：线程如何创建Task？</h1><ol><li>创建Task常用有4种方式，<code>Thread</code>，<code>Runnable</code>，<code>Callable</code>和<code>ForkJoinTask</code>。</li><li>创建<code>Thread</code>的子类，重写<code>run()</code>方法，但是没有返回值。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;running...&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>myThread.start();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建一个类实现<code>Runnable</code>接口，实现<code>run()</code>方法，但是仍没有返回值，可以与<code>Thread</code>和线程池配合使用。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">// Thread + Runnable</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>    thread.start();<br>    <span class="hljs-comment">// ThreadPool + Runnable</span><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    executorService.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>()); <span class="hljs-comment">// 执行</span><br>    <span class="hljs-comment">// 将输入的结果返回</span><br>    Future&lt;String&gt; future = executorService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(),<span class="hljs-string">&quot;return...&quot;</span>);<br>    System.out.println(future.get()); <span class="hljs-comment">// return...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建一个类实现<code>Callable</code>接口，实现<code>run()</code>方法，拥有异步返回值<code>Futrue</code>类，常用于线程池。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Calling...&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-comment">//callable</span><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    Future&lt;String&gt; future = executorService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>());<br>    System.out.println(future.get()); <span class="hljs-comment">//Calling...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建一个类继承<code>ForkJoinTask</code>或其子类<code>RecursiveTask</code>，拥有异步返回值，用于<code>ForkJoinPool</code>。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyForkJoinTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//... 一些基于分治思想的递归运算，如快速排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;myForkJoinTask....&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">forkJoinPool</span> <span class="hljs-operator">=</span> ForkJoinPool.commonPool();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> forkJoinPool.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyForkJoinTask</span>());<br>    System.out.println(result);<br>    forkJoinPool.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="5-问题：如何异步获取多线程的返回值？"><a href="#5-问题：如何异步获取多线程的返回值？" class="headerlink" title="5. 问题：如何异步获取多线程的返回值？"></a>5. 问题：如何异步获取多线程的返回值？</h1><ol><li><code>Runnable</code>在线程池中的固定返回。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>   <span class="hljs-comment">// 将输入的结果返回</span><br>   Future&lt;String&gt; future = executorService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(),<span class="hljs-string">&quot;return...&quot;</span>);<br>   System.out.println(future.get()); <span class="hljs-comment">// return...</span><br></code></pre></td></tr></table></figure></li><li><code>Callable + Future</code>，<code>Callable</code>负责执行返回，<code>Future</code>负责接收。通过<code>ExecutorService.submit</code>方法进行提交<code>Callable</code>。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Calling...&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-comment">//callable</span><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    Future&lt;String&gt; future = executorService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>());<br>    System.out.println(future.get()); <span class="hljs-comment">//Calling...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>通过<code>Callable + FutureTask</code>，<code>Callable</code>负责执行返回，<code>FutureTask</code>负责接收。<code>FutureTask</code>同时实现了<code>Runnable</code>和<code>Callable</code>接口，可以给到<code>ExecutorService</code>的<code>submit</code>方法和<code>Thread</code>去执行。</li></ol><ul><li><p><strong>ExecutorService.submit</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>      FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;String&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>          <span class="hljs-meta">@Override</span><br>          <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;asynReturn...&quot;</span>;<br>          &#125;<br>      &#125;);<br>      <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>      executorService.submit(futureTask);<br>      System.out.println(futureTask.get()); <span class="hljs-comment">// 直接使用futureTask.get()获取返回值</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>      e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Thread</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>        FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;String&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;asynReturn...&quot;</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask);<br>        thread.start();<br>        System.out.println(futureTask.get());<br> &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>        e.printStackTrace();<br> &#125;<br></code></pre></td></tr></table></figure></li></ul><ol><li>通过CompletionService，jdk1.8之后提供了完成服务CompletionService，可以实现异步接收返回值。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>       Callable&lt;String&gt; callable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;asynReturn...&quot;</span>;<br>           &#125;<br>       &#125;;<br>       <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>       CompletionService&lt;String&gt; completionService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorCompletionService</span>&lt;&gt;(executorService);<br>       completionService.submit(callable);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> completionService.take().get(); <span class="hljs-comment">//阻塞获取</span><br>       System.out.println(result);<br>   &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>       e.printStackTrace();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-问题：多线程的应用场景有哪些？"><a href="#6-问题：多线程的应用场景有哪些？" class="headerlink" title="6. 问题：多线程的应用场景有哪些？"></a>6. 问题：多线程的应用场景有哪些？</h1><p>并发量大的操作，以及无关主流程的操作。</p><ul><li>多线程IO操作，如写入mysql，redis的数据量大。</li><li>多线程导入<code>ES索引</code>。</li><li><code>poi</code>多线程导入导出，如excel表的数据导入导出。</li><li><code>发送邮件</code>和<code>发送短信</code>。</li><li><code>备份日志</code>，日志文件的备份。</li><li>多线程验证数据，如验证上百万个url。</li><li>多线程下单抢单。</li></ul><h1 id="7-问题：-什么是线程安全，Java如何保证线程安全？"><a href="#7-问题：-什么是线程安全，Java如何保证线程安全？" class="headerlink" title="7. 问题： 什么是线程安全，Java如何保证线程安全？"></a>7. 问题： 什么是线程安全，Java如何保证线程安全？</h1><ol><li>在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。</li><li>一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性，也就是说我们不用考虑同步的问题。</li><li>线程安全问题大多是由全局变量及静态变量引起的，局部变量逃逸也可能导致线程安全问题。</li><li>若每个线程中对<code>全局变量</code>、<code>静态变量</code>只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</li><li>Java中使用锁保证线程安全，解决并发操作引起的脏读、数据不一致的问题，如<code>synchronized</code>对象锁。</li></ol><h1 id="8-问题：JVM中对象存储结构是怎么样的？"><a href="#8-问题：JVM中对象存储结构是怎么样的？" class="headerlink" title="8. 问题：JVM中对象存储结构是怎么样的？"></a>8. 问题：JVM中对象存储结构是怎么样的？</h1><p><img src="/posts/67e6b503a66b/1621083916775.png" alt="1621083916775.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java，多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jedis连接Redis Cluster的java.net.SocketTimeoutException: connect timed out</title>
      <link href="/posts/238e29daecc1/"/>
      <url>/posts/238e29daecc1/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><ul><li>JDK 1.8</li><li>Redis 6.2.1</li><li>Redis Cluster 有6个节点，端口7001到7006，使用的内环地址127.0.0.1搭建。</li><li>最新版本，2021年4月份发布的</li><li>环境使用了ACLS，Access Conttrol Lists</li><li>Jedis 3.6.0</li><li>Redis Cluster 搭建环境： Ubuntu 19.10</li><li>RedisDesktopManager 可视化工具</li></ul></blockquote><h1 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h1><p>框架使用：</p><ul><li>Spring-data-redis 2.5.0</li><li>Jedis 3.6.0</li></ul><p>spring-redis.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 加载redis.properties--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:redis.properties&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 注册redisTemplate --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">ref</span> = <span class="hljs-string">&quot;jedisConnectionFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keySerializer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;valueSerializer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashKeySerializer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashValueSerializer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 注册redis连接池管理工厂--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jedisConnectionFactory&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;redisClusterConfiguration&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jedisPoolConfig&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usePool&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 集群配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisClusterConfiguration&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisClusterConfiguration&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clusterNodes&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;clusterRedisNodes1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;clusterRedisNodes2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;clusterRedisNodes3&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;clusterRedisNodes4&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;clusterRedisNodes5&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;clusterRedisNodes6&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 重定向的最大数量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxRedirects&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.maxRedirects&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;redisPassword&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisPassword&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisPassword&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;redis123&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;char[]&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 集群节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clusterRedisNodes1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes1.host&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes1.port&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clusterRedisNodes2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes2.host&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes2.port&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clusterRedisNodes3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes3.host&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes3.port&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clusterRedisNodes4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes4.host&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes4.port&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clusterRedisNodes5&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes5.host&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes5.port&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clusterRedisNodes6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes6.host&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.cluster.nodes6.port&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jedisPoolConfig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池的最大数据库连接数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxTotal&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.pool.maxTotal&#125;&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--最大空闲数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.pool.maxIdle&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.pool.minIdle&#125;&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--最大建立连接等待时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWaitMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.pool.maxWaitMillis&#125;&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;$&#123;spring.reids.pool.minEvictableIdleTimeMillis&#125;&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash;每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;$&#123;spring.redis.pool.numTestsPerEvictionRun&#125;&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash;逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;$&#123;spring.redis.pool.timeBetweenEvictionRunsMillis&#125;&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!-- 从连接池中取出时检查连接是否失活 失活了就再重新取一个--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.pool.testOnBorrow&#125;&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 连接池回收连接时候检查连接是否失活 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;spring.redis.pool.testOnReturn&#125;&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 向调用者输出“链接”对象时，是否检测它的空闲超时 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;property name=&quot;testWhileIdle&quot; value=&quot;$&#123;spring.redis.pool.testWhileIdle&#125;&quot;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用了<code>org.springframework.data.redis.connection.RedisPassword</code>注入密码，节点Host皆为服务器地址192.168.1.102。用的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(locations = &#123;&quot;classpath:spring.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisTemplate redisTemplate;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisTest</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>, <span class="hljs-number">5</span>, TimeUnit.MINUTES);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;=====================================================&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">socket</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>();<br>            socket.setReuseAddress(<span class="hljs-literal">true</span>);<br>            socket.setKeepAlive(<span class="hljs-literal">true</span>);<br>            socket.setTcpNoDelay(<span class="hljs-literal">true</span>);<br>            socket.setSoLinger(<span class="hljs-literal">true</span>, <span class="hljs-number">0</span>);<br>            socket.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;192.168.1.102&quot;</span>, <span class="hljs-number">7004</span>), <span class="hljs-number">2000</span>);<br>            socket.setSoTimeout(<span class="hljs-number">2000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">java.net.SocketTimeoutException: connect timed out<br><br>    at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)<br><br>    at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:81)<br><br>    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)<br><br>    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)<br><br>    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)<br><br>    at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)<br><br>    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)<br><br>    at java.net.Socket.connect(Socket.java:606)<br></code></pre></td></tr></table></figure><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>从怀疑代码开始，问题解决永远先从自身找问题。</p><ul><li>配置问题 无<br>  参考spring-data-redis文档，并没有发现问题</li><li>代码问题 无<br>  一句调用代码，不可能吧，spring启动也正常</li><li>依赖版本问题 无<br>  降低Jedis版本，2.9.0 ，3.5.2<br>  结果 ：报错换了个，<code>ClassNoFoundException: JedisClientConfig No Found</code><br>  2.9.0 还不支持ACL<br>  直接连接一个redis，没问题</li><li>Ubuntn 和 运行环境 防火墙问题 无<br>  端口都开放了</li><li>Redis 版本问题 无<br>  6.0 大版本出了快一年了，不存在不兼容，而且一直在使用Redis 6.2.1<br>  测试其他局域网内 用redis-cli 连接Redis Cluster，发现能连接上，使用正常。<br>  使用RedisDesktopManager ，依然没问题。</li><li>Jedis 有bug?<br>  从报错地方出发，发现HostAndPort是192.168.1.102 7001(7001-7006) 没问题，socket能成功连接。<br>  超时的都是127.0.0.1 7001 (7001 - 7006)。<br>  这不就是问题关键么？<br>  能通才奇怪呢，但是这个127.0.0.1从哪来的呢？<br>  跟踪报错，居然发现是从Jedis内的redis.client.jedis.Connection获取的HostAndPort  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> JedisConnectionException&#123;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.socketParamModified)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-built_in">this</span>.disconnect();<br>            &#125;<span class="hljs-keyword">catch</span>(Exception var9)&#123;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">this</span>.isConnected())&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-built_in">this</span>.socket=<span class="hljs-built_in">this</span>.socketFactory.createSocket();<br>                <span class="hljs-built_in">this</span>.outputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisOutputStream</span>(<span class="hljs-built_in">this</span>.socket.getOutputStream());<br>                <span class="hljs-comment">// 获取scokect返回的信息 包含集群里面各个节点的Host Port</span><br>                <span class="hljs-built_in">this</span>.inputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisInputStream</span>(<span class="hljs-built_in">this</span>.socket.getInputStream());<br>            &#125;<span class="hljs-keyword">catch</span>(IOException var7)&#123;<br>                <span class="hljs-built_in">this</span>.broken=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisConnectionException</span>(<span class="hljs-string">&quot;Failed to create input/output stream&quot;</span>,var7);<br>            &#125;<span class="hljs-keyword">catch</span>(JedisConnectionException var8)&#123;<br>                <span class="hljs-built_in">this</span>.broken=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">throw</span> var8;<br>            &#125;<span class="hljs-keyword">finally</span>&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.broken)&#123;<br>                    IOUtils.closeQuietly(<span class="hljs-built_in">this</span>.socket);<br>                &#125;<br><br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  发现127.0.0.1居然是Redis返回的。<ul><li>猜想：<ul><li>Jedis 开始socket连接192.168.1.102 7001并成功了，Redis 返回获集群里所有节点的IP127.0.0.1 7001 …</li><li>Jedis 开始连接返回各个节点的IP，连接127.0.0.1 7001失败，然后连接127.0.0.1 7002失败 …</li><li>Jedis 发现都失败了，开始连接配置中第二个节点IP192.168.1.102 7002，又拿到Redis返回的集群所有节点IP127.0.0.1 7001 …<br>  ···</li><li>然后连接超过，配置中的maxRedirects，并且每次socket连接都超过超时时间2s，然后就报错java.net.SocketTimeoutException: connect timed out。</li></ul></li><li>提出问题：<ul><li>为什么redis 会返回127.0.0.1呢？ 和搭建Redis Cluster时，搭建集群使用回环地址127.0.0.1有关？</li><li>如果有关，为什么使用其他工具(同一局域网内的RedisDesktopManager，redis-cli)能正常连接并使用？</li></ul></li><li>实验：<ul><li>重新搭建Redis Cluster，并使用服务器地址192.168.1.102的host，搭建。</li></ul></li><li>结果：<ul><li>代码运行成功，也能设置值，和拿到值。</li></ul></li><li>再一些问题：<ul><li>为什么同一局域网内的RedisDesktopManager，redis-cli能正常使用？</li><li>这是Jedis的bug？都已经配置了节点ip，为什么还要从redis拿回节点ip?</li><li>既然要去拿节点ip，为什么还要配置那么多个？</li></ul></li><li>再一些猜想：<ul><li>同一局域网内的RedisDesktopManager，redis-cli内部也许做了对回环地址的转换，就是当拿到的是127.0.0.1就转换该服务器的IP地址192.168.1.102；Jedis不会转换回环地址，是个耿直boy，如果转换，同一局域网内能连接上，统一服务器也能连接上。</li><li>显然从某一节点，获取其他节点IP，从逻辑上来说，是一个很好机制。一开始获取全部节点IP，并进行连接放进连接池，需要使用时，直接使用即可，如果找不到一个可用连接，就会进行重试，超过重试次数，就报错。</li><li>假如，某一个配置好的master节点A宕机了，那么它的slave节点中就会有一个晋升到master节点B，而这个新的节点B，并没有在我们的配置文件中，那么需要读写B节点的数据时，就会从其他节点重定向(Redirect)到新的节点B，Redis返回节点B的IP，那Jedis就能连接B节点，进行执行了。那么如果宕机的刚好就是配置中唯一的一个，连接都连接不上，何来获取其他节点IP。配置多个节点能够增加容错率，一个连不上，有其他可以进行连接。</li></ul></li></ul></li></ul><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>搭建Redis 集群使用了回环地址127.0.0.1，再加上Jedis 耿直boy，没有转换回环地址。需要使用服务器地址去搭建Redis集群。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>遇到socket连接超时，从以下几个方向考虑：<br>    - spring配置问题，maxRedirects重连次数太少，超时时间设置太短 。<br>    - 网络环境差，适当增加重连次数，增加超时时间，Jeids中socket默认超时时间2s。<br>    - 防火墙关闭了端口，pingpong测试，以及查看运行环境和服务器的防火墙策略。<br>    - 依赖版本过高，或过低，是否兼容Redis版本的新特性。Jedis3.6.0不支持jdk1.7。<br>    - Redis Cluter 是否正常运行，以及是否用了回环地址搭建。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java错误集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java，Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/posts/2bd9cd5a0567/"/>
      <url>/posts/2bd9cd5a0567/</url>
      
        <content type="html"><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>微服务 架构方式 Spring Cloud，Dubbo，华为的Service Combo，Istio</p><ul><li>单一应用架构<ul><li>集中式框架 数据访问框架(ORM)</li></ul></li><li>垂直应用架构<ul><li>Web框架MVC</li></ul></li><li>分布式服务架构<ul><li>分布式服务框架(RPC)</li></ul></li><li>面向服务(SOA)架构<ul><li>流动计算架构<ul><li>的Dubbo。CP</li></ul></li><li>微服务架构AP<ul><li>SpringCloud</li></ul></li></ul></li></ul><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p>SpringCloud是一系列框架的有序集合,也是把非常流行的微服务的技术整合到一起，是属于微服务架构的一站式技术解决方案。</p><p>包括：</p><ul><li>注册中心：Eureka、consul、Zookeeper</li><li>负载均衡：Ribbon</li><li>熔断器：Hystrix</li><li>服务通信：Feign（基于Ribbon开发而来的）</li><li>网关：Gateway</li><li>配置中心 ：config</li><li>消息总线：Bus（Rabbitmq）<br>  ···<blockquote><p>SpringCloud是一系列框架组合，为了避免与框架版本产生混淆，采用新的版本命名方式，形式为大版本名+子版本名称</p><p>大版本名用伦敦地铁站名</p><p>子版本名称三种</p><p>SNAPSHOT：快照版本，尝鲜版，随时可能修改</p><p>M版本，MileStone，M1表示第一个里程碑版本，一般同时标注PRE，表示预览版</p><p>SR，Service Release，SR1表示第一个正式版本，同时标注GA(Generally Available)，稳定版</p></blockquote></li></ul><h2 id="服务调用方式"><a href="#服务调用方式" class="headerlink" title="服务调用方式"></a>服务调用方式</h2><ul><li>RPC<br>  RPC(Remote Procedure Call)，远程过程调用<blockquote><p>1.基于Socket</p><p>2.自定义数据格式</p><p>3.速度快，效率高</p><p>4.典型应用代表：Dubbo，WebService，ElasticSearch集群间互相调用</p></blockquote></li><li>HTTP<br>  HTTP：网络传输协议<blockquote><p>1.基于TCP&#x2F;IP</p><p>2.规定数据传输格式</p><p>3.缺点是消息封装比较臃肿、传输速度比较慢</p><p>4.优点是对服务提供和调用方式没有任何技术限定，自由灵活，更符合微服务理念</p><p>5.常见Http客户端工具：HttpClient、OKHttp、URLConnection</p><p>6.三次握手 四次挥手(作业) 为什么三次 为什么四次?</p></blockquote></li></ul><h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><ul><li>RestTemplate是Rest的HTTP客户端模板工具类(json)</li><li>对基于Http的客户端进行封装</li><li>实现对象与JSON的序列化与反序列化</li><li>不限定客户端类型，目前常用的3种客户端都支持：HttpClient、OKHttp、JDK原生URLConnection(默认方式)</li></ul><h1 id="Spring-Cloud-Eureka-注册中心"><a href="#Spring-Cloud-Eureka-注册中心" class="headerlink" title="Spring Cloud Eureka 注册中心"></a>Spring Cloud Eureka 注册中心</h1><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><ul><li>服务注册中心 eureka-server<ul><li>Eureka的服务端应用 提供服务注册发现功能</li></ul></li><li>服务提供者<ul><li>为消费者提供服务</li><li>可以使用Rest风格的服务</li></ul></li><li>服务消费者<ul><li>从注册中心获取服务列表，然后选择服务提供者，调用服务</li></ul></li></ul><h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><ul><li>服务下线<ul><li>当服务正常关闭操作时，会发送服务下线的REST请求给EurekaServer。<br>  服务中心接受到请求后，将该服务置为下线状态</li></ul></li><li>失效剔除<ul><li>服务中心每隔一段时间(默认60秒)将清单中没有续约的服务剔除。<br>  通过eviction-interval-timer-in-ms配置可以对其进行修改，单位是毫秒</li></ul></li><li>自我保护<ul><li>Eureka会统计服务实例最近15分钟心跳续约的比例是否低于85%，如果低于则会触发自我保护机制。<ul><li>会出现：<strong>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</strong></li><li>含义：紧急情况！Eureka可能错误地声称实例已经启动，而事实并非如此。续约低于阈值，因此实例不会为了安全而过期。</li></ul></li><li>自我保护模式下，不会剔除任何服务实例</li><li>自我保护模式保证了大多数服务依然可用</li><li>通过enable-self-preservation配置可用关停自我保护，默认值是打开</li></ul></li></ul><h2 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h2><ul><li>服务注册<ul><li>当我们开启了客户端发现注解@DiscoveryClient。同时导入了eureka-client依赖坐标</li></ul><ol><li>同时配置Eureka服务注册中心地址在配置文件中</li><li>服务在启动时，检测是否有@DiscoveryClient注解和配置信息</li><li>如果有，则会向注册中心发起注册请求，携带服务元数据信息(IP、端口等)</li><li>Eureka注册中心会把服务的信息保存在Map中。</li></ol></li><li>服务续约<ul><li>服务注册完成以后，服务提供者会维持一个<code>心跳</code>，保存服务处于存在状态。这个动作称之为服务续约(renew)。</li><li>1.两个参数可以修改服务续约行为<br>  lease-renewal-interval-seconds:90，租约到期时效时间，默认90秒<br>  lease-expiration-duration-in-seconds:30，租约续约间隔时间，默认30秒<br>  2.服务超过90秒没有发生心跳，EurekaServer会将服务从列表移除[前提是EurekaServer关闭了自我保护]</li></ul></li><li>获取服务列表<ul><li>服务消费者启动时，会检测是否获取服务注册信息配置<br>  如果是，则会从 EurekaServer服务列表获取只读备份，缓存到本地<br>  每隔30秒，会重新获取并更新数据<br>  每隔30秒的时间可以通过配置registry-fetch-interval-seconds修改</li></ul></li></ul><h1 id="Spring-Cloud-Ribbon-负载均衡"><a href="#Spring-Cloud-Ribbon-负载均衡" class="headerlink" title="Spring Cloud Ribbon 负载均衡"></a>Spring Cloud Ribbon 负载均衡</h1><p>Ribbon是Netflix发布的负载均衡器，有助于控制HTTP客户端行为。为Ribbon配置服务提供者地址列表后，Ribbon就可基于负载均衡算法，自动帮助服务消费者请求。</p><p>Ribbon默认提供的负载均衡算法：轮询，随机,重试法,加权。当然，我们可用自己定义负载均衡算法</p><p>Ribbon是对restTemplate的一个升级封装,封包了一系列的负载均衡算法!</p><p>Nginx （反向代理服务器）是对服务器调用的负载均衡，Ribbon是服务端的负载均衡。</p><h1 id="Spring-Cloud-Hystrix-熔断器"><a href="#Spring-Cloud-Hystrix-熔断器" class="headerlink" title="Spring Cloud Hystrix 熔断器"></a>Spring Cloud Hystrix 熔断器</h1><p>Hystrix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库、防止出现级联失败也就是雪崩效应。</p><h2 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h2><blockquote><p>1.微服务中，一个请求可能需要多个微服务接口才能实现，会形成复杂的调用链路。</p><p>2.如果某服务出现异常，请求阻塞，用户得不到响应，容器中线程不会释放，于是越来越多用户请求堆积，越来越多线程阻塞。</p><p>3.单服务器支持线程和并发数有限，请求如果一直阻塞，会导致服务器资源耗尽，从而导致所有其他服务都不可用，从而形成雪崩效应；</p></blockquote><h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><p>Hystrix解决雪崩问题的手段，主要是服务降级**(兜底)**，线程隔离；</p><p>三种状态：</p><ul><li>Closed：关闭状态，所有请求正常访问</li><li>Open：打开状态，所有请求都会被降级<ul><li>Hystrix会对请求情况计数，当一定时间段内失败请求百分比达到阈值(极限值)，则触发熔断，断路器完全关闭</li><li>默认失败比例的阈值是50%，请求次数最低不少于20次</li></ul></li><li>Half Open：半开状态<ul><li>Open状态不是永久的，打开一会后会进入休眠时间(默认5秒)。休眠时间过后会进入半开状态。</li><li>半开状态：熔断器会判断下一次请求的返回状况，如果成功，熔断器切回closed状态。如果失败，熔断器切回open状态。</li></ul></li></ul><p>threshold reached 到达阈值</p><p>under threshold 阈值以下</p><p><strong>熔断器的核心：线程隔离和服务降级。</strong></p><blockquote><p>1.线程隔离：是指Hystrix为每个依赖服务调用一个小的线程池，如果线程池用尽，调用立即被拒绝，默认不采用排队。</p><p>2.服务降级(兜底方法)：优先保证核心服务，而非核心服务不可用或弱可用。触发Hystrix服务降级的情况：线程池已满、请求超时。</p></blockquote><h2 id="熔断策略配置"><a href="#熔断策略配置" class="headerlink" title="熔断策略配置"></a>熔断策略配置</h2><ul><li>熔断后休眠时间：sleepWindowInMilliseconds</li><li>熔断触发最小请求次数：requestVolumeThreshold</li><li>熔断触发错误比例阈值：errorThresholdPercentage</li><li>熔断超时时间：timeoutInMilliseconds</li></ul><h1 id="Spring-Cloud-Feign"><a href="#Spring-Cloud-Feign" class="headerlink" title="Spring Cloud Feign"></a>Spring Cloud Feign</h1><h2 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h2><p>Feign [feɪn] 译文 伪装。Feign是一个声明式WebService客户端.使用Feign能让编写WebService客户端更加简单,它的使用方法是定义一个接口，然后在上面添加注解。不再需要拼接URL，参数等操作。项目主页：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a> 。</p><ul><li>集成Ribbon的负载均衡功能</li><li>集成了Hystrix的熔断器功能</li><li>支持请求压缩</li><li>大大简化了远程调用的代码，同时功能还增强啦</li><li>Feign以更加优雅的方式编写远程调用代码，并简化重复代码</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>导入依赖spring-cloud-starter-openfeign</li><li>编写Feign客户端接口</li><li>消费者启动类开启Feign注解@EnableFeignClients</li><li>在Controller使用Feign client调用接口</li></ol><h2 id="支持负载均衡Ribbon"><a href="#支持负载均衡Ribbon" class="headerlink" title="支持负载均衡Ribbon"></a>支持负载均衡Ribbon</h2><p> 默认使用了 ribbon 可在配置文件 修改默认配置</p><h2 id="支持熔断器Hystrix"><a href="#支持熔断器Hystrix" class="headerlink" title="支持熔断器Hystrix"></a>支持熔断器Hystrix</h2><ol><li>在配置文件开启熔断器</li><li>编写fallback处理类，并实现Feignclient客户端</li><li>在feignclient客户端接口上要在@FeignClient指定fallback处理类</li></ol><h2 id="GZIP请求响应压缩压缩"><a href="#GZIP请求响应压缩压缩" class="headerlink" title="GZIP请求响应压缩压缩"></a>GZIP请求响应压缩压缩</h2><p>SpringCloudFeign支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。</p><ol><li>在配置文件开启请求响应压缩即可</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#  Feign配置</span><br><span class="hljs-attr">feign:</span><br><span class="hljs-attr">compression:</span><br><span class="hljs-attr">request:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启请求压缩</span><br><span class="hljs-attr">mime-types:</span><span class="hljs-string">text/html,application/xml,application/json</span> <span class="hljs-comment"># 设置压缩的数据类型</span><br><span class="hljs-attr">min-request-size:</span> <span class="hljs-number">2048</span> <span class="hljs-comment"># 设置触发压缩的大小下限</span><br><span class="hljs-comment">#以上数据类型，压缩大小下限均为默认值</span><br></code></pre></td></tr></table></figure><h2 id="Feign日志"><a href="#Feign日志" class="headerlink" title="Feign日志"></a>Feign日志</h2><p>通过loggin.level.xx&#x3D;debug来设置日志级别。然而这个对Feign客户端不会产生效果。因为@FeignClient注解修饰的客户端在被代理时，都会创建一个新的Feign.Logger实例。我们需要额外通过配置类的方式指定这个日志的级别才可以。</p><ol><li>在配置文件开启普通日志级别配置</li><li>编写配置类 定义Feign日志级别bean</li><li>在接口@FeignClient中指定Feign日志配置所在配置类</li></ol><h1 id="Spring-Cloud-Gateway-网关"><a href="#Spring-Cloud-Gateway-网关" class="headerlink" title="Spring Cloud Gateway 网关"></a>Spring Cloud Gateway 网关</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cloud Gateway 是Spring Cloud团队的一个全新项目，基于Spring 5.0、SpringBoot2.0、Project Reactor 等技术开发的网关。 旨在为微服务架构提供一种简单有效统一的API路由管理方式。</p><p>Spring Cloud Gateway 作为SpringCloud生态系统中的网关，目标是替代Netflix Zuul。Gateway不仅提供统一路由方式，并且基于Filter链的方式提供网关的基本功能。例如：安全，监控&#x2F;指标，和限流。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>为微服务架构提供一种简单有效统一的API路由管理方式。(路由)</li><li>基于Filter链的方式提供网关的基本功能。例如：安全，监控&#x2F;指标，和限流。(过滤)</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><strong>本身也是一个微服务，需要注册到Eureka</strong></li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>如拦截到一个请求：localhost:8080&#x2F;order&#x2F;add</p><ul><li>路由(route): localhost:18081 分配到localhost:18081的服务</li><li>断言Predicate函数 ：路由转发规则 &#x2F;order 属于&#x2F;order</li><li>过滤器(Filter): 安全，监控&#x2F;指标，和限流</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>创建gateway-service工程SpringBoot</li><li>编写基础配置</li><li>编写路由规则，配置静态路由策略</li><li>启动网关服务进行测试</li></ol><ul><li><p>静态路由</p><ul><li>在配置文件写死服务地址</li></ul></li><li><p>动态路由</p><ul><li>路由配置中uri所用的协议为lb时，gateway将把服务名解析为实际的主机和端口，并通过Ribbon进行负载均衡。  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">api-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment">#id唯一标识，可自定义</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service-route</span><br>          <span class="hljs-comment">#路由的服务地址</span><br>          <span class="hljs-comment">#uri: http://localhost:18081</span><br>          <span class="hljs-comment">#lb协议表示从Eureka注册中心获取服务请求地址</span><br>          <span class="hljs-comment">#user-provider访问的服务名称。</span><br>          <span class="hljs-comment">#路由地址如果通过lb协议加服务名称时，会自动使用负载均衡访问对应服务</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://user-provider</span><br>          <span class="hljs-comment"># 路由拦截的地址配置（断言）</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>过滤器<br>  作用：常用于请求鉴权、服务调用时长统计、修改请求或响应header、限流、去除路径等等…</p><ul><li>分类<ul><li>默认过滤器<ul><li>全局默认过滤器<table><thead><tr><th>过滤器名称</th><th>说明</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>对匹配上的请求加上Header</td></tr><tr><td>AddRequestParameters</td><td>对匹配上的请求路由增加参数</td></tr><tr><td>AddResponseHeader</td><td>对从网关返回的响应添加Header</td></tr></tbody></table></li><li>局部默认过滤器<table><thead><tr><th>过滤器名称</th><th>说明</th></tr></thead><tbody><tr><td>PrefixPath</td><td>对匹配上的请求路径添加前缀</td></tr><tr><td>StripPrefix</td><td>对匹配上的请求路径去除前缀</td></tr></tbody></table></li></ul></li><li>自定义过滤器<ul><li>全局默认过滤器 作用在所有路由 如登陆校验</li><li>局部默认过滤器 配置在具体路由下，只作用在当前路由 如打印字段</li></ul></li></ul></li></ul></li></ul><h1 id="Spring-Cloud-Config-配置中心"><a href="#Spring-Cloud-Config-配置中心" class="headerlink" title="Spring Cloud Config 配置中心"></a>Spring Cloud Config 配置中心</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>分布式系统中，由于服务数量非常多，配置文件分散在不同微服务项目中，管理极其不方便。为了方便配置文件集中管理，需要分布式配置中心组件。在Spring Cloud中，提供了Spring Cloud Config，它支持配置文件放在配置服务的本地，也支持配置文件放在远程仓库Git(GitHub、码云)。配置中心本质上是一个微服务，同样需要注册到Eureka服务中心！</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>在启动类添加开启配置服务支持注释 @EnableConfigServer</li><li>配置文件设置git</li><li>在git上 添加配置文件 .yml <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">命名规则 配置文件的命名方式：&#123;application&#125;-&#123;<span class="hljs-keyword">profile</span>&#125;.yml或&#123;application&#125;-&#123;<span class="hljs-keyword">profile</span>&#125;.properties<br>application为应用名称<br><span class="hljs-keyword">profile</span>用于区分开发环境dev，测试环境test，生产环境<span class="hljs-keyword">pro</span>等<br>开发环境 user-dev.yml<br>测试环境 user-test.yml<br>生产环境 user-<span class="hljs-keyword">pro</span>.yml<br></code></pre></td></tr></table></figure></li><li>在需要远程配置的服务 加入依赖spring-cloud-starter-config</li><li>删除需要配置的服务的配置文件，新增bootstrap.yml配置文件</li><li>设置bootstrap.yml配置文件<ul><li>bootstrap.yml文件是SpringBoot的默认配置文件，而且其加载时间相比于application.yml更早。</li><li>bootstrap.yml和application.yml都是默认配置文件，但定位不同<ul><li>bootstrap.yml可以理解成系统级别的一些参数配置，一般不会变动</li><li>application.yml用来定义应用级别的参数</li></ul></li><li>搭配spring-cloud-config使用application.yml的配置可以动态替换。</li><li>bootstrap.yml相当于项目启动的引导文件，内容相对固定</li><li>application.yml文件是微服务的常规配置参数，变化比较频繁</li></ul></li></ol><h1 id="Spring-Cloud-Bus-消息总线"><a href="#Spring-Cloud-Bus-消息总线" class="headerlink" title="Spring Cloud Bus 消息总线"></a>Spring Cloud Bus 消息总线</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>Bus是用轻量的消息代理将分布式的节点连接起来，可以用于<strong>广播配置文件的更改</strong>或者服务的监控管理。</p><p>Bus可以为微服务做监控，也可以实现应用程序之间互相通信。Bus可选的消息代理<strong>RabbitMQ</strong>和Kafka。</p><p>广播出去的配置文件服务会进行本地缓存。</p><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>SpringCloud Bus，实现配置自动更新。</p><p>注意：SpringCloudBus基于RabbitMQ实现，默认使用本地的消息队列服务，所以需要提前安装并启动RabbitMQ。</p><h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mel">a.config-server<br>    <span class="hljs-number">1.</span> 添加依赖 消息总线<span class="hljs-keyword">spring</span>-cloud-bus RabbitMQ依赖<span class="hljs-keyword">spring</span>-cloud-stream-binder-rabbit<br>    <span class="hljs-number">2.</span> 修改配置文件 添加rabbitmq management<br>b. 其他服务<br>    <span class="hljs-number">1.</span> 添加依赖 消息总线<span class="hljs-keyword">spring</span>-cloud-bus RabbitMQ依赖<span class="hljs-keyword">spring</span>-cloud-stream-binder-rabbit 健康监控依赖 <span class="hljs-keyword">spring</span>-boot-starter-actuator<br>    <span class="hljs-number">2.</span> 在bootstrap.yml 中添加rabbitmq的配置<br>    <span class="hljs-number">3.</span> 在需要用到实时刷新的数据的类上加上注释@RefreshScope<br>   使用@Value sqEl表达式获取配置文件的值 @Value(<span class="hljs-string">&quot;$&#123;test.message&#125;&quot;</span>)<br>c. 修改git上的配置文件 添加值 如 test.message: hello<br>d. 使用POST请求 http:<span class="hljs-comment">//&#123;config-server所在的ip:port&#125;/actuator/&#123;config-server配置文件中management include的值&#125;</span><br> 如：http:<span class="hljs-comment">//localhost:18080/actuator/bus-refresh</span><br> 访问配置中心的消息总线，消息总线向rabbitmq的消息队列发送消息，其他服务接受到队列消息后，就重新从配置中心获取最新的配置信息<br>e. 可以正常请求其他服务接口 如：http:<span class="hljs-comment">//localhost:8081/api/config/load?token=aaa</span><br></code></pre></td></tr></table></figure><p>测试得出 不能修改端口号~</p><p>DiscoveryClient_USER-PROVIDER&#x2F;DESKTOP-4U92VMS:user-provider:8082 - registration status: 204</p><p><strong>消息总线实现消息分发过程：</strong></p><ul><li>请求地址访问配置中心的消息总线</li><li>消息总线接收到请求</li><li>消息总线向消息队列发送消息</li><li>user-service微服务会监听消息队列</li><li>user-service微服务接到消息队列中消息后</li><li>user-service微服务会重新从配置中心获取最新配置信息</li></ul><p><img src="/posts/2bd9cd5a0567/1620142783362.png" alt="1620142783362.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑运算符</title>
      <link href="/posts/318fb91e03a3/"/>
      <url>/posts/318fb91e03a3/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑运算符的基本用法"><a href="#逻辑运算符的基本用法" class="headerlink" title="逻辑运算符的基本用法"></a>逻辑运算符的基本用法</h1><ul><li>A:逻辑运算符有哪些 <ul><li>&amp;,|,^,! （位运算符）</li><li>&amp;&amp;,||</li></ul></li><li>B:案例演示</li><li>逻辑运算符的基本用法</li><li>注意事项：<ul><li>a:逻辑运算符一般用于连接boolean类型的表达式或者值。</li><li>b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。 <ul><li>算术表达式：a + b</li><li>比较表达式：a &#x3D;&#x3D; b(条件表达式)</li></ul></li></ul></li><li>C:结论：</li><li>&amp;逻辑与:有false则false。</li><li>|逻辑或:有true则true。</li><li>^逻辑异或:相同为false，不同为true。</li><li>!逻辑非:非false则true，非true则false。 <ul><li>特点：偶数个不改变本身。</li></ul></li></ul><h1 id="逻辑运算符-和-的区别"><a href="#逻辑运算符-和-的区别" class="headerlink" title="逻辑运算符&amp;&amp;和&amp;的区别"></a>逻辑运算符&amp;&amp;和&amp;的区别</h1><ul><li>A:案例演示 <ul><li>&amp;&amp;和&amp;的区别? <ul><li>a:最终结果一样。</li><li>b:&amp;&amp;具有短路效果。左边是false，右边不执行。</li><li>&amp;是无论左边是false还是true,右边都会执行</li></ul></li></ul></li><li>B:同理||和|的区别</li><li>C:开发中常用谁? <ul><li>&amp;&amp;,||,!</li></ul></li></ul><h1 id="位运算符的基本用法（只能是整型或者字符型）"><a href="#位运算符的基本用法（只能是整型或者字符型）" class="headerlink" title="位运算符的基本用法（只能是整型或者字符型）"></a>位运算符的基本用法（只能是整型或者字符型）</h1><ul><li>A:位运算符有哪些 <ul><li>&amp;,|,^,~ ,&gt;&gt;,&gt;&gt;&gt;,&lt;&lt;</li></ul></li><li>B:案例演示<ul><li>位运算符的基本用法1</li><li>&amp;,|,^,~ 的用法</li><li>&amp;:有0则0 位与</li><li>|:有1则1 位或</li><li>^:相同则0，不同则1 位异或</li><li>~:按位取反 （先转为补码，用补码运算） 取反</li></ul></li></ul><p>例子：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">~6<br>00000000 00000000 00000000 00000110 6的原码<br>00000000 00000000 00000000 00000110 6的补码<br>11111111 11111111 11111111 11111001 取反<br>11111111 11111111 11111111 11111000 -1 得到反码<br>10000000 00000000 00000000 00000111 原码 （-7）<br>~6 = -7<br><br>~-19<br>10000000 00000000 00000000 00010011 -19的原码<br>11111111 11111111 11111111 11101101 -19的补码<br>00000000 00000000 00000000 00010010 取反<br>00000000 00000000 00000000 00010010 原码（18）（因为符号位为0，正数)<br></code></pre></td></tr></table></figure><h1 id="位异或运算符的特点及面试题"><a href="#位异或运算符的特点及面试题" class="headerlink" title="位异或运算符的特点及面试题"></a>位异或运算符的特点及面试题</h1><ul><li>A:案例演示<ul><li>位异或运算符的特点</li><li>^的特点：一个数据对另一个数据位异或两次，该数本身不变。</li><li>10 ^ 5 ^ 5 &#x3D; 10</li></ul></li><li>B:面试题：<ul><li>请自己实现两个整数变量(int)的交换 (不要定义第三方变量)</li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">//第一种：<br>int a = 5;<br>int b = 10;<br>a = a + b;<br>b = a - b;<br>a = a - b;<br>//有弊端，如果a + b 的值大于int类型的取值范围，就会出错。<br><br><br>//第二种：<br>a = a ^ b; // 10 ^ 5<br>b = a ^ b; // 10 ^ 5 ^ 5 = 10<br>a = a ^ b; // 10 ^ 5 ^ 10 = 5<br></code></pre></td></tr></table></figure><h1 id="位运算符的基本用法2及面试题"><a href="#位运算符的基本用法2及面试题" class="headerlink" title="位运算符的基本用法2及面试题"></a>位运算符的基本用法2及面试题</h1><ul><li>A:案例演示 &gt;&gt;,&gt;&gt;&gt;,&lt;&lt;的用法: <ul><li><p>&lt;&lt;:左移 左边最高位丢弃，右边补齐0<br>  左移，向左移动n位就是乘以2的n次幂</p></li><li><blockquote><blockquote><p>:右移 最高位是0，左边补齐0;最高为是1，左边补齐1<br>  右移，向右移动n位就是除以2的n次幂  </p></blockquote></blockquote></li><li><blockquote><blockquote><blockquote><p>:无符号右移 无论最高位是0还是1，左边补齐0</p></blockquote></blockquote></blockquote></li><li><p>最有效率的算出2 * 8的结果 </p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">2&lt;&lt;3<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转义字符</title>
      <link href="/posts/dcd9648973f8/"/>
      <url>/posts/dcd9648973f8/</url>
      
        <content type="html"><![CDATA[<p><code>&#39;\x&#39;</code>， x表示任意，\是转义符号,这种做法叫转移字符。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">&#x27;\t&#x27; tab键的位置<br>&#x27;\r&#x27; 回车<br>&#x27;\n&#x27; 换行<br>&#x27;\&quot;&#x27; 转义&quot;<br>&#x27;\&#x27;&#x27; 转义&#x27;<br></code></pre></td></tr></table></figure><ul><li>注意： <code>&quot;\x&quot;</code> 和<code>&#39;\x&#39;</code>是一样的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择结构switch语句</title>
      <link href="/posts/3860f641048a/"/>
      <url>/posts/3860f641048a/</url>
      
        <content type="html"><![CDATA[<h1 id="switch语句的格式"><a href="#switch语句的格式" class="headerlink" title="switch语句的格式"></a>switch语句的格式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123; <span class="hljs-comment">// 基本数据类型可以接受byte,short,char,int.（能升级到int的类型）  引用数据类型可以接受枚举（JDK1.5）String字符串（JDK1.7）                 </span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>: <br>        语句体<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        语句体<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        语句体n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="选择结构switch语句的注意事项"><a href="#选择结构switch语句的注意事项" class="headerlink" title="选择结构switch语句的注意事项"></a>选择结构switch语句的注意事项</h1><ul><li>a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的</li><li>b:default可以省略吗? <ul><li>可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。 </li><li>特殊情况： </li><li>case就可以把值固定。 </li><li>A,B,C,D</li></ul></li><li>c:break可以省略吗? <ul><li>最后一个可以省略,其他最好不要省略 </li><li>会出现一个现象：case穿透。 </li><li>最终我们建议不要省略</li></ul></li><li>d:default一定要在最后吗? <ul><li>不是，可以在任意位置。但是建议在最后。</li></ul></li><li>e:switch语句的结束条件 <ul><li>a:遇到break就结束了 </li><li>b:执行到switch的右大括号就结束了</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘录入的基本格式</title>
      <link href="/posts/c25d691cf8db/"/>
      <url>/posts/c25d691cf8db/</url>
      
        <content type="html"><![CDATA[<p>步骤：</p><ul><li>a:导包 <ul><li>格式： </li><li><code>import java.util.Scanner; </code></li><li>位置： </li><li>在class上面。</li></ul><ul><li>b:创建键盘录入对象 <ul><li>格式： <ul><li><code>Scanner sc = new Scanner(System.in);</code></li></ul></li></ul></li><li>c:通过对象获取数据 <ul><li>格式： <ul><li><code>int x = sc.nextInt();</code></li></ul></li></ul></li></ul></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo_Scanner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入第一个整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(x);<br>        System.out.println(<span class="hljs-string">&quot;请输入第二个整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐式转换and强制转换</title>
      <link href="/posts/6cb95dcc346b/"/>
      <url>/posts/6cb95dcc346b/</url>
      
        <content type="html"><![CDATA[<ul><li>A:案例演示 <ul><li>a:int + int</li><li>b:byte + int <ul><li>a：int + int &#x3D; int</li><li>b: byte + int &#x3D; int</li></ul></li></ul></li><li>B:Java中的默认转换规则<ul><li>取值范围小的数据类型与取值范围大的数据类型进行运算,会先将小的数据类型提升为大的,再运算</li></ul></li><li>A:案例演示<ul><li>面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。</li><li>byte b1 &#x3D; 3;</li><li>byte b2 &#x3D; 4;</li><li>byte b3 &#x3D; b1 + b2; <ul><li>从两方面去回答这个题</li><li>b1和b2是两个变量,变量里面存储的值都是变化的,所以在程序运行中JVM是无法判断里面具体的值</li><li>byte类型的变量在进行运算的时候,会自动类型提升为int类型 ，所以在运算的时候，b1,b2是int，相加结果b3也是int（整型默认类型是int）</li></ul></li><li>byte b4 &#x3D; 3 + 4; <ul><li>3和4都是常量,java有常量优化机制,就是在编译的的时候直接把3和4的结果赋值给b4了</li></ul></li></ul></li><li>进行混合运算的时候,byte,short,char不会相互转换,都会自动类型提升为int类型,其他类型进行混合运算的是小的数据类型提升为大的<ul><li>byte,short,char – int – long – float – double</li></ul></li><li>疑问：float （四个）为什么比long（八个）表示的数据范围大？ <ul><li>因为float和long的存储数据的方式不同。</li><li>float 是采用IEEE 754 浮点数的三个域来存储的。（符号数值表示法）</li></ul></li></ul><p><img src="/posts/6cb95dcc346b/-1477357261004.png" alt="-1477357261004.png"></p><p> 其中：float类型一共32bit </p><p> 符号位：1bit </p><p> 指数位：8bit </p><p> 尾数位：23bit </p><p> IEEE 754 标准规定指数域固定值为2^(e-1) - 1 </p><p> e为存储指数的bit长度。float为8位，固定偏移值2^(8-1)-1 &#x3D; 128 - 1 &#x3D; 127,则float的指数域范围-127 ~ 128.。 </p><p> 好处：利用e个bit的来比较数的大小。 </p><p> 案例：将十进制178.125表示成机器内的32个字节的二进制形式。 </p><p> 解： </p><p> 第一步:将128.125表示成二进制数:(178.125)(十进制数)&#x3D;(10110010.001)(二进制形式); </p><p>第二步:将二进制形式的浮点实数转化为规格化的形式:(小数点向左移动7个二进制位可以得到) </p><p>10110010.001&#x3D;1.0110010001*2^7 因而产生了以下三项: </p><p>符号位：该数为正数,故第31位为0,占一个二进制位. </p><p>阶码：指数为7,故其阶码为127+7&#x3D;134&#x3D;(10000110)(二进制),占从第30到第23共8个二进制位. </p><p>尾数为小数点后的部分, 即0110010001.因为尾数共23个二进制位,在后面补13个0,即01100100010000000000000 </p><p>所以,178.125在内存中的实际表示方式为: </p><p>0 10000110 01100100010000000000000</p><p>再如,将-0.15625表示成机器内的32个字节的形式. </p><p>第一步:将-0.15625表示成二进制形式: (-0.15625)(十进制数)&#x3D;(-0.00101)(二进制形式); </p><p>第二步:将二进制形式的浮点数转化为规格化的形式:(小数点向右移动3个二进制位可以得到) </p><p>-0.00101&#x3D;-1.01*2^(-3) 同样,产生了三项: </p><p>符号位：该数为负数,故第31位为1,占一个二进制位; </p><p>阶码：指数为-3,故其阶码为127+(-3)&#x3D;124&#x3D;01111100,占从第30到第23共8个二进制位; </p><p>尾数为小数点后的01,当然后面要补21个0; </p><p>所以,-0.15625在内存中的实际表示形式为: </p><p>1 01111100 01000000000000000000000</p><p>单精度浮点数内存存储结构，C算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printfFloatBit</span><span class="hljs-params">(<span class="hljs-type">float</span> f)</span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> byte=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> ch,*p;<br>    p=(<span class="hljs-type">char</span>*)(&amp;f);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %.7f: &quot;</span>,f);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>)<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        ch=*(p+i);<br>        byte=ch;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">8</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(byte&gt;=<span class="hljs-number">128</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>            byte&lt;&lt;=<span class="hljs-number">1</span>;<br>            byte&amp;=<span class="hljs-number">255</span>;<br>        &#125;<br>    &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">float</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入单精度浮点型小数：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;num);<br>    printfFloatBit(num);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection</title>
      <link href="/posts/e8dcff2825b6/"/>
      <url>/posts/e8dcff2825b6/</url>
      
        <content type="html"><![CDATA[<h1 id="集合与数组"><a href="#集合与数组" class="headerlink" title="集合与数组"></a>集合与数组</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><ul><li>数组既能存储基本数据类型，也能存储引用数据类型，基本数据类型存储的是值，而引用数据类型存储的是地址值。</li><li>集合只能存储引用数据类型，虽然也能存储基本数据类型，但是存储基本数据类型时会自动装箱。</li></ul><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><ul><li>数组长度是固定的，不能自动增长。</li><li>集合长度是可变的，是能够根据元素个数的增加而自动增长。</li></ul><h1 id="Collection结构"><a href="#Collection结构" class="headerlink" title="Collection结构"></a>Collection结构</h1><h2 id><a href="#" class="headerlink" title></a><img src="/posts/e8dcff2825b6/1620717666083.png" alt="1620717666083"></h2><ul><li>List 有序，存取顺序一一对应，有索引，可重复存储<ul><li>ArrayList 数组实现 ，查询快，增删慢，线程不安全，效率高</li><li>LinkedList 链表实现，查询慢，增删快，线程不安全，效率低</li><li>Vector 数组实现，查询快，增删慢，线程安全，效率低 (产生于jdk1.0，从jdk1.2开始，实现List接口)</li></ul></li><li>Set 无序，存取顺序并不一致，无索引，不可重复存储<ul><li>HashSet 哈希算法实现 线程不安全 基于HashMap实现</li><li>TreeSet 二叉树算法实现 线程不安全 基于TreeMap实现</li></ul></li></ul><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="迭代"><a href="#迭代" class="headerlink" title="# 迭代"></a># 迭代</h2><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrayList.size() ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b&quot;</span>.equals(arrayList.get(i)))&#123;<br>                arrayList.remove(i--);<br>            &#125;<br>            System.out.println(arrayList.get(i));<br>        &#125;<br></code></pre></td></tr></table></figure><p>可以进行遍历删除，但是要注意索引变化，需要对<code>i--</code>。</p><h3 id="-2"><a href="#-2" class="headerlink" title></a></h3><h2 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Object o : arrayList) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b&quot;</span>.equals(o))&#123;<br>                arrayList.remove(o); <span class="hljs-comment">//无法遍历中删除</span><br>            &#125;<br>            System.out.println(o);<br>        &#125;<br></code></pre></td></tr></table></figure><p>无法遍历中删除，因为&#x3D;&#x3D;foreach&#x3D;&#x3D;内部使用的是迭代器，而对数组删除，无法达到效果。</p><h3 id="-3"><a href="#-3" class="headerlink" title></a></h3><h2 id="iterator迭代器"><a href="#iterator迭代器" class="headerlink" title="iterator迭代器"></a>iterator迭代器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;String&gt; iterator = arrayList.iterator();<br>       <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>           <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b&quot;</span>.equals(obj))&#123;<br>               iterator.remove();<br>           &#125;<br>           System.out.println(obj);<br>       &#125;<br></code></pre></td></tr></table></figure><p>可以进行遍历删除，但是要注意对迭代器进行删除，而不是对集合。</p><h2 id="-4"><a href="#-4" class="headerlink" title></a></h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>ArrayList和LinkedList区别？<ul><li>相同点<ul><li>同属于Collection下的List接口的实现类。</li><li>都是用于存储引用数据类型，其长度都能自动增长。</li><li>都是线程不安全的。</li></ul></li><li>不同点<ul><li>ArrayList是基于数组实现的，而LinkedList是基于链表实现的。</li><li>ArrayList<ul><li>查询快，通过下标索引查找目标索引，遍历下标索引即可。</li><li>增删慢，在一般情况下在尾部添加元素快，但是总体不及LinkedList。</li><li>修改快，修改之前需要进行查询，查询快，修改也快。</li></ul></li><li>LinkedList<ul><li>增删快，实质就是改变前后节点的指针指向地址。</li><li>查询慢，即需要遍历链表。</li><li>修改慢，修改之前需要进行查询，所以慢。</li></ul></li></ul></li></ul></li><li>Vector和ArrayList区别？<ul><li>相同点<ul><li>都使用数组结构实现的。</li></ul></li><li>不同点<ul><li>Vector是线程安全的，效率低。</li><li>ArrayList是线程不安全的，效率高。</li><li>Vector相对于ArrayList查询慢，因为线程安全。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 【java】 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的内存分配以及栈和堆的区别</title>
      <link href="/posts/b1f62f45a7c7/"/>
      <url>/posts/b1f62f45a7c7/</url>
      
        <content type="html"><![CDATA[<ul><li>栈 <ul><li>先进后出</li><li>存储局部变量</li></ul></li><li>堆 <ul><li>存储new出来的数组或对象</li></ul></li><li>方法区 <ul><li>面向对象部分讲解</li></ul></li><li>本地方法区 <ul><li>和系统相关</li></ul></li><li>寄存器 <ul><li>给CPU使用</li></ul></li></ul><p><img src="/posts/b1f62f45a7c7/-1477461661082.png" alt="-1477461661082.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的引用</title>
      <link href="/posts/7bfa36ff30db/"/>
      <url>/posts/7bfa36ff30db/</url>
      
        <content type="html"><![CDATA[<h1 id="1-强引用、软引用、弱引用和虚引用"><a href="#1-强引用、软引用、弱引用和虚引用" class="headerlink" title="1. 强引用、软引用、弱引用和虚引用"></a>1. 强引用、软引用、弱引用和虚引用</h1><h2 id="1-1-强引用（Strong-Reference）"><a href="#1-1-强引用（Strong-Reference）" class="headerlink" title="1.1 强引用（Strong Reference）"></a>1.1 强引用（Strong Reference）</h2><p>被强引用的对象，不会被垃圾回收器回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="1-2-软引用（Soft-Reference）"><a href="#1-2-软引用（Soft-Reference）" class="headerlink" title="1.2 软引用（Soft Reference）"></a>1.2 软引用（Soft Reference）</h2><p>如果一个对象只被软引用时，当JVM内存足够时，对象不会被垃圾回收器回收；如果内存不足时，就会回收这类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>SoftReference&lt;Integer&gt; softReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;Integer&gt;(prime);<br>prime = <span class="hljs-literal">null</span>;<br>System.out.println(softReference.get());<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>实现场景：内存敏感的高速缓存，如浏览器的后退操作。</p><h2 id="1-3-弱引用（Weak-Reference）"><a href="#1-3-弱引用（Weak-Reference）" class="headerlink" title="1.3 弱引用（Weak Reference）"></a>1.3 弱引用（Weak Reference）</h2><p>当一个对象仅被弱引用时，那么在下一次gc(垃圾回收器进行扫描)时，该对象就会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;A&quot;</span>);<br>list.add(<span class="hljs-string">&quot;B&quot;</span>);<br>list.add(<span class="hljs-string">&quot;C&quot;</span>);<br>WeakReference&lt;List&lt;String&gt;&gt; weakReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;List&lt;String&gt;&gt;(list);<br>list = <span class="hljs-literal">null</span>;<br><br>System.gc(); <span class="hljs-comment">//告诉回收器 要进行回收</span><br><span class="hljs-comment">//System.runFinalization(); // 立即进行回收</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">if</span> (weakReference.get() != <span class="hljs-literal">null</span>)&#123;<br>   System.out.println(weakReference.get() + <span class="hljs-string">&quot; still alive!&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>  System.out.println(<span class="hljs-string">&quot;Object has been collected.&quot;</span>);<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当不愿介入对象的生命周期时，可以使用弱引用，弱引用不会影响对象的垃圾回收机制中的判断。</p><h2 id="1-4-虚引用（Phantom-Reference）"><a href="#1-4-虚引用（Phantom-Reference）" class="headerlink" title="1.4 虚引用（Phantom Reference）"></a>1.4 虚引用（Phantom Reference）</h2><p>虚引用不会影响对象的生命周期，当对象仅持有虚引用时，那么和没有任何引用一样，在任何时候都有可能被垃圾回收。</p><p>虚引用主要是用于跟踪对象被垃圾回收的活动。</p><p>虚引用与软引用和弱引用的区别在于：虚引用必须和引用队列（Reference Queue）联合使用。</p><p>当垃圾回收器准备回收一个对象时，如果发现对象仅存在虚引用，就会在回收对象内存之前，把这个虚引用加入与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入虚引用，来获知被引用的对象是否将要被垃圾回收。如果发现某个虚引用已经被加入引用队列，那么就可以在对象内存被回收前，进行必要的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>ReferenceQueue&lt;String&gt; referenceQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;String&gt;();<br>PhantomReference&lt;String&gt; phantomReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span>&lt;String&gt;(str, referenceQueue);<br></code></pre></td></tr></table></figure><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h2><p>在实际开发中，一般很少使用弱引用和虚引用，使用软引用的情况比较多。</p><p>因为软引用能够加快内存的回收速度，可以维护系统的运行安全，防止内存溢出(OutOfMemory)等问题。</p><p>垃圾回收时机</p><p>软引用：如果弱引用对象回收完之后，内存还是不足，继续回收软引用对象。</p><p>弱引用：如果虚引用对象回收完之后，内存还是不足，继续回收弱引用对象。</p><p>虚引用：JVM的内存不足时，开始报警，垃圾回收机制执行gc，如果没有对象可以回收，就回收虚引用的对象。</p><table><thead><tr><th>引用类型</th><th>被垃圾回收时间</th><th>生存终止时间</th><th>用途</th></tr></thead><tbody><tr><td>强引用</td><td>从不</td><td>JVM停止运行</td><td>对象一般状态</td></tr><tr><td>软引用</td><td>内存不足时</td><td>内存不足时被回收后</td><td>对象缓存</td></tr><tr><td>弱引用</td><td>垃圾回收时</td><td>垃圾回收后</td><td>对象缓存</td></tr><tr><td>虚引用</td><td>垃圾回收时</td><td>垃圾回收后</td><td>跟踪对象垃圾回收</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch和Kibana的使用</title>
      <link href="/posts/1efa0aba8621/"/>
      <url>/posts/1efa0aba8621/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch-相关命令"><a href="#Elasticsearch-相关命令" class="headerlink" title="Elasticsearch 相关命令"></a>Elasticsearch 相关命令</h1><ul><li>后台运行Elasticsearch  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./elasticsearch-7.12.1/bin/elasticsearch -d<br></code></pre></td></tr></table></figure></li></ul><h1 id="Kibana-相关命令"><a href="#Kibana-相关命令" class="headerlink" title="Kibana 相关命令"></a>Kibana 相关命令</h1><ul><li>启动 <ul><li>非守护线程启动  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./kibana-7.12.1-linux-x86_64/bin/kibana<br></code></pre></td></tr></table></figure></li><li>后台启动  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./kibana-7.12.1-linux-x86_64/bin/<br>nohup ./kibana &amp;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Kibana-注意事项"><a href="#Kibana-注意事项" class="headerlink" title="Kibana 注意事项"></a>Kibana 注意事项</h2><ul><li><p>注意修改<code>config/kibana.yml</code>中配置项。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">server.port: 5601 # 默认端口号就是5601<br>server.host: &quot;0.0.0.0&quot; # 改成0.0.0.0是指任意地址可以访问 默认是localhost<br>elasticsearch.hosts: [&quot;http://localhost:9200&quot;] # 注意elasticsearch的ip地址 以及端口号<br>i18n.locale: &quot;zh-CN&quot; # 将kibana改成中文<br></code></pre></td></tr></table></figure></li><li><p>注意修改防火墙端口策略。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ufw allow 5601 # 开放kibana端口<br>ufw allow 9200 # 开放elasticsearch端口<br>ufw reload   # 使得策略生效<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Static关键字</title>
      <link href="/posts/3ba86ac31720/"/>
      <url>/posts/3ba86ac31720/</url>
      
        <content type="html"><![CDATA[<h1 id="static关键字的特点"><a href="#static关键字的特点" class="headerlink" title="static关键字的特点"></a>static关键字的特点</h1><ul><li>a:随着类的加载而加载 <ul><li>b:优先于对象存在</li><li>c:被类的所有对象共享 <ul><li>举例：咱们班级的学生应该共用同一个班级编号。</li><li>其实这个特点也是在告诉我们什么时候使用静态? <ul><li>如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的。</li></ul></li><li>举例： <ul><li>饮水机(用静态修饰)</li><li>水杯(不能用静态修饰)</li><li>共性用静态,特性用非静态</li></ul></li></ul></li><li>d:可以通过类名调用 <ul><li>其实它本身也可以通过对象名调用。</li><li>推荐使用类名调用。</li><li>静态修饰的内容一般我们称其为：与类相关的，类成员</li></ul></li></ul></li></ul><h1 id="static的注意事项"><a href="#static的注意事项" class="headerlink" title="static的注意事项"></a>static的注意事项</h1><ul><li>A:static的注意事项 <ul><li>a:在静态方法中是没有this关键字的 <ul><li>如何理解呢? <ul><li>静态是随着类的加载而加载，this是随着对象的创建而存在。</li><li>静态比对象先存在。</li></ul></li></ul></li><li>b:静态方法只能访问静态的成员变量和静态的成员方法 <ul><li>静态方法： <ul><li>成员变量：只能访问静态变量</li><li>成员方法：只能访问静态成员方法</li></ul></li><li>非静态方法： <ul><li>成员变量：可以是静态的，也可以是非静态的</li><li>成员方法：可是是静态的成员方法，也可以是非静态的成员方法。</li></ul></li><li>简单记： <ul><li>静态只能访问静态。</li></ul></li></ul></li></ul></li></ul><h1 id="静态变量和成员变量的区别"><a href="#静态变量和成员变量的区别" class="headerlink" title="静态变量和成员变量的区别"></a>静态变量和成员变量的区别</h1><ul><li>静态变量也叫类变量 成员变量也叫对象变量</li><li>A:所属不同 <ul><li>静态变量属于类，所以也称为为类变量</li><li>成员变量属于对象，所以也称为实例变量(对象变量)</li></ul></li><li>B:内存中位置不同 <ul><li>静态变量存储于方法区的静态区</li><li>成员变量存储于堆内存</li></ul></li><li>C:内存出现时间不同 <ul><li>静态变量随着类的加载而加载，随着类的消失而消失</li><li>成员变量随着对象的创建而存在，随着对象的消失而消失</li></ul></li><li>D:调用不同 <ul><li>静态变量可以通过类名调用，也可以通过对象调用</li><li>成员变量只能通过对 象名调用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>main方法的格式详细解释</title>
      <link href="/posts/8041c4aa4603/"/>
      <url>/posts/8041c4aa4603/</url>
      
        <content type="html"><![CDATA[<ul><li>A:格式 <ul><li><code>public static void main(String[] args) &#123;&#125;</code></li></ul></li><li>B:针对格式的解释 <ul><li><code>public</code> 被jvm调用，访问权限足够大。</li><li><code>static</code> 被jvm调用，不用创建对象，直接类名访问</li><li><code>void</code>被jvm调用，不需要给jvm返回值</li><li><code>main</code> 一个通用的名称，虽然不是关键字，但是被jvm识别</li><li><code>String[] args</code> 以前用于接收键盘录入的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字</title>
      <link href="/posts/c15dcdd3eb78/"/>
      <url>/posts/c15dcdd3eb78/</url>
      
        <content type="html"><![CDATA[<h1 id="1、final概述"><a href="#1、final概述" class="headerlink" title="1、final概述"></a>1、final概述</h1><ul><li>最终的意思，修饰的内容不能再被修改。</li></ul><h1 id="2、final修饰特点"><a href="#2、final修饰特点" class="headerlink" title="2、final修饰特点"></a>2、final修饰特点</h1><ul><li>修饰类，最终类，类不能被继承。如String类</li><li>修饰方法，方法不能被重写。</li><li>修饰变量，最终变量，变量变成常量，只能被赋值一次。<br>  注意：常量要大写，NUM，MAX_NUM</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> &#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>;<span class="hljs-comment">//final修饰的变量叫常量，一般和public static 共用</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、final关键字修饰局部变量"><a href="#3、final关键字修饰局部变量" class="headerlink" title="3、final关键字修饰局部变量"></a>3、final关键字修饰局部变量</h1><ul><li>基本类型 ： 值不能改变。</li><li>引用类型 ： 地址值不能被改变，对象中的属性可以改变。</li></ul><h1 id="4、final修饰变量的初始化时机"><a href="#4、final修饰变量的初始化时机" class="headerlink" title="4、final修饰变量的初始化时机"></a>4、final修饰变量的初始化时机</h1><ul><li><p>显示初始化 </p></li><li><p>在对象构造完毕前即可</p></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;    <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num;<span class="hljs-comment">//❎成员变量的默认初始化值（0）是无效值  </span><br>    <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>；<span class="hljs-comment">//✅ 显示初始化</span><br>    <br>    <span class="hljs-comment">//✅在对象构造完毕前即可    </span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num2;   <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//构造方法        </span><br>        num2 = <span class="hljs-number">10</span>;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>private关键字</title>
      <link href="/posts/3bb684b8cdb9/"/>
      <url>/posts/3bb684b8cdb9/</url>
      
        <content type="html"><![CDATA[<h1 id="private关键字的概述和特点"><a href="#private关键字的概述和特点" class="headerlink" title="private关键字的概述和特点"></a>private关键字的概述和特点</h1><p>private关键字特点 </p><ul><li><p>a:是一个权限修饰符 </p></li><li><p>b:可以修饰成员变量和成员方法 </p></li><li><p>c:被其修饰的成员只能在本类中被访问</p></li></ul><ul><li>A:把成员变量用private修饰</li><li>B:提供对应的getXxx()和setXxx()方法</li><li>private仅仅是封装的一种体现形式,不能说封装就是私有</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this关键字</title>
      <link href="/posts/dd291c2f8528/"/>
      <url>/posts/dd291c2f8528/</url>
      
        <content type="html"><![CDATA[<h1 id="this关键字特点"><a href="#this关键字特点" class="headerlink" title="this关键字特点"></a>this关键字特点</h1><p>代表当前对象的引用 </p><h1 id="this的作用"><a href="#this的作用" class="headerlink" title="this的作用"></a>this的作用</h1><p>用来区分成员变量和局部变量重名</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>            <span class="hljs-comment">//System.out.println(age);     </span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;非法输入&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-comment">//System.out.println(name);  </span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/posts/a538d5f346df/"/>
      <url>/posts/a538d5f346df/</url>
      
        <content type="html"><![CDATA[<h1 id="代码块概述"><a href="#代码块概述" class="headerlink" title="代码块概述"></a>代码块概述</h1><p>在Java中，使用{}括起来的代码被称为代码块。</p><h1 id="代码块分类"><a href="#代码块分类" class="headerlink" title="代码块分类"></a>代码块分类</h1><p>根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块(多线程讲解)。</p><h1 id="常见代码块的应用"><a href="#常见代码块的应用" class="headerlink" title="常见代码块的应用"></a>常见代码块的应用</h1><p>a:局部代码块 </p><ul><li>在方法中出现；限定变量生命周期，及早释放，提高内存利用率<br>  b:构造代码块 (初始化块)<ul><li>在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行<br>  c:静态代码块 </li><li>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。</li></ul></li><li>一般用于加载驱动<br>  例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Code</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 局部代码块 限定变量的生命周期</span><br>        &#125;<br>        System.out.printLn(x);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 空参构造</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-comment">//无参构造</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><span class="hljs-comment">//构造代码块：在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造代码块&quot;</span>)<br>     &#125;<br><br>    <span class="hljs-comment">//静态代码块：如果在主类中，优先于main方法执行</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>面试题：以下代码的打印内容？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Farther:静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father:构造代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father:构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son:静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son:构造代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son:构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印顺序：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">Farther:静态代码块<br>Son:静态代码块<br>Father:构造代码块<br>Father:构造方法<br>Son:构造代码块<br>Son:构造方法<br></code></pre></td></tr></table></figure><p>原因： </p><p>1、jvm调用main方法，main进栈。 </p><p>2、Son son &#x3D; new Son(); 先将Father.Class和Son.Class分别加载进内存，则先后运行父类和子类的静态代码块。 </p><p>3、运行Son()构造方法时，先运行super()，先运行Father的构造代码块，再运行Father的构造方法，父类初始化结束。 </p><p>4、Son初始化，先Son的构造代码块，在运行Son的构造方法。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串参与运算</title>
      <link href="/posts/cadd53eb69d2/"/>
      <url>/posts/cadd53eb69d2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意：任何数据类型用+与字符串相连接都会产生新字符串</p></blockquote><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo_String</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5 + 5 = &quot;</span> + <span class="hljs-number">5</span> + <span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;5 + 5 = &quot;</span> + (<span class="hljs-number">5</span> + <span class="hljs-number">5</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">helloa1 // 优先级从左往右<br>98hello //先进行a的ascll码与1进行相加，在与字符串hello相加<br>5 + 5 = 55 //从左往右   <br>5 + 5 = 10  //括号优先级 5 和 5相加等于10 再与“5 + 5 = ”相加<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 【java】 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建对象的内存操作</title>
      <link href="/posts/aad2c7e9c83a/"/>
      <url>/posts/aad2c7e9c83a/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/aad2c7e9c83a/-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AD%A5%E9%AA%A4.png" alt="-创建对象的步骤.png"></p><ul><li>Student s &#x3D; new Student(); <ul><li><ol><li>Student.class加载进内存</li></ol></li><li><ol start="2"><li>声明一个Student类型引用s</li></ol></li><li><ol start="3"><li>在堆内存创建对象,</li></ol></li><li><ol start="4"><li>给对象中属性默认初始化值</li></ol></li><li><ol start="5"><li>属性进行显示初始化</li></ol></li><li><ol start="6"><li>构造方法进栈,对对象中的属性赋值,构造方法弹栈</li></ol></li><li><ol start="7"><li>将对象的地址值赋值给s</li></ol></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1_Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        name = <span class="hljs-string">&quot;李四&quot;</span>;<br>        age = <span class="hljs-number">24</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;...&quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 【java】 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成员变量&amp;局部变量</title>
      <link href="/posts/b01900e2d061/"/>
      <url>/posts/b01900e2d061/</url>
      
        <content type="html"><![CDATA[<p>区别：</p><ul><li>A:在类中的位置不同 <ul><li>成员变量：在类中方法外</li><li>局部变量：在方法定义中或者方法声明上</li></ul></li><li>B:在内存中的位置不同 <ul><li>成员变量：在堆内存(成员变量属于对象,对象进堆内存)</li><li>局部变量：在栈内存(局部变量属于方法,方法进栈内存)</li></ul></li><li>C:生命周期不同 <ul><li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li><li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li></ul></li><li>D:初始化值不同<ul><li>成员变量：有默认初始化值</li><li>局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。</li></ul></li><li>注意事项：<ul><li>局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。</li><li>基本数据类型变量包括哪些:byte,short,int,long,float,double,boolean,char</li><li>引用数据类型变量包括哪些:数组,类,接口,枚举</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具类中使用静态</title>
      <link href="/posts/683857aeabe2/"/>
      <url>/posts/683857aeabe2/</url>
      
        <content type="html"><![CDATA[<p>直接类名调用方法即可。 </p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTool</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ArrayTool</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">//防止创建对象</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (max &lt; arr[i]) &#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">revArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length / <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[arr.length - <span class="hljs-number">1</span> - i];<br>            arr[arr.length - <span class="hljs-number">1</span> - i] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制跳转语句标号</title>
      <link href="/posts/030bf8c9a031/"/>
      <url>/posts/030bf8c9a031/</url>
      
        <content type="html"><![CDATA[<ul><li><p>标号<code>:</code>标记某个循环对其控制。</p></li><li><p>标号组成规则：需要使用合法的标识符。</p></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//outer，inner是标号</span><br>outer: <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;i = &quot;</span>+i); <br>      inner: <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br>                System.out.println(<span class="hljs-string">&quot;j = &quot;</span>+j);<br>                <span class="hljs-keyword">break</span> outer;<br>             &#125;<br>      http: <span class="hljs-comment">//www.baidu.com  //没错，http是标号。//后是单行注释，运行完全没问题。</span><br>       &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/posts/112cfaf3aacf/"/>
      <url>/posts/112cfaf3aacf/</url>
      
        <content type="html"><![CDATA[<h1 id="数组概念"><a href="#数组概念" class="headerlink" title="数组概念"></a>数组概念</h1><ul><li>数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。</li><li>数组既可以存储基本数据类型，也可以存储引用数据类型。</li></ul><h1 id="数组定义格式"><a href="#数组定义格式" class="headerlink" title="数组定义格式"></a>数组定义格式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">数据类型[] 数组名 = new 数据类型[数组的长度];<br></code></pre></td></tr></table></figure><h1 id="数组的初始化动态初始化"><a href="#数组的初始化动态初始化" class="headerlink" title="数组的初始化动态初始化"></a>数组的初始化动态初始化</h1><h2 id="什么是数组的初始化"><a href="#什么是数组的初始化" class="headerlink" title="什么是数组的初始化"></a>什么是数组的初始化</h2><ul><li>就是为数组开辟连续的内存空间，并为每个数组元素赋予值</li></ul><h2 id="如何对数组进行初始化"><a href="#如何对数组进行初始化" class="headerlink" title="如何对数组进行初始化"></a>如何对数组进行初始化</h2><ul><li><p>a:动态初始化 只指定长度，由系统给出初始化值 </p><blockquote><p>int[] arr &#x3D; new int[5];</p></blockquote></li></ul><p> 整数类型：byte，short，int，long默认初始化值都是0。 </p><p> 浮点类型：float，double默认初始化值都是0.0。 </p><p> 布尔类型：boolean默认初始化值为false。 </p><p> 字符类型：char默认初始化值为’\u0000’ </p><p> char在内存中占的两个字节，是16个二进制位 </p><p> \u0000 每一个0代表的是十六进制的0，4个0代表16个二进制位。 </p><p> \u表示这是一个Unicode值,\u0000表示的是NULL，控制台输出的是一个空格。 - b:静态初始化 给出初始化值，由系统决定长度 </p><ul><li><p>静态初始化的格式： </p><blockquote><p>数据类型[] 数组名 &#x3D; new 数据类型[]{元素1,元素2,…};</p></blockquote></li><li><p>简化格式：</p><blockquote><p>数据类型[] 数组名 &#x3D; {元素1,元素2,…};</p></blockquote></li><li><p>c :动态初始化的格式：</p><blockquote><p>数据类型[] 数组名 &#x3D; new 数据类型[数组长度];</p></blockquote></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(arr);<br><span class="hljs-comment">//打印结果：[I@19aa21c</span><br></code></pre></td></tr></table></figure><p>[I@19aa21c </p><p>“[“代表是数组，几个[就代表几维。 </p><p>“I”代表的数据类型int。 </p><p>“@19aa21c”代表的是所在内存地址。</p><h1 id="数组操作的两个常见小问题越界和空指针"><a href="#数组操作的两个常见小问题越界和空指针" class="headerlink" title="数组操作的两个常见小问题越界和空指针"></a>数组操作的两个常见小问题越界和空指针</h1><ul><li>ArrayIndexOutOfBoundsException:数组索引越界异常<br>  原因：你访问了不存在的索引。 </li><li>NullPointerException:空指针异常<br>  原因：数组已经不在指向堆内存了。而你还用数组名去访问元素。<br>  例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;; <br>arr = <span class="hljs-literal">null</span>;System.out.println(arr[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="二维数组的几种格式"><a href="#二维数组的几种格式" class="headerlink" title="二维数组的几种格式"></a>二维数组的几种格式</h2><p>以下格式也可以表示二维数组 </p><p> 1:数据类型 数组名[][] &#x3D; new 数据类型[m][n]; </p><p> 2:数据类型[] 数组名[] &#x3D; new 数据类型[m][n]; </p><p>注意： </p><p>注意下面定义的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> x;        <br><span class="hljs-type">int</span> y;<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-type">int</span>[] x;        <span class="hljs-comment">// x是一维数组</span><br><span class="hljs-type">int</span>[] y[];      <span class="hljs-comment">// y是二维数组</span><br><span class="hljs-type">int</span>[] x,y[];    <span class="hljs-comment">//x是一维数组,y是二维数组</span><br></code></pre></td></tr></table></figure><p><img src="/posts/112cfaf3aacf/-1477464474699.png" alt="-1477464474699.png"></p><p>二维数组格式2</p><p><code>int[][] arr = new int[3][];</code></p><p>二维数组格式3</p><p><code> int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8,9&#125;&#125;;</code></p><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><ul><li><p>外循环控制的是二维数组的长度，其实就是一维数组的个数。</p></li><li><p>内循环控制的是一维数组的长度。</p></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length ;i++ ) &#123;<span class="hljs-comment">//获取到每个二维数组中的一维数组    </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; arr[i].length ;j++ ) &#123;   <span class="hljs-comment">//获取每个一维数组中的元素 </span><br>    System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Java中的参数传递问题"><a href="#Java中的参数传递问题" class="headerlink" title="Java中的参数传递问题"></a>Java中的参数传递问题</h1><p>思考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Change</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;;<br>        change(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>]);<br>        change(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr0:&quot;</span> + arr[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;\tarr1:&quot;</span> + arr[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        a = <span class="hljs-number">111</span>;<br>        b = <span class="hljs-number">222</span>;<br>        System.out.println(<span class="hljs-string">&quot;a:&quot;</span> + a + <span class="hljs-string">&quot;b:&quot;</span> + b);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span> &#123;<br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">111</span>;<br>        a[<span class="hljs-number">1</span>] = <span class="hljs-number">222</span>;<br>        System.out.println(<span class="hljs-string">&quot;a0:&quot;</span> + a[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;\tb0:&quot;</span> + a[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>change2个方法都能实现改变arr数组？ </p><p>change(int a,int b)不能实现， change(int [] a)能实现。 </p><p>因为 change(int [] a)传递得是地址，对地址进行修改。</p><p>总结：</p><ul><li>基本数据类型的值传递，不改变原值，因为调用后会弹栈，局部变量随之消失。</li><li>引用数据类型的值传递，改变原值，因为即使方法弹栈，但是堆内存中的对象还在，可以通过地址继续访问。</li></ul><p>思考：Java中到底是传值还是传址？</p><ul><li>1、即是传值，也是传地址，基本数据类型传递的是值，引用数据类型传递的地址。</li><li>2、Java中只有传值，因为地址值也是值。（高司令，Java之父支持此种说法）</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重写</title>
      <link href="/posts/60ac4dd96489/"/>
      <url>/posts/60ac4dd96489/</url>
      
        <content type="html"><![CDATA[<h1 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h1><ul><li>父类中私有方法不能被重写 <ul><li>因为父类私有方法子类根本就无法继承</li></ul></li><li>子类重写父类方法时，访问权限不能更低 <ul><li>最好就一致</li></ul></li><li>父类静态方法，子类也必须通过静态方法进行重写 <ul><li>其实这个算不上方法重写，但是现象确实如此(静态只能覆盖静态)</li></ul></li><li>子类重写父类方法的时候，最好声明一模一样。</li></ul><h1 id="方法重写的面试题"><a href="#方法重写的面试题" class="headerlink" title="方法重写的面试题"></a>方法重写的面试题</h1><ul><li>Override和Overload的区别?Overload能改变返回值类型吗? <ul><li>overload可以改变返回值类型,只看参数列表。</li><li>方法重写（Override）：子类中出现了和父类中方法声明一模一样的方法。与返回值类型有关,返回值是一致(或者是子父类)的。</li><li>方法重载（Overload）：本类中出现的方法名一样，参数列表不同的方法。与返回值类型无关。</li><li>子类对象调用方法的时候： <ul><li>先找子类本身，再找父类。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法（Constructor）</title>
      <link href="/posts/43b10daae19d/"/>
      <url>/posts/43b10daae19d/</url>
      
        <content type="html"><![CDATA[<h1 id="构造方法Constructor概述和格式"><a href="#构造方法Constructor概述和格式" class="headerlink" title="构造方法Constructor概述和格式"></a>构造方法Constructor概述和格式</h1><ul><li>A:构造方法概述和作用 <ul><li>给对象的数据(属性)进行初始化</li></ul></li><li>B:构造方法格式特点 <ul><li>a:方法名与类名相同(大小也要与类名一致)</li><li>b:没有返回值类型，连void都没有</li><li>c:没有具体的返回值return;</li></ul></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;        <br>name = <span class="hljs-string">&quot;疯狂的小托马斯&quot;</span>;        <br>age = <span class="hljs-number">23</span>;    <br>&#125;<br><br><span class="hljs-comment">//调用构造方法</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><h1 id="重载构造方法"><a href="#重载构造方法" class="headerlink" title="重载构造方法"></a>重载构造方法</h1><ul><li>A:案例演示 <ul><li>构造方法的重载</li><li>重载:方法名相同,与返回值类型无关(构造方法没有返回值),只看参数列表</li></ul></li><li>B:构造方法注意事项 <ul><li>a:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。</li><li>b:如果我们重载构造方法，系统将不再提供默认的无参构造方法。 <ul><li>注意：这个时候，如果我们还想使用无参构造方法，就必须自己给出。建议永远自己给出无参构造方法。</li></ul></li></ul></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;    <br><span class="hljs-built_in">this</span>.name = name;   <br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/posts/760f8596ce5d/"/>
      <url>/posts/760f8596ce5d/</url>
      
        <content type="html"><![CDATA[<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>让类与类之间产生关系,子父类关系。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    String color;<br>    <span class="hljs-type">int</span> leg;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;eat&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="继承的好处和弊端"><a href="#继承的好处和弊端" class="headerlink" title="继承的好处和弊端"></a>继承的好处和弊端</h1><ul><li>A:继承的好处 <ul><li>a:提高了代码的复用性</li><li>b:提高了代码的维护性</li><li>c:让类与类之间产生了关系，是多态的前提</li></ul></li><li>B:继承的弊端 <ul><li>类的耦合性增强了。</li><li>开发的原则：高内聚，低耦合。</li><li>耦合：类与类的关系</li><li>内聚：就是自己完成某件事情的能力</li></ul></li></ul><h1 id="Java中类的继承特点"><a href="#Java中类的继承特点" class="headerlink" title="Java中类的继承特点"></a>Java中类的继承特点</h1><ul><li>A:Java中类的继承特点 <ul><li>a:Java只支持单继承，不支持多继承。(一个儿子只能有一个爹) <ul><li>有些语言是支持多继承，格式：extends 类1,类2,…</li></ul></li><li>b:Java支持多层继承(继承体系)</li></ul></li><li>B:案例演示 <ul><li>Java中类的继承特点 <ul><li>如果想用这个体系的所有功能用最底层的类创建对象</li><li>如果想看这个体系的共性功能,看最顶层的类。</li></ul></li></ul></li></ul><h1 id="继承的注意事项和什么时候使用继承"><a href="#继承的注意事项和什么时候使用继承" class="headerlink" title="继承的注意事项和什么时候使用继承"></a>继承的注意事项和什么时候使用继承</h1><h2 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h2><ul><li>子类只能继承父类所有非私有的成员(成员方法和成员变量)</li><li>子类不能继承父类的构造方法，但是可以通过super(马上讲)关键字去访问父类构造方法。</li><li>不要为了部分功能而去继承 <ul><li>项目经理 姓名 工号 工资 奖金</li><li>程序员 姓名 工号 工资</li></ul></li></ul><h2 id="什么时候使用继承"><a href="#什么时候使用继承" class="headerlink" title="什么时候使用继承"></a>什么时候使用继承</h2><ul><li>继承其实体现的是一种关系：”is a”。<br>   Person<br>   Student<br>   Teacher<br>   水果<br>   苹果<br>   香蕉<br>   橘子<br>  采用假设法。<br>  如果有两个类A,B。只有他们符合A是B的一种，或者B是A的一种，就可以考虑使用继承。</li></ul><h1 id="this和super的区别和应用"><a href="#this和super的区别和应用" class="headerlink" title="this和super的区别和应用"></a>this和super的区别和应用</h1><ul><li>A:this和super都代表什么 <ul><li>this:代表当前对象的引用,谁来调用我,我就代表谁</li><li>super:代表当前对象父类的引用</li></ul></li><li>B:this和super的使用区别 <ul><li>a:调用成员变量 <ul><li>this.成员变量 调用本类的成员变量,也可以调用父类的成员变量</li><li>super.成员变量 调用父类的成员变量</li></ul></li><li>b:调用构造方法 <ul><li>this(…) 调用本类的构造方法</li><li>super(…) 调用父类的构造方法</li></ul></li><li>c:调用成员方法 <ul><li>this.成员方法 调用本类的成员方法,也可以调用父类的方法</li><li>super.成员方法 调用父类的成员方法</li></ul></li></ul></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.num1);<span class="hljs-comment">//就近原则 num1 = 30</span><br>        System.out.println(<span class="hljs-built_in">super</span>.num1);<span class="hljs-comment">//调用父类</span><br>        System.out.println(<span class="hljs-built_in">this</span>.num2);<span class="hljs-comment">//num2 = 20</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="继承中构造方法的关系"><a href="#继承中构造方法的关系" class="headerlink" title="继承中构造方法的关系"></a>继承中构造方法的关系</h1><ul><li>子类中所有的构造方法默认都会访问父类中空参数的构造方法<ul><li>因为子类会继承父类中的数据，可能还会使用父类的数据。</li><li>所以，子类初始化之前，一定要先完成父类数据的初始化。</li><li>其实：<ul><li>每一个构造方法的第一条语句默认都是：super() Object类最顶层的父类。</li></ul></li></ul></li></ul><h1 id="继承中构造方法的注意事项"><a href="#继承中构造方法的注意事项" class="headerlink" title="继承中构造方法的注意事项"></a>继承中构造方法的注意事项</h1><ul><li>父类没有无参构造方法,子类怎么办? <ul><li>super解决</li><li>this解决</li></ul></li><li>注意事项<ul><li>super(…)或者this(….)必须出现在构造方法的第一条语句上</li></ul></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo6_Extends</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s1.getName() + <span class="hljs-string">&quot;...&quot;</span> + s1.getAge());<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&quot;’xiaoming˝&quot;</span>, <span class="hljs-number">23</span>);<br>        System.out.println(s2.getName() + <span class="hljs-string">&quot;...&quot;</span> + s2.getAge());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father 空参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;Father 有参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">25</span>);  <span class="hljs-comment">//super(&quot;小明&quot;,24);</span><br>        System.out.println(<span class="hljs-string">&quot;Son 空参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        System.out.println(<span class="hljs-string">&quot;Son 有参构造&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说明书的制作过程</title>
      <link href="/posts/80e49b175985/"/>
      <url>/posts/80e49b175985/</url>
      
        <content type="html"><![CDATA[<ul><li><p>A:对工具类加入文档注释</p></li><li><p>B:通过javadoc命令生成说明书 </p><ul><li>@author(提取作者内容)</li><li>@version(提取版本内容)</li><li>javadoc -d 指定的文件目录 -author -version ArrayTool.java</li><li>@param 参数名称&#x2F;&#x2F;形式参数的变量名称@return 函数运行完返回的数据</li></ul></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是交换两个数据的类 <span class="hljs-doctag">@author</span> HERo <span class="hljs-doctag">@version</span> v1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Change</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * main函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;;<br>        change(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr0:&quot;</span> + arr[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;\tarr1:&quot;</span> + arr[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换2个数的方法     <span class="hljs-doctag">@param</span> a num1     <span class="hljs-doctag">@param</span> b num2</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        a = <span class="hljs-number">111</span>;<br>        b = <span class="hljs-number">222</span>;<br>        System.out.println(<span class="hljs-string">&quot;a:&quot;</span> + a + <span class="hljs-string">&quot;b:&quot;</span> + b);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是一个利用内存地址交换数据的方法     <span class="hljs-doctag">@param</span> a 接受一个int类型的数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span> &#123;<br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">111</span>;<br>        a[<span class="hljs-number">1</span>] = <span class="hljs-number">222</span>;<br>        System.out.println(<span class="hljs-string">&quot;a0:&quot;</span> + a[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;\tb0:&quot;</span> + a[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果出现以下问题：</p><p><img src="/posts/80e49b175985/-1477618685368.png" alt="-1477618685368.png"></p><p>在此类加上public：</p><p><img src="/posts/80e49b175985/-1477618711031.png" alt="-1477618711031.png"></p><p>生成的结果：</p><p><img src="/posts/80e49b175985/-1477618887578.png" alt="-1477618887578.png"></p><p><img src="/posts/80e49b175985/-1477618918671.png" alt="-1477618918671.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.5. 剖析</title>
      <link href="/posts/f5ef3e713f2a/"/>
      <url>/posts/f5ef3e713f2a/</url>
      
        <content type="html"><![CDATA[<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>过早的优化是万恶之源！<br>自动化的剖析技术是基于程序执行期间一些抽样数据，然后推断后面的执行状态；最终产生一个运行时间的统计数据文件。</p><p>Go语言支持多种类型的剖析性能分析，内建的<code>go test</code>工具对几种分析方式都提供了支持：</p><ul><li><code>CPU分析</code>,CPU分析文件标识了函数执行时所需要的CPU时间。<br>  当前运行的系统线程在每隔几毫秒都会遇到操作系统的中断事件，每次中断时都会记录一个分析文件然后恢复正常的运行。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> test -cpuprofile=cpu.out <br></code></pre></td></tr></table></figure></li><li><code>堆分析</code>则记录了程序的内存使用情况。<br>  每个内存分配操作都会触发内部平均内存分配例程，每个512KB的内存申请都会触发一个事件。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> test -blockprofile=block.out<br></code></pre></td></tr></table></figure></li><li><code>阻塞分析</code>则记录了goroutine最大的阻塞操作，例如系统调用、管道发送和接收，还有获取锁等。<br>  分析库会记录每个goroutine被阻塞时的相关操作。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> test -memprofile=mem.out<br></code></pre></td></tr></table></figure></li></ul><p>在测试环境下只需要一个标志参数就可以生成各种分析文件。当一次使用多个标志参数时需要当心，因为分析操作本身也可能会影像程序的运行。</p><h1 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h1><p>一旦我们已经收集到了用于分析的采样数据，我们就可以使用pprof来分析这些数据。<br>为了提高分析效率和减少空间，分析日志本身并不包含函数的名字；它只包含函数对应的地址。<br>启用分析的时候会将测试程序保存为foo.test文件，其中foo部分对于测试包的名字。</p><p>下面的命令演示了如何生成一个CPU分析文件。我们选择net&#x2F;http包的一个基准测试为例。通常是基于一个已经确定了是关键代码的部分进行基准测试。基准测试会默认包含单元测试，这里我们用-run&#x3D;NONE参数禁止单元测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -run=NONE -bench=ClientServerParallelTLS64 -cpuprofile=cpu.log net/http</span><br>goos: darwin<br>goarch: amd64<br>pkg: net/http<br>cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz<br>BenchmarkClientServerParallelTLS64-8    2024/02/09 00:32:21 http: TLS handshake error from 127.0.0.1:60038: read tcp 127.0.0.1:60017-&gt;127.0.0.1:60038: use of closed network connection<br>...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">$ go tool pprof -text -nodecount=10 ./http.test cpu.log</span><br>File: http.test<br>Type: cpu<br>Time: Feb 9, 2024 at 12:32am (CST)<br>Duration: 1.81s, Total samples = 8190ms (451.38%)<br>Showing nodes accounting for 7120ms, 86.94% of 8190ms total<br>Dropped 206 nodes (cum &lt;= 40.95ms)<br>Showing top 10 nodes out of 211<br>      flat  flat%   sum%        cum   cum%<br>    3610ms 44.08% 44.08%     3610ms 44.08%  syscall.syscall<br>     900ms 10.99% 55.07%      900ms 10.99%  runtime.madvise<br>     750ms  9.16% 64.22%      750ms  9.16%  math/big.addMulVVW<br>     660ms  8.06% 72.28%      660ms  8.06%  runtime.memclrNoHeapPointers<br>     450ms  5.49% 77.78%     1440ms 17.58%  math/big.nat.montgomery<br>     200ms  2.44% 80.22%      210ms  2.56%  syscall.rawSyscall<br>     170ms  2.08% 82.30%      170ms  2.08%  runtime.kevent<br>     150ms  1.83% 84.13%      150ms  1.83%  runtime.memmove<br>     130ms  1.59% 85.71%      130ms  1.59%  syscall.syscall6<br>     100ms  1.22% 86.94%      100ms  1.22%  runtime.pthread_kill<br></code></pre></td></tr></table></figure><p>参数<code>-text</code>用于指定输出格式，在这里每行是一个函数，根据使用CPU的时间长短来排序。<br>其中<code>-nodecount=10</code>标志参数限制了只输出前10行的结果。<br>可以看出，HTTPS基准测试中<code>syscall.syscall</code>函数占用了将近一半的CPU资源。</p><p>可能需要使用pprof的图形显示功能。这个需要安装GraphViz工具，可以从 <a href="http://www.graphviz.org/">http://www.graphviz.org</a> 下载。参数<code>-web</code>用于生成一个有向图文件，包含了CPU的使用和最热点的函数等信息。</p><p>阅读Go官方博客的“Proﬁling Go Programs”一文，以了解更多。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.4. 基准测试</title>
      <link href="/posts/a1b71dd23f51/"/>
      <url>/posts/a1b71dd23f51/</url>
      
        <content type="html"><![CDATA[<p>基准测试是测量一个程序在固定工作负载下的性能。<br>以<code>Benchmark</code>为前缀名，并且带有一个<code>*testing.B</code>类型的参数；<code>*testing.B</code>参数除了提供和<code>*testing.T</code>类似的方法，还有额外一些和性能测量相关的方法。<br>它还提供了一个整数N，用于指定操作执行的循环次数。</p><p>下面是<code>IsPalindrome</code>的基准测试函数，将循环调用多次：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIsPalindrome</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>IsPalindrome(<span class="hljs-string">&quot;A man, a plan, a canal: Panama&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>和普通测试不同的是，默认情况下不运行任何基准测试。<br>我们需要通过<code>-bench</code>命令行标志参数手工指定要运行的基准测试函数。<br>该参数是一个正则表达式，用于匹配要执行的基准测试函数的名字，默认值是空的。其中“.”模式将可以匹配所有基准测试函数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -bench=.</span><br>goos: darwin<br>goarch: amd64<br>pkg: go-learn-gopl/ch/ch11/word2<br>cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz<br>BenchmarkIsPalindrome-8          4016119               299.6 ns/op<br>PASS<br>ok      go-learn-gopl/ch/ch11/word2     1.918s<br></code></pre></td></tr></table></figure><p>可以看出，首先输出<code>goos</code>、<code>goarch</code>、<code>pkg</code>和<code>cpu</code>的信息，接着是基准测试函数的测试结果。<br><code>BenchmarkIsPalindrome-8</code>，其中<code>BenchmarkIsPalindrome</code>是基准测试函数名，<code>-8</code>指的是cpu核心数为8，数字<code>4016119</code>为运行<code>IsPalindrome</code>了多少次，每次运行的平均耗时为<code>299.6 ns/op</code>。</p><p>真正运行基准测试前先尝试用较小的N运行测试来估算基准测试函数所需要的时间，然后推断一个较大的时间保证稳定的测量结果。</p><p>循环在基准测试函数内实现，而不是放在基准测试框架内实现，这样可以让每个基准测试函数有机会在循环启动前执行初始化代码，这样并不会显著影响每次迭代的平均运行时间。<br>如果还是担心初始化代码部分对测量时间带来干扰，那么可以通过testing.B参数提供的方法来临时关闭或重置计时器，不过这些一般很少会用到。</p><h1 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h1><p>有了基准测试，就可以尝试优化代码以降低耗能。<br>原代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> letters []<span class="hljs-type">rune</span><br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> unicode.IsLetter(r) &#123;<br>letters = <span class="hljs-built_in">append</span>(letters, unicode.ToLower(r))<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> letters &#123;<br><span class="hljs-keyword">if</span> letters[i] != letters[<span class="hljs-built_in">len</span>(letters)<span class="hljs-number">-1</span>-i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>显然，可以将循环折半，避免重复的比较。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> letters []<span class="hljs-type">rune</span><br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> unicode.IsLetter(r) &#123;<br>letters = <span class="hljs-built_in">append</span>(letters, unicode.ToLower(r))<br>&#125;<br>&#125;<br><br>n := <span class="hljs-built_in">len</span>(letters) / <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">if</span> letters[i] != letters[<span class="hljs-built_in">len</span>(letters)<span class="hljs-number">-1</span>-i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再次进行基准测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> test -bench=.<br>goos: darwin<br>goarch: amd64<br>pkg: <span class="hljs-keyword">go</span>-learn-gopl/ch/ch11/word2<br>cpu: Intel(R) Core(TM) i7<span class="hljs-number">-7820</span>HQ CPU @ <span class="hljs-number">2.90</span>GHz<br>BenchmarkIsPalindrome<span class="hljs-number">-8</span>          <span class="hljs-number">4199281</span>               <span class="hljs-number">287.6</span> ns/op<br>PASS<br>ok      <span class="hljs-keyword">go</span>-learn-gopl/ch/ch11/word2     <span class="hljs-number">1.629</span>s<br></code></pre></td></tr></table></figure><p>性能提升了4%。<br>还有一个可以改进的地方，定额初始化数组letters，避免在append时过多分配内存。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>letters := <span class="hljs-built_in">make</span>([]<span class="hljs-type">rune</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s))<br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> unicode.IsLetter(r) &#123;<br>letters = <span class="hljs-built_in">append</span>(letters, unicode.ToLower(r))<br>&#125;<br>&#125;<br><br>n := <span class="hljs-built_in">len</span>(letters) / <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">if</span> letters[i] != letters[<span class="hljs-built_in">len</span>(letters)<span class="hljs-number">-1</span>-i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>基准测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -bench=.</span><br>goos: darwin<br>goarch: amd64<br>pkg: go-learn-gopl/ch/ch11/word2<br>cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz<br>BenchmarkIsPalindrome-8          8410392               139.2 ns/op<br>PASS<br>ok      go-learn-gopl/ch/ch11/word2     1.843s<br></code></pre></td></tr></table></figure><p>显然，性能大大提高，高达54%。</p><p><code>-benchmem</code>命令行标志参数将在报告中包含内存的分配数据统计。<br>比较初始代码和优化后的内存分配情况：<br>初始：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -bench=. -benchmem</span><br>goos: darwin<br>goarch: amd64<br>pkg: go-learn-gopl/ch/ch11/word2<br>cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz<br>BenchmarkIsPalindrome-8          3963399               302.5 ns/op           248 B/op          5 allocs/op<br>PASS<br>ok      go-learn-gopl/ch/ch11/word2     2.072s<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -bench=. -benchmem</span><br>goos: darwin<br>goarch: amd64<br>pkg: go-learn-gopl/ch/ch11/word2<br>cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz<br>BenchmarkIsPalindrome-8          8484489               140.1 ns/op           128 B/op          1 allocs/op<br>PASS<br>ok      go-learn-gopl/ch/ch11/word2     1.497s<br></code></pre></td></tr></table></figure><p>内存占用较初始代码，减少了近80%。</p><p>通过函数参数来指定输入的大小，但是参数变量对于每个具体的基准测试都是固定的。<br>要避免直接修改b.N来控制输入的大小。除非你将它作为一个固定大小的迭代计算输入，否则基准测试的结果将毫无意义。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 11.6:</strong> 为2.6.2节的练习2.4和练习2.5的<code>PopCount</code>函数编写基准测试。看看基于表格算法在不同情况下对提升性能会有多大帮助。<br>解：<br>popcount.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCount</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">0</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">1</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">2</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">3</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">4</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">5</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">6</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">7</span>*<span class="hljs-number">8</span>)])<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByLoop</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); i &lt; <span class="hljs-number">8</span>; i++ &#123;<br>n += <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;i*<span class="hljs-number">8</span>)])<br>&#125;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByBitShift</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> c <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); i &lt; <span class="hljs-number">64</span>; i++ &#123;<br><span class="hljs-keyword">if</span> (x&gt;&gt;i)&amp;<span class="hljs-number">1</span> != <span class="hljs-number">0</span> &#123;<br>c++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByBitClear</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> c <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>x &amp;= x - <span class="hljs-number">1</span><br>c++<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountSSS</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>x = x - ((x &gt;&gt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x5555555555555555</span>)<br>x = (x &amp; <span class="hljs-number">0x3333333333333333</span>) + ((x &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3333333333333333</span>)<br>x = (x + (x &gt;&gt; <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0x0f0f0f0f0f0f0f0f</span><br>x = x + (x &gt;&gt; <span class="hljs-number">8</span>)<br>x = x + (x &gt;&gt; <span class="hljs-number">16</span>)<br>x = x + (x &gt;&gt; <span class="hljs-number">32</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(x &amp; <span class="hljs-number">0x7f</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>popcount_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> x <span class="hljs-type">uint64</span> = <span class="hljs-number">0x123456789ABCDEF</span><br><br><span class="hljs-comment">// BenchmarkPopCount-8             1000000000         0.2781 ns/op</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCount</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCount(x)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// BenchmarkPopCountByLoop-8       300207886         3.695 ns/op</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByLoop</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByLoop(x)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// BenchmarkPopCountByBitShift-8   58636833        19.13 ns/op</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByBitShift</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByBitShift(x)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// BenchmarkPopCountByBitClear-8           62708774                19.09 ns/op</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByBitClear</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByBitClear(x)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// BenchmarkPopCountSSS-8          1000000000         0.2791 ns/op</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountSSS</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountSSS(x)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 11.7:</strong> 为<code>*IntSet</code>（§6.5）的<code>Add</code>、<code>UnionWith</code>和其他方法编写基准测试，使用大量随机输入。你可以让这些方法跑多快？选择字的大小对于性能的影响如何？IntSet和基于内建map的实现相比有多快？<br>解：<br>intset.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> uintSize = <span class="hljs-number">32</span> &gt;&gt; (^<span class="hljs-type">uint</span>(<span class="hljs-number">0</span>) &gt;&gt; <span class="hljs-number">63</span>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/uintSize, x%uintSize<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/uintSize, x%uintSize<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> AddAll(ints ...<span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> _, x := <span class="hljs-keyword">range</span> ints &#123;<br>s.Add(x)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Remove(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/uintSize, x%uintSize<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) &gt; word &#123;<br>s.words[word] &amp;^= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Clear() &#123;<br>s.words = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Elems() []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> elems []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">for</span> mark := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); mark &lt; uintSize; mark++ &#123;<br><span class="hljs-keyword">if</span> tword&amp;(<span class="hljs-number">1</span>&lt;&lt;mark) != <span class="hljs-number">0</span> &#123;<br>elems = <span class="hljs-built_in">append</span>(elems, <span class="hljs-type">int</span>(<span class="hljs-type">uint</span>(i)*uintSize+mark))<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> elems<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; uintSize; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;j) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, uintSize*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> c <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); j &lt; uintSize; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;j) != <span class="hljs-number">0</span> &#123;<br>c++<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Copy() *IntSet &#123;<br>nIntSet := &amp;IntSet&#123;&#125;<br>nIntSet.words = <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint64</span>, <span class="hljs-built_in">len</span>(s.words))<br><span class="hljs-built_in">copy</span>(nIntSet.words, s.words)<br><span class="hljs-keyword">return</span> nIntSet<br>&#125;<br><br><span class="hljs-comment">// UnionWith 并集</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// IntersectWith 交集</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> IntersectWith(t *IntSet) &#123;<br>minLen := <span class="hljs-built_in">len</span>(s.words)<br><span class="hljs-keyword">if</span> minLen &gt; <span class="hljs-built_in">len</span>(t.words) &#123;<br>minLen = <span class="hljs-built_in">len</span>(t.words)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; minLen; i++ &#123;<br>s.words[i] &amp;= t.words[i]<br>&#125;<br><br>l := <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := minLen - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[<span class="hljs-number">0</span>:l]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// DifferenceWith 差集 s有t没有 按t清除</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> DifferenceWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(t.words) &#123;<br>s.words[i] &amp;^= t.words[i]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> l <span class="hljs-type">int</span> = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words) - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// SymmetricDifference 并差集 即s有t没有和t有s没有的集合</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> SymmetricDifference(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] ^= t.words[i]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words) - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i++ &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Equal(t *IntSet) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) != <span class="hljs-built_in">len</span>(t.words) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s.words); i++ &#123;<br><span class="hljs-keyword">if</span> s.words[i] != t.words[i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>intset_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>s1, s2 []<span class="hljs-type">int</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>n     = <span class="hljs-number">10000</span><br>scale = <span class="hljs-number">1000</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initRandomSet</span><span class="hljs-params">()</span></span> &#123;<br>seed := time.Now().UTC().UnixNano()<br>rng := rand.New(rand.NewSource(seed))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>s1 = <span class="hljs-built_in">append</span>(s1, rng.Intn(n*scale))<br>s2 = <span class="hljs-built_in">append</span>(s2, rng.Intn(n*scale))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntSet_Add</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>initRandomSet()<br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>s := &amp;IntSet&#123;&#125;<br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> s1 &#123;<br>s.Add(k)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntSet_Has</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>initRandomSet()<br>s := &amp;IntSet&#123;&#125;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s1 &#123;<br>s.Add(k)<br>&#125;<br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s1 &#123;<br>s.Has(k)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntSet_UnionWith</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>initRandomSet()<br>is1 := &amp;IntSet&#123;&#125;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s1 &#123;<br>is1.Add(k)<br>&#125;<br>is2 := &amp;IntSet&#123;&#125;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s2 &#123;<br>is2.Add(k)<br>&#125;<br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>is1.UnionWith(is2)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMap_Add</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>initRandomSet()<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)<br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s1 &#123;<br>m[k] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMap_Has</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>initRandomSet()<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)<br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s1 &#123;<br>_ = m[k]<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMap_UnionWith</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>initRandomSet()<br>m1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s1 &#123;<br>m1[k] = <span class="hljs-literal">true</span><br>&#125;<br>m2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> s2 &#123;<br>m2[k] = <span class="hljs-literal">true</span><br>&#125;<br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> m2 &#123;<br>m1[k] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">$ go test -bench=. -benchmem</span><br><span class="hljs-comment">goos: darwin</span><br><span class="hljs-comment">goarch: amd64</span><br><span class="hljs-comment">pkg: go-learn-gopl/ex/ex11/ex11.7</span><br><span class="hljs-comment">cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz</span><br><span class="hljs-comment">BenchmarkIntSet_Add-8              14942            102885 ns/op           60024 B/op         14 allocs/op</span><br><span class="hljs-comment">BenchmarkIntSet_Has-8              15846             87719 ns/op               0 B/op          0 allocs/op</span><br><span class="hljs-comment">BenchmarkIntSet_UnionWith-8         1641            665692 ns/op               0 B/op          0 allocs/op</span><br><span class="hljs-comment">BenchmarkMap_Add-8                   334           3787969 ns/op           20288 B/op         14 allocs/op</span><br><span class="hljs-comment">BenchmarkMap_Has-8                  3279            339227 ns/op               0 B/op          0 allocs/op</span><br><span class="hljs-comment">BenchmarkMap_UnionWith-8             109          11360623 ns/op           66691 B/op         69 allocs/op</span><br><span class="hljs-comment">PASS</span><br><span class="hljs-comment">ok      go-learn-gopl/ex/ex11/ex11.7    10.775s</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.3. 测试覆盖率</title>
      <link href="/posts/79be1aaa69b3/"/>
      <url>/posts/79be1aaa69b3/</url>
      
        <content type="html"><![CDATA[<p>由测试驱动触发运行到的被测试函数的代码数目称为测试的覆盖率。测试覆盖率并不能量化——甚至连最简单的动态程序也难以精确测量——但是可以启发并帮助我们编写的有效的测试代码。</p><p>语句的覆盖率是指在测试中至少被运行一次的代码占总代码数的比例。在本节中，我们使用go test命令中集成的测试覆盖率工具，来度量下面代码的测试覆盖率，帮助我们识别测试和我们期望间的差距。</p><p>下面的代码是一个表格驱动的测试，用于测试第七章的表达式求值程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCoverage</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> tests = []<span class="hljs-keyword">struct</span> &#123;<br>input <span class="hljs-type">string</span><br>env   Env<br>want  <span class="hljs-type">string</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;x % 2&quot;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;unexpected &#x27;%&#x27;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;math.Pi&quot;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;unexpected &#x27;.&#x27;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;!true&quot;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;unexpected &#x27;!&#x27;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;log(10)&quot;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">`unknown function &quot;log&quot;`</span>&#125;,<br>&#123;<span class="hljs-string">&quot;sqrt(i, 2)&quot;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;call to sqrt has 2 args, want 1&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;sqrt(A / pi)&quot;</span>, Env&#123;<span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-number">87616</span>, <span class="hljs-string">&quot;pi&quot;</span>: math.Pi&#125;, <span class="hljs-string">&quot;167&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;pow(x, 3) + pow(y, 3)&quot;</span>, Env&#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">10</span>&#125;, <span class="hljs-string">&quot;1729&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;5 / 9 * (F - 32)&quot;</span>, Env&#123;<span class="hljs-string">&quot;F&quot;</span>: <span class="hljs-number">-40</span>&#125;, <span class="hljs-string">&quot;-40&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;-x * -x&quot;</span>, Env&#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-string">&quot;4&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> _, test := <span class="hljs-keyword">range</span> tests &#123;<br>expr, err := Parse(test.input)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>err = expr.Check(<span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>&#123;&#125;)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err.Error() != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%s: got %q, want %q&quot;</span>, test.input, err, test.want)<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>got := fmt.Sprintf(<span class="hljs-string">&quot;%.6g&quot;</span>, expr.Eval(test.env))<br><span class="hljs-keyword">if</span> got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%s: %v =&gt; %s, want %s&quot;</span>, test.input, test.env, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先确保测试通过:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -v -run=coverage</span><br>testing: warning: no tests to run<br>PASS<br>ok      go-learn-gopl/ch/ch11/eval      0.433s<br></code></pre></td></tr></table></figure><p>查看cover覆盖率工具的使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go tool cover</span><br>Usage of &#x27;go tool cover&#x27;:<br>Given a coverage profile produced by &#x27;go test&#x27;:<br>        go test -coverprofile=c.out<br><br>Open a web browser displaying annotated source code:<br>        go tool cover -html=c.out<br><br>...<br></code></pre></td></tr></table></figure><p><code>go tool</code>命令运行Go工具链的底层可执行程序。这些底层可执行程序放在<code>$GOROOT/pkg/tool/$&#123;GOOS&#125;_$&#123;GOARCH&#125;</code>目录。<br>可以用<code>-coverprofile</code>标志参数重新运行测试:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -run=Coverage -coverprofile=c.out</span><br>PASS<br>coverage: 69.3% of statements<br>ok      go-learn-gopl/ch/ch11/eval      0.360s<br></code></pre></td></tr></table></figure><p>该命令还会生成一个c.out的文件，存储代码块的是否调用的布尔值。<br>这个标志参数通过在测试代码中插入生成钩子来统计覆盖率数据。也就是说，在运行每个测试前，它会修改要测试代码的副本，在每个词法块都会设置一个布尔标志变量。当被修改后的被测试代码运行退出时，将统计日志数据写入c.out文件，并打印一部分执行的语句的一个总结。（如果你需要的是摘要，使用<code>go test -cover</code>。）<br>如果使用了<code>-covermode=count</code>标志参数，那么将在每个代码块插入一个计数器而不是布尔标志量。在统计结果中记录了每个块的执行次数，这可以用于衡量哪些是被频繁执行的热点代码。</p><p>还可以生成html统计数据的网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go tool cover -html=c.out</span><br></code></pre></td></tr></table></figure><p>网页中绿色代码块指的是已被覆盖，红色指的是未覆盖的代码块。<br><img src="/posts/79be1aaa69b3/1707221584554.png" alt="1707221584554"><br>所以，尽可能增加测试用例以覆盖代码块。</p><p>实现100%的测试覆盖率听起来很美，但是在具体实践中通常是不可行的，也不是值得推荐的做法。因为那只能说明代码被执行过而已，并不意味着代码就是没有BUG的；</p><p>测试覆盖率工具可以帮助我们快速识别测试薄弱的地方，但是设计好的测试用例和编写应用代码一样需要严密的思考。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.2. 测试函数</title>
      <link href="/posts/0bc5b76177c6/"/>
      <url>/posts/0bc5b76177c6/</url>
      
        <content type="html"><![CDATA[<p>每个测试函数必须导入test包。<br>测试函数格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestName</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试函数必须以Test为前缀，可选的后缀名必须以大写开头。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">(t *testing.T)</span></span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSin</span><span class="hljs-params">(t *testing.T)</span></span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCos</span><span class="hljs-params">(t *testing.T)</span></span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>其中t参数用于报告错误或附加的测试信息。</p><p>下面定义了一个函数IsPalindrome，用于检测字符串从前往后和从后往前是否一样，即是否回文。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package word provides utilities for word games.</span><br><span class="hljs-keyword">package</span> word<br><br><span class="hljs-comment">// IsPalindrome reports whether s reads the same forward and backward.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> s[i] != s[<span class="hljs-built_in">len</span>(s)<span class="hljs-number">-1</span>-i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着就是word的测试文件，word_test.go。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> word<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">if</span> !IsPalindrome(<span class="hljs-string">&quot;detartrated&quot;</span>) &#123;<br>t.Error(<span class="hljs-string">`IsPalindrome(&quot;detartrated&quot;&quot;)=false`</span>)<br>&#125;<br><span class="hljs-keyword">if</span> !IsPalindrome(<span class="hljs-string">&quot;kayak&quot;</span>) &#123;<br>t.Error(<span class="hljs-string">`IsPalindrome(&quot;kayak&quot;&quot;)=false`</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestNonPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">if</span> IsPalindrome(<span class="hljs-string">&quot;Palindrome&quot;</span>) &#123;<br>t.Error(<span class="hljs-string">`IsPalindrome(&quot;Palindrome&quot;&quot;)=true`</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TestPalindrome</code>是测试字符串是回文，所以不是回文时报错。<br><code>TestNonPalindrome</code>是测试字符串不是回文，所以是回文时报错。<br>使用<code>go test</code>命令进行测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/go-learn-gopl/ch/ch11/word1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span></span><br>PASS<br>ok      go-learn-gopl/ch/ch11/word1     0.551s<br></code></pre></td></tr></table></figure><p>通过测试！</p><p>但当遇上这样的字符串呢？“été”、“A man, a plan, a canal: Panama.”<br>添加多2个测试函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFrenchPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">if</span> !IsPalindrome(<span class="hljs-string">&quot;été&quot;</span>) &#123;<br>t.Error(<span class="hljs-string">`IsFrenchPalindrome(&quot;été&quot;)=false`</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCanalPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>input := <span class="hljs-string">&quot;A man, a plan, a canal: Panama.&quot;</span><br><span class="hljs-keyword">if</span> !IsPalindrome(input) &#123;<br>t.Errorf(<span class="hljs-string">&quot;IsCanalPalindrome(%q)=false&quot;</span>, input)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试用例返回了错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span></span><br>--- FAIL: TestFrenchPalindrome (0.00s)<br>    word_test.go:22: IsFrenchPalindrome(&quot;été&quot;)=false<br>--- FAIL: TestCanalPalindrome (0.00s)<br>    word_test.go:29: IsCanalPalindrome(&quot;A man, a plan, a canal: Panama.&quot;)=false<br>FAIL<br>exit status 1<br>FAIL    go-learn-gopl/ch/ch11/word1     0.699s<br></code></pre></td></tr></table></figure><p>参数<code>-v</code>可以用于打印每个测试函数的名字和运行时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -v</span><br>=== RUN   TestPalindrome<br>--- PASS: TestPalindrome (0.00s)<br>=== RUN   TestNonPalindrome<br>--- PASS: TestNonPalindrome (0.00s)<br>=== RUN   TestFrenchPalindrome<br>    word_test.go:22: IsFrenchPalindrome(&quot;été&quot;)=false<br>--- FAIL: TestFrenchPalindrome (0.00s)<br>=== RUN   TestCanalPalindrome<br>    word_test.go:29: IsCanalPalindrome(&quot;A man, a plan, a canal: Panama.&quot;)=false<br>--- FAIL: TestCanalPalindrome (0.00s)<br>FAIL<br>exit status 1<br>FAIL    go-learn-gopl/ch/ch11/word1     3.047s<br></code></pre></td></tr></table></figure><p>参数<code>-run</code>对应一个正则表达式，只有测试函数名和正则表达式匹配的测试函数可以被运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span> -run=<span class="hljs-string">&quot;French|Canal&quot;</span></span><br>--- FAIL: TestFrenchPalindrome (0.00s)<br>    word_test.go:22: IsFrenchPalindrome(&quot;été&quot;)=false<br>--- FAIL: TestCanalPalindrome (0.00s)<br>    word_test.go:29: IsCanalPalindrome(&quot;A man, a plan, a canal: Panama.&quot;)=false<br>FAIL<br>exit status 1<br>FAIL    go-learn-gopl/ch/ch11/word1     0.251s<br></code></pre></td></tr></table></figure><p>一旦我们修复所有bug，应该以不带任何参数的go test命令进行测试。</p><p>显然，第一个bug的原因为使用的byte而不是rune，导致非ASCII编码的字符无法比较。<br>第二个bug是因为没有忽略空格和大小写。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package word provides utilities for word games.</span><br><span class="hljs-keyword">package</span> word<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;unicode&quot;</span><br><br><span class="hljs-comment">// IsPalindrome reports whether s reads same forward and backward.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> letters []<span class="hljs-type">rune</span><br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> unicode.IsLetter(r) &#123;<br>letters = <span class="hljs-built_in">append</span>(letters, unicode.ToLower(r))<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> letters &#123;<br><span class="hljs-keyword">if</span> letters[i] != letters[<span class="hljs-built_in">len</span>(letters)<span class="hljs-number">-1</span>-i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="举例测试"><a href="#举例测试" class="headerlink" title="举例测试"></a>举例测试</h1><p>word_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> word<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestIsPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> tests = []<span class="hljs-keyword">struct</span> &#123;<br>input <span class="hljs-type">string</span><br>want  <span class="hljs-type">bool</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-literal">false</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kayak&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;detartrated&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;A man, a plan, a canal: Panama.&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;Evil I did dwell; lewd did I live.&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;Able was I ere I saw Elba&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;été&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;Et se resservir, ivresse reste.&quot;</span>, <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-string">&quot;palindrome&quot;</span>, <span class="hljs-literal">false</span>&#125;, <span class="hljs-comment">// non-palindrome</span><br>&#123;<span class="hljs-string">&quot;desserts&quot;</span>, <span class="hljs-literal">false</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, test := <span class="hljs-keyword">range</span> tests &#123;<br><span class="hljs-keyword">if</span> got := IsPalindrome(test.input); got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;IsPalindrome(%q)=%v&quot;</span>, test.input, got)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试全部通过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">test</span></span><br>PASS<br>ok      go-learn-gopl/ch/ch11/word2     0.123s<br></code></pre></td></tr></table></figure><p>和其他编程语言或测试框架的assert断言不同，t.Errorf调用也没有引起panic异常或停止测试的执行。<br>如果是发送错误，需要终止测试，可以使用t.Fatal或t.Fatalf停止当前测试函数。</p><p>测试失败的信息一般的形式是“f(x) &#x3D; y, want z”，其中f(x)解释了失败的操作和对应的输出，y是实际的运行结果，z是期望的正确的结果。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 11.1:</strong> 为4.3节中的charcount程序编写测试。<br>解：<br>count.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> count<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;unicode&quot;</span><br><span class="hljs-string">&quot;unicode/utf8&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> count <span class="hljs-keyword">struct</span> &#123;<br>counts  <span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>         <span class="hljs-comment">// counts of Unicode characters</span><br>utflen  [utf8.UTFMax + <span class="hljs-number">1</span>]<span class="hljs-type">int</span> <span class="hljs-comment">// count of lengths of UTF-8 encodings</span><br>invalid <span class="hljs-type">int</span>                  <span class="hljs-comment">//count of invalid Unicode characters.</span><br>err     <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">charCount</span><span class="hljs-params">(r io.Reader)</span></span> count &#123;<br><span class="hljs-keyword">var</span> c count<br>c.counts = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>)<br>input := bufio.NewReader(r)<br><span class="hljs-keyword">for</span> &#123;<br>r, n, err := input.ReadRune()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.err = err<br>&#125;<br><span class="hljs-keyword">if</span> r == unicode.ReplacementChar &amp;&amp; n == <span class="hljs-number">1</span> &#123;<br>c.invalid++<br><span class="hljs-keyword">continue</span><br>&#125;<br>c.counts[r]++<br>c.utflen[n]++<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><p>count_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> count<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><span class="hljs-string">&quot;unicode/utf8&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCharCount</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span> &#123;<br>r    io.Reader<br>want count<br>&#125;&#123;<br>&#123;strings.NewReader(<span class="hljs-string">&quot;abcd&quot;</span>),<br>count&#123;<br>counts:  <span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>&#125;,<br>utflen:  [utf8.UTFMax + <span class="hljs-number">1</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>invalid: <span class="hljs-number">0</span>,<br>err:     <span class="hljs-literal">nil</span>,<br>&#125;&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> i, test := <span class="hljs-keyword">range</span> tests &#123;<br>got := charCount(test.r)<br><span class="hljs-keyword">if</span> !equal(test.want, got) &#123;<br>t.Errorf(<span class="hljs-string">&quot;%d. got %v, want %v&quot;</span>, i, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">equal</span><span class="hljs-params">(c1, c2 count)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> !(c1.counts == <span class="hljs-literal">nil</span> &amp;&amp; c2.counts == <span class="hljs-literal">nil</span> ||<br>c1.counts != <span class="hljs-literal">nil</span> &amp;&amp; c2.counts != <span class="hljs-literal">nil</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> c, n := <span class="hljs-keyword">range</span> c1.counts &#123;<br><span class="hljs-keyword">if</span> n != c2.counts[c] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(c1.counts) != <span class="hljs-built_in">len</span>(c2.counts) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> c1.utflen != c2.utflen &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> c1.invalid != c2.invalid &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> c1.err != c2.err &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 11.2:</strong> 为（§6.5）的IntSet编写一组测试，用于检查每个操作后的行为和基于内置map的集合等价，后面练习11.7将会用到。<br>解：<br>intset.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/<span class="hljs-number">64</span>, x%<span class="hljs-number">64</span><br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= word<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, word)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-type">uint</span>(j)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>&#125;<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">64</span>*i+j)<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br></code></pre></td></tr></table></figure><p>intset_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-keyword">type</span> interval <span class="hljs-keyword">struct</span> &#123;<br>begin, end <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initIntSet</span><span class="hljs-params">(i *interval)</span></span> *IntSet &#123;<br>s := &amp;IntSet&#123;&#125;<br><span class="hljs-keyword">for</span> x := i.begin; x &lt;= i.end; x++ &#123;<br>s.Add(x)<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMapIntSet</span><span class="hljs-params">(i *interval)</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span> &#123;<br>s := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> x := i.begin; x &lt;= i.end; x++ &#123;<br>s[x] = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">equal</span><span class="hljs-params">(s1 *IntSet, s2 <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> s2 &#123;<br><span class="hljs-keyword">if</span> !s1.Has(k) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestIntSet</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span> &#123;<br>i    interval<br>mi   interval<br>want <span class="hljs-type">bool</span><br>&#125;&#123;<br>&#123;interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">50</span>&#125;, interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">50</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#123;interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">100</span>&#125;, interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">100</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#123;interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">50</span>&#125;, interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">49</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> i, test := <span class="hljs-keyword">range</span> tests &#123;<br>s1 := initIntSet(&amp;test.i)<br>s2 := initMapIntSet(&amp;test.mi)<br><span class="hljs-keyword">if</span> got := equal(s1, s2); got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%d. got %v, want %v&quot;</span>, i, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUnionWith</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span> &#123;<br>ai, bi interval<br>ci     interval<br>want   <span class="hljs-type">bool</span><br>&#125;&#123;<br>&#123;interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">10</span>&#125;, interval&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;, interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">20</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#123;interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">20</span>&#125;, interval&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;, interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">20</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#123;interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">20</span>&#125;, interval&#123;<span class="hljs-number">10</span>, <span class="hljs-number">30</span>&#125;, interval&#123;<span class="hljs-number">0</span>, <span class="hljs-number">30</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#123;interval&#123;<span class="hljs-number">5</span>, <span class="hljs-number">15</span>&#125;, interval&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;, interval&#123;<span class="hljs-number">5</span>, <span class="hljs-number">20</span>&#125;, <span class="hljs-literal">true</span>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> i, test := <span class="hljs-keyword">range</span> tests &#123;<br>s1, s2 := initIntSet(&amp;test.ai), initIntSet(&amp;test.bi)<br>s1.UnionWith(s2)<br>m := initMapIntSet(&amp;test.ci)<br><span class="hljs-keyword">if</span> got := equal(s1, m); got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%d. got %v, want %v&quot;</span>, i, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="随机测试"><a href="#随机测试" class="headerlink" title="随机测试"></a>随机测试</h1><p>举例测试有一定的局限性，也就是构建更泛的随机输入来测试函数。<br>对于一个随机输入，如何得知希望的输出结果呢？<br>两种方法：</p><ul><li>编写一个对照函数，使用简单且有效的方法，虽然效率可以低，但是函数行为要一致，然后比较两者相同随机输入下的输出结果。<br>-遵循特定的模式，生成随机输入的数据。<br>下面是使用第二种方法，丰富我们的测试函数。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// randomPalindrome returns a palindrome whose length and contents</span><br><span class="hljs-comment">// are derived from the pseudo-random number generator rng.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomPalindrome</span><span class="hljs-params">(rng *rand.Rand)</span></span> <span class="hljs-type">string</span> &#123;<br>n := rng.Intn(<span class="hljs-number">25</span>) <span class="hljs-comment">// random length up to 24</span><br>runes := <span class="hljs-built_in">make</span>([]<span class="hljs-type">rune</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; (n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>; i++ &#123;<br>r := <span class="hljs-type">rune</span>(rng.Intn(<span class="hljs-number">0x1000</span>)) <span class="hljs-comment">// random rune up to &#x27;\u0999&#x27;</span><br>runes[i] = r<br>runes[n<span class="hljs-number">-1</span>-i] = r<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(runes)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestRandomPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// Initialize a pseudo-random number generator.</span><br>seed := time.Now().UTC().UnixNano()<br>t.Logf(<span class="hljs-string">&quot;Random seed: %d&quot;</span>, seed)<br>rng := rand.New(rand.NewSource(seed))<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>p := randomPalindrome(rng)<br><span class="hljs-keyword">if</span> !IsPalindrome(p) &#123;<br>t.Errorf(<span class="hljs-string">&quot;IsPalindrome(%q)=false&quot;</span>, p)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>虽然使用随机测试有很多不确定因素，但是它是十分重要的，我们可以从错误信息中分析出程序的问题所在。<br>在定期运行的自动化测试集成系统中，随机测试非常重要。</li></ul><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 11.3:</strong> TestRandomPalindromes测试函数只测试了回文字符串。编写新的随机测试生成器，用于测试随机生成的非回文字符串。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> word<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomNonPalindrome</span><span class="hljs-params">(rng *rand.Rand)</span></span> <span class="hljs-type">string</span> &#123;<br>n := rand.Intn(<span class="hljs-number">25</span>) + <span class="hljs-number">2</span> <span class="hljs-comment">// 至少2位起</span><br>runes := <span class="hljs-built_in">make</span>([]<span class="hljs-type">rune</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>r := <span class="hljs-type">rune</span>(rand.Intn(<span class="hljs-number">0x1000</span>)) <span class="hljs-comment">// 0~/u0999</span><br>runes[i] = r<br>&#125;<br><span class="hljs-comment">// 如果首尾相同，可以替换首位，直到不相同</span><br><span class="hljs-keyword">for</span> runes[<span class="hljs-number">0</span>] == runes[n<span class="hljs-number">-1</span>] &#123;<br>runes[<span class="hljs-number">0</span>] = <span class="hljs-type">rune</span>(rand.Intn(<span class="hljs-number">0x1000</span>))<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(runes)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestRandomNonPalindrome</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>seed := time.Now().UTC().UnixNano()<br>rng := rand.New(rand.NewSource(seed))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>p := randomNonPalindrome(rng)<br><span class="hljs-keyword">if</span> IsPalindrome(p) &#123;<br>t.Errorf(<span class="hljs-string">&quot;IsPalindrome(%v)=true&quot;</span>, p)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 11.4:</strong> 修改randomPalindrome函数，以探索IsPalindrome是否对标点和空格做了正确处理。<br>解：<br>randomPalindrome函数实则对空格和标点符号做了正确的处理。<br>rune(0x0<del>0x999) 其实上包含了空格（0x0020） 和 标点符号（0x0020</del>0x0040）。</p><h1 id="测试命令程序"><a href="#测试命令程序" class="headerlink" title="测试命令程序"></a>测试命令程序</h1><p><code>go test</code>还可以测试main包的程序。<br>下面以输出命令程序做例子：<br>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>n = flag.Bool(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;omit trailing newline&quot;</span>)<br>s = flag.String(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;separator&quot;</span>)<br>)<br><br><span class="hljs-keyword">var</span> out io.Writer = os.Stdout<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-keyword">if</span> err := echo(*n, *s, os.Args[<span class="hljs-number">1</span>:]); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;echo:%v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">echo</span><span class="hljs-params">(newline <span class="hljs-type">bool</span>, sep <span class="hljs-type">string</span>, args []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>fmt.Fprintf(out, strings.Join(args, sep))<br><span class="hljs-keyword">if</span> newline &#123;<br>fmt.Fprintln(out)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>echo_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestEcho</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span> &#123;<br>newline <span class="hljs-type">bool</span><br>sep     <span class="hljs-type">string</span><br>args    []<span class="hljs-type">string</span><br>want    <span class="hljs-type">string</span><br>&#125;&#123;<br>&#123;<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;&quot;</span>, []<span class="hljs-type">string</span>&#123;&#125;, <span class="hljs-string">&quot;\n&quot;</span>&#125;,<br>&#123;<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>, []<span class="hljs-type">string</span>&#123;&#125;, <span class="hljs-string">&quot;&quot;</span>&#125;,<br>&#123;<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;\t&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>&#125;, <span class="hljs-string">&quot;one\ttwo\tthree\n&quot;</span>&#125;,<br>&#123;<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;,&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;, <span class="hljs-string">&quot;a,b,c\n&quot;</span>&#125;,<br>&#123;<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;:&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;, <span class="hljs-string">&quot;1:2:3&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> i, test := <span class="hljs-keyword">range</span> tests &#123;<br>descr := fmt.Sprintf(<span class="hljs-string">&quot;encho(%v, %q, %q)&quot;</span>, test.newline, test.sep, test.args)<br>out = <span class="hljs-built_in">new</span>(bytes.Buffer)<br><span class="hljs-keyword">if</span> err := echo(test.newline, test.sep, test.args); err != <span class="hljs-literal">nil</span> &#123;<br>t.Errorf(<span class="hljs-string">&quot;%s failed: %v&quot;</span>, descr, err)<br>&#125;<br>got := out.(*bytes.Buffer).String()<br><span class="hljs-keyword">if</span> got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%d. %s = %q, want %q&quot;</span>, i, descr, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要注意的是，测试文件要与main文件放在同一个包内。<br>该测试中，使用了内部包级变量out，在测试中，可以将out替换，以达到测试的效果。</p><h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><p>一种测试分类的方法是基于测试者是否需要了解被测试对象的内部工作原理。<br><code>黑盒测试</code>只需要测试包公开的文档和API行为，内部实现对测试代码是透明的。<br><code>白盒测试</code>有访问包内部函数和数据结构的权限，因此可以做到一下普通客户端无法实现的测试。<br>白盒测试也叫做<code>clear box test</code>。</p><p>黑盒和白盒这两种测试方法是互补的。<br>黑盒测试一般更健壮，随着软件实现的完善测试代码很少需要更新。<br>    - 它们可以帮助测试者了解真是客户的需求，<br>    - 帮助发现API设计的一些不足之处。<br>白盒测试则可以对内部一些棘手的实现提供更多的测试覆盖。</p><p><code>TestIsPalindrome</code> 测试仅使用了导出的<code>IsPalindrome</code>函数，所以是黑盒测试。<br><code>TestEcho</code>测试则调用了内部的<code>echo</code>函数，还更新内部包级变量<code>out</code>，所以这是白盒测试。</p><p>可以将产品代码的其他部分也替换为一个容易测试的伪对象。使用伪对象的好处是我们可以方便配置，容易预测，更可靠，也更容易观察。同时也可以避免一些不良的副作用，例如更新生产数据库或信用卡消费行为。</p><p>下面的代码演示了为用户提供网络存储的web服务中的配额检测逻辑。当用户使用了超过90%的存储配额之后将发送提醒邮件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> storage<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/smtp&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bytesInUse</span><span class="hljs-params">(username <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">const</span> sender = <span class="hljs-string">&quot;notifications@example.com&quot;</span><br><span class="hljs-keyword">const</span> password = <span class="hljs-string">&quot;correchorsebatterysaple&quot;</span><br><span class="hljs-keyword">const</span> hostname = <span class="hljs-string">&quot;smtp.example.com&quot;</span><br><br><span class="hljs-keyword">const</span> template = <span class="hljs-string">&quot;Warning: you are using %d bytes of storage, %d%% of your quota&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CheckQuota</span><span class="hljs-params">(username <span class="hljs-type">string</span>)</span></span> &#123;<br>used := bytesInUse(username)<br><span class="hljs-keyword">const</span> quota = <span class="hljs-number">1000000000</span> <span class="hljs-comment">// 1GB</span><br>percent := <span class="hljs-number">100</span> * used<br><span class="hljs-keyword">if</span> percent &lt; <span class="hljs-number">90</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>msg := fmt.Sprintf(template, used, percent)<br>auth := smtp.PlainAuth(<span class="hljs-string">&quot;&quot;</span>, sender, password, hostname)<br>err := smtp.SendMail(hostname+<span class="hljs-string">&quot;:587&quot;</span>, auth, sender, []<span class="hljs-type">string</span>&#123;username&#125;, []<span class="hljs-type">byte</span>(msg))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;smtp.SendMail(%s) failed: %s&quot;</span>, username, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们想测试该函数，但是不想发送邮件，可以将发送邮件逻辑抽取出来，然后进行替换。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> storage<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/smtp&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bytesInUse</span><span class="hljs-params">(username <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">999999999</span><br>&#125;<br><br><span class="hljs-keyword">const</span> sender = <span class="hljs-string">&quot;notifications@example.com&quot;</span><br><span class="hljs-keyword">const</span> password = <span class="hljs-string">&quot;correchorsebatterysaple&quot;</span><br><span class="hljs-keyword">const</span> hostname = <span class="hljs-string">&quot;smtp.example.com&quot;</span><br><br><span class="hljs-keyword">const</span> template = <span class="hljs-string">&quot;Warning: you are using %d bytes of storage, %d%% of your quota&quot;</span><br><br><span class="hljs-keyword">var</span> notifyUser = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(username, msg <span class="hljs-type">string</span>)</span></span> &#123;<br>auth := smtp.PlainAuth(<span class="hljs-string">&quot;&quot;</span>, sender, password, hostname)<br>err := smtp.SendMail(hostname+<span class="hljs-string">&quot;:587&quot;</span>, auth, sender, []<span class="hljs-type">string</span>&#123;username&#125;, []<span class="hljs-type">byte</span>(msg))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;smtp.SendMail(%s) failed: %s&quot;</span>, username, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CheckQuota</span><span class="hljs-params">(username <span class="hljs-type">string</span>)</span></span> &#123;<br>used := bytesInUse(username)<br><span class="hljs-keyword">const</span> quota = <span class="hljs-number">1000000000</span> <span class="hljs-comment">// 1GB</span><br>percent := <span class="hljs-number">100</span> * used / quota<br><span class="hljs-keyword">if</span> percent &lt; <span class="hljs-number">90</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>msg := fmt.Sprintf(template, used, percent)<br>notifyUser(username, msg)<br>&#125;<br></code></pre></td></tr></table></figure><p>storage_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> storage<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCheckQuota</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> notifiedUser, notifiedMsg <span class="hljs-type">string</span><br>notifyUser = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(username, msg <span class="hljs-type">string</span>)</span></span> &#123;<br>notifiedUser, notifiedMsg = username, msg<br>&#125;<br><br><span class="hljs-keyword">const</span> user = <span class="hljs-string">&quot;job@example.org&quot;</span><br>CheckQuota(user)<br><span class="hljs-keyword">if</span> notifiedUser == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; notifiedMsg == <span class="hljs-string">&quot;&quot;</span> &#123;<br>t.Fatal(<span class="hljs-string">&quot;notifyUser not called&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> notifiedUser != user &#123;<br>t.Errorf(<span class="hljs-string">&quot;wrong user (%s) notified, want %s&quot;</span>, notifiedUser, user)<br>&#125;<br><br><span class="hljs-keyword">const</span> wantSubstring = <span class="hljs-string">&quot;98% of your quota&quot;</span><br><span class="hljs-keyword">if</span> !strings.Contains(notifiedMsg, wantSubstring) &#123;<br>t.Errorf(<span class="hljs-string">&quot;unexpected notification message &lt;&lt;%s&gt;&gt;, want substring %q&quot;</span>, notifiedMsg, wantSubstring)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个问题：当测试函数完成后，<code>CheckQuota</code>将不能正常工作，因为notifiedUser仍然使用的是测试函数中伪发送邮件函数，因为更新的是全局变量。所以必须恢复成原先的路径，保证不会错乱。<br>可以使用defer语句进行恢复。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCheckQuotaNotifiedUser</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// Save and restore origin notifyUser</span><br>saved := notifyUser<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; notifyUser = saved &#125;()<br><br><span class="hljs-keyword">var</span> notifiedUser, notifiedMsg <span class="hljs-type">string</span><br>notifyUser = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(username, msg <span class="hljs-type">string</span>)</span></span> &#123;<br>notifiedUser, notifiedMsg = username, msg<br>&#125;<br><br><span class="hljs-keyword">const</span> user = <span class="hljs-string">&quot;job@example.org&quot;</span><br>CheckQuota(user)<br><span class="hljs-keyword">if</span> notifiedUser == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; notifiedMsg == <span class="hljs-string">&quot;&quot;</span> &#123;<br>t.Fatal(<span class="hljs-string">&quot;notifyUser not called&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> notifiedUser != user &#123;<br>t.Errorf(<span class="hljs-string">&quot;wrong user (%s) notified, want %s&quot;</span>, notifiedUser, user)<br>&#125;<br><br><span class="hljs-keyword">const</span> wantSubstring = <span class="hljs-string">&quot;98% of your quota&quot;</span><br><span class="hljs-keyword">if</span> !strings.Contains(notifiedMsg, wantSubstring) &#123;<br>t.Errorf(<span class="hljs-string">&quot;unexpected notification message &lt;&lt;%s&gt;&gt;, want substring %q&quot;</span>, notifiedMsg, wantSubstring)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种处理模式可以用来暂时保存和恢复所有的全局变量，包括命令行标志参数、调试选项和优化参数；安装和移除导致生产代码产生一些调试信息的钩子函数；还有有些诱导生产代码进入某些重要状态的改变，比如超时、错误，甚至是一些刻意制造的并发行为等因素。</p><p><code>go test</code>并不会并发执行测试函数，所以这样修改全局变量是安全的。</p><h1 id="拓展测试包"><a href="#拓展测试包" class="headerlink" title="拓展测试包"></a>拓展测试包</h1><p>有这么一个例子：<br><code>net/url</code>包，提供了URL解析的功能；<br><code>net/http</code>包，提供了web服务和HTTP客户端的功能；<br><code>net/http</code>包依赖于<code>net/url</code>;<br>现在需要写一个<code>net/url</code>测试，需要测试不同url与HTTP客户端的交互行为。<br>相当于<code>net/url</code>反过来依赖<code>net/http</code>，岂不是依赖依赖。<br>我们知道，Go语言是禁止循环依赖的。<br>怎么解决？</p><p>可以引入拓展测试包来解决这个问题，也就是在<code>net/url</code>所在的目录创建一个<code>url_test</code>的测试包。<br>测试包的后缀为<code>_test</code>，它会告诉<code>go test</code>工具，应该创建一个额外的包进行测试。<br>测试拓展包不会被其他包导入。<br>因为测试拓展包是一个独立的包，是导入测试代码的辅助包。<br><code>url_test</code>测试拓展包依赖于<code>net/url</code>，<code>net/http</code>包。</p><p>在集成测试中，测试拓展包可以灵活得导入其他包。</p><p>可以使用<code>go list</code>查询哪些包是测试拓展包，哪些是源码，哪些是包内测试。<br>以fmt包为例，<code>GoFiles</code>表示源码源文件，也是<code>go build</code>构建的那部分代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> list -f=&#123;&#123;.GoFiles&#125;&#125; fmt<br>[doc.<span class="hljs-keyword">go</span> format.<span class="hljs-keyword">go</span> <span class="hljs-built_in">print</span>.<span class="hljs-keyword">go</span> scan.<span class="hljs-keyword">go</span>]<br></code></pre></td></tr></table></figure><p><code>TestGoFiles</code>表示的是fmt包内部测试测试代码，以<code>_test.go</code>为后缀文件名，不过只在测试时被构建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> list -f=&#123;&#123;.TestGoFiles&#125;&#125; fmt<br>[export_test.<span class="hljs-keyword">go</span>]<br></code></pre></td></tr></table></figure><p><code>XTestGoFiles</code>表示的是属于测试扩展包的测试代码，也就是<code>fmt_test</code>包，因此它们必须先导入fmt包。同样，这些文件也只是在测试时被构建运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> list -f=&#123;&#123;.XTestGoFiles&#125;&#125; fmt<br>[errors_test.<span class="hljs-keyword">go</span> example_test.<span class="hljs-keyword">go</span> fmt_test.<span class="hljs-keyword">go</span> gostringer_example_test.<span class="hljs-keyword">go</span> scan_test.<span class="hljs-keyword">go</span> stringer_example_test.<span class="hljs-keyword">go</span> stringer_test.<span class="hljs-keyword">go</span>]<br></code></pre></td></tr></table></figure><p>有时候测试扩展包也需要访问被测试包内部的代码，例如在一个为了避免循环导入而被独立到外部测试扩展包的白盒测试。<br>在这种情况下，我们可以通过一些技巧解决：我们在包内的一个_test.go文件中导出一个内部的实现给测试扩展包。因为这些代码只有在测试时才需要，因此一般会放在<code>export_test.go</code>文件中。</p><p>例如，fmt包的<code>fmt.Scanf</code>函数需要<code>unicode.IsSpace</code>函数提供的功能。但是为了避免太多的依赖，fmt包并没有导入包含巨大表格数据的unicode包；相反fmt包有一个叫<code>isSpace</code>内部的简易实现。<br>为了确保<code>fmt.isSpace</code>和<code>unicode.IsSpace</code>函数的行为一致，fmt包谨慎地包含了一个测试。是一个在测试扩展包内的白盒测试，是无法直接访问到isSpace内部函数的，因此fmt通过一个秘密出口导出了isSpace函数。export_test.go文件就是专门用于测试扩展包的秘密出口。<br>export_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> fmt<br><br><span class="hljs-keyword">var</span> IsSpace = isSpace<br><span class="hljs-keyword">var</span> Parsenum = parsenum<br></code></pre></td></tr></table></figure><p>fmt_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> fmt_test<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestIsSpace</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// This tests the internal isSpace function.</span><br><span class="hljs-comment">// IsSpace = isSpace is defined in export_test.go.</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">rune</span>(<span class="hljs-number">0</span>); i &lt;= unicode.MaxRune; i++ &#123;<br><span class="hljs-keyword">if</span> IsSpace(i) != unicode.IsSpace(i) &#123;<br>t.Errorf(<span class="hljs-string">&quot;isSpace(%U) = %v, want %v&quot;</span>, i, IsSpace(i), unicode.IsSpace(i))<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个测试文件并没有定义测试代码；它只是通过<code>fmt.IsSpace</code>简单导出了内部的<code>isSpace</code>函数，提供给测试扩展包使用。这个技巧可以广泛用于位于测试扩展包的白盒测试。</p><h1 id="编写有效的测试"><a href="#编写有效的测试" class="headerlink" title="编写有效的测试"></a>编写有效的测试</h1><p>相对于其它语言，Go语言的测试框架非常非常简洁。<br>其它语言测试函数的机制，包括反射，元数据，钩子函数，assert断言，值比较函数，格式化输出错误信息和停止一个识别的测试等辅助函数。<br>虽然这些辅助函数使得测试是否简洁，但是导致输出日志十分之长，定位和查找费劲。<br>Go语言的测试风格则形成鲜明对比。它期望测试者自己完成大部分的工作，定义函数避免重复，就像普通编程那样。</p><p>一个好的测试不应该引发其他无关的错误信息，它只要清晰简洁地描述问题的症状即可，有时候可能还需要一些上下文信息。</p><p>下面的断言函数比较两个值，然后生成一个通用的错误信息，并停止程序。它很方便使用也确实有效果，但是当测试失败的时候，打印的错误信息却几乎是没有价值的。它并没有为快速解决问题提供一个很好的入口。<br>split_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> split<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assertEqual</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> x != y &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;%d!=%d&quot;</span>, x, y))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSplit_Assert</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>words := strings.Split(<span class="hljs-string">&quot;a:b:c&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>)<br>assertEqual(<span class="hljs-built_in">len</span>(words), <span class="hljs-number">3</span>)<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从这个意义上说，断言函数犯了过早抽象的错误：仅仅测试两个整数是否相同，而放弃了根据上下文提供更有意义的错误信息的做法。我们可以根据具体的错误打印一个更有价值的错误信息，就像下面例子那样。测试在只有一次重复的模式出现时引入抽象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSplit</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    s, sep := <span class="hljs-string">&quot;a:b:c&quot;</span>, <span class="hljs-string">&quot;:&quot;</span><br>    words := strings.Split(s, sep)<br>    <span class="hljs-keyword">if</span> got, want := <span class="hljs-built_in">len</span>(words), <span class="hljs-number">3</span>; got != want &#123;<br>        t.Errorf(<span class="hljs-string">&quot;Split(%q, %q) returned %d words, want %d&quot;</span>,<br>            s, sep, got, want)<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在的测试不仅报告了调用的具体函数、它的输入和结果的意义；并且打印的真实返回的值和期望返回的值；并且即使断言失败依然会继续尝试运行更多的测试。一旦我们写了这样结构的测试，下一步自然不是用更多的if语句来扩展测试用例，我们可以用像IsPalindrome的表驱动测试那样来准备更多的s和sep测试用例。</p><p>如果有可以使测试代码更简单的方法我们也乐意接受。开始一个好的测试的关键是通过实现你真正想要的具体行为，然后才是考虑然后简化测试代码。最好的接口是直接从库的抽象接口开始，针对公共接口编写一些测试函数。</p><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><p><strong>练习11.5:</strong> 用表格驱动的技术扩展TestSplit测试，并打印期望的输出结果。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> split<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSplit</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span> &#123;<br>s    <span class="hljs-type">string</span><br>sep  <span class="hljs-type">string</span><br>want <span class="hljs-type">int</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;a:b:c&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-string">&quot;q1w1e1r&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">4</span>&#125;,<br>&#123;<span class="hljs-string">&quot;p-o-i-n-t&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">5</span>&#125;,<br>&#123;<span class="hljs-string">&quot;never give up&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-number">3</span>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> i, test := <span class="hljs-keyword">range</span> tests &#123;<br>words := strings.Split(test.s, test.sep)<br><span class="hljs-keyword">if</span> got := <span class="hljs-built_in">len</span>(words); got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%d. split(%q, %q) returns %d words, want %d.&quot;</span>, i, test.s, test.sep, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="避免不稳定的测试"><a href="#避免不稳定的测试" class="headerlink" title="避免不稳定的测试"></a>避免不稳定的测试</h1><p>如果一个应用程序对于新出现的但有效的输入经常失败说明程序不够稳健；<br>同样如果一个测试仅仅因为输入变化就会导致失败也是不合逻辑的。</p><p>避免脆弱测试代码的方法是只检测你真正关心的属性。保持测试代码的简洁和内部结构的稳定。特别是对断言部分要有所选择。不要检查字符串的全匹配，但是寻找相关的子字符串，因为某些子字符串在项目的发展中是比较稳定不变的。通常编写一个重复杂的输出中提取必要精华信息以用于断言是值得的，虽然这可能会带来很多前期的工作，但是它可以帮助迅速及时修复因为项目演化而导致的不合逻辑的失败测试。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.1 go test</title>
      <link href="/posts/84a75b89cf5a/"/>
      <url>/posts/84a75b89cf5a/</url>
      
        <content type="html"><![CDATA[<p>Go语言关于测试的命令为<code>go test</code>。<br>在包目录范围内，所有以_test.go结尾的源代码文件，并非属于<code>go build</code>框架，而是属于<code>go test</code>测试的一部分。</p><p>在<code>*_test.go</code>文件中，一共有三种函数：</p><ul><li>测试函数<ul><li>测试函数以Test为前缀，用于测试函数的逻辑是否正确。</li></ul></li><li>基准测试函数<ul><li>基准测试函数以Benchmark为前缀，用于衡量函数的性能。</li></ul></li><li>示例函数<ul><li>示例函数以Example为前缀，提供一个由编译器保证正确的示例文档。</li></ul></li></ul><p><code>go test</code>命令会遍历所有以<code>*_test.go</code>结尾的源文件符合规则的测试函数，然后生成临时的main包以调用所有的测试函数，紧接着构建并运行、报告测试结果，最后清理测试中产生的临时文件。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一章 测试</title>
      <link href="/posts/2b3895c22904/"/>
      <url>/posts/2b3895c22904/</url>
      
        <content type="html"><![CDATA[<p>Go语言的测试技术是相对低级的。它依赖一个<code>go test</code>测试命令和一组按照约定方式编写的测试函数，测试命令可以运行这些测试函数。</p><p><a href>11.1. go test</a></p><p><a href="/posts/0bc5b76177c6/">11.2. 测试函数</a></p><p><a href="/posts/79be1aaa69b3/">11.3. 测试覆盖率</a></p><p><a href="/posts/a1b71dd23f51/">11.4. 基准测试</a></p><p><a href="/posts/f5ef3e713f2a/">11.5. 剖析</a></p><p><a href>11.6. 示例函数</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.7. 工具</title>
      <link href="/posts/c1eef8565635/"/>
      <url>/posts/c1eef8565635/</url>
      
        <content type="html"><![CDATA[<p>可以使用<code>go</code>或<code>go help</code>获取内置的帮助文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go</span><br>Go is a tool for managing Go source code.<br><br>Usage:<br><br>go &lt;command&gt; [arguments]<br><br>The commands are:<br><br>bug         start a bug report<br>build       compile packages and dependencies<br>clean       remove object files and cached files<br>doc         show documentation for package or symbol<br>env         print Go environment information<br>fix         update packages to use new APIs<br>fmt         gofmt (reformat) package sources<br>generate    generate Go files by processing source<br>get         download and install packages and dependencies<br>install     compile and install packages and dependencies<br>list        list packages or modules<br>mod         module maintenance<br>work        workspace maintenance<br>run         compile and run Go program<br>test        test packages<br>tool        run specified go tool<br>version     print Go version<br>vet         report likely mistakes in packages<br><br>Use &quot;go help &lt;command&gt;&quot; for more information about a command.<br><br>Additional help topics:<br><br>buildconstraint build constraints<br>buildmode       build modes<br>c               calling between Go and C<br>cache           build and test caching<br>environment     environment variables<br>filetype        file types<br>go.mod          the go.mod file<br>gopath          GOPATH environment variable<br>gopath-get      legacy GOPATH go get<br>goproxy         module proxy protocol<br>importpath      import path syntax<br>modules         modules, module versions, and more<br>module-get      module-aware go get<br>module-auth     module authentication using go.sum<br>packages        package lists and patterns<br>private         configuration for downloading non-public code<br>testflag        testing flags<br>testfunc        testing functions<br>vcs             controlling version control with GOVCS<br><br>Use &quot;go help &lt;topic&gt;&quot; for more information about that topic.<br></code></pre></td></tr></table></figure><h1 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h1><p><code>GOPATH</code>: 指定工作区目录的环境变量。<br>设置命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-variable">$HOME</span>/gobook</span><br></code></pre></td></tr></table></figure><p>工作区目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">GOPATH/<br>    src/<br>        gopl.io/<br>            .git/<br>            ch1/<br>                helloworld/<br>                    main.go<br>                dup/<br>                    main.go<br>                ...<br>        golang.org/x/net/<br>            .git/<br>            html/<br>                parse.go<br>                node.go<br>                ...<br>    bin/<br>        helloworld<br>        dup<br>    pkg/<br>        darwin_amd64/<br>        ...<br></code></pre></td></tr></table></figure><p><code>GOPATH</code>下有三个指定的目录：<br><code>src</code>目录用于存储源码。<br><code>pkg</code>目录用于保存编译后的包的目标文件。<br><code>bin</code>目录是保存编译后的可执行文件。</p><h1 id="GOROOT"><a href="#GOROOT" class="headerlink" title="GOROOT"></a>GOROOT</h1><p>环境变量<code>GOROOT</code>:用来指定Go的安装目录，还有它自带的标准库包的位置。<br>GOROOT的目录结构和GOPATH类似，因此存放fmt包的源代码对应目录应该为$GOROOT&#x2F;src&#x2F;fmt。<br>用户一般不需要设置GOROOT，默认情况下Go语言安装工具会将其设置为安装的目录路径。</p><h1 id="GOOS"><a href="#GOOS" class="headerlink" title="GOOS"></a>GOOS</h1><p>环境变量<code>GOOS</code>: 指定目标的操作系统。<br>android、linux、darwin和windows。</p><h1 id="GOARCH"><a href="#GOARCH" class="headerlink" title="GOARCH"></a>GOARCH</h1><p>环境变量<code>GOARCH</code>：用于指定处理器类型。<br>amd64、386或arm。</p><h1 id="go-env-命令"><a href="#go-env-命令" class="headerlink" title="go env 命令"></a>go env 命令</h1><p><code>go env</code>:  用于查看Go语言工具索涉及的所有环境变量，包括未设置环境变量的默认值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go <span class="hljs-built_in">env</span></span><br>GO111MODULE=&quot;off&quot;<br>GOARCH=&quot;amd64&quot;<br>GOBIN=&quot;&quot;<br>GOCACHE=&quot;/Users/***/Library/Caches/go-build&quot;<br>GOENV=&quot;/Users/***/Library/Application Support/go/env&quot;<br>GOEXE=&quot;&quot;<br>GOEXPERIMENT=&quot;&quot;<br>GOFLAGS=&quot;-buildvcs=true&quot;<br>GOHOSTARCH=&quot;amd64&quot;<br>GOHOSTOS=&quot;darwin&quot;<br>GOINSECURE=&quot;**.com&quot;<br>GOMODCACHE=&quot;/Users/***/go/pkg/mod&quot;<br>GONOPROXY=&quot;&quot;<br>GONOSUMDB=&quot;&quot;<br>GOOS=&quot;darwin&quot;<br>GOPATH=&quot;/Users/***/go&quot;<br>GOPRIVATE=&quot;&quot;<br>GOPROXY=&quot;https://goproxy.cn,direct&quot;<br>GOROOT=&quot;/usr/local/go&quot;<br>GOSUMDB=&quot;sum.golang.org&quot;<br>GOTMPDIR=&quot;&quot;<br>GOTOOLDIR=&quot;/usr/local/go/pkg/tool/darwin_amd64&quot;<br>GOVCS=&quot;&quot;<br>GOVERSION=&quot;go1.19.2&quot;<br>GCCGO=&quot;gccgo&quot;<br>GOAMD64=&quot;v1&quot;<br>AR=&quot;ar&quot;<br>CC=&quot;clang&quot;<br>CXX=&quot;clang++&quot;<br>CGO_ENABLED=&quot;1&quot;<br>GOMOD=&quot;&quot;<br>GOWORK=&quot;&quot;<br>CGO_CFLAGS=&quot;-g -O2&quot;<br>CGO_CPPFLAGS=&quot;&quot;<br>CGO_CXXFLAGS=&quot;-g -O2&quot;<br>CGO_FFLAGS=&quot;-g -O2&quot;<br>CGO_LDFLAGS=&quot;-g -O2&quot;<br>PKG_CONFIG=&quot;pkg-config&quot;<br>GOGCCFLAGS=&quot;-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/mp/zjw7t9hn7zg7ntbghwqk7f1r0000gn/T/go-build1417725864=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;<br></code></pre></td></tr></table></figure><h1 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h1><p><code>go get</code>：下载一个单一的包或者用…下载整个子目录里面的每个包。<br>使用<code>go get</code>命令下载<code>golint</code>包。<br><code>golint</code>包是用于检测Go语言源码编程风格是否有问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go get github.com/golang/lint/golint</span><br></code></pre></td></tr></table></figure><p>包下载目录为GOPATH。</p><p><code>go get</code>命令支持当前流行的托管网站GitHub、Bitbucket和Launchpad，可以直接向它们的版本控制系统请求代码。<br>对于其它的网站，你可能需要指定版本控制系统的具体路径和协议，例如 Git或Mercurial。运行go help importpath获取相关的信息。</p><p><code>go get</code>命令获取的代码是真实的本地存储仓库，而不仅仅只是复制源文件，因此你依然可以使用版本管理工具比较本地代码的变更或者切换到其它的版本。<br>例如<code>golang.org/x/net</code>包目录对应一个Git仓库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/golang.org/x/net</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br>origin  https://go.googlesource.com/net (fetch)<br>origin  https://go.googlesource.com/net (push)<br></code></pre></td></tr></table></figure><p>需要注意的是导入路径含有的网站域名和本地Git仓库对应远程服务地址并不相同，真实的Git地址是go.googlesource.com。这其实是Go语言工具的一个特性，可以让包用一个自定义的导入路径，但是真实的代码却是由更通用的服务提供。<br>其git仓库真实托管路径是由html网页中的meta元素提供，如“ <a href="https://golang.org/x/net/html%22%E3%80%82">https://golang.org/x/net/html&quot;。</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build gopl.io/ch1/fetch</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./fetch https://golang.org/x/net/html | grep go-import</span><br>&lt;meta name=&quot;go-import&quot;<br>      content=&quot;golang.org/x/net git https://go.googlesource.com/net&quot;&gt;<br></code></pre></td></tr></table></figure><p><code>-u</code> 命令行标志参数，表示<code>go get</code>获取所有的包和依赖包都是最新的。<br>如果不包含该参数，且本地存在该包，那么包将不会被更新。</p><p><code>go get -u</code>命令只是简单地保证每个包是最新版本，如果是第一次下载包则是比较很方便的；但是对于发布程序则可能是不合适的，因为本地程序可能需要对依赖的包做精确的版本依赖管理。</p><p>GO1.5版本后，可以使用Vendor可以做包的依赖管理。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 10.3:</strong> 从 <a href="http://gopl.io/ch1/helloworld?go-get=1">http://gopl.io/ch1/helloworld?go-get=1</a> 获取内容，查看本书的代码的真实托管的网址（go get请求HTML页面时包含了go-get参数，以区别普通的浏览器请求）。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">./fetch http://gopl.io/ch1/helloworld?go-get=1 | grep go-import</span><br><span class="hljs-comment">&lt;meta name=&quot;go-import&quot; content=&quot;gopl.io git https://github.com/adonovan/gopl.io&quot;&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// real git address: https://github.com/adonovan/gopl.io</span><br></code></pre></td></tr></table></figure><h1 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h1><p><code>go build</code>命令编译命令行参数指定的每个包。<br>如果包是一个库，则忽略输出结果；这可以用于检测包的可以正确编译的。<br>如果包的名字是main，go build将调用连接器在当前目录创建一个可执行程序；<br>以导入路径的最后一段作为可执行程序的名字。</p><p>当包编译创建可执行程序后，如果是类似Unix命令，可以把可以执行程序放在<code>cmd</code>子目录下。<br>例如用于提供Go文档服务的<code>golang.org/x/tools/cmd/godoc</code>命令就是放在cmd子目录。</p><p>默认情况下，<code>go build</code>命令构建指定的包和它依赖的包，然后丢弃除了最后的可执行文件之外所有的中间编译结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> quoteargs.go</span><br>package main<br><br>import (<br>    &quot;fmt&quot;<br>    &quot;os&quot;<br>)<br><br>func main() &#123;<br>    fmt.Printf(&quot;%q\n&quot;, os.Args[1:])<br>&#125;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build quoteargs.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./quoteargs one <span class="hljs-string">&quot;two three&quot;</span> four\ five</span><br>[&quot;one&quot; &quot;two three&quot; &quot;four five&quot;]<br></code></pre></td></tr></table></figure><h1 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h1><p><code>go run</code>命令实际上是结合了构建和运行的两个步骤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> quoteargs.go</span><br>package main<br><br>import (<br>    &quot;fmt&quot;<br>    &quot;os&quot;<br>)<br><br>func main() &#123;<br>    fmt.Printf(&quot;%q\n&quot;, os.Args[1:])<br>&#125;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run quoteargs.go one <span class="hljs-string">&quot;two three&quot;</span> four\ five</span><br>[&quot;one&quot; &quot;two three&quot; &quot;four five&quot;]<br></code></pre></td></tr></table></figure><h1 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h1><p><code>go install</code>和<code>go build</code>命令类似，但是<code>go install</code>会保存所有包的编译结果，而不是丢弃。<br>被编译的包会被保存到<code>$GOPATH/pkg</code>目录下，目录路径和<code>src</code>目录路径对应，可执行程序被保存到<code>$GOPATH/bin</code>目录。</p><p><code>go install</code>命令和<code>go build</code>命令都不会重新编译没有发生变化的包，这可以使后续构建更快捷。为了方便编译依赖的包，<code>go build -i</code>命令将安装每个目标所依赖的包。</p><p>因为编译对应不同的操作系统平台和CPU架构，<code>go install</code>命令会将编译结果安装到GOOS和GOARCH对应的目录。例如，在Mac系统，<code>golang.org/x/net/html</code>包将“被安装到<code>$GOPATH/pkg/darwin_amd64</code>目录下的<code>golang.org/x/net/html.a</code>文件。</p><p>如果需要不同操作系统和CPU的交叉编译，改变<code>GOOS</code>和<code>GOARCH</code>即可达成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(runtime.GOOS, runtime.GOARCH)<br>&#125;<br></code></pre></td></tr></table></figure><p>下面以64位和32位环境分别执行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build gopl.io/ch10/cross</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./cross</span><br>darwin amd64<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">GOARCH=386 go build gopl.io/ch10/cross</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./cross</span><br>darwin 386<br></code></pre></td></tr></table></figure><p>有些包可能需要针对不同平台和处理器类型使用不同版本的代码文件，以便于处理底层的可移植性问题或提供为一些特定代码提供优化。如果一个文件名包含了一个操作系统或处理器类型名字，例如net_linux.go或asm_amd64.s，Go语言的构建工具将只在对应的平台编译这些文件。还有一个特别的构建注释注释可以提供更多的构建过程控制。例如，文件中可能包含下面的注释：”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// +build linux darwin</span><br></code></pre></td></tr></table></figure><p>在包声明和包注释的前面，该构建注释参数告诉go build只在编译程序对应的目标操作系统是Linux或Mac OS X时才编译这个文件。<br>下面的构建注释则表示不编译这个文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// +build ignore</span><br></code></pre></td></tr></table></figure><p>详细细节参考go&#x2F;build包的构建约束部分的文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go doc go/build</span><br></code></pre></td></tr></table></figure><h1 id="包文档"><a href="#包文档" class="headerlink" title="包文档"></a>包文档</h1><p>包的第一行，应该是包的摘要说明，紧接着应该是包的声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Copyright 2018 The Go Authors. All rights reserved.</span><br><span class="hljs-comment">// Use of this source code is governed by a BSD-style</span><br><span class="hljs-comment">// license that can be found in the LICENSE file.</span><br><br><span class="hljs-keyword">package</span> fmt<br></code></pre></td></tr></table></figure><p>这里是fmt包的其中一个注释，第一个是版权说明，接下来是包注释。</p><p>如果包注释过于长，可以另起一个doc文件，专门写包注释，如fmt包中的doc.go。<br>通常保存包注释的文件，命名为doc.go。</p><h2 id="go-doc"><a href="#go-doc" class="headerlink" title="go doc"></a>go doc</h2><p><code>go doc</code>命令是打印包注释以及每个成员的注释。<br>下面是time包的注释：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go doc time</span><br>package time // import &quot;time&quot;<br><br>Package time provides functionality for measuring and displaying time.<br><br>The calendrical calculations always assume a Gregorian calendar, with no leap<br>seconds.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Monotonic Clocks</span><br><br>Operating systems provide both a “wall clock,” which is subject to changes<br>for clock synchronization, and a “monotonic clock,” which is not. The general<br>rule is that the wall clock is for telling time and the monotonic clock is for<br>measuring time. Rather than split the API, in this package the Time returned by<br>time.Now contains both a wall clock reading and a monotonic clock reading; later<br>time-telling operations use the wall clock reading, but later time-measuring<br>operations, specifically comparisons and subtractions, use the monotonic clock<br>reading.<br><br>For example, this code always computes a positive elapsed time of approximately<br>20 milliseconds, even if the wall clock is changed during the operation being<br>timed:<br><br>    start := time.Now()<br>    ... operation that takes 20 milliseconds ...<br>    t := time.Now()<br>    elapsed := t.Sub(start)<br><br>Other idioms, such as time.Since(start), time.Until(deadline), and<br>time.Now().Before(deadline), are similarly robust against wall clock resets.<br><br>The rest of this section gives the precise details of how operations use<br>monotonic clocks, but understanding those details is not required to use this<br>package.<br><br>The Time returned by time.Now contains a monotonic clock reading. If Time t<br>has a monotonic clock reading, t.Add adds the same duration to both the wall<br>clock and monotonic clock readings to compute the result. Because t.AddDate(y,<br>m, d), t.Round(d), and t.Truncate(d) are wall time computations, they always<br>strip any monotonic clock reading from their results. Because t.In, t.Local,<br>and t.UTC are used for their effect on the interpretation of the wall time,<br>they also strip any monotonic clock reading from their results. The canonical<br>way to strip a monotonic clock reading is to use t = t.Round(0).<br><br>If Times t and u both contain monotonic clock readings, the operations<br>t.After(u), t.Before(u), t.Equal(u), and t.Sub(u) are carried out using the<br>monotonic clock readings alone, ignoring the wall clock readings. If either t or<br>u contains no monotonic clock reading, these operations fall back to using the<br>wall clock readings.<br><br>On some systems the monotonic clock will stop if the computer goes to sleep.<br>On such a system, t.Sub(u) may not accurately reflect the actual time that<br>passed between t and u.<br><br>Because the monotonic clock reading has no meaning outside the current process,<br>the serialized forms generated by t.GobEncode, t.MarshalBinary, t.MarshalJSON,<br>and t.MarshalText omit the monotonic clock reading, and t.Format provides<br>no format for it. Similarly, the constructors time.Date, time.Parse,<br>time.ParseInLocation, and time.Unix, as well as the unmarshalers t.GobDecode,<br>t.UnmarshalBinary. t.UnmarshalJSON, and t.UnmarshalText always create times with<br>no monotonic clock reading.<br><br>The monotonic clock reading exists only in Time values. It is not a part of<br>Duration values or the Unix times returned by t.Unix and friends.<br><br>Note that the Go == operator compares not just the time instant but also the<br>Location and the monotonic clock reading. See the documentation for the Time<br>type for a discussion of equality testing for Time values.<br><br>For debugging, the result of t.String does include the monotonic clock<br>reading if present. If t != u because of different monotonic clock readings,<br>that difference will be visible when printing t.String() and u.String().<br><br>const Layout = &quot;01/02 03:04:05PM &#x27;06 -0700&quot; ...<br>const Nanosecond Duration = 1 ...<br>func After(d Duration) &lt;-chan Time<br>func Sleep(d Duration)<br>func Tick(d Duration) &lt;-chan Time<br>type Duration int64<br>    func ParseDuration(s string) (Duration, error)<br>    func Since(t Time) Duration<br>    func Until(t Time) Duration<br>type Location struct&#123; ... &#125;<br>    var Local *Location = &amp;localLoc<br>    var UTC *Location = &amp;utcLoc<br>    func FixedZone(name string, offset int) *Location<br>    func LoadLocation(name string) (*Location, error)<br>    func LoadLocationFromTZData(name string, data []byte) (*Location, error)<br>type Month int<br>    const January Month = 1 + iota ...<br>type ParseError struct&#123; ... &#125;<br>type Ticker struct&#123; ... &#125;<br>    func NewTicker(d Duration) *Ticker<br>type Time struct&#123; ... &#125;<br>    func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time<br>    func Now() Time<br>    func Parse(layout, value string) (Time, error)<br>    func ParseInLocation(layout, value string, loc *Location) (Time, error)<br>    func Unix(sec int64, nsec int64) Time<br>    func UnixMicro(usec int64) Time<br>    func UnixMilli(msec int64) Time<br>type Timer struct&#123; ... &#125;<br>    func AfterFunc(d Duration, f func()) *Timer<br>    func NewTimer(d Duration) *Timer<br>type Weekday int<br>    const Sunday Weekday = iota ...<br></code></pre></td></tr></table></figure><p>以及单独查看某个成员的注释文档：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go doc time.since</span><br>package time // import &quot;time&quot;<br><br>func Since(t Time) Duration<br>    Since returns the time elapsed since t. It is shorthand for<br>    time.Now().Sub(t).<br></code></pre></td></tr></table></figure><p>还可以查看成员的方法的注释文档：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go doc time.Duration.Seconds</span><br>package time // import &quot;time&quot;<br><br>func (d Duration) Seconds() float64<br>    Seconds returns the duration as a floating point number of seconds.<br></code></pre></td></tr></table></figure><p>该命令不需要输入完整的包导入路径和正确的大小写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go doc time.since</span><br>package time // import &quot;time&quot;<br><br>func Since(t Time) Duration<br>    Since returns the time elapsed since t. It is shorthand for<br>    time.Now().Sub(t).<br><br>wer:~ huangfuwang$ go doc json.decode<br>package json // import &quot;encoding/json&quot;<br><br>func (dec *Decoder) Decode(v any) error<br>    Decode reads the next JSON-encoded value from its input and stores it in the<br>    value pointed to by v.<br><br>    See the documentation for Unmarshal for details about the conversion of JSON<br>    into a Go value.<br></code></pre></td></tr></table></figure><h2 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h2><p><code>godoc</code>命令提供可以相互交叉引用的HTML页面，但是包含和go doc命令相同以及更多的信息。<br><code>godoc</code>的在线服务 <a href="https://godoc.org/">https://godoc.org</a> ，包含了成千上万开源包的检索工具。<br><code>godoc</code>支持<code>-play</code>命令行选项，可以启动playground功能，极大方便了对接口的调试。<br>从go1.13开始，<code>godoc</code>将不再内置。<br>下面是安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go install golang.org/x/tools/cmd/godoc@latest</span><br></code></pre></td></tr></table></figure><p>2021年末，godoc工具也被标记为deprecated了。<br>可以在自己的工作区目录运行godoc服务。运行下面的命令，然后在浏览器查看 <a href="http://localhost:8000/pkg">http://localhost:8000/pkg</a> 页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">godoc -http :8000</span><br></code></pre></td></tr></table></figure><p><code>-analysis=type</code>和<code>-analysis=pointer</code>命令行标志参数用于打开文档和代码中关于静态分析的结果。</p><h1 id="内部包"><a href="#内部包" class="headerlink" title="内部包"></a>内部包</h1><p>我们已知，没有导出标志符的只能在包内访问，有导出标志符的对任意可见。<br>但是，中间状态也是很有用的，即可见又不可见，对信任的包可见，对其它不可见。<br>例如，将包拆分成大小不一更容易维护的子包，不想暴露所有的子包，又想子包内共享通用的处理包。<br>或者新写的包某个不太成熟的接口，只想暴露给某些特定的用户。</p><p>为了满足这种需求，Go语言的构建工具对包含<code>internal</code>的包导入路径进行了特殊处理，这种包叫<code>internal</code>包。<br><code>internal</code>包只能被和<code>internal</code>包共同父目录的包所导入。<br>例如，net&#x2F;http&#x2F;internal&#x2F;chunked内部包只能被net&#x2F;http&#x2F;httputil或net&#x2F;http包导入，但是不能被net&#x2F;url包导入。不过net&#x2F;url包却可以导入net&#x2F;http&#x2F;httputil包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">net/http<br>net/http/internal/chunked<br>net/http/httputil<br>net/url<br></code></pre></td></tr></table></figure><h1 id="go-list"><a href="#go-list" class="headerlink" title="go list"></a>go list</h1><p><code>go list</code>命令可以查询可用包的信息。<br>最简单的用法是验证包是否在工作区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list github.com/go-sql-driver/mysql</span><br>github.com/go-sql-driver/mysql<br></code></pre></td></tr></table></figure><p>存在，则打印出导入路径。<br>打印出工作区所有包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list ...</span><br>archive/tar<br>archive/zip<br>bufio<br>bytes<br>cmd/addr2line<br>cmd/api<br>cmd/asm<br>...<br></code></pre></td></tr></table></figure><p>打印出工作区特定目录下的所有包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list cmd/...</span><br>cmd/addr2line<br>cmd/api<br>cmd/asm<br></code></pre></td></tr></table></figure><p>与某一字符串相关的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list ...xml...</span><br>encoding/xml<br></code></pre></td></tr></table></figure><p><code>go list -json</code>可以以json格式打印出包的元信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list -json <span class="hljs-built_in">hash</span></span><br>&#123;<br>&quot;Dir&quot;: &quot;/usr/local/go/src/hash&quot;,<br>&quot;ImportPath&quot;: &quot;hash&quot;,<br>&quot;Name&quot;: &quot;hash&quot;,<br>&quot;Doc&quot;: &quot;Package hash provides interfaces for hash functions.&quot;,<br>&quot;Target&quot;: &quot;/usr/local/go/pkg/darwin_amd64/hash.a&quot;,<br>&quot;Root&quot;: &quot;/usr/local/go&quot;,<br>&quot;Match&quot;: [<br>&quot;hash&quot;<br>],<br>&quot;Goroot&quot;: true,<br>&quot;Standard&quot;: true,<br>&quot;GoFiles&quot;: [<br>&quot;hash.go&quot;<br>],<br>&quot;Imports&quot;: [<br>&quot;io&quot;<br>],<br>&quot;Deps&quot;: [<br>&quot;errors&quot;,<br>&quot;internal/abi&quot;,<br>&quot;internal/bytealg&quot;,<br>&quot;internal/cpu&quot;,<br>&quot;internal/goarch&quot;,<br>&quot;internal/goexperiment&quot;,<br>&quot;internal/goos&quot;,<br>&quot;internal/race&quot;,<br>&quot;internal/reflectlite&quot;,<br>&quot;internal/unsafeheader&quot;,<br>&quot;io&quot;,<br>&quot;runtime&quot;,<br>&quot;runtime/internal/atomic&quot;,<br>&quot;runtime/internal/math&quot;,<br>&quot;runtime/internal/sys&quot;,<br>&quot;sync&quot;,<br>&quot;sync/atomic&quot;,<br>&quot;unsafe&quot;<br>],<br>&quot;XTestGoFiles&quot;: [<br>&quot;example_test.go&quot;,<br>&quot;marshal_test.go&quot;<br>],<br>&quot;XTestImports&quot;: [<br>&quot;bytes&quot;,<br>&quot;crypto/md5&quot;,<br>&quot;crypto/sha1&quot;,<br>&quot;crypto/sha256&quot;,<br>&quot;crypto/sha512&quot;,<br>&quot;encoding&quot;,<br>&quot;encoding/hex&quot;,<br>&quot;fmt&quot;,<br>&quot;hash&quot;,<br>&quot;hash/adler32&quot;,<br>&quot;hash/crc32&quot;,<br>&quot;hash/crc64&quot;,<br>&quot;hash/fnv&quot;,<br>&quot;log&quot;,<br>&quot;testing&quot;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><code>go list  -f </code> 可以按模版打印出包：<br>下面的命令将打印strconv包的依赖的包，然后用join模板函数将结果链接为一行，连接时每个结果之间用一个空格分隔：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list -f <span class="hljs-string">&#x27;&#123;&#123;join .Deps &quot; &quot;&#125;&#125;&#x27;</span> strconv</span><br>errors internal/abi internal/bytealg internal/cpu internal/goarch internal/goexperiment internal/goos internal/reflectlite internal/unsafeheader math math/bits runtime runtime/internal/atomic runtime/internal/math runtime/internal/sys unicode/utf8 unsafe<br></code></pre></td></tr></table></figure><p>如果是在windows，注意增加转义字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list -f <span class="hljs-string">&quot;&#123;&#123;join .Deps \&quot; \&quot;&#125;&#125;&quot;</span> strconv</span><br></code></pre></td></tr></table></figure><p>打印compress子目录下所有包的依赖包列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list -f <span class="hljs-string">&#x27;&#123;&#123;.ImportPath&#125;&#125; -&gt; &#123;&#123;join .Imports &quot; &quot;&#125;&#125;&#x27;</span> compress/...</span><br>compress/bzip2 -&gt; bufio io sort<br>compress/flate -&gt; bufio errors fmt io math math/bits sort strconv sync<br>compress/gzip -&gt; bufio compress/flate encoding/binary errors fmt hash/crc32 io time<br>compress/lzw -&gt; bufio errors fmt io<br>compress/zlib -&gt; bufio compress/flate encoding/binary errors fmt hash hash/adler32 io<br></code></pre></td></tr></table></figure><p>同样的，在windows下，增加转义字符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go list -f <span class="hljs-string">&quot;&#123;&#123;.ImportPath&#125;&#125; -&gt; &#123;&#123;join .Imports \&quot; \&quot;&#125;&#125;&quot;</span> compress/...</span><br></code></pre></td></tr></table></figure><h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 10.4：</strong> 创建一个工具，根据命令行指定的参数，报告工作区所有依赖指定包的其它包集合。提示：你需要运行go list命令两次，一次用于初始化包，一次用于所有包。你可能需要用encoding&#x2F;json（§4.5）包来分析输出的JSON格式的信息。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> pkg <span class="hljs-keyword">struct</span> &#123;<br>ImportPath <span class="hljs-type">string</span><br>Deps       []<span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkgs</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> ([]pkg, <span class="hljs-type">error</span>) &#123;<br>output, err := exec.Command(<span class="hljs-string">&quot;go&quot;</span>, <span class="hljs-built_in">append</span>([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;-json&quot;</span>&#125;, args...)...).Output()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">var</span> pkgs []pkg<br>dec := json.NewDecoder(bytes.NewReader(output))<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">var</span> pkg pkg<br><span class="hljs-keyword">if</span> err := dec.Decode(&amp;pkg); err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>pkgs = <span class="hljs-built_in">append</span>(pkgs, pkg)<br>&#125;<br><span class="hljs-keyword">return</span> pkgs, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ips, err := pkgs(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>deps, err := pkgs([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;all&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> _, dep := <span class="hljs-keyword">range</span> deps &#123;<br><span class="hljs-keyword">for</span> _, depip := <span class="hljs-keyword">range</span> dep.Deps &#123;<br><span class="hljs-keyword">for</span> _, ip := <span class="hljs-keyword">range</span> ips &#123;<br><span class="hljs-keyword">if</span> ip.ImportPath == depip &#123;<br>fmt.Println(dep.ImportPath)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.6. 包的命名</title>
      <link href="/posts/26ffbeb103e4/"/>
      <url>/posts/26ffbeb103e4/</url>
      
        <content type="html"><![CDATA[<p>包的命名规则：</p><ul><li>命名尽量短小</li><li>要尽量避免与常用的局部变量重复</li><li>尽量使用单数形式</li><li>避免与预定义类型冲突，可以复数形式</li><li>避免与关键字冲突，可以复数形式</li><li>避免包名歧义</li></ul><p>当设计一个包时，要考虑包名与方法&#x2F;函数&#x2F;成员变量名配合。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">flag.Intbytes.Equalhttp.Get<br></code></pre></td></tr></table></figure><p>也有可能包名与方法、函数和成员名重复。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">rand.Rand<br></code></pre></td></tr></table></figure><p>所以，包名要尽量简洁短小。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.5. 包的匿名导入</title>
      <link href="/posts/85c6d629ce42/"/>
      <url>/posts/85c6d629ce42/</url>
      
        <content type="html"><![CDATA[<p>如果导入一个包而不去使用这个包，那么就会导致编译错误。<br>但是只想使用导入包的而产生的副作用，如“计算包级变量的初始化表达式和执行导入包的init初始化函数”。<br>这时候，需要抑制该编译错误，可以 使用<code>—</code>下划线空白标识符，重命名导入的包。<br>空白标识符表示，不能被访问。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">improt _ <span class="hljs-string">&quot;image/png&quot;</span><br></code></pre></td></tr></table></figure><p>这种行为被称为<code>包的匿名导入</code>。<br>它通常是用来实现一个编译时机制，然后通过在main主程序入口选择性地导入附加的包。</p><p>下面是使用匿名导入该特性的例子。<br>标准库的image图像包包含了一个Decode函数，用于从io.Reader接口读取数据并解码图像，它调用底层注册的图像解码器来完成任务，然后返回image.Image类型的图像。使用image.Decode很容易编写一个图像格式的转换工具，读取一种格式的图像，然后编码为另一种图像格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/jpeg&quot;</span><br>_ <span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := toJPEG(os.Stdin, os.Stdout); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;jpeg:%v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">toJPEG</span><span class="hljs-params">(in io.Reader, out io.Writer)</span></span> <span class="hljs-type">error</span> &#123;<br>img, kind, err := image.Decode(in)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;input format=%v\n&quot;</span>, kind)<br><span class="hljs-keyword">return</span> jpeg.Encode(out, img, &amp;jpeg.Options&#123;Quality: <span class="hljs-number">95</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>对之前mandelbrot进行打印：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> build <span class="hljs-keyword">go</span>-learn-gopl/ch/ch3/mandelbrot<br>$ <span class="hljs-keyword">go</span> build <span class="hljs-keyword">go</span>-learn-gopl/ch/ch10/jpeg<br>$ ./mandelbrot | ./jpeg &gt; mandelbrot.jpeg<br>input format=png<br></code></pre></td></tr></table></figure><p>如果在导入包路径中没有<code>_ &quot;image/png&quot;</code>，虽然程序可以编译和运行， 但代码执行就会报错。 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> build <span class="hljs-keyword">go</span>-learn-gopl/ch/ch10/jpeg<br>$ ./mandelbrot | ./jpeg &gt; mandelbrot.jpeg<br>jpeg:image: unknown format<br></code></pre></td></tr></table></figure><p>标准库还提供了GIF、PNG和JPEG等格式图像的解码器，但为了保持程序不至于太大，很多解码器并未包含，需要根据需求明确支持的格式。<br>image.Decode函数在解码时会依次查询支持的格式列表。<br>每个格式驱动列表的每个入口指定了四件事情：<br>格式的名称；<br>一个用于描述这种图像数据开头部分模式的字符串，用于解码器检测识别；<br>一个Decode函数用于完成解码图像工作；<br>一个DecodeConfig函数用于解码图像的大小和颜色空间的信息。</p><p>每个驱动入口是通过调用image.RegisterFormat函数注册，一般是在每个格式包的init初始化函数中调用，例如image&#x2F;png包是这样注册的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> png <span class="hljs-comment">// image/png</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Decode</span><span class="hljs-params">(r io.Reader)</span></span> (image.Image, <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DecodeConfig</span><span class="hljs-params">(r io.Reader)</span></span> (image.Config, <span class="hljs-type">error</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">const</span> pngHeader = <span class="hljs-string">&quot;\x89PNG\r\n\x1a\n&quot;</span><br>    image.RegisterFormat(<span class="hljs-string">&quot;png&quot;</span>, pngHeader, Decode, DecodeConfig)<br>&#125;<br></code></pre></td></tr></table></figure><p>所以主程序只需要匿名导入特定图像驱动包就可以用image.Decode解码对应格式的图像了。</p><p>数据库包database&#x2F;sql也是采用了类似的技术，让用户可以根据自己需要选择导入必要的数据库驱动。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;database/sql&quot;</span><br>    _ <span class="hljs-string">&quot;github.com/lib/pq&quot;</span>              <span class="hljs-comment">// enable support for Postgres</span><br>    _ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span> <span class="hljs-comment">// enable support for MySQL</span><br>)<br><br>db, err = sql.Open(<span class="hljs-string">&quot;postgres&quot;</span>, dbname) <span class="hljs-comment">// OK</span><br>db, err = sql.Open(<span class="hljs-string">&quot;mysql&quot;</span>, dbname)    <span class="hljs-comment">// OK</span><br>db, err = sql.Open(<span class="hljs-string">&quot;sqlite3&quot;</span>, dbname)  <span class="hljs-comment">// returns error: unknown driver &quot;sqlite3”</span><br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 10.1：</strong> 扩展jpeg程序，以支持任意图像格式之间的相互转换，使用image.Decode检测支持的格式类型，然后通过flag命令行标志参数选择输出的格式。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/gif&quot;</span><br><span class="hljs-string">&quot;image/jpeg&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> formatFlag = flag.String(<span class="hljs-string">&quot;format&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>img, king, err := image.Decode(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;input format=%v\n&quot;</span>, king)<br><span class="hljs-keyword">switch</span> *formatFlag &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;jpeg&quot;</span>:<br><span class="hljs-keyword">if</span> err := jpeg.Encode(os.Stdout, img, &amp;jpeg.Options&#123;Quality: <span class="hljs-number">100</span>&#125;); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;png&quot;</span>:<br><span class="hljs-keyword">if</span> err := png.Encode(os.Stdout, img); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gif&quot;</span>:<br><span class="hljs-keyword">if</span> err := gif.Encode(os.Stdout, img, &amp;gif.Options&#123;&#125;); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 10.2：</strong> 设计一个通用的压缩文件读取框架，用来读取ZIP（archive&#x2F;zip）和POSIX tar（archive&#x2F;tar）格式压缩的文档。使用类似上面的注册技术来扩展支持不同的压缩格式，然后根据需要通过匿名导入选择导入要支持的压缩格式的驱动包。<br>解：<br>archive&#x2F;archive.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> archive<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> FileHeader <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Size <span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">List</span><span class="hljs-params">(f *os.File)</span></span> ([]FileHeader, <span class="hljs-type">error</span>) &#123;<br>format, err := match(f)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> format.List(f)<br>&#125;<br><br><span class="hljs-keyword">type</span> Format <span class="hljs-keyword">struct</span> &#123;<br>Name   <span class="hljs-type">string</span><br>Str    <span class="hljs-type">string</span><br>Offset <span class="hljs-type">int</span><br>List   <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*os.File)</span></span> ([]FileHeader, <span class="hljs-type">error</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> formats []Format<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitFormats</span><span class="hljs-params">(format Format)</span></span> &#123;<br>formats = <span class="hljs-built_in">append</span>(formats, format)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">match</span><span class="hljs-params">(f *os.File)</span></span> (*Format, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">for</span> _, format := <span class="hljs-keyword">range</span> formats &#123;<br>f.Seek(<span class="hljs-number">0</span>, io.SeekStart)<br>r := bufio.NewReader(f)<br>b, err := r.Peek(format.Offset + <span class="hljs-built_in">len</span>(format.Str))<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &amp;&amp; bytes.Equal([]<span class="hljs-type">byte</span>(format.Str), b[format.Offset:]) &#123;<br>f.Seek(<span class="hljs-number">0</span>, io.SeekStart)<br><span class="hljs-keyword">return</span> &amp;format, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;unknown format&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>archive&#x2F;tar.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> tar<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;archive/tar&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex10/ex10.2/archive&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>archive.InitFormats(archive.Format&#123;<br>Name:   <span class="hljs-string">&quot;tar&quot;</span>,<br>Str:    <span class="hljs-string">&quot;ustar\x0000&quot;</span>,<br>Offset: <span class="hljs-number">257</span>,<br>List:   list,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">list</span><span class="hljs-params">(f *os.File)</span></span> ([]archive.FileHeader, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> headers []archive.FileHeader<br>tr := tar.NewReader(f)<br><span class="hljs-keyword">for</span> &#123;<br>hdr, err := tr.Next()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>headers = <span class="hljs-built_in">append</span>(headers, archive.FileHeader&#123;<br>Name: hdr.Name,<br>Size: <span class="hljs-type">uint64</span>(hdr.Size),<br>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> headers, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>archive&#x2F;zip.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> zip<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;archive/zip&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex10/ex10.2/archive&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>archive.InitFormats(archive.Format&#123;<br>Name:   <span class="hljs-string">&quot;zip&quot;</span>,<br>Str:    <span class="hljs-string">&quot;PK\x03\x04&quot;</span>,<br>Offset: <span class="hljs-number">0</span>,<br>List:   list,<br>&#125;)<br>archive.InitFormats(archive.Format&#123;<br>Name:   <span class="hljs-string">&quot;zip&quot;</span>,<br>Str:    <span class="hljs-string">&quot;PK\x05\x06&quot;</span>,<br>Offset: <span class="hljs-number">0</span>,<br>List:   list,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">list</span><span class="hljs-params">(f *os.File)</span></span> ([]archive.FileHeader, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> headers []archive.FileHeader<br>r, err := zip.OpenReader(f.Name())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> r.Close()<br><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> r.File &#123;<br>headers = <span class="hljs-built_in">append</span>(headers, archive.FileHeader&#123;<br>Name: f.Name,<br>Size: f.UncompressedSize64,<br>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> headers, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>cmd&#x2F;main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;archive/tar&quot;</span><br><span class="hljs-string">&quot;archive/zip&quot;</span><br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> tbuf bytes.Buffer<br><span class="hljs-keyword">var</span> zbuf bytes.Buffer<br>tw := tar.NewWriter(&amp;tbuf)<br>zw := zip.NewWriter(&amp;zbuf)<br><br><span class="hljs-keyword">var</span> files = []<span class="hljs-keyword">struct</span> &#123;<br>Name, Body <span class="hljs-type">string</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;readme.txt&quot;</span>, <span class="hljs-string">&quot;This archive contains some text files.&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;gopher.txt&quot;</span>, <span class="hljs-string">&quot;Gopher names:\nGeorge\nGeoffrey\nGonzo&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;todo.txt&quot;</span>, <span class="hljs-string">&quot;Get animal handling license.&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br><span class="hljs-comment">// tar</span><br>hdr := &amp;tar.Header&#123;<br>Name: file.Name,<br>Mode: <span class="hljs-number">0600</span>,<br>Size: <span class="hljs-type">int64</span>(<span class="hljs-built_in">len</span>(file.Body)),<br>&#125;<br><span class="hljs-keyword">if</span> err := tw.WriteHeader(hdr); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> _, err := tw.Write([]<span class="hljs-type">byte</span>(file.Body)); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// zip</span><br>f, err := zw.Create(file.Name)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>_, err = f.Write([]<span class="hljs-type">byte</span>(file.Body))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Close</span><br><span class="hljs-keyword">if</span> err := tw.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> err := zw.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// tar</span><br>tf, err := os.Create(<span class="hljs-string">&quot;./ex/ex10/ex10.2/cmd/tar.tar&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> tf.Close()<br>_, err = io.Copy(tf, &amp;tbuf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// zip</span><br>zf, err := os.Create(<span class="hljs-string">&quot;./ex/ex10/ex10.2/cmd/zip.zip&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> zf.Close()<br>_, err = io.Copy(zf, &amp;zbuf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>archive_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> archive_test<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ex/ex10/ex10.2/archive&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><br>_ <span class="hljs-string">&quot;go-learn-gopl/ex/ex10/ex10.2/archive/tar&quot;</span><br>_ <span class="hljs-string">&quot;go-learn-gopl/ex/ex10/ex10.2/archive/zip&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// tar</span><br>tf, err := os.Open(<span class="hljs-string">&quot;cmd/tar.tar&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> tf.Close()<br>theaders, err := archive.List(tf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">var</span> tgot []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> theaders &#123;<br>tgot = <span class="hljs-built_in">append</span>(tgot, h.Name)<br>&#125;<br>sort.Strings(tgot)<br><br><span class="hljs-comment">// zip</span><br>zf, err := os.Open(<span class="hljs-string">&quot;cmd/zip.zip&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> zf.Close()<br>zheaders, err := archive.List(zf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">var</span> zgot []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> zheaders &#123;<br>zgot = <span class="hljs-built_in">append</span>(zgot, h.Name)<br>&#125;<br>sort.Strings(zgot)<br><br><span class="hljs-comment">// test</span><br>want := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;readme.txt&quot;</span>, <span class="hljs-string">&quot;gopher.txt&quot;</span>, <span class="hljs-string">&quot;todo.txt&quot;</span>&#125;<br>sort.Strings(want)<br><br><span class="hljs-keyword">if</span> !equal(tgot, want) &#123;<br>t.Errorf(<span class="hljs-string">&quot;tar reading err&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> !equal(zgot, want) &#123;<br>t.Errorf(<span class="hljs-string">&quot;zip reading err&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">equal</span><span class="hljs-params">(a, b []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) != <span class="hljs-built_in">len</span>(b) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br><span class="hljs-keyword">if</span> v != b[i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.4. 导入声明</title>
      <link href="/posts/7c1cbb35e653/"/>
      <url>/posts/7c1cbb35e653/</url>
      
        <content type="html"><![CDATA[<p>每个导入声明可以单独指定导入路径，也可以通过圆括号同时导入多个导入路径。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;os&quot;</span><br><br>improt (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>导入的包之间可以通过添加空行来分组。通常将来自不同组织的包进行独立分组。</p><p>包的导入顺序无关紧要，但是每个分组中一般会根据字符串顺序排序。<br>（goimports和gofmt工具可以将不同分组导入的包进行独立排序。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;html/template&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br><br>    <span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br>    <span class="hljs-string">&quot;golang.org/x/net/ipv4&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>如果要导入包名相同的两个包，可以给其中的一个包重命名（别名）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;orypto/rand&quot;</span><br>mrand <span class="hljs-string">&quot;math/rand&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>导入包的重命名只影响当前的源文件。</p><p>导入包的重命名不单是解决包名冲突，还可以简化包名，也可以避免与源码中常量命名重复。</p><p>每个导入声明语句都明确指定了当前包与被导入包之间的依赖关系。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.3. 包声明</title>
      <link href="/posts/376c63460620/"/>
      <url>/posts/376c63460620/</url>
      
        <content type="html"><![CDATA[<p>每个go语言源码文件开头必须是包声明语句。<br>包声明语句的主要目的是确定当前包被其它包导入时默认的标识符（也称为包名）。</p><p>如 math&#x2F;rand包的每个源码文件开头都是package rand。</p><p>通常来说，默认的包名就是包导入路径名的最后一段，因此即使两个包的导入路径不同，它们依然可能有一个相同的包名。</p><p>关于默认包名一般采用导入路径名的最后一段的约定也有三种例外情况。</p><ul><li><p>第一个例外，包对应一个可执行程序，也就是main包，这时候main包本身的导入路径是无关紧要的。</p><ul><li>名字为main的包是给go build构建命令一个信息，这个包编译完之后必须调用连接器生成一个可执行程序。</li></ul></li><li><p>第二个例外，包所在的目录中可能有一些文件名是以test.go为后缀的Go源文件，并且这些源文件声明的包名也是以_test为后缀名。</p><ul><li>一种是普通包，另外一种测试的外部拓展包。</li><li>所有以_test为后缀包名的测试外部扩展包都由go test命令独立编译，普通包和测试的外部扩展包是相互独立的。测试的外部扩展包一般用来避免测试代码中的循环导入依赖。</li></ul></li><li><p>第三个例外，一些依赖版本号的管理工具会在导入路径后追加版本号信息，例如”gopkg.in&#x2F;yaml.v2”。这种情况下包的名字并不包含版本号后缀，而是yaml。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.2. 导入路径</title>
      <link href="/posts/ce5416f3abff/"/>
      <url>/posts/ce5416f3abff/</url>
      
        <content type="html"><![CDATA[<p>每个包是由一个全局唯一的字符串所标识的导入路径定位。</p><p>import语句中的字符串就是导入路径。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math/rand&quot;</span><br>    <span class="hljs-string">&quot;encoding/json&quot;</span><br><br>    <span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>Go语言的规范并没有指明包的导入路径字符串的具体含义，导入路径的具体含义是由构建工具来解释的。</p><p>为了避免冲突，所有非标准库包的导入路径建议以所在组织的互联网域名为前缀。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.1. 包简介</title>
      <link href="/posts/a912c21440d0/"/>
      <url>/posts/a912c21440d0/</url>
      
        <content type="html"><![CDATA[<p>任何包系统的设计目的离不开，抽象，封装和复用。<br>为了简化大型程序的设计和维护工作，通过将一系列相关的特性放入一个独立的单元以理解和更新。<br>在每个单元更新时也同时保持和程序中其它单元的相对独立性。<br>这种模块化的特性允许每个包可以被其它不同的项目共享和重用，在项目范围内，甚至全世界范围内统一分发和复用。</p><p>包还通过控制包内名字的可见性和是否导出来实现封装特性。</p><p>Go语言的闪电般的编译速度主要得益于三个语言特性。</p><ul><li>所有导入的包必须在每个文件的开头显式声明<br>  这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系。</li><li>禁止包的环状依赖<br>  因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译，而且很可能是被并发编译。</li><li>编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系。</li></ul><p>因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的的文件。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十章 包和工具</title>
      <link href="/posts/94532dfae374/"/>
      <url>/posts/94532dfae374/</url>
      
        <content type="html"><![CDATA[<p>本章主要讲go语言的包及其工具。<br>查询Go语言下的包数量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> list std | wc -l<br><span class="hljs-number">240</span><br></code></pre></td></tr></table></figure><p><a href="/posts/a912c21440d0/">10.1. 包简介</a><br><a href="/posts/ce5416f3abff/">10.2. 导入路径</a><br><a href="/posts/376c63460620/">10.3. 包声明</a><br><a href="/posts/7c1cbb35e653/">10.4. 导入声明</a><br><a href="/posts/85c6d629ce42/">10.5. 包的匿名导入</a><br><a href>10.6. 包和命名</a><br><a href="/posts/c1eef8565635/">10.7. 工具</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.8. Goroutine和线程</title>
      <link href="/posts/85a231e79892/"/>
      <url>/posts/85a231e79892/</url>
      
        <content type="html"><![CDATA[<p>本章主要内容：Goroutine和线程的区别。</p><h1 id="9-8-1-动态栈"><a href="#9-8-1-动态栈" class="headerlink" title="9.8.1 动态栈"></a>9.8.1 动态栈</h1><p>每个OS线程都拥有一个固定大小的内存块（一般为2MB）作为栈，该栈用于存储函数调用或挂起（调用其它函数时）的函数内部变量。<br>Goroutine的栈大小并不是固定的，可以根据需要动态伸缩的。</p><p>Goroutine会以很小的栈开始生命周期，一般为2KB。</p><p>与OS线程一样，Goroutine的栈同样存储其活跃或挂起的函数内部变量。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 9.4:</strong> 创建一个流水线程序，支持用channel连接任意数量的goroutine，在跑爆内存之前，可以创建多少流水线阶段？一个变量通过整个流水线需要用多久？<br>解：<br>pipeline.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> pipeline<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pipeline</span><span class="hljs-params">(stage <span class="hljs-type">int</span>)</span></span> (<span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">interface</span>&#123;&#125;, &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br><span class="hljs-keyword">if</span> stage &lt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br>in := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)<br>out := in<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; stage; i++ &#123;<br>prev := out<br>next := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(prev, next <span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> prev &#123;<br>next &lt;- n<br>&#125;<br><span class="hljs-built_in">close</span>(next)<br>&#125;(prev, next)<br>out = next<br>&#125;<br><span class="hljs-keyword">return</span> in, out<br>&#125;<br></code></pre></td></tr></table></figure><p>pipeline_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> pipeline<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPipeline</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>in, out := pipeline(<span class="hljs-number">3</span>)<br>in &lt;- <span class="hljs-number">1</span><br>fmt.Println(&lt;-out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bench</span><span class="hljs-params">(b *testing.B, stages <span class="hljs-type">int</span>)</span></span> &#123;<br>in, out := pipeline(stages)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>in &lt;- <span class="hljs-number">1</span><br>&#125;()<br>&lt;-out<br>&#125;<br><span class="hljs-built_in">close</span>(in)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPipeline1</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPipeline1024</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, <span class="hljs-number">1024</span>)<br>&#125;<br><br><span class="hljs-comment">// 1G</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPipeline1048576</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, <span class="hljs-number">1048576</span>)<br>&#125;<br><br><span class="hljs-comment">// 5G</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPipeline2097152</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, <span class="hljs-number">2097152</span>)<br>&#125;<br><br><span class="hljs-comment">// 10G</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPipeline4194304</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, <span class="hljs-number">4194304</span>)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">goos: darwin</span><br><span class="hljs-comment">goarch: amd64</span><br><span class="hljs-comment">pkg: go-learn-gopl/ex/ex9/ex9.4</span><br><span class="hljs-comment">cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz</span><br><span class="hljs-comment">BenchmarkPipeline1</span><br><span class="hljs-comment">BenchmarkPipeline1-8          1467734       821.2 ns/op</span><br><span class="hljs-comment">BenchmarkPipeline1024</span><br><span class="hljs-comment">BenchmarkPipeline1024-8          2932    419134 ns/op</span><br><span class="hljs-comment">BenchmarkPipeline1048576</span><br><span class="hljs-comment">BenchmarkPipeline1048576-8          13241682720 ns/op</span><br><span class="hljs-comment">BenchmarkPipeline2097152</span><br><span class="hljs-comment">BenchmarkPipeline2097152-8          14608015112 ns/op</span><br><span class="hljs-comment">BenchmarkPipeline4194304</span><br><span class="hljs-comment">BenchmarkPipeline4194304-8          127193923912 ns/op</span><br><span class="hljs-comment">PASS</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h1 id="9-8-2-Goroutine调度"><a href="#9-8-2-Goroutine调度" class="headerlink" title="9.8.2 Goroutine调度"></a>9.8.2 Goroutine调度</h1><p><strong>OS线程调度：</strong><br>OS线程会被操作系统内核调度。<br>每过几毫秒，一个硬件计时器会中断处理器，会调用一个叫作scheduler的内核函数。<br>该内核函数会挂起当前执行的线程，并保存该线程的寄存器内容，检查线程列表并决定下次那些被挂起的线程可以运行，并从内存中恢复该线程的寄存器内容，然后恢复线程的执行。</p><p>也就是说保存用户线程的状态到内存中，恢复另一个线程到寄存器，然后更新调度器的数据。<br>这几步相对很慢，需要反复内存访问，并且会增加运行的cpu周期。</p><p><strong>Goroutine调度：</strong><br>Go的运行时包中有其自己的调度器，而非内核调度器，该调度器可以继续m:n的调度。<br>即可以在n个OS线程可以调度m个Goroutine。<br>Go调度器按程序独立，即只调度当前程序的Goroutine。</p><p>Go调度器工作内容与内核调度器类似的。</p><p>与OS线程调度不同的是，Go调度器并非使用硬件计时器，而是由Go语言编写的计时器。</p><p>Goroutine的调度方式不需要进入内核上下文，重新调度（唤醒）一个Goroutine的代价比调度一个线程要低得多。</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 9.5:</strong> 写一个有两个goroutine的程序，两个goroutine会向两个无buffer channel反复地发送ping-pong消息。这样的程序每秒可以支持多少次通信？<br>解：<br>pingpong.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> pingpong<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Pingpong</span><span class="hljs-params">(count <span class="hljs-type">int</span>)</span></span> &#123;<br>ping := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>pong := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; count; i++ &#123;<br>ping &lt;- <span class="hljs-string">&quot;ping&quot;</span><br>&lt;-pong<br>&#125;<br>done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; count; i++ &#123;<br>&lt;-ping<br>pong &lt;- <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;()<br><br>&lt;-done<br>&lt;-done<br><br><span class="hljs-built_in">close</span>(ping)<br><span class="hljs-built_in">close</span>(pong)<br><span class="hljs-built_in">close</span>(done)<br>&#125;<br></code></pre></td></tr></table></figure><p>pingpong_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> pingpong<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPingpong</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>Pingpong(b.N)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">goos: darwin</span><br><span class="hljs-comment">goarch: amd64</span><br><span class="hljs-comment">pkg: go-learn-gopl/ex/ex9/ex9.5</span><br><span class="hljs-comment">cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz</span><br><span class="hljs-comment">BenchmarkPingpong</span><br><span class="hljs-comment">BenchmarkPingpong-8    2698485       432.1 ns/op</span><br><span class="hljs-comment">PASS</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="9-8-3-GOMAXPROCS"><a href="#9-8-3-GOMAXPROCS" class="headerlink" title="9.8.3 GOMAXPROCS"></a>9.8.3 GOMAXPROCS</h1><p>Go的调度器使用GOMAXPROCS的变量决定会有多少个OS线程来同时执行。<br>GOMAXPROCS为m:n中的n。<br>GOMAXPROCS的默认值为CPU的核心数。<br>如果程序在核心数为8的机器上运行，那么调度器一次会使用8个线程去调度程序。</p><p>在休眠中的或者在通信中被阻塞的goroutine是不需要一个对应的线程来做调度的。<br>在I&#x2F;O中或系统调用中或调用非Go语言函数时，是需要一个对应的操作系统线程的，但是GOMAXPROCS并不需要将这几种情况计数在内。</p><p>可以使用GOMAXPROCS环境变量显式修改，或在运行时中用runtime.GOMAXPROCS函数修改。</p><p>下面是“黑客”程序，无限打印0和1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">go</span> fmt.Print(<span class="hljs-number">0</span>)<br>fmt.Print(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">$ GOMAXPROCS=<span class="hljs-number">1</span> <span class="hljs-keyword">go</span> run hacker.<span class="hljs-keyword">go</span><br><span class="hljs-number">11111111111111111111111111111111111111111111110000000000000000000000000000111.</span>..<br>$ GOMAXPROCS=<span class="hljs-number">2</span> <span class="hljs-keyword">go</span> run hacker.<span class="hljs-keyword">go</span><br><span class="hljs-number">010101010100101010010101011010101001010110010101010100101010101010101001.</span>...<br></code></pre></td></tr></table></figure><p>第一次执行时，最多同时只有一个Goroutine被执行。<br>最开始只有main goroutine执行，会一直打印1，过一段时间后，GO调度器会将其设置为休眠，并唤醒另一个Goroutine，这时候开始打印很多0。在打印的时候，Goroutine是被调度到OS线程上执行的。<br>第二次执行时，最多同时有两个Goroutine被执行。<br>所以0和1会被相同频率打印，但是Goroutine的调度是受到很多因子影响的，如runtimed的不断发展演变，所以打印出的内容与理论上太相同，但是0和1的打印频率是差不多的。</p><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><p><strong>练习9.6:</strong> 测试一下计算密集型的并发程序(练习8.5那样的)会被GOMAXPROCS怎样影响到。在你的电脑上最佳的值是多少？你的电脑CPU有多少个核心？<br>解：<br>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ex/ex9/ex9.6/mandelbrot&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>workers := runtime.GOMAXPROCS(<span class="hljs-number">-1</span>)<br>img := mandelbrot.ConcurrentRender(workers)<br>png.Encode(os.Stdout, img)<br>&#125;<br></code></pre></td></tr></table></figure><p>concurrent.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConcurrentRender</span><span class="hljs-params">(workers <span class="hljs-type">int</span>)</span></span> *image.RGBA &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><br>rows := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, height)<br><span class="hljs-keyword">for</span> row := <span class="hljs-number">0</span>; row &lt; height; row++ &#123;<br>rows &lt;- row<br>&#125;<br><span class="hljs-built_in">close</span>(rows)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; workers; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> py := <span class="hljs-keyword">range</span> rows &#123;<br>y := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br>img.Set(<br>px,<br>py,<br>mandelbrot(z),<br>)<br>&#125;<br>&#125;<br>wg.Done()<br>&#125;()<br>&#125;<br>wg.Wait()<br><br><span class="hljs-keyword">return</span> img<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex128</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + z<br><span class="hljs-keyword">if</span> cmplx.Abs(v) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;<span class="hljs-number">255</span> - contrast*n&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br></code></pre></td></tr></table></figure><p>mandelbrot_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;runtime&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkSerialRender</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>SerialRender()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">benchmarkConcurrentRender</span><span class="hljs-params">(b *testing.B, workers <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>ConcurrentRender(workers)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark1</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMaxProces</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, runtime.GOMAXPROCS(<span class="hljs-number">-1</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark8</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">8</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark16</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">16</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark32</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">32</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark64</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">64</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark128</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">128</span>)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">goos: darwin</span><br><span class="hljs-comment">goarch: amd64</span><br><span class="hljs-comment">pkg: go-learn-gopl/ex/ex8/ex8.5/mandelbrot</span><br><span class="hljs-comment">cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz</span><br><span class="hljs-comment">BenchmarkSerialRender</span><br><span class="hljs-comment">BenchmarkSerialRender-8          4 269136007 ns/op</span><br><span class="hljs-comment">Benchmark1</span><br><span class="hljs-comment">Benchmark1-8                     4 252338560 ns/op</span><br><span class="hljs-comment">BenchmarkMaxProces</span><br><span class="hljs-comment">BenchmarkMaxProces-8            12  88347559 ns/op</span><br><span class="hljs-comment">Benchmark8</span><br><span class="hljs-comment">Benchmark8-8                    13  85825956 ns/op</span><br><span class="hljs-comment">Benchmark16</span><br><span class="hljs-comment">Benchmark16-8                   18  90070427 ns/op</span><br><span class="hljs-comment">Benchmark32</span><br><span class="hljs-comment">Benchmark32-8                   15  99837822 ns/op</span><br><span class="hljs-comment">Benchmark64</span><br><span class="hljs-comment">Benchmark64-8                   12  93368396 ns/op</span><br><span class="hljs-comment">Benchmark128</span><br><span class="hljs-comment">Benchmark128-8                  12  93611058 ns/op</span><br><span class="hljs-comment">PASS</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="9-8-4-Goroutine没有ID号"><a href="#9-8-4-Goroutine没有ID号" class="headerlink" title="9.8.4 Goroutine没有ID号"></a>9.8.4 Goroutine没有ID号</h1><p>在大多数支持多线程的操作系统和程序语言中，每个线程都有自己特定的”id”，可以是interger值或内存地址。<br>有id的情况下，可以做线程本地存储，thread-local storage。</p><p>Goroutine是没有id号的。<br>我们也无法辨别goroutine。<br>这种设计是故意而为之的。<br>由于tls在大多数情况下会被滥用，如web server是使用支持tls的语言实现的，其很多函数会去寻找HTTP请求的信息，即它们会到其存储层（可能是tls）去查找。如同过于依赖全局变量的程序一样，会导致一种不健康的距离外的行为。<br>即函数行为不是由内部变量而决定，而是由其运行的线程决定的，导致函数行为并非能够预测的。</p><p>Go鼓励简单模式，这种模式使得函数行为的影响是显式的。使得程序是易读的，在给函数分配任务时，不用考虑Goroutine的身份信息影响到函数。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.7. 示例：并发的非阻塞缓存</title>
      <link href="/posts/582daaba3cd4/"/>
      <url>/posts/582daaba3cd4/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>本章节的例子为非阻塞缓存。<br>即缓存函数的返回结果，调用该函数时，只要返回已缓存的函数结果即可。</p><p>下面以httpGetBody函数做为缓存函数的样例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">httpGetBody</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-keyword">return</span> io.ReadAll(resp.Body)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.ReadAll</code>函数有两个返回值，一个为[]byte数组和一个错误结果。<br>这里使用interface{}接收[]byte，是为了通配各个函数的返回值。</p><h1 id="test工具包"><a href="#test工具包" class="headerlink" title="test工具包"></a>test工具包</h1><p>为了整合输入参数，进行串行和并发的需求，统一整合为memotest。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> memotest<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">httpGetBody</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-keyword">return</span> io.ReadAll(resp.Body)<br>&#125;<br><br><span class="hljs-keyword">var</span> HTTPGetBody = httpGetBody<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">incomingURLs</span><span class="hljs-params">()</span></span> &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> []<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;https://baidu.com&quot;</span>,<br><span class="hljs-string">&quot;https://jd.com&quot;</span>,<br><span class="hljs-string">&quot;https://taobao.com&quot;</span>,<br><span class="hljs-string">&quot;https://qq.com&quot;</span>,<br><span class="hljs-string">&quot;https://godoc.org&quot;</span>,<br><span class="hljs-string">&quot;https://baidu.com&quot;</span>,<br><span class="hljs-string">&quot;https://jd.com&quot;</span>,<br><span class="hljs-string">&quot;https://taobao.com&quot;</span>,<br><span class="hljs-string">&quot;https://qq.com&quot;</span>,<br><span class="hljs-string">&quot;https://godoc.org&quot;</span>,<br>&#125; &#123;<br>ch &lt;- url<br>&#125;<br><span class="hljs-built_in">close</span>(ch)<br>&#125;()<br><span class="hljs-keyword">return</span> ch<br>&#125;<br><br><span class="hljs-keyword">type</span> M <span class="hljs-keyword">interface</span> &#123;<br>Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sequential</span><span class="hljs-params">(t *testing.T, m M)</span></span> &#123;<br><span class="hljs-keyword">for</span> url := <span class="hljs-keyword">range</span> incomingURLs() &#123;<br>start := time.Now()<br>value, err := m.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s, %s, %d bytes\n&quot;</span>, url, time.Since(start), <span class="hljs-built_in">len</span>(value.([]<span class="hljs-type">byte</span>)))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Concurrent</span><span class="hljs-params">(t *testing.T, m M)</span></span> &#123;<br><span class="hljs-keyword">var</span> n sync.WaitGroup<br><span class="hljs-keyword">for</span> url := <span class="hljs-keyword">range</span> incomingURLs() &#123;<br>n.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> n.Done()<br>start := time.Now()<br>value, err := m.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s, %s, %d bytes\n&quot;</span>, url, time.Since(start), <span class="hljs-built_in">len</span>(value.([]<span class="hljs-type">byte</span>)))<br>&#125;(url)<br>&#125;<br>n.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><p>并为每个版本加入相同的test。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> memo<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ch/ch9/memotest&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> httpGetBody = memotest.HTTPGetBody<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>m := New(httpGetBody)<br>memotest.Sequential(t, m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestConcurrent</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>m := New(httpGetBody)<br>memotest.Concurrent(t, m)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="初始版本"><a href="#初始版本" class="headerlink" title="初始版本"></a>初始版本</h1><p>下面为第一个“草稿”。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package memo provides a concurrency-unsafe</span><br><span class="hljs-comment">// memoization of a function of type Func.</span><br><span class="hljs-keyword">package</span> memo<br><br><span class="hljs-keyword">type</span> Memo <span class="hljs-keyword">struct</span> &#123;<br>f     Func<br>cache <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]result<br>&#125;<br><br><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">interface</span>&#123;&#125;<br>err   <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(f Func)</span></span> *Memo &#123;<br><span class="hljs-keyword">return</span> &amp;Memo&#123;f, <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]result)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>res, ok := memo.cache[key]<br><span class="hljs-keyword">if</span> !ok &#123;<br>res.value, res.err = memo.f(key)<br>memo.cache[key] = res<br>&#125;<br><span class="hljs-keyword">return</span> res.value, res.err<br>&#125;<br></code></pre></td></tr></table></figure><p>串行测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> test -v -run=Test ./ch/ch9/memo1<br>=== RUN   Test<br>https:<span class="hljs-comment">//baidu.com, 405.543831ms, 2381 bytes</span><br>https:<span class="hljs-comment">//jd.com, 324.683787ms, 183679 bytes</span><br>https:<span class="hljs-comment">//taobao.com, 384.265799ms, 96082 bytes</span><br>https:<span class="hljs-comment">//qq.com, 209.840425ms, 327 bytes</span><br>https:<span class="hljs-comment">//godoc.org, 2.761245376s, 32378 bytes</span><br>https:<span class="hljs-comment">//baidu.com, 661ns, 2381 bytes</span><br>https:<span class="hljs-comment">//jd.com, 224ns, 183679 bytes</span><br>https:<span class="hljs-comment">//taobao.com, 188ns, 96082 bytes</span><br>https:<span class="hljs-comment">//qq.com, 474ns, 327 bytes</span><br>https:<span class="hljs-comment">//godoc.org, 323ns, 32378 bytes</span><br>--- PASS: Test (<span class="hljs-number">4.09</span>s)<br></code></pre></td></tr></table></figure><p>显然是无并发的，不存在数据竞争问题。 请求是一条接着一条，耗时长。</p><p>并行测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> test -run=TestConcurrent -v ./ch/ch9/memo1<br>=== RUN   TestConcurrent<br>https:<span class="hljs-comment">//qq.com, 33.114198ms, 327 bytes</span><br>https:<span class="hljs-comment">//qq.com, 46.830945ms, 327 bytes</span><br>https:<span class="hljs-comment">//jd.com, 68.843239ms, 183679 bytes</span><br>https:<span class="hljs-comment">//taobao.com, 94.846451ms, 96082 bytes</span><br>https:<span class="hljs-comment">//baidu.com, 106.973399ms, 2381 bytes</span><br>https:<span class="hljs-comment">//jd.com, 122.166527ms, 183679 bytes</span><br>https:<span class="hljs-comment">//baidu.com, 172.595417ms, 2381 bytes</span><br>https:<span class="hljs-comment">//taobao.com, 189.742852ms, 96082 bytes</span><br>https:<span class="hljs-comment">//godoc.org, 558.529384ms, 32378 bytes</span><br>https:<span class="hljs-comment">//godoc.org, 688.339219ms, 32378 bytes</span><br>--- PASS: TestConcurrent (<span class="hljs-number">0.69</span>s)<br></code></pre></td></tr></table></figure><p>显然，使用并行，无需要等待，耗时大大缩短。</p><p>但是呢，这并不是每次都能成功运行，有时候还会出现缓存为命中，或命中了缓存却返回错误的数据，甚至于直接崩溃。<br>我们可以使用-race这个flag进行运行程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> test -run=TestConcurrent -v -race ./ch/ch9/memo1<br>=== RUN   TestConcurrent<br>https:<span class="hljs-comment">//qq.com, 203.543501ms, 327 bytes</span><br>https:<span class="hljs-comment">//qq.com, 210.605108ms, 327 bytes</span><br>https:<span class="hljs-comment">//jd.com, 311.075599ms, 182426 bytes</span><br>==================<br>WARNING: DATA RACE<br>Write at <span class="hljs-number">0x00c00010aed0</span> by goroutine <span class="hljs-number">18</span>:<br>  runtime.mapassign_faststr()<br>      /usr/local/<span class="hljs-keyword">go</span>/src/runtime/map_faststr.<span class="hljs-keyword">go</span>:<span class="hljs-number">203</span> +<span class="hljs-number">0x0</span><br>  <span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memo1.(*Memo).Get()<br>      /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memo1/memo.<span class="hljs-keyword">go</span>:<span class="hljs-number">25</span> +<span class="hljs-number">0x12c</span><br>  <span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest.Concurrent.func1()<br>      /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest/memotest.<span class="hljs-keyword">go</span>:<span class="hljs-number">69</span> +<span class="hljs-number">0xea</span><br>  <span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest.Concurrent.func2()<br>      /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest/memotest.<span class="hljs-keyword">go</span>:<span class="hljs-number">75</span> +<span class="hljs-number">0x58</span><br><br>Previous write at <span class="hljs-number">0x00c00010aed0</span> by goroutine <span class="hljs-number">10</span>:<br>  runtime.mapassign_faststr()<br>      /usr/local/<span class="hljs-keyword">go</span>/src/runtime/map_faststr.<span class="hljs-keyword">go</span>:<span class="hljs-number">203</span> +<span class="hljs-number">0x0</span><br>  <span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memo1.(*Memo).Get()<br>      /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memo1/memo.<span class="hljs-keyword">go</span>:<span class="hljs-number">25</span> +<span class="hljs-number">0x12c</span><br>  <span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest.Concurrent.func1()<br>      /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest/memotest.<span class="hljs-keyword">go</span>:<span class="hljs-number">69</span> +<span class="hljs-number">0xea</span><br>  <span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest.Concurrent.func2()<br>      /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch9/memotest/memotest.<span class="hljs-keyword">go</span>:<span class="hljs-number">75</span> +<span class="hljs-number">0x58</span><br>...<br></code></pre></td></tr></table></figure><p>ps：go test出现缓存（cached），可以加上-count&#x3D;1禁止使用缓存。</p><p>显然，程序出现数据竞争，代码的第25行出现了2次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">21</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-number">22</span>res, ok := memo.cache[key]<br><span class="hljs-number">23</span><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-number">24</span>res.value, res.err = memo.f(key)<br><span class="hljs-number">25</span>memo.cache[key] = res<br><span class="hljs-number">26</span> &#125;<br><span class="hljs-number">27</span><span class="hljs-keyword">return</span> res.value, res.err<br><span class="hljs-number">28</span>&#125;<br></code></pre></td></tr></table></figure><p>说明这个两个goroutine在没有并发干预下更新了cache map。 表明Get函数非并发安全的，存在数据竞争。</p><h1 id="第二个版本-加锁"><a href="#第二个版本-加锁" class="headerlink" title="第二个版本-加锁"></a>第二个版本-加锁</h1><p>为了解决初始版本的并发问题，可以对Get函数进行加锁处理。<br>在函数开始时，进行获取锁，return的时候释放锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> memo<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-keyword">type</span> Memo <span class="hljs-keyword">struct</span> &#123;<br>f     Func<br>mu    sync.Mutex<br>cache <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]result<br>&#125;<br><br><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">interface</span>&#123;&#125;<br>err   <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(f Func)</span></span> *Memo &#123;<br><span class="hljs-keyword">return</span> &amp;Memo&#123;f: f, cache: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]result)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>memo.mu.Lock()<br>res, ok := memo.cache[key]<br><span class="hljs-keyword">if</span> !ok &#123;<br>res.value, res.err = memo.f(key)<br>memo.cache[key] = res<br>&#125;<br>memo.mu.Unlock()<br><span class="hljs-keyword">return</span> res.value, res.err<br>&#125;<br></code></pre></td></tr></table></figure><p>再次进行测试，显然是没问题的。<br>但是该版本失去并发，性能大大下降。<br>每次对f进行调用期间都获取锁，Get将本来可以并行运行的I&#x2F;O操作串行化了。<br>以至于，不符合本章的目的。</p><h1 id="第三个版本-两个锁"><a href="#第三个版本-两个锁" class="headerlink" title="第三个版本-两个锁"></a>第三个版本-两个锁</h1><p>这个版本，Get函数的goroutine会获取两次锁，在查找缓存阶段一次，在存储缓存阶段一次。<br>这样可以解决第二版本串行化的问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> memo<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-keyword">type</span> Memo <span class="hljs-keyword">struct</span> &#123;<br>f     Func<br>mu    sync.Mutex<br>cache <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]result<br>&#125;<br><br><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">interface</span>&#123;&#125;<br>err   <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(f Func)</span></span> *Memo &#123;<br><span class="hljs-keyword">return</span> &amp;Memo&#123;f: f, cache: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]result)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>memo.mu.Lock()<br>res, ok := memo.cache[key]<br>memo.mu.Unlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br>res.value, res.err = memo.f(key)<br><br><span class="hljs-comment">// Between the two critical sections,several goroutines</span><br><span class="hljs-comment">// may race to compute f(key) and update the map.</span><br>memo.mu.Lock()<br>memo.cache[key] = res<br>memo.mu.Unlock()<br>&#125;<br><span class="hljs-keyword">return</span> res.value, res.err<br>&#125;<br></code></pre></td></tr></table></figure><p>这个版本性能较第二个版本大大提升，但是也带了一个问题。<br>但多个goroutine进入到Get函数，并在查找阶段，找不到缓存，进入到调用f的阶段。<br>那么就会发生多次请求相同f, 以及后一个goroutine获取到f的返回值会在存储缓存阶段覆盖先前相同的返回值。<br>显然，这样不符合本章的设计目的。</p><h1 id="第四个版本-ready-channel"><a href="#第四个版本-ready-channel" class="headerlink" title="第四个版本-ready channel"></a>第四个版本-ready channel</h1><p>对于第三个版本来说，理想的情况是去除重复多余的工作。<br>这种“避免”工作一般被称为<code>duplicate suppression(重复抑制/避免)</code>。<br>在entry结构体里加入read channel，用于当数据存储完成后广播其他goroutine告知读取数据是安全的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> memo<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-keyword">type</span> Memo <span class="hljs-keyword">struct</span> &#123;<br>f     Func<br>mu    sync.Mutex<br>cache <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*entry<br>&#125;<br><br><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">string</span>)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">interface</span>&#123;&#125;<br>err   <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-keyword">type</span> entry <span class="hljs-keyword">struct</span> &#123;<br>res   result<br>ready <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(f Func)</span></span> *Memo &#123;<br><span class="hljs-keyword">return</span> &amp;Memo&#123;f: f, cache: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*entry)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>memo.mu.Lock()<br>e := memo.cache[key]<br><span class="hljs-keyword">if</span> e == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// This is the first request for this key.</span><br><span class="hljs-comment">// This goroutine becomes responsible for computing</span><br><span class="hljs-comment">// the value and broadcasting the ready condition.</span><br>e = &amp;entry&#123;ready: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)&#125;<br>memo.cache[key] = e<br>memo.mu.Unlock()<br><br>e.res.value, e.res.err = memo.f(key)<br><span class="hljs-built_in">close</span>(e.ready)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// This is a repeat request for this key.</span><br>memo.mu.Unlock()<br>&lt;-e.ready <span class="hljs-comment">// Waiting for ready condition.</span><br>&#125;<br><span class="hljs-keyword">return</span> e.res.value, e.res.err<br>&#125;<br></code></pre></td></tr></table></figure><p>Get函数的步骤如下：</p><ul><li><ol><li>获取互斥锁保护共享变量cache map。</li></ol></li><li><ol start="2"><li>查询map中是存在指定数据。</li></ol><ul><li>2.1 如果map没有指定数据。<ul><li>2.1.1 构建含有ready channel的新数据，并存储，然后释放锁。</li><li>2.1.2 释放锁之后，进行对f函数的调用，获取完成后，关闭ready channel，广播数据获取完成的信息。</li></ul></li><li>2.2 如果map有指定数据。<ul><li>2.2.1 释放锁。</li><li>2.2.2 等待接收ready channel的值。</li></ul></li></ul></li><li><ol start="3"><li>当ready channel进行广播后，就可以返回数据。</li></ol></li></ul><p>可以明确知道，entry中的e.res.value和e.res.err是在多个goroutine之间共享的。<br>在goroutine创建entry时，也设置了值（e &#x3D; &amp;entry{ready: make(chan struct{})}），当其它goroutine获取到广播信息（close(e.ready)）后，立即去获取了entry的值。<br>尽管有多个goroutine同时访问，但是也不需要互斥锁。<br>ready channel的关闭一定是在其它goroutine获取到广播之前，因此第一个goroutine的写操作发生在读操作之前，所以不会产生数据竞争。</p><h1 id="第五个版本-monitor-goroutine"><a href="#第五个版本-monitor-goroutine" class="headerlink" title="第五个版本-monitor goroutine"></a>第五个版本-monitor goroutine</h1><p>与第四个互斥量版本对比，该版本引用了monitor goroutine <code>监控协程</code>。<br>该版本对Memo结构进行了修改，Memo类型只有requests channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Memo <span class="hljs-keyword">struct</span> &#123;<br>requests <span class="hljs-keyword">chan</span> request<br>&#125;<br><span class="hljs-comment">// A request is a message requesting that the Func be applied to key.</span><br><span class="hljs-keyword">type</span> request <span class="hljs-keyword">struct</span> &#123;<br>key      <span class="hljs-type">string</span><br>response <span class="hljs-keyword">chan</span>&lt;- result <span class="hljs-comment">// the client wants a single result</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Get的调用方用这个channel来和monitor goroutine来通信。<br>requests channel中的元素类型是request。Get的调用方会把这个结构中的两组key都填充好，实际上用这两个变量来对函数进行缓存的。<br>另一个叫response的channel会被拿来发送响应结果。这个channel只会传回一个单独的值。<br>Get方法，会创建一个response channel，把它放进request结构中，然后发送给monitor goroutine （server），然后马上又会接收到它。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>response := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> result)<br>memo.requests &lt;- request&#123;key: key, response: response&#125;<br>res := &lt;-response<br><span class="hljs-keyword">return</span> res.value, res.err<br>&#125;<br></code></pre></td></tr></table></figure><p>cache变量被限制在了monitor goroutine (*Memo).server中。<br>monitor会在循环中一直读取请求，直到request channel被Close方法关闭。<br>每一个请求都会去查询cache，如果没有找到entry的话，那么就会创建&#x2F;插入一个新的entry。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> server(f Func) &#123;<br>cache := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*entry)<br><span class="hljs-keyword">for</span> req := <span class="hljs-keyword">range</span> memo.requests &#123;<br>e := cache[req.key]<br><span class="hljs-keyword">if</span> e == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// This is the first request for this key.</span><br>e = &amp;entry&#123;ready: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)&#125;<br>cache[req.key] = e<br><span class="hljs-keyword">go</span> e.call(f, req.key)<br>&#125;<br><span class="hljs-keyword">go</span> e.deliver(req.response)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *entry)</span></span> call(f Func, key <span class="hljs-type">string</span>) &#123;<br><span class="hljs-comment">// Evaluate the function.</span><br>e.res.value, e.res.err = f(key)<br><span class="hljs-comment">// Broadcast the ready condition.</span><br><span class="hljs-built_in">close</span>(e.ready)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *entry)</span></span> deliver(response <span class="hljs-keyword">chan</span>&lt;- result) &#123;<br><span class="hljs-comment">// Wait for the ready condition.</span><br>&lt;-e.ready<br><span class="hljs-comment">// Send the result to the client.</span><br>response &lt;- e.res<br>&#125;<br></code></pre></td></tr></table></figure><p>与第四个互斥量版本类似，都是通过预存entry，然后请求数据，请求完成后，通过close(ready)进行广播。<br>只是在第五版本中，用call函数代替了调用并广播，用deliver函数代替了分发数据。<br>call和deliver的调用必须保证在自己的goroutine中进行，以确保不会阻塞monitor channel。</p><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>第四种互斥量版本和第五种监控协程版本都是可行的，该如何选择呢？<br>其实各有各的优点，只能根据特定环境下进行选择。<br>Go语言其实更推荐通信并发，即第五种版本。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><em>练习 9.3：</em> 扩展Func类型和(*Memo).Get方法，支持调用方提供一个可选的done channel，使其具备通过该channel来取消整个操作的能力(§8.9)。一个被取消了的Func的调用结果不应该被缓存。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> memo<br><br><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">string</span>, &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>)<br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">interface</span>&#123;&#125;<br>err   <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-keyword">type</span> entry <span class="hljs-keyword">struct</span> &#123;<br>res   result<br>ready <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *entry)</span></span> call(f Func, key <span class="hljs-type">string</span>, done &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;) &#123;<br>e.res.value, e.res.err = f(key, done)<br><span class="hljs-built_in">close</span>(e.ready)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *entry)</span></span> deliver(response <span class="hljs-keyword">chan</span>&lt;- result) &#123;<br>&lt;-e.ready<br>response &lt;- e.res<br>&#125;<br><br><span class="hljs-keyword">type</span> request <span class="hljs-keyword">struct</span> &#123;<br>key      <span class="hljs-type">string</span><br>response <span class="hljs-keyword">chan</span>&lt;- result<br>done     &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Memo <span class="hljs-keyword">struct</span> &#123;<br>requests <span class="hljs-keyword">chan</span> request<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> server(f Func) &#123;<br>cache := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*entry)<br><span class="hljs-keyword">for</span> &#123;<br>LOOP:<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> key := &lt;-canceledKeys:<br><span class="hljs-built_in">delete</span>(cache, key)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span> LOOP<br>&#125;<br>&#125;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> req, ok := &lt;-memo.requests:<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>e := cache[req.key]<br><span class="hljs-keyword">if</span> e == <span class="hljs-literal">nil</span> &#123;<br>e = &amp;entry&#123;ready: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)&#125;<br>cache[req.key] = e<br><span class="hljs-keyword">go</span> e.call(f, req.key, req.done)<br>&#125;<br><span class="hljs-keyword">go</span> e.deliver(req.response)<br><span class="hljs-keyword">default</span>:<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> canceledKeys = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Get(key <span class="hljs-type">string</span>, done &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;) (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>response := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> result)<br>memo.requests &lt;- request&#123;key: key, response: response, done: done&#125;<br>resp := &lt;-response<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br>canceledKeys &lt;- key<br><span class="hljs-keyword">default</span>:<br>&#125;<br><span class="hljs-keyword">return</span> resp.value, resp.err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(memo *Memo)</span></span> Close() &#123;<br><span class="hljs-built_in">close</span>(memo.requests)<br><span class="hljs-built_in">close</span>(canceledKeys)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(f Func)</span></span> *Memo &#123;<br>memo := &amp;Memo&#123;requests: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> request)&#125;<br><span class="hljs-keyword">go</span> memo.server(f)<br><span class="hljs-keyword">return</span> memo<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.6. 竞争条件检测</title>
      <link href="/posts/d92837fb26ef/"/>
      <url>/posts/d92837fb26ef/</url>
      
        <content type="html"><![CDATA[<p>程序并发发生问题实在无可避免，但是Go的runtime和工具链提供了一个复杂但好用的动态分析工具，竞争检查器（the race detector）。</p><p>用法：<br>只要在go build、go run 或 go test 后面加上-race 的flag即可。<br>编译器创建一个你的应用的“修改”版或者一个附带了能够记录所有运行期对共享变量访问工具的test，并且会记录下每一个读或者写共享变量的goroutine的身份信息。<br>“修改版的程序会记录下所有的同步事件，比如go语句，channel操作，以及对(*sync.Mutex).Lock，(*sync.WaitGroup).Wait等等的调用。</p><p>详细可见文档（<a href="https://golang.org/ref/mem%EF%BC%89">https://golang.org/ref/mem）</a></p><p>这个工具会打印一份报告，内容包含变量身份，读取和写入的goroutine中活跃的函数的调用栈。这些信息在定位问题时通常很有用。9.7节中会有一个竞争检查器的实战样例。</p><p>竞争检查器会报告所有的已经发生的数据竞争。然而，它只能检测到运行时的竞争条件；并不能证明之后不会发生数据竞争。所以为了使结果尽量正确，请保证你的测试并发地覆盖到了你到包。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.5. sync.Once初始化</title>
      <link href="/posts/76eb94f5fa7d/"/>
      <url>/posts/76eb94f5fa7d/</url>
      
        <content type="html"><![CDATA[<p>下面是一个懒加载的例子。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadIcons</span><span class="hljs-params">()</span></span> &#123;<br>    icons = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image&#123;<br>        <span class="hljs-string">&quot;spades.png&quot;</span>:   loadIcon(<span class="hljs-string">&quot;spades.png&quot;</span>),<br>        <span class="hljs-string">&quot;hearts.png&quot;</span>:   loadIcon(<span class="hljs-string">&quot;hearts.png&quot;</span>),<br>        <span class="hljs-string">&quot;diamonds.png&quot;</span>: loadIcon(<span class="hljs-string">&quot;diamonds.png&quot;</span>),<br>        <span class="hljs-string">&quot;clubs.png&quot;</span>:    loadIcon(<span class="hljs-string">&quot;clubs.png&quot;</span>),<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> not concurrency-safe!</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Icon</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image &#123;<br>    <span class="hljs-keyword">if</span> icons == <span class="hljs-literal">nil</span> &#123;<br>        loadIcons() <span class="hljs-comment">// one-time initialization</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> icons[name]<br>&#125;<br></code></pre></td></tr></table></figure><p>如果icons被单独goroutine访问的话，是安全的，如果处于并发环境，该例子则为并发不安全。</p><p>当多个goroutine访问Icon时，就会数据竞争。当第一个goroutine在忙着loading这些icon时，另一个goroutine进入Icon函数，发现icons&#x3D;&#x3D;nil，然后也会调用loadIcons。</p><p>上面的直觉其实是不准确的。<code>对并发的直觉总不能被信任。</code><br><code>因为缺少显式的同步，编译器和CPU是可以更改访问内存的指令顺序。</code><br>无论什么形式，只要保证每一个goroutine自己的执行顺序一致。</p><p>下面是loadIcons重排的一种可能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadIcons</span><span class="hljs-params">()</span></span> &#123;<br>    icons = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image)<br>    icons[<span class="hljs-string">&quot;spades.png&quot;</span>] = loadIcon(<span class="hljs-string">&quot;spades.png&quot;</span>)<br>    icons[<span class="hljs-string">&quot;hearts.png&quot;</span>] = loadIcon(<span class="hljs-string">&quot;hearts.png&quot;</span>)<br>    icons[<span class="hljs-string">&quot;diamonds.png&quot;</span>] = loadIcon(<span class="hljs-string">&quot;diamonds.png&quot;</span>)<br>    icons[<span class="hljs-string">&quot;clubs.png&quot;</span>] = loadIcon(<span class="hljs-string">&quot;clubs.png&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>它会先初始化一个空的map, 然后进行赋值。</p><p>所以goroutine在检查icons非空时，并不能确定icons已经装填完数据。</p><p>所以最有效的方法，是增加显式的同步方式mutex。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex <span class="hljs-comment">// guards icons</span><br><span class="hljs-keyword">var</span> icons <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image<br><br><span class="hljs-comment">// Concurrency-safe.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Icon</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image &#123;<br>    mu.Lock()<br>    <span class="hljs-keyword">defer</span> mu.Unlock()<br>    <span class="hljs-keyword">if</span> icons == <span class="hljs-literal">nil</span> &#123;<br>        loadIcons()<br>    &#125;<br>    <span class="hljs-keyword">return</span> icons[name]<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，<code>使用互斥访问共享变量的代价是没办法并发访问共享变量，即使变量已经被初始化且再也不变动。</code><br>我们可以用多读单写锁sync.RWMutex进行优化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> icon<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> mu sync.RWMutex<br><span class="hljs-keyword">var</span> icons <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Icons</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image &#123;<br>mu.RLock()<br><span class="hljs-keyword">if</span> icons != <span class="hljs-literal">nil</span> &#123;<br>icon := icons[name]<br>mu.RUnlock()<br><span class="hljs-keyword">return</span> icon<br>&#125;<br><br>mu.Lock()<br><span class="hljs-keyword">if</span> icons == <span class="hljs-literal">nil</span> &#123;<br>loadIcons()<br><br>&#125;<br>icon := icons[name]<br>mu.Unlock()<br><span class="hljs-keyword">return</span> icon<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadIcons</span><span class="hljs-params">()</span></span> &#123;<br>icons = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image&#123;<br><span class="hljs-string">&quot;spades.png&quot;</span>:   loadIcon(<span class="hljs-string">&quot;spades.png&quot;</span>),<br><span class="hljs-string">&quot;hearts.png&quot;</span>:   loadIcon(<span class="hljs-string">&quot;hearts.png&quot;</span>),<br><span class="hljs-string">&quot;diamonds.png&quot;</span>: loadIcon(<span class="hljs-string">&quot;diamonds.png&quot;</span>),<br><span class="hljs-string">&quot;clubs.png&quot;</span>:    loadIcon(<span class="hljs-string">&quot;clubs.png&quot;</span>),<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码有两个临界区。<br>goroutine先获取一个写锁，如果map !&#x3D; nil，获取icon, 然后释放锁，返回icon。<br>如果icons&#x3D;&#x3D;nil，先获取一个写锁，不释放共享锁的话，没有任何办法将共享锁升级为互斥锁，所以要再一次验证icons是否为nil，以防止在执行该代码时，有另外goroutine已经初始化icons。</p><p>虽然上面可以解决初始化的并发问题，但是过于繁杂。<br>Go语言提供sync.Once的方法来简化。<br>从概念上，一次性初始化只需要一个互斥值mutex和一个记录初始化是否完成的布尔值。<br>互斥量mutex保护布尔变量和初始化的数据结构。<br>sync.Once唯一的方法：Do<br>该方法只接收初始化函数作为参数。</p><p>下面是使用sync.Once简化的程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> icon<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> loadIconsOnce sync.Once<br><span class="hljs-keyword">var</span> icons <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">icon</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image &#123;<br>loadIconsOnce.Do(loadIcons)<br><span class="hljs-keyword">return</span> icons[name]<br>&#125;<br></code></pre></td></tr></table></figure><p>每次调用Do时，都会获取锁，并且检查boolean变量。<br>第一次调用时，boolean变量的值为false，Do会调用loadIcons并且将boolean变量设置为true，接着mutex保证loadIcons的内存对所有访问的goroutine可见。<br>使用sync.Once初始化，可以避免在变量被构建之前和其他goroutine共享。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 9.2：</strong>  重写2.6.2节中的PopCount的例子，使用sync.Once，只在第一次需要用到的时候进行初始化。(虽然实际上，对PopCount这样很小且高度优化的函数进行同步可能代价没法接受)<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadPopCount</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> loadPopCountOnce sync.Once<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCount</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>loadPopCountOnce.Do(loadPopCount)<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">0</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">1</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">2</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">3</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">4</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">5</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">6</span>*<span class="hljs-number">8</span>)] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;<span class="hljs-number">7</span>*<span class="hljs-number">8</span>)])<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.4. 内存同步</title>
      <link href="/posts/e115a072f817/"/>
      <url>/posts/e115a072f817/</url>
      
        <content type="html"><![CDATA[<p>在9.2，9.3章节中，我们对Balance方法使用了互斥锁mutex，在此有两方面的考虑。</p><ul><li>Balance方法不会在其他操作（如Withdraw）中执行。</li><li>更重要的是不单是一堆goroutine的执行顺序问题，而是内存同步问题。</li></ul><p>何为内存同步？<br>在现代计算机中可能会有一堆处理器，每一个都会有其本地缓存(local cache)。为了效率，对内存的写入一般会在每一个处理器中缓冲，并在必要时一起flush到主存。这种情况下这些数据可能会以与当初goroutine写入顺序不同的顺序被提交到主存。像channel通信或者互斥量操作这样的原语会使处理器将其聚集的写入flush并commit，这样goroutine在某个时间点上的执行结果才能被其它处理器上运行的goroutine得到。</p><p>下面是说明例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x, y <span class="hljs-type">int</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>x = <span class="hljs-number">1</span>                   <span class="hljs-comment">// A1</span><br>fmt.Print(<span class="hljs-string">&quot;y:&quot;</span>, y, <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment">// A2</span><br>&#125;()<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>y = <span class="hljs-number">1</span>                   <span class="hljs-comment">// B1</span><br>fmt.Print(<span class="hljs-string">&quot;x:&quot;</span>, x, <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment">// B2</span><br>&#125;()<br><br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><p>尝试给出输出结果：<br>y:0 x:1<br>x:0 y:1<br>y:1 x:1<br>x:1 y:1  A1B1B2A2 &#x2F; B1A1B2A2</p><p>嗯，很合理。<br>但是有两种可能也有是会出现的。<br>x:0 y:0<br>y:0 x:0</p><p>为什么？<br>在一个独立的goroutine中，语句的执行顺序是固定。<br>但是在不使用互斥锁和channel这样的显式同步操作时，没有办法保证不同的goroutine的语句执行顺序是一致的。<br>如上例中，goroutine A中一定会在执行x &#x3D; 1成功后才会执行y的打印，但它无法保证自己能观察到goroutine B中对y的写入，所以goroutine A还可能打印出y的一个旧值。</p><p>上面那句话可以理解成goroutine的语句交错执行，但是却不适合当代的编译器。<br>在现代的编译器中，编译器断定两条语句的顺序不影响执行结果，并且交换两个语句的执行顺序。<br>因为赋值和打印语句指向不同变量，即不影响执行结果，就会交换执行顺序。</p><p>如果两个goroutine分别在不同的CPU中执行，每个核心拥有其缓存，在主存同步之前，一个goroutine的写入对于其他goroutine来说，是不可见的。</p><p>如何规避并发可能导致的问题呢？<br>所有并发问题都可以使用简单，一致的既定模式来规避。</p><ul><li>有可能的话，将变量限定在goroutine内。</li><li>多个goroutine都需要访问共享变量的话，使用互斥条件。（channel&#x2F;互斥锁）</li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.3. sync.RWMutex读写锁</title>
      <link href="/posts/1294ae8bb0f7/"/>
      <url>/posts/1294ae8bb0f7/</url>
      
        <content type="html"><![CDATA[<p>允许多个只读操作并发执行，但写操作完全互斥，这样的锁叫<code>多读单写锁</code>（multipe readers, single writer lock）， 在go语言中，sync.RWMutex是这样的锁。</p><p>调用了<code>RLock</code>和<code>RUnlock</code>方法来获取和释放一个读取或者共享锁。</p><p><code>RLock</code>只能在临界区共享变量没有任何写入操作可用。<br>不应该在只读函数&#x2F;方法内更新共享变量。</p><p>RWMutex只有当获得锁的大部分goroutine都是读操作，而锁在竞争条件下，也就是说，goroutine们必须等待才能获取到锁的时候，RWMutex才是最能带来好处的。RWMutex需要更复杂的内部记录，所以会让它比一般的无竞争锁的mutex慢一些。</p><p>下面是修改bank的查询余额的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.RWMutex<br><span class="hljs-keyword">var</span> balance <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Balance</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>    mu.RLock() <span class="hljs-comment">// readers lock</span><br>    <span class="hljs-keyword">defer</span> mu.RUnlock()<br>    <span class="hljs-keyword">return</span> balance<br>&#125;<br></code></pre></td></tr></table></figure><p>Deposit函数没有变化，会调用mu.Lock和mu.Unlock方法来获取和释放一个写或互斥锁。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.2. sync.Mutex互斥锁</title>
      <link href="/posts/da8e0d3d1c07/"/>
      <url>/posts/da8e0d3d1c07/</url>
      
        <content type="html"><![CDATA[<h1 id="channel互斥"><a href="#channel互斥" class="headerlink" title="channel互斥"></a>channel互斥</h1><p>在前面例子中，我们用buffered channel来设计sema信号量，来保证至多20个goroutine同时执行http请求。<br>如果使用容量只有1的channel来保证至多1个goroutine同一时刻来访问一个共享变量，这样也能达成互斥。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> bank<br><br><span class="hljs-keyword">var</span> (<br>sema    = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">1</span>)<br>balance <span class="hljs-type">int</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deposit</span><span class="hljs-params">(amount <span class="hljs-type">int</span>)</span></span> &#123;<br>sema &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>balance -= amount<br>&lt;-sema<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Balance</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>sema &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; &lt;-sema &#125;()<br><span class="hljs-keyword">return</span> balance<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h1><p>sync包支持互斥锁，可以直接使用。<br>Lock方法可以获取token，即锁。<br>Unlock方法可以释放该token。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> bank<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-keyword">var</span> (<br>mu      sync.Mutex<br>balance <span class="hljs-type">int</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deposit</span><span class="hljs-params">(amount <span class="hljs-type">int</span>)</span></span> &#123;<br>mu.Lock()<br>balance -= amount<br>mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Balance</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>mu.Lock()<br><span class="hljs-keyword">defer</span> mu.Unlock()<br><span class="hljs-keyword">return</span> balance<br>&#125;<br></code></pre></td></tr></table></figure><p>按照惯例，被mutex所保护的共享变量应该在mutex变量声明后立即声明。否则，应该做文档说明。</p><p>在Lock和Unlock之间的代码段中的内容goroutine可以随便读取或者修改，这个代码段叫做临界区。<br>互斥锁无论什么时候都应该在结束时释放，即使在处理错误。</p><p>可以使用defer机制，调用Unlock，即可保证无论返回还是错误都会调用Unlock.</p><p>这种函数、互斥锁和变量的编排叫作<code>监控monitor</code>。</p><p>调用defer语句会比显式Unlock成本会高一点，但是可以保持代码整洁性。</p><p>go语言没有可重入锁。</p><p>互斥量的目的是为了确保共享变量在程序执行时的关键点上能够保证不变性。不变性的其中之一是“没有goroutine访问共享变量”。</p><p>对已经上锁的mutex锁上锁，将会导致程序死锁，程序会一直阻塞下去。</p><p><code>当你使用mutex时，确保mutex和其保护的变量没有被导出(在go里也就是小写，且不要被大写字母开头的函数访问啦)，无论这些变量是包级的变量还是一个struct的字段。</code></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.1. 竞争条件</title>
      <link href="/posts/df4edc666b3d/"/>
      <url>/posts/df4edc666b3d/</url>
      
        <content type="html"><![CDATA[<p>在线性的程序中，即只有一个goroutine，程序的执行顺序由程序逻辑决定。<br>当我们无法确认两个事件之间执行的先后顺序时，说明这两个事件是并发的。</p><p>在并发的情况下，函数能够正确并正常运行，那么可以说这个函数是并发安全的。<br>并发安全的函数不需要额外进行同步。<br>同样的，不但适用于函数，还可以适用于类型的函数和方法，如果这个类型是并发安全的，那么类型的方法和函数同样是并发安全的。</p><p>导出包级别的函数一般情况下是并发安全的。<br>由于包级别的变量没法限制在单一个goroutine内，所以修改这些变量必须要使用互斥条件。</p><p>一个函数在并发调用可能达不到预期的结果，原因有<code>死锁（deadlock）</code>、<code>活锁（livelock）</code>和 <code>资源匮乏（resourse starvation）</code>等等。<br>本章主要讨论竞争条件，何为竞争条件？<br><code>竞争条件</code>指的是程序在多个goroutine交叉执行操作时，没有得到正确的结果。这种情况往往难以察觉，可能只会在某特定条件下才会触发，如负载大、或在某编译器、某平台下或某架构下。这种问题往往难以复现和难以分析判断。</p><p>下面是一段简单的银行账户程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> 错误示范</span><br><span class="hljs-keyword">package</span> bank<br><br><span class="hljs-keyword">var</span> balance <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deposit</span><span class="hljs-params">(amount <span class="hljs-type">int</span>)</span></span> &#123;<br>balance = balance + amount<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Balance</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> balance<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Deposit</code>函数是存钱，<code>Balance</code>函数是获取余额。<br>如果顺序执行存钱，获取余额操作没有问题。<br>但在并发条件下，<code>Balance</code>获取余额可能就达不到预期了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// zhansan</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>bank.Desposit(<span class="hljs-number">200</span>)         <span class="hljs-comment">// A1</span><br>fmt.Println(<span class="hljs-string">&quot;-&quot;</span>, Balance())<span class="hljs-comment">// A2</span><br>&#125;<br><br><span class="hljs-comment">// lisi</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>bank.Desposit(<span class="hljs-number">100</span>) <span class="hljs-comment">// B</span><br>&#125;<br></code></pre></td></tr></table></figure><p>zhansan存了200（A1），然后查询余额（A2）。<br>lisi存了100（B）。</p><p>这些操作时并发执行的，我们无法确定先后顺序。<br>以下是先后顺序的可能性：<br>zhansan先<br>lisi先<br>zhansan&#x2F;lisi&#x2F;zhansan交替执行</p><p>下面是三个可能性的结果：</p><table><thead><tr><th align="center">zhansan 先</th><th align="center">lisi 先</th><th align="center">zhansan&#x2F;lisi&#x2F;zhansan</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">A1 200</td><td align="center">B 100</td><td align="center">A1 200</td></tr><tr><td align="center">A2 “&#x3D;200”</td><td align="center">A1 300</td><td align="center">B 300</td></tr><tr><td align="center">B 300</td><td align="center">A2 “&#x3D;300”</td><td align="center">A2 “&#x3D;300”</td></tr></tbody></table><p>所有的最终结果都是300，感觉没有问题呢。<br>但是往往这种直觉是致命的，第四种情况是存在的。<br>当lisi的存款在zhansan存款操作中间，即在A1操作中的读取余额后（balance+amount），在余额更新前(balance&#x3D;…)，这样子将导致lisi的存款丢失。可以将上述的操作，改成A1r, A1w。</p><table><thead><tr><th>Data race</th><th></th><th></th></tr></thead><tbody><tr><td></td><td>0</td><td></td></tr><tr><td>A1r</td><td>0</td><td>…&#x3D;balance+amount</td></tr><tr><td>B</td><td>100</td><td></td></tr><tr><td>A1w</td><td>200</td><td>balance&#x3D;…</td></tr><tr><td>A2</td><td>200</td><td></td></tr></tbody></table><p>这种情况下，存款只有200，即lisi的存款丢失了。</p><p><code>无论什么时候，只要有两个或两个以上的goroutine并发访问同一变量，且至少一个goroutine对变量进行写操作，都会发生数据竞争。</code></p><p>下面还有一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x []<span class="hljs-type">int</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; x = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)&#125;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; x = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">1000000</span>)&#125;<br>x[<span class="hljs-number">999999</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> panic: runtime error: index out of range [999999] with length 10</span><br></code></pre></td></tr></table></figure><p>最后一个语句x的值是未定义的，可能是nil，也可能是长度为10的slice，还有可能是长度为1000000的slice。</p><p><code>数据竞争会在两个以上的goroutine并发访问相同的变量且至少其中一个为写操作时发生。</code><br>有三种方法可以避免数据竞争。</p><ul><li>不要写变量。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> icons = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadIcon</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image<br><br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> not concurrency-safe!</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Icon</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image &#123;<br>icon, ok := icons[name]<br><span class="hljs-keyword">if</span> !ok &#123;<br>icon = loadIcon(name)<br>icons[name] = icon<br>&#125;<br><span class="hljs-keyword">return</span> icon<br>&#125;<br></code></pre></td></tr></table></figure>  上面例子中，使用懒加载Icon，并发情况下，这不是并发安全的，如果初始化并赋值icons且不在修改，就能够并发安全了。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> icons = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]image.Image&#123;<br><span class="hljs-string">&quot;spades.png&quot;</span>:   loadIcon(<span class="hljs-string">&quot;spades.png&quot;</span>),<br><span class="hljs-string">&quot;hearts.png&quot;</span>:   loadIcon(<span class="hljs-string">&quot;hearts.png&quot;</span>),<br><span class="hljs-string">&quot;diamonds.png&quot;</span>: loadIcon(<span class="hljs-string">&quot;diamonds.png&quot;</span>),<br><span class="hljs-string">&quot;clubs.png&quot;</span>:    loadIcon(<span class="hljs-string">&quot;clubs.png&quot;</span>),<br>&#125;<br><span class="hljs-comment">// Concurrency-safe.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Icon</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> image.Image &#123; <span class="hljs-keyword">return</span> icons[name] &#125;<br></code></pre></td></tr></table></figure></li><li>避免多个goroutine访问变量。<br>  <code>不要使用共享数据来通信；使用通信来共享数据。</code><br>  <code>一个提供对一个指定的变量通过cahnnel来请求的goroutine叫做这个变量的监控(monitor)goroutine。</code><br>   如在8.10的聊天服务器中，broadcaster goroutine会监控(monitor)clients map的全部访问。<br>   下面是对bank的修改。   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-keyword">package</span> bank<br><br><span class="hljs-keyword">var</span> deposits = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">var</span> balances = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deposits</span><span class="hljs-params">(amount <span class="hljs-type">int</span>)</span></span> &#123;<br>deposits &lt;- amount<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Balance</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> &lt;-balances<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">teller</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> balance <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> amount := &lt;-deposits:<br>balance += amount<br><span class="hljs-keyword">case</span> balances &lt;- balance:<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> teller()<br>&#125;<br></code></pre></td></tr></table></figure>   即使当一个变量无法在其整个生命周期内被绑定到一个独立的goroutine，绑定依然是并发问题的一个解决方案。例如在一条流水线上的goroutine之间共享变量是很普遍的行为，在这两者间会通过channel来传输地址信息。如果流水线的每一个阶段都能够避免在将变量传送到下一阶段时再去访问它，那么对这个变量的所有访问就是线性的。其效果是变量会被绑定到流水线的一个阶段，传送完之后被绑定到下一个，以此类推。这种规则有时被称为串行绑定。<br>   下面是串行绑定的例子，Cakes会被严格地顺序访问，先是baker gorouine，然后是icer gorouine。   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-keyword">type</span> Cake <span class="hljs-keyword">struct</span>&#123; state <span class="hljs-type">string</span> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">baker</span><span class="hljs-params">(cooked <span class="hljs-keyword">chan</span>&lt;- *Cake)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>cake := <span class="hljs-built_in">new</span>(Cake)<br>cake.state = <span class="hljs-string">&quot;cooked&quot;</span><br>cooked &lt;- cake <span class="hljs-comment">// baker never touches this cake again</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">icer</span><span class="hljs-params">(iced <span class="hljs-keyword">chan</span>&lt;- *Cake, cooked &lt;-<span class="hljs-keyword">chan</span> *Cake)</span></span> &#123;<br><span class="hljs-keyword">for</span> cake := <span class="hljs-keyword">range</span> cooked &#123;<br>cake.state = <span class="hljs-string">&quot;iced&quot;</span><br>iced &lt;- cake <span class="hljs-comment">// icer never touches this cake again</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>允许多个goroutine访问变量，但同一时间最多只有一个goroutine访问，即“互斥”。</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 9.1：</strong> 给gopl.io&#x2F;ch9&#x2F;bank1程序添加一个Withdraw(amount int)取款函数。其返回结果应该要表明事务是成功了还是因为没有足够资金失败了。这条消息会被发送给monitor的goroutine，且消息需要包含取款的额度和一个新的channel，这个新channel会被monitor goroutine来把boolean结果发回给Withdraw。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> bank<br><br><span class="hljs-keyword">type</span> draw <span class="hljs-keyword">struct</span> &#123;<br>amount  <span class="hljs-type">int</span><br>succeed <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span><br>&#125;<br><br><span class="hljs-keyword">var</span> deposits = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">var</span> withdraws = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> draw)<br><span class="hljs-keyword">var</span> balances = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deposit</span><span class="hljs-params">(amount <span class="hljs-type">int</span>)</span></span> &#123;<br>deposits &lt;- amount<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Withdraw</span><span class="hljs-params">(amount <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>succeed := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br>withdraws &lt;- draw&#123;amount, succeed&#125;<br><span class="hljs-keyword">return</span> &lt;-succeed<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Balance</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> &lt;-balances<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">teller</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> balance <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> balances &lt;- balance:<br><span class="hljs-keyword">case</span> amount := &lt;-deposits:<br>balance += amount<br><span class="hljs-keyword">case</span> draw := &lt;-withdraws:<br><span class="hljs-keyword">if</span> balance &lt; draw.amount &#123;<br>draw.succeed &lt;- <span class="hljs-literal">false</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>balance -= draw.amount<br>draw.succeed &lt;- <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> teller()<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九章 基于共享变量的并发</title>
      <link href="/posts/261f973145a5/"/>
      <url>/posts/261f973145a5/</url>
      
        <content type="html"><![CDATA[<p>在未引入锁机制前，我们可以使用<code>不要用共享数据来通信，使用通信来共享数据</code>，即单独goroutine访问局部变量。<br>本章主要为Go语言的锁机制。</p><p><a href="/posts/df4edc666b3d/">9.1. 竞争条件</a><br><a href="/posts/da8e0d3d1c07/">9.2. sync.Mutex互斥锁</a><br><a href="/posts/1294ae8bb0f7/">9.3. sync.RWMutex读写锁</a><br><a href="/posts/e115a072f817/">9.4. 内存同步</a><br><a href="/posts/76eb94f5fa7d/">9.5. sync.Once初始化</a><br><a href="/posts/d92837fb26ef/">9.6. 竞争条件检测</a><br><a href>9.7. 并发的非阻塞缓存</a><br><a href>9.8. Goroutines和线程</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.10. 示例：聊天服务</title>
      <link href="/posts/7a3e094c0893/"/>
      <url>/posts/7a3e094c0893/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这个程序可以让用户通过服务器向其他用户广播文本信息。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>该程序可以分解为四个goroutine。</p><ul><li>main 主函数goroutine实例，用于创建连接。</li><li>broadcaster 用于处理不同类型的的消息。</li><li>handleConn 用于处理连接数据。</li><li>cientWriter 用于返回客户端信息。</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>main 主要用于处理（listen and accept）从客户端过来的连接。而对应每一个连接，都会创建相对应的handleConn goroutine用于处理连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">go</span> broadcaster()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="broadcaster"><a href="#broadcaster" class="headerlink" title="broadcaster"></a>broadcaster</h2><p>broadcater goroutine 中的内部变量<code>clients</code>是记录当前建立连接的客户端集合，其记录内容是每一个客户端的消息发送到channel的信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> client <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span> <span class="hljs-comment">// an outgoing message channel</span><br><br><span class="hljs-keyword">var</span> (<br>entering = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>leaving  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>message  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-comment">// all incoming  client message</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcaster</span><span class="hljs-params">()</span></span> &#123;<br>clients := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[client]<span class="hljs-type">bool</span>) <span class="hljs-comment">// all connected clients</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> msg := &lt;-message:<br><span class="hljs-comment">// Broadcast incoming message to all</span><br><span class="hljs-comment">// clients&#x27; outgoing message channels.</span><br><span class="hljs-keyword">for</span> cli := <span class="hljs-keyword">range</span> clients &#123;<br>cli &lt;- msg<br>&#125;<br><span class="hljs-keyword">case</span> cli := &lt;-entering:<br>clients[cli] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">case</span> cli := &lt;-leaving:<br><span class="hljs-built_in">delete</span>(clients, cli)<br><span class="hljs-built_in">close</span>(cli)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>broadcatser全局监听三个channel，entering，leaving和message。<br>entering和leaving分别是客户端登录和退出，以更新clients集合。<br>message为客户端发送到服务器的信息，服务器会广播信息到客户端。</p><h2 id="handleConn"><a href="#handleConn" class="headerlink" title="handleConn"></a>handleConn</h2><p>handleConn会为每一个到来的客户端创建一个发送信息的channel，并通过entering channel来通知新客户端的到来。<br>handleConn会读取客户端发送的文本信息，并处理，然后通过message channel发送出去，当客户端发送信息完毕时，handleConn会通过leaving channel来通知客户端的退出并关闭。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-comment">// outgoing client messages</span><br><span class="hljs-keyword">go</span> clientWriter(conn, ch)<br><br>who := conn.RemoteAddr().String()<br>ch &lt;- <span class="hljs-string">&quot;You are &quot;</span> + who<br>message &lt;- who + <span class="hljs-string">&quot; has arrived&quot;</span><br>entering &lt;- ch<br><br>input := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>message &lt;- who + <span class="hljs-string">&quot;: &quot;</span> + input.Text()<br>&#125;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring potential errors from input.Err()</span><br><br>leaving &lt;- ch<br>message &lt;- who + <span class="hljs-string">&quot; has left.&quot;</span><br>conn.Close()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="clientWriter"><a href="#clientWriter" class="headerlink" title="clientWriter"></a>clientWriter</h2><p>handleConn为每一个到来的客户端创建了clientWriter goroutine用以接收向客户端发出的信息，并写入到客户端的网络连接中。clientWriter会一直读取信息，直到客户端退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clientWriter</span><span class="hljs-params">(conn net.Conn, ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Fprintln(conn, msg) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring network errors.</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Chat is a server that let clients chat with each other.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> client <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span> <span class="hljs-comment">// an outgoing message channel</span><br><br><span class="hljs-keyword">var</span> (<br>entering = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>leaving  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>message  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-comment">// all incoming  client message</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcaster</span><span class="hljs-params">()</span></span> &#123;<br>clients := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[client]<span class="hljs-type">bool</span>) <span class="hljs-comment">// all connected clients</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> msg := &lt;-message:<br><span class="hljs-comment">// Broadcast incoming message to all</span><br><span class="hljs-comment">// clients&#x27; outgoing message channels.</span><br><span class="hljs-keyword">for</span> cli := <span class="hljs-keyword">range</span> clients &#123;<br>cli &lt;- msg<br>&#125;<br><span class="hljs-keyword">case</span> cli := &lt;-entering:<br>clients[cli] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">case</span> cli := &lt;-leaving:<br><span class="hljs-built_in">delete</span>(clients, cli)<br><span class="hljs-built_in">close</span>(cli)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-comment">// outgoing client messages</span><br><span class="hljs-keyword">go</span> clientWriter(conn, ch)<br><br>who := conn.RemoteAddr().String()<br>ch &lt;- <span class="hljs-string">&quot;You are &quot;</span> + who<br>message &lt;- who + <span class="hljs-string">&quot; has arrived&quot;</span><br>entering &lt;- ch<br><br>input := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>message &lt;- who + <span class="hljs-string">&quot;: &quot;</span> + input.Text()<br>&#125;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring potential errors from input.Err()</span><br><br>leaving &lt;- ch<br>message &lt;- who + <span class="hljs-string">&quot; has left.&quot;</span><br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clientWriter</span><span class="hljs-params">(conn net.Conn, ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Fprintln(conn, msg) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring network errors.</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">go</span> broadcaster()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当与n个客户端保持聊天session时，该程序有2n+2个并发的goroutine。<br>然而该程序并不需要显式锁来保证并发安全，因为全局变量clients被限制在boradcaster这个独立的协程中，所以它并不能被并发访问。<br>多个goroutine共享的变量只有channel和net.Conn的实例，这些类型的实例是并发安全的。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 8.12：</strong> 使broadcaster能够将arrival事件通知当前所有的客户端。为了达成这个目的，你需要有一个客户端的集合，并且在entering和leaving的channel中记录客户端的名字。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Chat is a server that lets clients chat with each other.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> client <span class="hljs-keyword">struct</span> &#123;<br>ch   <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span><br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>entering = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>leaving  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>messages = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcaster</span><span class="hljs-params">()</span></span> &#123;<br>clients := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[client]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> cli := &lt;-entering:<br>clients[cli] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> names []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> c, _ := <span class="hljs-keyword">range</span> clients &#123;<br>names = <span class="hljs-built_in">append</span>(names, c.name)<br>&#125;<br>cli.ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%d arrival: %v&quot;</span>, <span class="hljs-built_in">len</span>(names), names)<br><span class="hljs-keyword">case</span> cli := &lt;-leaving:<br><span class="hljs-built_in">delete</span>(clients, cli)<br><span class="hljs-built_in">close</span>(cli.ch)<br><span class="hljs-keyword">case</span> msg := &lt;-messages:<br><span class="hljs-keyword">for</span> cli := <span class="hljs-keyword">range</span> clients &#123;<br>cli.ch &lt;- msg<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> clientWriter(conn, ch)<br><br>who := conn.RemoteAddr().String()<br>ch &lt;- <span class="hljs-string">&quot;You are &quot;</span> + who<br>messages &lt;- who + <span class="hljs-string">&quot; has arrived.&quot;</span><br>entering &lt;- client&#123;<br>ch:   ch,<br>name: who,<br>&#125;<br><br>input := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>messages &lt;- who + <span class="hljs-string">&quot;: &quot;</span> + input.Text()<br>&#125;<br><br>leaving &lt;- client&#123;ch, who&#125;<br>messages &lt;- who + <span class="hljs-string">&quot; has left.&quot;</span><br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clientWriter</span><span class="hljs-params">(conn net.Conn, ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Fprintln(conn, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-keyword">go</span> broadcaster()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 8.13：</strong> 使聊天服务器能够断开空闲的客户端连接，比如最近五分钟之后没有发送任何消息的那些客户端。提示：可以在其它goroutine中调用conn.Close()来解除Read调用，就像input.Scanner()所做的那样。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> client <span class="hljs-keyword">struct</span> &#123;<br>ch   <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>entering = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>leaving  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>messages = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcaster</span><span class="hljs-params">()</span></span> &#123;<br>clients := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[client]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> cli := &lt;-entering:<br>clients[cli] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> names []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> c := <span class="hljs-keyword">range</span> clients &#123;<br>names = <span class="hljs-built_in">append</span>(names, c.name)<br>&#125;<br>cli.ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%d arrival. %v&quot;</span>, <span class="hljs-built_in">len</span>(names), names)<br><span class="hljs-keyword">case</span> cli := &lt;-leaving:<br><span class="hljs-built_in">delete</span>(clients, cli)<br><span class="hljs-built_in">close</span>(cli.ch)<br><span class="hljs-keyword">case</span> msg := &lt;-messages:<br><span class="hljs-keyword">for</span> cli := <span class="hljs-keyword">range</span> clients &#123;<br>cli.ch &lt;- msg<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> timeout = <span class="hljs-number">5</span> * time.Minute<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">func handleConn(conn net.Conn) &#123;</span><br><span class="hljs-comment">ch := make(chan string)</span><br><span class="hljs-comment">go clientWriter(conn, ch)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">who := conn.RemoteAddr().String()</span><br><span class="hljs-comment">ch &lt;- &quot;You are &quot; + who</span><br><span class="hljs-comment">entering &lt;- client&#123;ch, who&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">timer := time.NewTimer(timeout)</span><br><span class="hljs-comment">go func() &#123;</span><br><span class="hljs-comment">&lt;-timer.C</span><br><span class="hljs-comment">conn.Close()</span><br><span class="hljs-comment">&#125;()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">input := bufio.NewScanner(conn)</span><br><span class="hljs-comment">for input.Scan() &#123;</span><br><span class="hljs-comment">messages &lt;- who + &quot;: &quot; + input.Text()</span><br><span class="hljs-comment">timer.Reset(timeout)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">leaving &lt;- client&#123;ch, who&#125;</span><br><span class="hljs-comment">messages &lt;- who + &quot; has left.&quot;</span><br><span class="hljs-comment">conn.Close()</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> clientWriter(conn, ch)<br><br>who := conn.RemoteAddr().String()<br>ch &lt;- <span class="hljs-string">&quot;You are &quot;</span> + who<br>messages &lt;- who + <span class="hljs-string">&quot; has arrived.&quot;</span><br>entering &lt;- client&#123;ch, who&#125;<br><br>input := bufio.NewScanner(conn)<br>talking := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> input.Scan() &#123;<br>messages &lt;- who + <span class="hljs-string">&quot;: &quot;</span> + input.Text()<br>talking &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>leaving &lt;- client&#123;ch, who&#125;<br>messages &lt;- who + <span class="hljs-string">&quot; has left.&quot;</span><br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-talking:<br><span class="hljs-keyword">case</span> &lt;-time.After(timeout):<br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clientWriter</span><span class="hljs-params">(conn net.Conn, ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Fprintln(conn, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">go</span> broadcaster()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 8.14：</strong> 修改聊天服务器的网络协议这样每一个客户端就可以在entering时可以提供它们的名字。将消息前缀由之前的网络地址改为这个名字。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Chat is a server that lets clients chat with each other.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> client <span class="hljs-keyword">struct</span> &#123;<br>ch   <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>entering = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>leaving  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>messages = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcaster</span><span class="hljs-params">()</span></span> &#123;<br>clients := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[client]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> cli := &lt;-entering:<br>clients[cli] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> names []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> c := <span class="hljs-keyword">range</span> clients &#123;<br>names = <span class="hljs-built_in">append</span>(names, c.name)<br>&#125;<br>cli.ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%d arrival. %v&quot;</span>, <span class="hljs-built_in">len</span>(names), names)<br><span class="hljs-keyword">case</span> cli := &lt;-leaving:<br><span class="hljs-built_in">delete</span>(clients, cli)<br><span class="hljs-built_in">close</span>(cli.ch)<br><span class="hljs-keyword">case</span> msg := &lt;-messages:<br><span class="hljs-keyword">for</span> cli := <span class="hljs-keyword">range</span> clients &#123;<br>cli.ch &lt;- msg<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> timeout = <span class="hljs-number">5</span> * time.Minute<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> clientWriter(conn, ch)<br><br>ch &lt;- <span class="hljs-string">&quot;Your name:&quot;</span><br>input := bufio.NewScanner(conn)<br>input.Scan()<br>who := input.Text()<br><br>messages &lt;- who + <span class="hljs-string">&quot; has arrived.&quot;</span><br>entering &lt;- client&#123;ch, who&#125;<br><br>timer := time.NewTimer(timeout)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>&lt;-timer.C<br>conn.Close()<br>&#125;()<br><br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>messages &lt;- who + <span class="hljs-string">&quot;: &quot;</span> + input.Text()<br>timer.Reset(timeout)<br>&#125;<br><br>leaving &lt;- client&#123;ch, who&#125;<br>messages &lt;- who + <span class="hljs-string">&quot; has left.&quot;</span><br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clientWriter</span><span class="hljs-params">(conn net.Conn, ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Fprintln(conn, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><br><span class="hljs-keyword">go</span> broadcaster()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 8.15：</strong> 如果一个客户端没有及时地读取数据可能会导致所有的客户端被阻塞。修改broadcaster来跳过一条消息，而不是等待这个客户端一直到其准备好写。或者为每一个客户端的消息发出channel建立缓冲区，这样大部分的消息便不会被丢掉；broadcaster应该用一个非阻塞的send向这个channel中发消息。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> client <span class="hljs-keyword">struct</span> &#123;<br>ch   <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>entering = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>leaving  = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> client)<br>messages = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcaster</span><span class="hljs-params">()</span></span> &#123;<br>clients := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[client]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> cli := &lt;-entering:<br>clients[cli] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> names []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> c := <span class="hljs-keyword">range</span> clients &#123;<br>names = <span class="hljs-built_in">append</span>(names, c.name)<br>&#125;<br>cli.ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%d arrival. %v&quot;</span>, <span class="hljs-built_in">len</span>(names), names)<br><span class="hljs-keyword">case</span> cli := &lt;-leaving:<br><span class="hljs-built_in">delete</span>(clients, cli)<br><span class="hljs-built_in">close</span>(cli.ch)<br><span class="hljs-keyword">case</span> msg := &lt;-messages:<br><span class="hljs-keyword">for</span> cli := <span class="hljs-keyword">range</span> clients &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> cli.ch &lt;- msg:<br><span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">10</span> * time.Second):<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> timeout = <span class="hljs-number">5</span> * time.Minute<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">20</span>)<br><span class="hljs-keyword">go</span> clientWriter(conn, ch)<br><br>ch &lt;- <span class="hljs-string">&quot;Your name:&quot;</span><br>input := bufio.NewScanner(conn)<br>input.Scan()<br>who := input.Text()<br><br>messages &lt;- who + <span class="hljs-string">&quot; has arrived.&quot;</span><br>entering &lt;- client&#123;ch, who&#125;<br><br>timer := time.NewTimer(timeout)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>&lt;-timer.C<br>conn.Close()<br>&#125;()<br><br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>messages &lt;- who + <span class="hljs-string">&quot;: &quot;</span> + input.Text()<br>timer.Reset(timeout)<br>&#125;<br><br>leaving &lt;- client&#123;ch, who&#125;<br>messages &lt;- who + <span class="hljs-string">&quot; has left.&quot;</span><br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">clientWriter</span><span class="hljs-params">(conn net.Conn, ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;[&quot;</span>+time.Now().Format(<span class="hljs-string">&quot;15:04:05&quot;</span>)+<span class="hljs-string">&quot;] &quot;</span>+msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><br><span class="hljs-keyword">go</span> broadcaster()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.9. 并发的退出</title>
      <link href="/posts/92d779dbee59/"/>
      <url>/posts/92d779dbee59/</url>
      
        <content type="html"><![CDATA[<p>书接上回，话说上章节实现du工具，并做了进一步扩展，在本章节进行进一步的扩展。<br>如果du的文件目录下有很多很大的文件，那么时间就会增加，这时，用户等待到不耐烦了，就想退出但又不想通过<code>kill</code>程序。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>众所周知，如果我们需要通知正在运行的goroutine停止它手头上的事时，如web服务器端要中断已经和服务器断开连接的客户端，go语言并没有提供这样的方法。<br>换个思路，在先前的章节中，我们有通过往channel中发送事件，提示接收它的goroutine来停止。好主意，但是如果要退出多个goroutine呢？<br>嗯，那么发送多个信息就好啦。事情没有那么简单，如果某个goroutine已经关闭了，就会产生错误，而且channel中的事件数比goroutine的数量多的话，就会发送阻塞。<br>如果goroutine又产生新的goroutine时，此时channel中的事件数量少于实际goroutine，那么就有一部分goroutine接收不到事件而无法退出。<br>一般情况下，我们很难知道有多少个goroutine在运行，所以我们需要一个策略，可以通过channel将信息广播出去，这样所有的goroutine能够看到该信息。<br>有一个channel的特性：<strong>关闭一个channel并且消费了所有已发送的值，channel之后的代码能够立即执行，并产生零值。</strong><br>广播机制：<strong>不要向channel发送值，而是关闭channel来进行广播。</strong></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="退出channel"><a href="#退出channel" class="headerlink" title="退出channel"></a>退出channel</h2><p>首先创建退出channel，该channel不会被发送任何值。同时，要定义一个工具函数<code>cancelled()</code>，用于在被调用时轮询退出状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> done = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cancelled</span><span class="hljs-params">()</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="退出操作"><a href="#退出操作" class="headerlink" title="退出操作"></a>退出操作</h2><p>下面创建一个从标准输入流中读取内容的goroutine，每当有输入被读到（如按了回车），这个goroutine会将取消信息通过关闭done channel广播出去。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>os.Stdin.Read(<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">close</span>(done)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="响应done"><a href="#响应done" class="headerlink" title="响应done"></a>响应done</h2><p>下面是对done进行响应的goroutine。在main goroutine中，添加第三个case语句，尝试从done channel中读取信息。如果该case语句被满足时，那么可以直接return，但是在return前，要将fileSizes chanenl中的信息排空，在channel关闭前，要保证所有的值已被消费。这样可以保证walkDir的调用向fileSizes发送信息时不会被阻塞。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> fileSizes &#123;<br><span class="hljs-comment">// Do nothing.</span><br>&#125;<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> size, ok := fileSizes:<br> <span class="hljs-comment">// ...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改walkDir"><a href="#修改walkDir" class="headerlink" title="修改walkDir"></a>修改walkDir</h2><p>walkDir这个goroutine一启动就会轮询done状态，当done状态为true时，直接退出，不再做下面代码的无用操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkDir</span><span class="hljs-params">(dir <span class="hljs-type">string</span>, n *sync.WaitGroup, fileSizes <span class="hljs-keyword">chan</span> &lt;- <span class="hljs-type">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> n.Done()<br><span class="hljs-keyword">if</span> cancelled() &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> _, entry := <span class="hljs-keyword">range</span> dirents(dir) &#123;<br><span class="hljs-comment">//...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改dirents"><a href="#修改dirents" class="headerlink" title="修改dirents"></a>修改dirents</h2><p>该程序的性能瓶颈为dirents函数中的获取信号量操作，下面select代码将该信号量取消并退出函数，把取消时的延迟从几百毫秒降低到几十毫秒。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dirents</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> []os.FileInfo &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> sema &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;: <span class="hljs-comment">// acquire token</span><br><span class="hljs-keyword">case</span> &lt;- done: <span class="hljs-comment">// cancelled</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span> <br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; &lt;-sema &#125; <span class="hljs-comment">// release token</span><br><span class="hljs-comment">// read directory</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里要注意一个问题，必须要将defer语句写在select语句后面，否则会无限阻塞。<br>为什么顺序反过来后，sema会进入阻塞?<br>因为&lt;-done接收到信号&#x3D;》return &#x3D;》defer &#x3D;》 &lt;-sema， 而此时sema协程在等待发送操作（sema&lt;-struct{}{}）。<br>反过来后，接收到done的信号后，就直接return了，根本没运行到defer语句，所以不存在阻塞。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 8.10：</strong> HTTP请求可能会因http.Request结构体中Cancel channel的关闭而取消。修改8.6节中的web crawler来支持取消http请求。（提示：http.Get并没有提供方便地定制一个请求的方法。你可以用http.NewRequest来取而代之，设置它的Cancel字段，然后用http.DefaultClient.Do(req)来进行这个http请求。）<br>解：<br>links.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> links<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-comment">// Extract make an HTTP GET request to the specified URL, parses</span><br><span class="hljs-comment">// the response as HTML, and return the links in the HML document.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Extract</span><span class="hljs-params">(url <span class="hljs-type">string</span>, cancelled <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>ctx, cancelFunc := context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cancelFunc context.CancelFunc)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-cancelled:<br>cancelFunc()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;(cancelFunc)<br><br>req, err := http.NewRequestWithContext(ctx, http.MethodGet, url, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;building request %s: %v&quot;</span>, url, err)<br>&#125;<br>resp, err := http.DefaultClient.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;doing request %s: %v&quot;</span>, url, err)<br>&#125;<br><span class="hljs-keyword">if</span> resp.StatusCode != http.StatusOK &#123;<br>resp.Body.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;getting %s: %s&quot;</span>, url, resp.Status)<br>&#125;<br><br>doc, err := html.Parse(resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;paring %s as HTML: %v&quot;</span>, url, err)<br>&#125;<br><br><span class="hljs-keyword">var</span> links []<span class="hljs-type">string</span><br>visitNode := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;a&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> a.Key != <span class="hljs-string">&quot;href&quot;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>link, err := resp.Request.URL.Parse(a.Val)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>links = <span class="hljs-built_in">append</span>(links, link.String())<br>&#125;<br>&#125;<br>&#125;<br>forEachNode(doc, visitNode, visitNode)<br><span class="hljs-keyword">return</span> links, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">forEachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(n *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>forEachNode(c, pre, post)<br>&#125;<br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex8/ex8.10/links&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>worklist := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">string</span>)<br>unseenLinks := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>worklist &lt;- os.Args[<span class="hljs-number">1</span>:]<br>&#125;()<br><br><span class="hljs-keyword">var</span> n sync.WaitGroup<br>n.Add(<span class="hljs-number">1</span>)<br>cancelled := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>os.Stdin.Read(<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1</span>))<br>n.Done()<br><span class="hljs-built_in">close</span>(cancelled)<br>&#125;()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> link := <span class="hljs-keyword">range</span> unseenLinks &#123;<br>n.Add(<span class="hljs-number">1</span>)<br>foundLinks := crawl(link, cancelled, &amp;n)<br><span class="hljs-keyword">if</span> foundLinks != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; worklist &lt;- foundLinks &#125;()<br>&#125;<br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>n.Wait()<br><span class="hljs-built_in">close</span>(worklist)<br><span class="hljs-built_in">close</span>(unseenLinks)<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> list := <span class="hljs-keyword">range</span> worklist &#123;<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> list &#123;<br><span class="hljs-keyword">if</span> !seen[link] &#123;<br>seen[link] = <span class="hljs-literal">true</span><br>unseenLinks &lt;- link<br>&#125;<br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-cancelled:<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> worklist &#123;<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> unseenLinks &#123;<br><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(url <span class="hljs-type">string</span>, cancelled <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, n *sync.WaitGroup)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">defer</span> n.Done()<br><br>fmt.Println(url)<br>list, err := links.Extract(url, cancelled)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 8.11：</strong> 紧接着8.4.4中的mirroredQuery流程，实现一个并发请求url的fetch的变种。当第一个请求返回时，直接取消其它的请求。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>cancelled := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>resps := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(os.Args[<span class="hljs-number">1</span>:]))<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>url := url<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>s, err := fetch(url, cancelled)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch %s: %v&quot;</span>, url, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>resps &lt;- s<br>&#125;()<br>&#125;<br>resp := &lt;-resps<br><span class="hljs-built_in">close</span>(cancelled)<br>fmt.Println(resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>, cancelled &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>ctx, cancelFunc := context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-cancelled:<br>cancelFunc()<br>&#125;<br>&#125;()<br>req, err := http.NewRequestWithContext(ctx, http.MethodGet, url, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;building request %s: %v&quot;</span>, url, err)<br>&#125;<br><br>resp, err := http.DefaultClient.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;doing request %s: %v&quot;</span>, url, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">if</span> resp.StatusCode != http.StatusOK &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;getting %s: %v&quot;</span>, url, resp.Status)<br>&#125;<br>b, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;reading response %s: %v&quot;</span>, url, err)<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s&quot;</span>, b), <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.8. 示例：并发的字典遍历</title>
      <link href="/posts/dbf617f2750e/"/>
      <url>/posts/dbf617f2750e/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>创建一个程序来统计指定目录下的硬盘使用报告，即文件大小，与linux中的du命令类似。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>毫无疑问，这道题要使用递归去解决。</p><ul><li>创建<code>walkDir</code>递归函数，用于获取下层目录，并统计文件大小。</li><li>创建<code>dirents</code>函数用于读取目录下的文件目录。</li><li>使用<code>fileSize channel</code>去接受发送文件大小。</li><li>接收<code>fileSize channel</code>去累加文件大小。</li></ul><h1 id="第一个版本"><a href="#第一个版本" class="headerlink" title="第一个版本"></a>第一个版本</h1><p>该版本比较直白，下面是它的步骤。</p><ol><li>创建<code>flag</code>获取文件目录（可能是多个目录），并检查初始化目录。</li><li>创建<code>fileSize channel</code>用于接收文件大小，遍历文件目录参数，并创建goroutine来递归文件目录（<code>walkDir</code>）。</li><li>使用<code>range</code>接收<code>fileSize channel</code>， 统计并打印结果。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// The du command computes the disk usage of the files in a directory.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// Determine the initial directories.</span><br>flag.Parse()<br>roots := flag.Args()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(roots) == <span class="hljs-number">0</span> &#123;<br>roots = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;.&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-comment">// Traverse the file tree.</span><br>fileSizes := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int64</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, root := <span class="hljs-keyword">range</span> roots &#123;<br>walkDir(root, fileSizes)<br>&#125;<br><span class="hljs-built_in">close</span>(fileSizes)<br>&#125;()<br><br><span class="hljs-comment">// Print the results.</span><br><span class="hljs-keyword">var</span> nfiles, nbytes <span class="hljs-type">int64</span><br><span class="hljs-keyword">for</span> size := <span class="hljs-keyword">range</span> fileSizes &#123;<br>nfiles++<br>nbytes += size<br>&#125;<br>printDickUage(nfiles, nbytes)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printDickUage</span><span class="hljs-params">(nfiles <span class="hljs-type">int64</span>, nbytes <span class="hljs-type">int64</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d files, %.1fGB\n&quot;</span>, nfiles, <span class="hljs-type">float64</span>(nbytes)/<span class="hljs-number">1e9</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkDir</span><span class="hljs-params">(dir <span class="hljs-type">string</span>, fileSizes <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, entry := <span class="hljs-keyword">range</span> dirents(dir) &#123;<br><span class="hljs-keyword">if</span> entry.IsDir() &#123;<br>subDir := filepath.Join(dir, entry.Name())<br>walkDir(subDir, fileSizes)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fileInfo, err := entry.Info()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du1: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fileSizes &lt;- fileInfo.Size()<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dirents</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> []os.DirEntry &#123;<br>entries, err := os.ReadDir(dir)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du1: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> entries<br>&#125;<br></code></pre></td></tr></table></figure>很明显，该例子需要耗费更多时间才能统计完成。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go build -o du1 main.go <br>$ sudo ./du1 /usr /bin /etc<br>68755 files, 6.3GB<br></code></pre></td></tr></table></figure>注意是否有权限去读取文件，必要时使用<code>sudo</code>。</li></ol><h1 id="第二个版本"><a href="#第二个版本" class="headerlink" title="第二个版本"></a>第二个版本</h1><p>在第一个版本的基础上，加上统计进度，就更直白，而不至于程序运行时间过长，而导致以为程序卡。<br>第二个版本会间歇性打印内容，而且只在于使用了<code>-v</code>的flag才会显示程序进度信息。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>在<code>roots</code>循环的goroutine保持不变，在<code>main goroutine</code>中使用<code>tick</code>计时器每500ms发送一次事件，取消<code>range</code>循环获取<code>fileSizes</code>，用<code>select</code>语句来等待<code>fileSizes</code>并统计文件大小和获取计时器的事件来打印进度信息，</p><p>如果命令没有<code>-v</code>，那么计时器<code>tick</code>为nil，<code>select</code>语句的<code>tick</code>一直为nil，即<code>tick</code>拥有的case语句被禁用。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> verbose = flag.Bool(<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;show verbose progress massage.&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Determine the initial directory.</span><br>flag.Parse()<br>roots := flag.Args()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(roots) == <span class="hljs-number">0</span> &#123;<br>roots = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;.&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-comment">// Traverse the file tree.</span><br>fileSizes := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int64</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, root := <span class="hljs-keyword">range</span> roots &#123;<br>walkDir(root, fileSizes)<br>&#125;<br><span class="hljs-built_in">close</span>(fileSizes)<br>&#125;()<br><br><span class="hljs-comment">// Prints the result periodically.</span><br><span class="hljs-keyword">var</span> ticker *time.Ticker<br><span class="hljs-keyword">var</span> tick &lt;-<span class="hljs-keyword">chan</span> time.Time<br><span class="hljs-keyword">if</span> *verbose &#123;<br>ticker = time.NewTicker(<span class="hljs-number">500</span> * time.Millisecond)<br>tick = ticker.C<br>&#125;<br><span class="hljs-keyword">var</span> nfiles, nbytes <span class="hljs-type">int64</span><br>loop:<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-tick:<br>printDiskUage(nfiles, nbytes)<br><span class="hljs-keyword">case</span> size, ok := &lt;-fileSizes:<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">break</span> loop<br>&#125;<br>nfiles++<br>nbytes += size<br>&#125;<br>&#125;<br>printDiskUage(nfiles, nbytes)<br><span class="hljs-keyword">if</span> *verbose &#123;<br>ticker.Stop()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printDiskUage</span><span class="hljs-params">(nfiles, nbytes <span class="hljs-type">int64</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d files, %.1f GB\n&quot;</span>, nfiles, <span class="hljs-type">float64</span>(nbytes)/<span class="hljs-number">1e9</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkDir</span><span class="hljs-params">(dir <span class="hljs-type">string</span>, fileSizes <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, entry := <span class="hljs-keyword">range</span> dirents(dir) &#123;<br><span class="hljs-keyword">if</span> entry.IsDir() &#123;<br>subDir := filepath.Join(dir, entry.Name())<br>walkDir(subDir, fileSizes)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fileInfo, err := entry.Info()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du1: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fileSizes &lt;- fileInfo.Size()<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dirents</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> []os.DirEntry &#123;<br>entries, err := os.ReadDir(dir)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du1: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> entries<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build -o du2 main.go</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ./du2 -v /usr /bin /etc</span><br>6507 files, 1.0 GB<br>18019 files, 1.2 GB<br>27294 files, 1.8 GB<br>37819 files, 2.3 GB<br>44133 files, 3.2 GB<br>51914 files, 3.5 GB<br>60538 files, 5.9 GB<br>68755 files, 6.3 GB<br></code></pre></td></tr></table></figure><h1 id="第三个版本"><a href="#第三个版本" class="headerlink" title="第三个版本"></a>第三个版本</h1><p>虽然有了进度信息，但是统计速度太慢了，第三个版本将使用<code>goroutine</code>并行统计文件大小。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>统计慢，无非在于<code>walkDir</code>函数并不是并行的，那么可以创建<code>goroutine</code>来调用<code>walkDir</code>。<br>以及使用<code>sync.WaitGroup</code>来对活跃的<code>walkDir</code>函数进行计数，再创建一个<code>goroutine</code>用于计数器为0时关闭<code>fileSizes</code>。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> verbose = flag.Bool(<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;show verbose progress massage.&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Determine the initial directory.</span><br>flag.Parse()<br>roots := flag.Args()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(roots) == <span class="hljs-number">0</span> &#123;<br>roots = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;.&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-comment">// Traverse the file tree.</span><br>fileSizes := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int64</span>)<br><span class="hljs-keyword">var</span> n sync.WaitGroup<br><span class="hljs-keyword">for</span> _, root := <span class="hljs-keyword">range</span> roots &#123;<br>n.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> walkDir(root, &amp;n, fileSizes)<br>&#125;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>n.Wait()<br><span class="hljs-built_in">close</span>(fileSizes)<br>&#125;()<br><br><span class="hljs-comment">// Prints the result periodically.</span><br><span class="hljs-keyword">var</span> ticker *time.Ticker<br><span class="hljs-keyword">var</span> tick &lt;-<span class="hljs-keyword">chan</span> time.Time<br><span class="hljs-keyword">if</span> *verbose &#123;<br>ticker = time.NewTicker(<span class="hljs-number">500</span> * time.Millisecond)<br>tick = ticker.C<br>&#125;<br><span class="hljs-keyword">var</span> nfiles, nbytes <span class="hljs-type">int64</span><br>loop:<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-tick:<br>printDiskUage(nfiles, nbytes)<br><span class="hljs-keyword">case</span> size, ok := &lt;-fileSizes:<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">break</span> loop<br>&#125;<br>nfiles++<br>nbytes += size<br>&#125;<br>&#125;<br>printDiskUage(nfiles, nbytes)<br><span class="hljs-keyword">if</span> *verbose &#123;<br>ticker.Stop()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printDiskUage</span><span class="hljs-params">(nfiles, nbytes <span class="hljs-type">int64</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d files, %.1f GB.\n&quot;</span>, nfiles, <span class="hljs-type">float64</span>(nbytes)/<span class="hljs-number">1e9</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkDir</span><span class="hljs-params">(dir <span class="hljs-type">string</span>, n *sync.WaitGroup, fileSizes <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> n.Done()<br><span class="hljs-keyword">for</span> _, entry := <span class="hljs-keyword">range</span> dirents(dir) &#123;<br><span class="hljs-keyword">if</span> entry.IsDir() &#123;<br>n.Add(<span class="hljs-number">1</span>)<br>subDir := filepath.Join(dir, entry.Name())<br><span class="hljs-keyword">go</span> walkDir(subDir, n, fileSizes)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fileInfo, err := entry.Info()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du3: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fileSizes &lt;- fileInfo.Size()<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> sema = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">20</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dirents</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> []os.DirEntry &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; &lt;-sema &#125;()<br>sema &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>entries, err := os.ReadDir(dir)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du3: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> entries<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果文件过多，程序会创建成千上万个<code>goroutine</code>，过于并行也不是一件好事情，那么可以使用带缓存的<code>sema channel</code>来对<code>dirents</code>函数进行限制，代码中同时存在的<code>goroutine</code>为20个。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 8.9：</strong> 编写一个du工具，每隔一段时间将root目录下的目录大小计算并显示出来。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> dir <span class="hljs-keyword">struct</span> &#123;<br>id   <span class="hljs-type">int</span><br>size <span class="hljs-type">int64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Determine the initial directory.</span><br>roots := os.Args[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(roots) == <span class="hljs-number">0</span> &#123;<br>roots = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;.&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-comment">// Traverse the file tree.</span><br>fileSizes := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> dir)<br><span class="hljs-keyword">var</span> n sync.WaitGroup<br><span class="hljs-keyword">for</span> id, root := <span class="hljs-keyword">range</span> roots &#123;<br>n.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> walkDir(root, id, &amp;n, fileSizes)<br>&#125;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>n.Wait()<br><span class="hljs-built_in">close</span>(fileSizes)<br>&#125;()<br><br><span class="hljs-comment">// Print the result periodically.</span><br>ticker := time.NewTicker(<span class="hljs-number">500</span> * time.Millisecond)<br>nfiles := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int64</span>, <span class="hljs-built_in">len</span>(roots))<br>nbytes := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int64</span>, <span class="hljs-built_in">len</span>(roots))<br>loop:<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ticker.C:<br>printDiskUsage(roots, nfiles, nbytes)<br><span class="hljs-keyword">case</span> dir, ok := &lt;-fileSizes:<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">break</span> loop<br>&#125;<br>nfiles[dir.id]++<br>nbytes[dir.id] += dir.size<br>&#125;<br>&#125;<br>printDiskUsage(roots, nfiles, nbytes)<br>ticker.Stop()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printDiskUsage</span><span class="hljs-params">(roots []<span class="hljs-type">string</span>, nfiles, nbytes []<span class="hljs-type">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> id, root := <span class="hljs-keyword">range</span> roots &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d files, %.1fGB in %s.\n&quot;</span>, nfiles[id], <span class="hljs-type">float64</span>(nbytes[id])/<span class="hljs-number">1e9</span>, root)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkDir</span><span class="hljs-params">(d <span class="hljs-type">string</span>, id <span class="hljs-type">int</span>, n *sync.WaitGroup, fileSizes <span class="hljs-keyword">chan</span>&lt;- dir)</span></span> &#123;<br><span class="hljs-keyword">defer</span> n.Done()<br><span class="hljs-keyword">for</span> _, entry := <span class="hljs-keyword">range</span> dirents(d) &#123;<br><span class="hljs-keyword">if</span> entry.IsDir() &#123;<br>n.Add(<span class="hljs-number">1</span>)<br>subDir := filepath.Join(d, entry.Name())<br><span class="hljs-keyword">go</span> walkDir(subDir, id, n, fileSizes)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fileInfo, err := entry.Info()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fileSizes &lt;- dir&#123;id, fileInfo.Size()&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// sema is a counting semaphore for limiting concurrency in dirents.</span><br><span class="hljs-keyword">var</span> sema = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">20</span>)<br><br><span class="hljs-comment">// dirents returns the entries of directory dir.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dirents</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> []os.DirEntry &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; &lt;-sema &#125;()<br>sema &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>entries, err := os.ReadDir(dir)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;du: %v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> entries<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.7. 基于select的多路复用</title>
      <link href="/posts/866000668cee/"/>
      <url>/posts/866000668cee/</url>
      
        <content type="html"><![CDATA[<h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><p>下面以火箭发射倒计时为例，说明select的多路复用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Countdown implement the countdown for a rocket launch.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;commencing countdown.&quot;</span>)<br>tick := time.Tick(<span class="hljs-number">1</span> * time.Second)<br><span class="hljs-keyword">for</span> countdown := <span class="hljs-number">10</span>; countdown &gt; <span class="hljs-number">0</span>; countdown-- &#123;<br>fmt.Println(countdown)<br>&lt;-tick<br>&#125;<br>launch()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">launch</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Lift off!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>time.Tick(1 * time.Second)</code>函数返回的是类型为<code>&lt;-chan Time</code>的单向只接收的channel tick，每隔1秒，该channel接收一次。在10个倒计时<code>countdown</code>中，每一个循环接收一个值，即每一秒接收一次。倒数循环结束后，火箭发射！</p><p>但是如果在发射倒计时中，发生异常，则需要按return键终止(abort)发射。<br>首先创建一个新goroutine，这个goroutine尝试从标准输入中获取单个byte，如果获取成功则向abort channel发送值。<br>现在倒数循环中，每一次循环都要等待tick, abort这个两个channel中获取值。如果tick channel获取到值，则表示继续倒计时；如果是abort chanenl获取到值，则表示发生异常，需要终止发射。<br>无法同时从每个channel获取信息，因为如果第一个channel没有接收到信息，就会一直堵塞，这样就获取不到第二个channel发过来的信息。这里就需要多路复用(<code>multilex</code>)操作，<code>select</code>语句能够解决这个问题。<br><code>select</code>语句格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ch1:<br><span class="hljs-comment">// do something</span><br><span class="hljs-keyword">case</span> x :=&lt;-ch2:<br><span class="hljs-comment">// use x to do something</span><br><span class="hljs-keyword">case</span> ch3 &lt;- y:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">default</span>:<br> <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>select</code>语句与<code>switch</code>语句类型，同样有<code>case</code>和<code>default</code>选择分支。<br>在<code>select</code>语句中，每一个<code>case</code>代表一个通信操作（某个channel的发送和接收操作）。<br>格式中的第一个<code>case</code>表示接收表达式，其只包含自身表达式。<br>第二个<code>case</code>也是表示接受表达式，并且获取channel得到的值并复制使用。<br>第三个<code>case</code>表达式表示发送操作，当ch3不阻塞并且能发送值时进行操作。<br><code>default</code>语句表示当所有<code>case</code>语句不符合执行条件时执行<code>default</code>语句。<br><code>select</code>语句会等待所有<code>case</code>语句中能够执行的时候去执行case语句，当条件满足时，<code>select</code>语句才会通信并执行<code>case</code>语句，这时其他通信则不会执行。<br><strong>一个没有任何case语句或default语句的select语句写作select{}，会一直阻塞等待下去。</strong></p><p>回归到火箭发射倒计时程序中，可以使用<code>time.After()</code>函数代替<code>time.tick()</code>，<code>time.After()</code>能够在时间结束后立即返回一个<code>channel</code>，并新起一个<code>goroutine</code>在经过特定的时间后向该<code>channel</code>发送一个独立的值。<br>下面的<code>select</code>语句会一直等待两个事件中的一个到达，abort事件或者10秒后应答的事件。<br>如果在10秒内无abort事件，则火箭发射。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span>&#123;<br><span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">10</span> * time.Second):<br><span class="hljs-keyword">case</span> &lt;-abort:<br>fmt.Prinln(<span class="hljs-string">&quot;Launch aborted!&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多个case同时就绪"><a href="#多个case同时就绪" class="headerlink" title="多个case同时就绪"></a>多个case同时就绪</h1><p>如果多个<code>case</code>语句同时就绪时，<code>select</code>语句会随机选择一个执行，以保证每个channel都有平等的被<code>select</code>选中的机会。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> x := &lt;-ch:<br>fmt.Println(x) <span class="hljs-comment">// 0 2 4 6 8</span><br><span class="hljs-keyword">case</span> ch &lt;- i:<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子的ch channel的buffer大小是1，会交替地为空或者为满，所以只有一个case可以进行下去，无论i为奇数还是偶数，都会输出<code>0 2 4 6 8</code>。<br>如果增加buffer大小，则会导致输出极为不确定。</p><h1 id="第三个版本"><a href="#第三个版本" class="headerlink" title="第三个版本"></a>第三个版本</h1><p>上面火箭发射倒计时并没有打印出倒计时，下面则对此进行改进。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Countdown implement countdown for a rocket launch.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> the ticker goroutine never terminates if the launch is abort.</span><br><span class="hljs-comment">// This is a &quot;goroutine leak&quot;.</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// create abort channel.</span><br>abort := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>os.Stdin.Read(<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1</span>))<br>abort &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;()<br><br>fmt.Println(<span class="hljs-string">&quot;Commencing countdown. Press return to abort.&quot;</span>)<br>tick := time.Tick(<span class="hljs-number">1</span> * time.Second)<br><span class="hljs-keyword">for</span> countdown := <span class="hljs-number">10</span>; countdown &gt; <span class="hljs-number">0</span>; countdown-- &#123;<br>fmt.Println(countdown)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-tick:<br><span class="hljs-comment">// do nothing.</span><br><span class="hljs-keyword">case</span> &lt;-abort:<br>fmt.Println(<span class="hljs-string">&quot;Launch abort!&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>launch()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">launch</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Lift off!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子中，select会使得每次循环迭代时等待一秒来执行操作。<br><code>time.Tick</code>函数创建了一个在循环中调用<code>time.Sleep</code>的goroutine，每次唤醒时发送一个事件。<br>当<code>countdown</code>主函数返回后，它会停止从tick中接收事件，但是ticker这个goroutine还依然存活，并继续徒劳地尝试从channel中发送值，然而没有其他goroutine会从该channel中接收值了—-即<code>goroutine泄露</code>。</p><p><code>Tick</code>函数适用于程序全生命周期都使用该时间。<br>一般情况下，会使用<code>NewTicker</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">ticker := time.NewTicker(<span class="hljs-number">1</span> * time.Second)<br>&lt;-ticker.C    <span class="hljs-comment">// receive from ticker&#x27;s channel.</span><br>ticker.Stop() <span class="hljs-comment">// cause the ticker&#x27;s goroutine terminate.</span><br></code></pre></td></tr></table></figure><h1 id="轮询channel"><a href="#轮询channel" class="headerlink" title="轮询channel"></a>轮询channel</h1><p>有些情况下，并不想<code>select</code>堵塞等待case通信操作，而导致不能继续进行，可以使用<code>default</code>语句，用于处理当其它操作不能及时处理时程序需要执行哪些逻辑。<br>下面例子中，select语句会在abort channel中有值时，从中获取值；无值时则执行default语句。该情况为非阻塞接收操作，即<code>轮询channel</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-abort:<br>    fmt.Printf(<span class="hljs-string">&quot;Launch aborted!\n&quot;</span>)<br>    <span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// do nothing</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="活用零值的channel"><a href="#活用零值的channel" class="headerlink" title="活用零值的channel"></a>活用零值的channel</h1><p>channel的零值为nil，零值的channel也是有用的。<br>对零值channel进行发送和接收操作，会永远阻塞。<br>在select语句中，零值的channel永远不会被选中。<br>利用该特性，可以用nil来激活或禁用case，用于达成处理输入或输出事件时超时和取消的逻辑。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 8.8：</strong> 使用select来改造8.3节中的echo服务器，为其增加超时，这样服务器可以在客户端10秒中没有任何喊话时自动断开连接。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br>input := bufio.NewScanner(conn)<br><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>ch &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">10</span> * time.Second):<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> &lt;-ch:<br><span class="hljs-keyword">go</span> echo(conn, input.Text(), <span class="hljs-number">1</span>*time.Second)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">echo</span><span class="hljs-params">(conn net.Conn, shout <span class="hljs-type">string</span>, delay time.Duration)</span></span> &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToUpper(shout))<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, shout)<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToLower(shout))<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.6. 示例：并发的Web爬虫</title>
      <link href="/posts/1258766bd2ef/"/>
      <url>/posts/1258766bd2ef/</url>
      
        <content type="html"><![CDATA[<p>在先前的学习中，学习过简单爬虫算法，用bfs(广度优先)算法来抓取整个网站。<br>下面对其进行优化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Crawl1 crawls web links starting with the command-line arguments.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>fmt.Println(url)<br>list, err := links.Extract(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>worklist := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">string</span>)<br><br><span class="hljs-comment">// Start with the command-line arguments.</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; worklist &lt;- os.Args[<span class="hljs-number">1</span>:] &#125;()<br><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> list := <span class="hljs-keyword">range</span> worklist &#123;<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> list &#123;<br><span class="hljs-keyword">if</span> !seen[link] &#123;<br>seen[link] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(link <span class="hljs-type">string</span>)</span></span> &#123;<br>worklist &lt;- crawl(link)<br>&#125;(link)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意得是，之前例子中使用worklist记录需要进行处理的队列，每个元素为需要抓取的URL列表。现在使用channel替换slice来处理，对每一cawl的调用都会在它们自己的goroutine中把抓到的链接发送到worklist。<br>另外，<code>go func(link string)&#123; worklist &lt;-crawl(link) &#125;(link)</code>中将link作为显式函数参数传入，这样可以避免<code>循环变量快照</code>问题。<br>最后，注意这里将命令行参数传入worklist是在另外的goroutine中进行，这是避免在main goroutine和cawl goroutine中同时向另一个goroutine通过channel发送内容时发生死锁（因为另一边的接收操作还没有准备好）。当然，可以使用bufferd channel来解决问题。<br>编译运行：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>go build findlink.go<br><span class="hljs-variable">$ </span>findlink <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/gopl.io/</span><br>“<span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/gopl.io/</span><br><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/golang.org/help</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">https:/</span><span class="hljs-regexp">/golang.org/doc</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">https:/</span><span class="hljs-regexp">/golang.org/blog</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">...</span><br></code></pre></td></tr></table></figure><p>但是在过一段时间后，会导致no such host。DNS查找失败，即使该域名完全正确。<br>其实是因为一次性创建太多网络连接，超过每个线程打开文件数量限制，而导致调用<code>net.Dial</code>像DNS查找失败的问题。</p><p>上述程序太过于并行，而系统总有一些限制因素。如CPU核心数会限制计算负载，还磁盘的转轴和磁头数限制了本地磁盘io操作频率，网络带宽限制下载速度上限，或者web服务器的服务容量上限等。</p><p>有优化上述程序，着手于限制<code>links.Extract</code>在同一时间最多不会超过n次调用。<br>那么程序设计思路来了，可以使用有容量限制的<code>bufferd channel</code>来控制并发，类似于操作系统的计数信号量概念。<br>从概念上来说，channel中有n个空槽代表n个可以处理内容的token，从channel中接收到一个值就会释放其中一个token，并生成新的空槽，这样就保证了在没有接收操作介入时最多n个发送操作。其次channel中元素类型并不重要，可以使用零值struct{}作为元素。</p><p>下面是优化过后的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> token = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">20</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>worklist := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">string</span>)<br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br><br>n++<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; worklist &lt;- os.Args[<span class="hljs-number">1</span>:] &#125;()<br><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> ; n &gt; <span class="hljs-number">0</span>; n-- &#123;<br>list := &lt;-worklist<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> list &#123;<br><span class="hljs-keyword">if</span> !seen[link] &#123;<br>seen[link] = <span class="hljs-literal">true</span><br>n++<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(link <span class="hljs-type">string</span>)</span></span> &#123;<br>worklist &lt;- crawl(link)<br>&#125;(link)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(link <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>fmt.Println(link)<br>token &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>list, err := links.Extract(link)<br>&lt;-token <span class="hljs-comment">// release token</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br></code></pre></td></tr></table></figure><p>引入计数n，解决了程序永远终止的问题，即使已经完全爬到所有链接。当worklist为空或者crawl的goroutine没有在运行时，程序退出。<br>计数器n还对worklist的发送操作数量进行了限制，当每次发现有元素发送到worklist时，n++。<br>当主循环中n–直到0时，会退出循环，终止程序。<br>该版本比5.6节中的深度搜索快20倍，并且没有错误，还能在任务完成正确终止程序。</p><p>下面程序也是避免过度并发的的另一种思路，没有使用计数信号量，取而代之使用了20个“长活”的crawler goroutine，这样可以保证最多20个HTTP请求在并发。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>worklist := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">string</span>)<br>unseenLinks := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; worklist &lt;- os.Args[<span class="hljs-number">1</span>:] &#125;()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> link := <span class="hljs-keyword">range</span> unseenLinks &#123;<br>foundlinks := crawl(link)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; worklist &lt;- foundlinks &#125;()<br>&#125;<br>&#125;()<br>&#125;<br><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> list := <span class="hljs-keyword">range</span> worklist &#123;<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> list &#123;<br><span class="hljs-keyword">if</span> !seen[link] &#123;<br>seen[link] = <span class="hljs-literal">true</span><br>unseenLinks &lt;- link<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(link <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>fmt.Println(link)<br>list, err := links.Extract(link)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所有爬虫goroutine现在都是被同一个channel-unseenLinks发送数据，主goroutine负责拆分从worklist里拿到的元素，把没有爬过的由unseenLinks channel发送给一个爬虫的goroutine。<br>seen这个map限定于main goroutine中，即只能在main goroutine中访问seen。这种信息隐藏的方式，能够约束程序，使其不发生意外的状况。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 8.6：</strong> 为并发爬虫增加深度限制。也就是说，如果用户设置了depth&#x3D;3，那么只有从首页跳转三次以内能够跳到的页面才能被抓取到。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> token = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">20</span>)<br><br><span class="hljs-keyword">type</span> work <span class="hljs-keyword">struct</span> &#123;<br>url  <span class="hljs-type">string</span><br>dept <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>worklist := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []work)<br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br><br>n++<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> works []work<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>works = <span class="hljs-built_in">append</span>(works, work&#123;url, <span class="hljs-number">1</span>&#125;)<br>&#125;<br>worklist &lt;- works<br>&#125;()<br><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> ; n &gt; <span class="hljs-number">0</span>; n-- &#123;<br>works := &lt;-worklist<br><span class="hljs-keyword">for</span> _, w := <span class="hljs-keyword">range</span> works &#123;<br><span class="hljs-keyword">if</span> !seen[w.url] &#123;<br>seen[w.url] = <span class="hljs-literal">true</span><br>n++<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w work)</span></span> &#123;<br>worklist &lt;- crawl(w)<br>&#125;(w)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(w work)</span></span> []work &#123;<br>log.Printf(<span class="hljs-string">&quot;%d : %s&quot;</span>, w.dept, w.url)<br><br><span class="hljs-keyword">if</span> w.dept &gt;= <span class="hljs-number">3</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br>token &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>list, err := links.Extract(w.url)<br>&lt;-token<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><br><span class="hljs-keyword">var</span> works []work<br><span class="hljs-keyword">for</span> _, l := <span class="hljs-keyword">range</span> list &#123;<br>works = <span class="hljs-built_in">append</span>(works, work&#123;l, w.dept + <span class="hljs-number">1</span>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> works<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 8.7：</strong> 完成一个并发程序来创建一个线上网站的本地镜像，把该站点的所有可达的页面都抓取到本地硬盘。为了省事，我们这里可以只取出现在该域下的所有页面(比如golang.org结尾，译注：外链的应该就不算了。)当然了，出现在页面里的链接你也需要进行一些处理，使其能够在你的镜像站点上进行跳转，而不是指向原始的链接。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>base = flag.String(<span class="hljs-string">&quot;base&quot;</span>, <span class="hljs-string">&quot;https://www.sulinehk.com&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>wg   sync.WaitGroup<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> crawl(*base) &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>download(*base, url)<br>&#125;(url)<br>&#125;<br><br>done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Wait()<br>done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;()<br>&lt;-done<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">download</span><span class="hljs-params">(base, url <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> !strings.HasPrefix(url, base) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>dir := strings.TrimPrefix(strings.TrimPrefix(url, <span class="hljs-string">&quot;http://&quot;</span>), <span class="hljs-string">&quot;https://&quot;</span>)<br><span class="hljs-keyword">if</span> err := os.MkdirAll(dir, <span class="hljs-number">0755</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><br>filename := dir + <span class="hljs-string">&quot;index.html&quot;</span><br>file, err := os.Create(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><br>_, err = io.Copy(file, resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>fmt.Println(url)<br>list, err := links.Extract(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.5. 并发的循环</title>
      <link href="/posts/5f0a41aff939/"/>
      <url>/posts/5f0a41aff939/</url>
      
        <content type="html"><![CDATA[<p>在并发的情况下，循环迭代的程序往往要注意一些问题。<br>下面引用对图片批量压缩的例子进行解析。<br><code>thumbnail.go</code>是关于拉伸图片的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package thumbnail produces thumbnail-size images from</span><br><span class="hljs-comment">// larger images.  Only JPEG images are currently supported.</span><br><span class="hljs-keyword">package</span> thumbnail<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/jpeg&quot;</span><br>_ <span class="hljs-string">&quot;image/png&quot;</span> <span class="hljs-comment">// register png</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path/filepath&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// Image returns a thumbnail-size version of src.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Image</span><span class="hljs-params">(src image.Image)</span></span> image.Image &#123;<br><span class="hljs-comment">// Compute thumbnail size, preserving aspect ratio.</span><br>xs := src.Bounds().Size().X<br>ys := src.Bounds().Size().Y<br>width, height := <span class="hljs-number">128</span>, <span class="hljs-number">128</span><br><span class="hljs-keyword">if</span> aspect := <span class="hljs-type">float64</span>(xs) / <span class="hljs-type">float64</span>(ys); aspect &lt; <span class="hljs-number">1.0</span> &#123;<br>width = <span class="hljs-type">int</span>(<span class="hljs-number">128</span> * aspect) <span class="hljs-comment">// portrait</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>height = <span class="hljs-type">int</span>(<span class="hljs-number">128</span> / aspect)<br>&#125;<br>xscale := <span class="hljs-type">float64</span>(xs) / <span class="hljs-type">float64</span>(width)<br>yscale := <span class="hljs-type">float64</span>(ys) / <span class="hljs-type">float64</span>(height)<br><br>dst := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><br><span class="hljs-comment">// a very crude scaling algorithm</span><br><span class="hljs-keyword">for</span> x := <span class="hljs-number">0</span>; x &lt; width; x++ &#123;<br><span class="hljs-keyword">for</span> y := <span class="hljs-number">0</span>; y &lt; height; y++ &#123;<br>srcx := <span class="hljs-type">int</span>(<span class="hljs-type">float64</span>(x) * xscale)<br>srcy := <span class="hljs-type">int</span>(<span class="hljs-type">float64</span>(y) * yscale)<br>dst.Set(x, y, src.At(srcx, srcy))<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> dst<br>&#125;<br><br><span class="hljs-comment">// ImageStream reads an image from r and</span><br><span class="hljs-comment">// writes a thumbnail-size version of it to w.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ImageStream</span><span class="hljs-params">(w io.Writer, r io.Reader)</span></span> <span class="hljs-type">error</span> &#123;<br>src, _, err := image.Decode(r)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>dst := Image(src)<br><span class="hljs-keyword">return</span> jpeg.Encode(w, dst, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">// ImageFile2 reads an image from infile and writes</span><br><span class="hljs-comment">// a thumbnail-size version of it to outfile.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ImageFile2</span><span class="hljs-params">(outfile, infile <span class="hljs-type">string</span>)</span></span> (err <span class="hljs-type">error</span>) &#123;<br>in, err := os.Open(infile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> in.Close()<br><br>out, err := os.Create(outfile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">if</span> err := ImageStream(out, in); err != <span class="hljs-literal">nil</span> &#123;<br>out.Close()<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;scaling %s to %s: %s&quot;</span>, infile, outfile, err)<br>&#125;<br><span class="hljs-keyword">return</span> out.Close()<br>&#125;<br><br><span class="hljs-comment">// ImageFile reads an image from infile and writes</span><br><span class="hljs-comment">// a thumbnail-size version of it in the same directory.</span><br><span class="hljs-comment">// It returns the generated file name, e.g. &quot;foo.thumb.jpeg&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ImageFile</span><span class="hljs-params">(infile <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>ext := filepath.Ext(infile)<br>outfile := strings.TrimSuffix(infile, ext) + <span class="hljs-string">&quot;.thumb&quot;</span> + ext<br><span class="hljs-keyword">return</span> outfile, ImageFile2(outfile, infile)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="非并发循环压缩"><a href="#非并发循环压缩" class="headerlink" title="非并发循环压缩"></a>非并发循环压缩</h1><p>下面的程序会循环迭代一些图片文件名，并为每一张图片生成一个缩略图：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// makeThumbnails makes thumbnails of the specified files.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeThumbnails</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">if</span> _, err := thumbnail.ImageFile(f); err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="易并行"><a href="#易并行" class="headerlink" title="易并行"></a>易并行</h1><p>由于处理图片的顺序无关紧要，那么每个图片的操作都是相互独立的，这种情况称为<code>易并行问题（embarrassingly parallel）</code>。<br>这种易并行问题往往最容易转换成并行处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> incorrect!</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeThumbnails2</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">go</span> thumbnail.ImageFile(f) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring errors</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述例子是<code>错误</code>的，当进行循环时，所有<code>goroutine</code>都已经启动，接着<code>makeThumbnails2</code>函数返回了，并没有等待<code>goroutine</code>执行完毕。</p><h1 id="channel获取goroutine的结果"><a href="#channel获取goroutine的结果" class="headerlink" title="channel获取goroutine的结果"></a>channel获取goroutine的结果</h1><p>虽然没有什么方法可以直接等待<code>goroutine</code>完成，但是可以通过<code>channel</code>将<code>goroutine</code>内部的完成情况告诉外部函数。<br>下面例子中是外部的goroutine只需要在返回之前对这些事件计数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// makeThumbnails3 make thumbnails of the specified files in parallel.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeThumbnail3</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f <span class="hljs-type">string</span>)</span></span> &#123;<br>thumbnail.ImageFile(f)<br>ch &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;(f)<br>&#125;<br><br><span class="hljs-comment">// wait for goroutine to complete.</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> filenames &#123;<br>&lt;-ch<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在该例子中，在<code>goroutine</code>中的匿名函数内，将空值<code>struct&#123;&#125;&#123;&#125;</code>发送给<code>channel ch</code>，在主<code>goroutine</code>中，循环接收<code>ch</code>的值，等待<code>goroutine</code>完成。<br>注意得是filenames数组中元素f传递给匿名函数的参数f，而不是在循环闭包中声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> filenames &#123;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        thumbnail.ImageFile(f) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> incorrect!</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;()<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码导致出现匿名函数中的循环变量快照问题，上面这个单独的变量f是被所有的匿名函数值所共享，且会被连续的循环迭代所更新的。当新的<code>goroutine</code>开始执行字面函数时，<code>for</code>循环可能已经更新了<code>f</code>并且开始了另一轮的迭代或者(更有可能的)已经结束了整个循环，“所以当这些<code>goroutine</code>开始读取f的值时，它们所看到的值已经是<code>slice</code>的最后一个元素了。显式添加参数，能够确保当前使用的<code>f</code>是当go语句执行时的<code>当前</code>那个<code>f</code>。</p><h1 id="获取working-goroutine的返回值"><a href="#获取working-goroutine的返回值" class="headerlink" title="获取working goroutine的返回值"></a>获取working goroutine的返回值</h1><p>如果我们想要从每一个worker goroutine往主goroutine中返回值时该怎么办呢？当我们调用thumbnail.ImageFile创建文件失败的时候，它会返回一个错误。下面的makeThumbnails会返回其在做拉伸操作时接收到的第一个错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// makeThumbnails4 makes thumbnails for the specified files in parallel.</span><br><span class="hljs-comment">// It returns an error if any step failed.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeThumbnails4</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>errors := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">error</span>)<br><br><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f <span class="hljs-type">string</span>)</span></span> &#123;<br>_, err := thumbnail.ImageFile(f)<br>errors &lt;- err<br>&#125;(f)<br>&#125;<br><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">if</span> err := &lt;-errors; err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> incorrect: goroutine leak!</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>channel</code>进行传输error信息，即可以把错误信息从<code>goroutine</code>传输到<code>main goroutine</code>。上述代码有一个错误，当一个非nil的error返回到<code>main goroutine</code>时，程序<code>return</code>了，导致<code>working channel</code>继续发送值时，却没有接收值，一直进行阻塞，永远不退出。这种情况叫<code>goroutine泄露</code>，可能导致程序卡住直至<code>out of memory</code>。<br>最简单地解决办法就是使用具有容量合适大小的<code>带缓存channel</code>，这样<code>working channel</code>向<code>channel</code>发送值时不会导致堵塞。还有一个解决办法就是，创建另外一个<code>goroutine</code>，但<code>main goroutine</code>获取第一个error时，清空<code>channel</code>。</p><h1 id="使用buffered-channel携带对象信息"><a href="#使用buffered-channel携带对象信息" class="headerlink" title="使用buffered channel携带对象信息"></a>使用buffered channel携带对象信息</h1><p>下一个版本的<code>makeThumbnails</code>使用了一个<code>buffered channel</code>来返回生成的图片文件的名字，附带生成时的错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// makeThumbnails5 makes thumbnails for the specified files in parallel.</span><br><span class="hljs-comment">// It returns the generated file names in an arbitrary order,</span><br><span class="hljs-comment">// or an error if any step failed.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeThumbnails5</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span> (thumbfiles []<span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">type</span> item <span class="hljs-keyword">struct</span> &#123;<br>thumbfile <span class="hljs-type">string</span><br>err       <span class="hljs-type">error</span><br>&#125;<br><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> item, <span class="hljs-built_in">len</span>(filenames))<br><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">var</span> it item<br>it.thumbfile, it.err = thumbnail.ImageFile(f)<br>ch &lt;- it<br>&#125;(f)<br>&#125;<br><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> filenames &#123;<br>it := &lt;-ch<br><span class="hljs-keyword">if</span> it.err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, it.err<br>&#125;<br>thumbfiles = <span class="hljs-built_in">append</span>(thumbfiles, it.thumbfile)<br>&#125;<br><br><span class="hljs-keyword">return</span> thumbfiles, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="统计文件大小"><a href="#统计文件大小" class="headerlink" title="统计文件大小"></a>统计文件大小</h1><p>最后一个版本的<code>makeThumbnails</code>返回了新文件们的大小总计数(bytes)。<br>与上面的例子不同的是，文件名不再是slice，而是单向接收的<code>channel</code>。<br>那么这样就获取不到文件数量，即确定不了<code>bufferd channel</code>的容量。</p><p>所以可以加入一个计数器，用于计算最后一个goroutine（不一定是最后开始的）什么时候结束，在每一个goroutine开始时加1，在goroutine结束时减1。这个计数器还要在多个goroutine中安全执行，在go中有这么一个计数器<code>sync.WaitGroup</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// makeThumbnails6 makes thumbnails for each file received from the channel.</span><br><span class="hljs-comment">// It returns the number of bytes occupied by the files it creates.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeThumbnails6</span><span class="hljs-params">(filename &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int64</span> &#123;<br>sizes := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int64</span>)<br><span class="hljs-keyword">var</span> wg sync.WaitGroup <span class="hljs-comment">// number of working goroutine</span><br><span class="hljs-keyword">for</span> f := <span class="hljs-keyword">range</span> filename &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// worker</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>thumb, err := thumbnail.ImageFile(f)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>info, _ := os.Stat(thumb) <span class="hljs-comment">// OK to ignore error</span><br>sizes &lt;- info.Size()<br>&#125;(f)<br>&#125;<br><br><span class="hljs-comment">// closer</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Wait()<br><span class="hljs-built_in">close</span>(sizes)<br>&#125;()<br><br><span class="hljs-keyword">var</span> total <span class="hljs-type">int64</span><br><span class="hljs-keyword">for</span> size := <span class="hljs-keyword">range</span> sizes &#123;<br>total += size<br>&#125;<br><span class="hljs-keyword">return</span> total<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">go</span> makeThumbnails6(ch)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ch &lt;- <span class="hljs-string">&quot;img.png&quot;</span><br>ch &lt;- <span class="hljs-string">&quot;img.png&quot;</span><br>ch &lt;- <span class="hljs-string">&quot;img.png&quot;</span><br><span class="hljs-built_in">close</span>(ch) <span class="hljs-comment">// 手动关闭for range 的channel</span><br>&#125;()<br><span class="hljs-keyword">for</span> &#123; <span class="hljs-comment">// 用于等待makeThumnails6函数的完成</span><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>wg.Add(1)</code> 将goroutine加1，在匿名函数完成时<code>wg.Done()</code>（等价于<code>wg.Add(-1)</code>）进行减1。而<code>defer</code>机制可以保证，即使下面的代码出错也能减1。<br><code>wg.Wait()</code>等待并阻塞该<code>goroutine</code>，直至wg计数器值为0。这时继续执行关闭<code>sizes channel</code>操作。<br>那么在<code>main goroutine</code>中，通过<code>for range</code>获取到文件大小总和。<br>这里要注意的是<code>for...range</code>获取<code>文件名</code>时，要关闭<code>filename channel</code>，否则会一直等待，相当于<code>f:=&lt;-filename</code>阻塞。</p><p>还有一点，<code>close(sizes)</code>不能在<code>main goroutine</code>或者说不能与<code>for ...range sizes</code>同一个<code>goroutine</code>中执行，否则会一直阻塞，相互等待成为<code>dead lock</code>。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 8.4：</strong> 修改reverb2服务器，在每一个连接中使用sync.WaitGroup来计数活跃的echo goroutine。当计数减为零时，关闭TCP连接的写入，像练习8.3中一样。验证一下你的修改版netcat3客户端会一直等待所有的并发“喊叫”完成，即使是在标准输入流已经关闭的情况下。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br>input := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Done()<br>echo(conn, input.Text(), <span class="hljs-number">1</span>*time.Second)<br>&#125;()<br>&#125;<br><br>wg.Wait()<br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">echo</span><span class="hljs-params">(conn net.Conn, shout <span class="hljs-type">string</span>, delay time.Duration)</span></span> &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToUpper(shout))<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, shout)<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToLower(shout))<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 8.5：</strong> 使用一个已有的CPU绑定的顺序程序，比如在3.3节中我们写的Mandelbrot程序或者3.2节中的3-D surface计算程序，并将他们的主循环改为并发形式，使用channel来进行通信。在多核计算机上这个程序得到了多少速度上的改进？使用多少个goroutine是最合适的呢？<br>解：<br>concurrent.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConcurrentRender</span><span class="hljs-params">(workers <span class="hljs-type">int</span>)</span></span> *image.RGBA &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><br>rows := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, height)<br><span class="hljs-keyword">for</span> row := <span class="hljs-number">0</span>; row &lt; height; row++ &#123;<br>rows &lt;- row<br>&#125;<br><span class="hljs-built_in">close</span>(rows)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; workers; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> py := <span class="hljs-keyword">range</span> rows &#123;<br>y := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br>img.Set(<br>px,<br>py,<br>mandelbrot(z),<br>)<br>&#125;<br>&#125;<br>wg.Done()<br>&#125;()<br>&#125;<br>wg.Wait()<br><br><span class="hljs-keyword">return</span> img<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex128</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + z<br><span class="hljs-keyword">if</span> cmplx.Abs(v) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;<span class="hljs-number">255</span> - contrast*n&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br></code></pre></td></tr></table></figure><p>serial.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package mandelbrot emits a PNG image of the Mandelbrot fractal.</span><br><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SerialRender</span><span class="hljs-params">()</span></span> *image.RGBA &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br><br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><span class="hljs-keyword">for</span> py := <span class="hljs-number">0</span>; py &lt; height; py++ &#123;<br>y := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + ymin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br>img.Set(px, py, mandelbrot(z))<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> img<br>&#125;<br></code></pre></td></tr></table></figure><p>mandelbrot_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;runtime&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkSerialRender</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>SerialRender()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">benchmarkConcurrentRender</span><span class="hljs-params">(b *testing.B, workers <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>ConcurrentRender(workers)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark1</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMaxProces</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, runtime.GOMAXPROCS(<span class="hljs-number">-1</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark8</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">8</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark16</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">16</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark32</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">32</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark64</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">64</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Benchmark128</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>benchmarkConcurrentRender(b, <span class="hljs-number">128</span>)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用cpu支持最大线程数时最优</span><br><span class="hljs-comment">goos: darwin</span><br><span class="hljs-comment">goarch: amd64</span><br><span class="hljs-comment">pkg: go-learn-gopl/ex/ex8/ex8.5/mandelbrot</span><br><span class="hljs-comment">cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz</span><br><span class="hljs-comment">BenchmarkSerialRender</span><br><span class="hljs-comment">BenchmarkSerialRender-8          4 269136007 ns/op</span><br><span class="hljs-comment">Benchmark1</span><br><span class="hljs-comment">Benchmark1-8                     4 252338560 ns/op</span><br><span class="hljs-comment">BenchmarkMaxProces</span><br><span class="hljs-comment">BenchmarkMaxProces-8            12  88347559 ns/op</span><br><span class="hljs-comment">Benchmark8</span><br><span class="hljs-comment">Benchmark8-8                    13  85825956 ns/op</span><br><span class="hljs-comment">Benchmark16</span><br><span class="hljs-comment">Benchmark16-8                   18  90070427 ns/op</span><br><span class="hljs-comment">Benchmark32</span><br><span class="hljs-comment">Benchmark32-8                   15  99837822 ns/op</span><br><span class="hljs-comment">Benchmark64</span><br><span class="hljs-comment">Benchmark64-8                   12  93368396 ns/op</span><br><span class="hljs-comment">Benchmark128</span><br><span class="hljs-comment">Benchmark128-8                  12  93611058 ns/op</span><br><span class="hljs-comment">PASS</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.4. Channels</title>
      <link href="/posts/e24baaf2eab7/"/>
      <url>/posts/e24baaf2eab7/</url>
      
        <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>如果说<code>goroutine</code>是go语言的并发体，那么<code>Channels</code>是它们之间的通信机制。<br>一个<code>goroutine</code>可以通过<code>Channels</code>发送信息给另一个<code>goroutine</code>。<br>每个<code>Channels</code>都有其可发送的数据的数据类型，如一个可以发送<code>int</code>类型数据的<code>channel</code>一般写为<code>chan int</code>。</p><h2 id="创建channel"><a href="#创建channel" class="headerlink" title="创建channel"></a>创建channel</h2><p>使用内置的<code>make</code>函数，我们可以创建一个<code>channel</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>) <span class="hljs-comment">// ch has type &#x27;chan int&#x27;</span><br></code></pre></td></tr></table></figure><p>和<code>map</code>类型，<code>channel</code>也有一个对应<code>make</code>创建的底层数据结构的引用。<br>当复制或用于函数传递时，也只是拷贝了一个<code>channel</code>的引用。</p><p><code>channel</code>的零值是<code>nil</code>。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>两个相同类型的<code>channel</code>可以使用<code>==</code>运算符比较。<br>如果两个<code>channel</code>引用的是相同的对象，那么比较的结果为<code>true</code>。<br>一个<code>channel</code>也可以和<code>nil</code>进行比较。</p><h2 id="发送和接收"><a href="#发送和接收" class="headerlink" title="发送和接收"></a>发送和接收</h2><p><code>channel</code>有两个通信操作，<code>发送</code>和<code>接收</code>。<br>发送操作将一个值从一个<code>goroutine</code>中通过<code>channel</code>发送到另一个执行接收操作的<code>goroutine</code>。<br><code>发送</code>和<code>接收</code>的运算符号都是<code>&lt;-</code>。<br>发送操作是运算符分割<code>channel</code>和<code>值</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch &lt;- x <span class="hljs-comment">// a send statement </span><br></code></pre></td></tr></table></figure><p>接收语句中，<code>&lt;-</code>写在<code>channel</code>对象前。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x = &lt;-ch  <span class="hljs-comment">// a receive expression in an assignment statement.</span><br></code></pre></td></tr></table></figure><p>接收语句还可以忽略接收对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;-ch  <span class="hljs-comment">// a receive statement.result is discarded.</span><br></code></pre></td></tr></table></figure><h2 id="close操作"><a href="#close操作" class="headerlink" title="close操作"></a>close操作</h2><p><code>channel</code>还支持<code>close</code>操作，用于关闭<code>channel</code>，随后对基于该<code>goroutine</code>的任何发送操作都导致<code>panic</code>异常。<br>对一个已经被<code>close</code>过的<code>channel</code>关闭之前接收操作依然可以接受到之前已经成功发送的数据。<br>如果<code>channel</code>中已经没有数据的话会产生一个零值的数据。<br>使用内置的<code>close</code>函数就可以关闭一个<code>channel</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">close</span>(ch)<br></code></pre></td></tr></table></figure><h2 id="无缓存和带缓存"><a href="#无缓存和带缓存" class="headerlink" title="无缓存和带缓存"></a>无缓存和带缓存</h2><p>使用<code>make</code>函数创建的最简单的是无缓存<code>channel</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)  <span class="hljs-comment">// unbuffered channel</span><br></code></pre></td></tr></table></figure><p>可以指定<code>make</code>函数的第二个参数，对应<code>channel</code>的容量。<br>如果容量等于0，仍然是无缓存<code>channel</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// unbuffered channel</span><br></code></pre></td></tr></table></figure><p>如果容量大于0，则是带缓存<code>channel</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// buffered channel with capacity 3</span><br></code></pre></td></tr></table></figure><h1 id="8-4-1-不带缓存的Channels"><a href="#8-4-1-不带缓存的Channels" class="headerlink" title="8.4.1. 不带缓存的Channels"></a>8.4.1. 不带缓存的Channels</h1><p>无缓存<code>channel</code>的发送操作会导致发送者<code>goroutine</code>阻塞，直到另一个<code>goroutine</code>在相同的<code>channel</code>上执行接收操作，并且发送的值通过<code>channel</code>成功传输之后，两个<code>goroutine</code>可以继续执行后面的语句。<br>反之，如果接收操作先发生，那么接收者<code>goroutine</code>也将阻塞，直到另一个<code>goroutine</code>在相同的<code>channel</code>上执行发送操作。</p><p>无缓存<code>channel</code>的发送和接收操作会导致两个<code>goroutine</code>做一次同步操作，因此无缓存<code>channel</code>也被称为<code>同步channel</code></p><p>当通过一个无缓存<code>channel</code>发送数据时，接收者收到数据发生在唤醒发送者<code>goroutine</code>之前，被称为<code>happens before</code>。</p><p>在8.3节的客户端程序，它在主goroutine中（译注：就是执行main函数的goroutine）将标准输入复制到server，因此当客户端程序关闭标准输入时，后台goroutine可能依然在工作。我们需要让主goroutine等待后台goroutine完成工作后再退出，我们使用了一个channel来同步两个goroutine：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-comment">// control+D 结束输入</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>io.Copy(os.Stdout, conn) <span class="hljs-comment">// ignore error // 2023/09/19 00:24:20 read tcp 127.0.0.1:55690-&gt;127.0.0.1:8000: use of closed network connection</span><br>log.Println(<span class="hljs-string">&quot;done&quot;</span>)<br>done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125; <span class="hljs-comment">// sign main goroutine</span><br>&#125;()<br>mustCopy(conn, os.Stdin)<br>conn.Close()<br>&lt;-done <span class="hljs-comment">// waiting</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mustCopy</span><span class="hljs-params">(dst io.Writer, src io.Reader)</span></span> &#123;<br>_, err := io.Copy(dst, src)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户关闭了标准输入(mac系统ctrl+D)，主<code>goroutine</code>中的<code>mustCopy</code>函数调用返回，然后调用<code>conn.Close()</code>关闭读写方向的网络链接。<br>关闭网络链接中的写方向的链接将导致<code>server</code>程序收到一个文件结束的信号（EOF，end-of-file）。<br>关闭网络链接中读方向的链接将导致后台<code>goroutine</code>的<code>io.Copy</code>函数调用返回一个<code>read from closed connection</code>（从关闭的链接读）类似的错误。该例子忽略了错误日志语句。<br>在后台<code>goroutine</code>返回之前，它先打印一个日志信息，然后向<code>done</code>对应的<code>channel</code>发送一个值。主<code>goroutine</code>在退出前先等待从<code>done</code>对应的<code>channel</code>接收一个值。所以，总能在程序退出前正确输出<code>done</code>信息。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 8.3：</strong> 在netcat3例子中，conn虽然是一个interface类型的值，但是其底层真实类型是<code>*net.TCPConn</code>，代表一个TCP链接。一个TCP链接有读和写两个部分，可以使用CloseRead和CloseWrite方法分别关闭它们。修改netcat3的主goroutine代码，只关闭网络链接中写的部分，这样的话后台goroutine可以在标准输入被关闭后继续打印从reverb1服务器传回的数据。（要在reverb2服务器也完成同样的功能是比较困难的；参考练习 8.4。）<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>tcpConn := conn.(*net.TCPConn)<br>done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>io.Copy(os.Stdout, conn)<br>log.Println(<span class="hljs-string">&quot;done&quot;</span>)<br>done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;()<br><br>mustCopy(conn, os.Stdin)<br><br>tcpConn.CloseWrite()<br>&lt;-done<br>tcpConn.CloseRead()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mustCopy</span><span class="hljs-params">(dst io.Writer, src io.Reader)</span></span> &#123;<br><span class="hljs-keyword">if</span> _, err := io.Copy(dst, src); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8-4-2-串联的Channels-Pipeline"><a href="#8-4-2-串联的Channels-Pipeline" class="headerlink" title="8.4.2. 串联的Channels(Pipeline)"></a>8.4.2. 串联的Channels(Pipeline)</h1><p><code>Channels</code>也可以用于将多个<code>goroutine</code>链接在一起，一个<code>Channels</code>的输出作为下一个<code>Channels</code>的输入。这种串联的<code>Channels</code>就是所谓的管道（<code>pipeline</code>）。<br>下面的程序用两个channels将三个goroutine串联起来:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>natruals := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>squares := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><br><span class="hljs-comment">// Counter</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> x := <span class="hljs-number">0</span>; ; x++ &#123;<br>natruals &lt;- x<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// Squarer</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>x := &lt;-natruals<br>squares &lt;- x * x<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">// Printer (in main goroutine)</span><br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(&lt;-squares)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>像这样的串联Channels的管道（<code>Pipelines</code>）可以用在需要长时间运行的服务中，每个长时间运行的goroutine可能会包含一个死循环，在不同goroutine的死循环内部使用串联的Channels来通信。<br>但是，如果我们希望通过Channels只发送有限的数列该如何处理呢？<br><strong>通过内置的close函数来关闭channel实现。</strong><br><strong>当<code>channel</code>被关闭了，再向该<code>channel</code>发送数据则导致<code>paince</code>异常。</strong><br><strong>当一个被关闭的<code>channel</code>中已经发送的数据都被成功接收后，后续的接收操作将不再阻塞，它们会立即返回一个零值。</strong><br>所以上述例子中关闭<code>naturals channel</code>并不能终止循环，它依然收到一个永无休止的零值序列，然后将它们发送给打印这<code>goroutine</code>。</p><p><strong>没有办法直接测试一个channel是否被关闭。</strong><br>但接收操作有一个变体形式：它多接收一个结果，多接收的第二个结果是一个布尔值ok，ture表示成功从channels接收到值，false表示channels已经被关闭并且里面没有值可接收。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x, ok := &lt;-naturals<br></code></pre></td></tr></table></figure><p>利用该特性，可以修改上述例子中的squarer函数中的循环代码，当naturals对应的channel被关闭并没有值可接收时跳出循环，并且也关闭squares对应的channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Squarer</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> &#123;<br>        x, ok := &lt;-naturals<br>        <span class="hljs-keyword">if</span> !ok &#123;<br>            <span class="hljs-keyword">break</span> <span class="hljs-comment">// channel was closed and drained</span><br>        &#125;<br>        squares &lt;- x * x<br>    &#125;<br>    <span class="hljs-built_in">close</span>(squares)<br>&#125;()<br></code></pre></td></tr></table></figure><p>上面的写法很笨拙，可以使用<code>for...range</code>循环的简洁特性直接迭代。</p><p>在下面的改进中，我们的计数器goroutine只生成100个含数字的序列，然后关闭naturals对应的channel，这将导致计算平方数的squarer对应的goroutine可以正常终止循环并关闭squares对应的channel。（在一个更复杂的程序中，可以通过defer语句关闭对应的channel。）最后，主goroutine也可以正常终止循环并退出程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>naturals := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>squares := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><br><span class="hljs-comment">// Counter</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> x := <span class="hljs-number">0</span>; x &lt;= <span class="hljs-number">100</span>; x++ &#123;<br>naturals &lt;- x<br>&#125;<br><span class="hljs-built_in">close</span>(naturals)<br>&#125;()<br><br><span class="hljs-comment">// Squarer</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> x := <span class="hljs-keyword">range</span> naturals &#123;<br>squares &lt;- x * x<br>&#125;<br><span class="hljs-built_in">close</span>(squares)<br>&#125;()<br><br><span class="hljs-comment">// Printer</span><br><span class="hljs-keyword">for</span> x := <span class="hljs-keyword">range</span> squares &#123;<br>fmt.Println(x)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实并不需要关闭每一个<code>channel</code>。只要当需要告诉接收者<code>goroutine</code>，所有的数据已经全部发送时才需要关闭<code>channel</code>。<br><strong>不管一个<code>channel</code>是否被关闭，当它没有被引用时将会被Go语言的垃圾自动回收器回收。</strong><br>与关闭已打开文件的操作不同，文件在不使用时都要调用其close方法进行关闭。</p><p><strong>重复关闭同一个channel都会导致panic异常。</strong><br><strong>关闭nil值的channel都会导致panic异常。</strong></p><h1 id="8-4-3-单方向的Channel"><a href="#8-4-3-单方向的Channel" class="headerlink" title="8.4.3. 单方向的Channel"></a>8.4.3. 单方向的Channel</h1><p>将上述例子中的三个<code>goroutine</code>拆分成三个小函数，使用两个<code>channel</code>连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(out <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">squarer</span><span class="hljs-params">(out, in <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printer</span><span class="hljs-params">(in <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span>”<br></code></pre></td></tr></table></figure><p>每个函数都有相同类型的参数<code>chan int</code>，但是为了函数的健壮性，<code>out</code>只输出，<code>in</code>只输入。<br>Go语言的类型系统提供了单方向的<code>channel</code>类型，分别用于只发送或只接收的<code>channel</code>。<br>类型<code>chan&lt;-int</code>表示只发送int类型的<code>channel</code>；<br>类型<code>&lt;-chan int</code>表示只接收int类型的<code>channel</code>；<br>需要注意的是：<br>因为<code>close</code>操作只作用于不再往<code>channel</code>发送数据，所以在发送者的<code>goroutine</code>中进行<code>close</code>操作。<br><strong>如果只接收的<code>channel</code>进行<code>close</code>操作会导致编译期错误。</strong><br>下面是改进后的版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(out <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> x := <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">100</span>; x++ &#123;<br>out &lt;- x<br>&#125;<br><span class="hljs-built_in">close</span>(out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">squarer</span><span class="hljs-params">(out <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span>, in &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> x := <span class="hljs-keyword">range</span> in &#123;<br>out &lt;- x * x<br>&#125;<br><span class="hljs-built_in">close</span>(out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printer</span><span class="hljs-params">(in &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> x := <span class="hljs-keyword">range</span> in &#123;<br>fmt.Println(x)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>naturals := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>squares := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> counter(naturals)<br><span class="hljs-keyword">go</span> squarer(squares, naturals)<br>printer(squares)<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>counter(naturals)</code>将<code>chan int</code>类型的<code>naturals</code>隐式地转换为<code>chan&lt;- int</code>类型只发送型的<code>channel</code>。<br>调用<code>printer(squares)</code>也会进行相似的隐式转换，这一次是转换为<code>&lt;-chan int</code>类型只接收型的<code>channel</code>。<br><strong>任何双向<code>channel</code>向单向<code>channel</code>变量的赋值操作都将导致该隐式转换。</strong><br><strong>注意得是，并没有单向<code>channel</code>(如 chan&lt;-int)转换成双向类型的<code>channel</code>(chan int).</strong></p><h1 id="8-4-4-带缓存的Channels"><a href="#8-4-4-带缓存的Channels" class="headerlink" title="8.4.4. 带缓存的Channels"></a>8.4.4. 带缓存的Channels</h1><p>带缓存的<code>channel</code>内部持有一个队列。<br>队列的最大容量是定义<code>channel</code>时的第二个参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>缓存Channel的<code>发送操作</code>就是向内部缓存队列的尾部插入元素。<br><code>接收操作</code>则是从队列的头部删除元素。<br>如果内部缓存队列是满的，那么发送操作将阻塞，直到另一个<code>goroutine</code>执行接收操作而释放新空间。<br>相反，如果内部缓存队列是空的，那么接收操作将阻塞，直到另一个<code>goroutine</code>执行发生操作而向缓存队列插入元素。<br>无阻塞的状态下，<code>channel</code>进行连续发送操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">ch &lt;- <span class="hljs-string">&quot;A&quot;</span><br>ch &lt;- <span class="hljs-string">&quot;B&quot;</span><br>ch &lt;- <span class="hljs-string">&quot;C&quot;</span><br></code></pre></td></tr></table></figure><p>当前<code>channel</code>的缓存队列已满，已阻塞，那么进行接收操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">println</span>(&lt;-ch)<br></code></pre></td></tr></table></figure><p>此时，缓存队列不是满的，也不是空的，<code>channel</code>也不阻塞，可以进行发送或接收操作。<br>也就是说，有缓存<code>channel</code>实际上是解耦了<code>发送</code>和<code>接收</code>操作。<br>示意图如下：<br><img src="/./images/1695570577915.png" alt="有缓存channel的发送和接收操作"></p><p>channel内部缓存容量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-built_in">cap</span>(ch)) <span class="hljs-comment">// &quot;3”</span><br></code></pre></td></tr></table></figure><p>channel内部缓存队列中有效元素的个数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-built_in">len</span>(ch)) <span class="hljs-comment">// &quot;2”</span><br></code></pre></td></tr></table></figure><p>因为在并发程序中该信息会随着接收操作而失效，但是它对某些故障诊断和性能优化会有帮助。</p><p>下面的例子展示了一个使用了带缓存<code>channel</code>的应用。<br>程序并发地向三个镜像站点发出请求，三个镜像站点分散在不同的地理位置。它们分别将收到的响应发送到带缓存<code>channel</code>，最后接收者只接收第一个收到的响应，也就是最快的那个响应。因此<code>mirroredQuery</code>函数可能在另外两个响应慢的镜像站点响应之前就返回了结果。（顺便说一下，多个<code>goroutines</code>并发地向同一个<code>channel</code>发送数据，或从同一个<code>channel</code>接收数据都是常见的用法。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mirroredQuery</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>    responses := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; responses &lt;- request(<span class="hljs-string">&quot;asia.gopl.io&quot;</span>) &#125;()<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; responses &lt;- request(<span class="hljs-string">&quot;europe.gopl.io&quot;</span>) &#125;()<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; responses &lt;- request(<span class="hljs-string">&quot;americas.gopl.io&quot;</span>) &#125;()<br>    <span class="hljs-keyword">return</span> &lt;-responses <span class="hljs-comment">// return the quickest response</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">request</span><span class="hljs-params">(hostname <span class="hljs-type">string</span>)</span></span> (response <span class="hljs-type">string</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>如果使用了无缓存的<code>channel</code>，那么两个慢的<code>goroutine</code>将会因没有接收者而永远阻塞，这种情况称为<code>goroutine泄露</code>。<br>与垃圾回收机制不同，泄露的<code>goroutine</code>并不会被自动回收，因此确保每个不再需要的<code>gotoutinr</code>能正常退出是很重要的。</p><h1 id="无缓存和带缓存的channel的选择"><a href="#无缓存和带缓存的channel的选择" class="headerlink" title="无缓存和带缓存的channel的选择"></a>无缓存和带缓存的channel的选择</h1><p>无缓存和带缓存的channel选择其实也是带缓存<code>channel</code>容量大小的选择。</p><p>无缓存channel能保证每个发送操作与相应的接收操作同步。<br>带缓存channel中，发送和接收操作是解耦的。</p><p>即使知道发送到<code>channel</code>上的信息的数量上限，创建一个对应容量大小带缓存<code>channel</code>也是不现实的。因为如果在执行接收操作前缓存了所有已经发送的值，在未能分配足够的缓冲将导致死锁。 </p><p><code>channel</code>的缓存也可能影响程序的性能。<br>发送操作和接收操作的速率不一致，将会导致整个流程的进度。<br>所以如何合理分配<code>channel</code>的缓存容量，要依实际需求而决定。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.3. 示例：并发的Echo服务器</title>
      <link href="/posts/10cf7d1432ab/"/>
      <url>/posts/10cf7d1432ab/</url>
      
        <content type="html"><![CDATA[<p><code>Echo</code>服务器一般情况下会返回它接收到的内容。<br>类似回音，一开始返回全大写的内容，如HELLO，表示<code>声音很大</code>； 间隔一定时间后，返回有所缓和的<code>Hello</code>；最后返回一个表示声音很小的全小写<code>hello</code>直至消失。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Reverb1 is a TCP server that simulates an echo.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>input := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>echo(conn, input.Text(), <span class="hljs-number">1</span>*time.Second)<br>&#125;<br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">echo</span><span class="hljs-params">(conn net.Conn, shout <span class="hljs-type">string</span>, delay time.Duration)</span></span> &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToUpper(shout))<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, shout)<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToLower(shout))<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来要对客户端进行改造，将终端返回的数据打印到标准输出，将标准输入发送到终端。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-keyword">go</span> mustCopy(os.Stdout, conn)<br>mustCopy(conn, os.Stdin)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mustCopy</span><span class="hljs-params">(dst io.Writer, src io.Reader)</span></span> &#123;<br><span class="hljs-keyword">if</span> _, err := io.Copy(dst, src); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>main goroutine</code>从标准输入流中读取内容并把它发送到服务器时，另一个<code>goroutine</code>获取服务器发生来的内容并打印出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ../reverb1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./reverb1 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ../netcat2</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./netcat2</span><br>Hello?<br>         ISHELLO?<br>         IsHello?<br>         ishello?<br>Hello?<br>         HELLO?<br>         Hello?<br>         hello?<br>Is there anybody there?<br>         IS THERE ANYBODY THERE?<br>A<br> Is there anybody there?<br>         is there anybody there?<br>         A<br>         A<br>         a<br>^D<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">killall reverb1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">killall netcat2</span><br></code></pre></td></tr></table></figure><p>在第三次<code>shout</code>的时候，<code>A</code>在等上一次回响完成后才能进行回响，这种情况是不<code>现实</code>的。为了模拟现实世界的回响，可以再使用<code>goroutine</code>进行处理<code>echo</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>input := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br><span class="hljs-keyword">go</span> echo(conn, input.Text(), <span class="hljs-number">1</span>*time.Second)<br>&#125;<br>conn.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">echo</span><span class="hljs-params">(conn net.Conn, shout <span class="hljs-type">string</span>, delay time.Duration)</span></span> &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToUpper(shout))<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, shout)<br>time.Sleep(delay)<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;\t&quot;</span>, strings.ToLower(shout))<br>&#125;<br></code></pre></td></tr></table></figure><p>现在回响是并发并且会按时间来覆盖掉其它响应了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ../reverb2</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./reverb2 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ../netcat2</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./netcat2</span><br>Hello?<br>         HELLO?<br>         Hello?<br>         hello?<br>Call<br>         CALL<br>         Call<br>A<br>         A<br>         call<br>         A<br>         a<br>B<br>         B<br>C<br>         C<br>         B<br>         C<br>         b<br>         c<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.2. 示例：并发的Clock服务</title>
      <link href="/posts/fca3f5579354/"/>
      <url>/posts/fca3f5579354/</url>
      
        <content type="html"><![CDATA[<p>网络编程是并发大显身手的一个领域，由于服务器是最典型的需要同时处理很多连接的程序，这些连接一般来自远彼此独立的客户端。</p><h1 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h1><p>第一个例子是一个顺序执行的时钟服务器，它会每隔一秒钟将当前时间写到客户端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Clock1 is a TCP server that periodically writes the time.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err) <span class="hljs-comment">// e.g., connection aborted</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-keyword">for</span> &#123;<br>_, err := io.WriteString(conn, time.Now().Format(<span class="hljs-string">&quot;15:04:05\n&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Listen</code>函数创建了一个<code>net.Listener</code>的对象，该对象会监听一个网络端口上到的连接。<code>listener</code>对象的<code>Accept</code>方法会直接阻塞，直到一个新的连接被创建，然后会返回一个<code>net.Conn</code>对象来表示这个连接。<br><code>handleConn</code>函数处理一个完整的客户端连接。在一个<code>for</code>死循环中，将当前时间<code>time.Now()</code>写到客户端。由于<code>net.Conn</code>实现了<code>io.Writer</code>接口，所以可以直接写入内容。死循环直到出错才退出循环，一般情况下，客户端主动断开连接。<br>使用<code>defer</code>关闭<code>conn.Close()</code>服务器侧的连接，然后返回到主函数，继续等待下一个连接请求。<br><code>time.Time.Format</code>方法用于格式化日期和时间。其参数是格式化模版标识如何格式化时间，格式化模板为<code>Mon Jan 2 03:04:05PM 2006 UTC-0700</code>。<br>与其他编程语言<code>Y-m-d H:M:S</code>不同的是，格式化模板为<code>1月2日下午3点4分5秒2006年UTC-0700</code>，即<code>1234567</code>。<br>为了连接例子中的服务器，可以使用<code>Unix</code>中<code>netcat</code>工具中的<code>nc</code>命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> build ../clock1<br>$ ./clock1 &amp;<br>[<span class="hljs-number">1</span>] <span class="hljs-number">1822</span><br>$ nc localhost <span class="hljs-number">8000</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">50</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">51</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">52</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">53</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">54</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">55</span><br><span class="hljs-number">19</span>:<span class="hljs-number">13</span>:<span class="hljs-number">56</span><br>^C<br>$ killall clock1<br>[<span class="hljs-number">1</span>]+  Terminated: <span class="hljs-number">15</span>          ./clock1<br></code></pre></td></tr></table></figure><p><code>./clock1 &amp;</code>指的是在后台运行;<br><code>nc</code>命令连接服务器访问地址；<br><code>Ctrl+C</code>中断客户端访问，停止访问；<br><code>killall</code>是杀掉名字匹配的进程；<br>没有<code>nc</code>，也可以使用<code>telnet</code>命令实现。<br>也可以使用下面telnet程序进行访问：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>mustCopy(os.Stdout, conn)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mustCopy</span><span class="hljs-params">(dst io.Writer, src io.Reader)</span></span> &#123;<br><span class="hljs-keyword">if</span> _, err := io.Copy(dst, src); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该程序会从连接中读取数据，并将读到的内容写入到标准输出中，直到发生<code>end of file</code>和发生错误。<br>下面是测试:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> build ../netcat1<br>$ ./netcat1 <br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">51</span><br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">52</span><br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">53</span><br>^C<br>$ killall clock1<br></code></pre></td></tr></table></figure><p>上述例子中的服务器同一时间只能处理一个客户端连接。第二个客户端必须等待第一个客户端的完成访问，才能继续往后执行。<br>下面的例子将服务器改成并发，在<code>handleConn</code>函数前加上<code>go</code>关键字，让每一次<code>handleConn</code>的调用都进入一个独立的<code>goroutine</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8000&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-keyword">for</span> &#123;<br>_, err := io.WriteString(conn, time.Now().Format(<span class="hljs-string">&quot;15:04:05\n&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样多个客户端能够同时接收到时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ../clock2</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./clock2 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./netcat1</span> <br>19:44:51<br>19:44:52<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./netcat1</span><br>19:44:55<br>19:44:56<br></code></pre></td></tr></table></figure><p><strong>练习 8.1：</strong> 修改clock2来支持传入参数作为端口号，然后写一个clockwall的程序，这个程序可以同时与多个clock服务器通信，从多服务器中读取时间，并且在一个表格中一次显示所有服务传回的结果，类似于你在某些办公室里看到的时钟墙。如果你有地理学上分布式的服务器可以用的话，让这些服务器跑在不同的机器上面；或者在同一台机器上跑多个不同的实例，这些实例监听不同的端口，假装自己在不同的时区。像下面这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">TZ=US/Eastern    ./clock2 -port 8010 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">TZ=Asia/Tokyo    ./clock2 -port 8020 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">TZ=Europe/London ./clock2 -port 8030 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">clockwall NewYork=localhost:8010 Tokyo=localhost:8020 London=localhost:8030</span><br></code></pre></td></tr></table></figure><p>解：<br>clock.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> port = flag.String(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-string">&quot;8000&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:&quot;</span>+*port)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-keyword">for</span> &#123;<br>_, err := io.WriteString(conn, time.Now().Format(<span class="hljs-string">&quot;15:04:05\n&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>clockwall.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>name    <span class="hljs-type">string</span><br>addr    <span class="hljs-type">string</span><br>message <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>servers := parse(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">for</span> _, ser := <span class="hljs-keyword">range</span> servers &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, ser.addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ser *server)</span></span> &#123;<br>sc := bufio.NewScanner(conn)<br><span class="hljs-keyword">for</span> sc.Scan() &#123;<br>ser.message = sc.Text()<br>&#125;<br>&#125;(ser)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">for</span> _, ser := <span class="hljs-keyword">range</span> servers &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s: %s\n&quot;</span>, ser.name, ser.message)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;-------------&quot;</span>)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parse</span><span class="hljs-params">(args []<span class="hljs-type">string</span>)</span></span> []*server &#123;<br><span class="hljs-keyword">var</span> servers []*server<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> args &#123;<br>s := strings.SplitN(arg, <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">2</span>)<br>servers = <span class="hljs-built_in">append</span>(servers, &amp;server&#123;s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;&quot;</span>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> servers<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 8.2：</strong> 实现一个并发FTP服务器。服务器应该解析客户端来的一些命令，比如cd命令来切换目录，ls来列出目录内文件，get和send来传输文件，close来关闭连接。你可以用标准的ftp命令来作为客户端，或者也可以自己实现一个。<br>解：<br>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> handleConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br>sc := bufio.NewScanner(conn)<br>cwd := <span class="hljs-string">&quot;.&quot;</span><br><br>CLOSE:<br><span class="hljs-keyword">for</span> sc.Scan() &#123;<br>log.Println(sc.Text())<br>args := strings.Fields(sc.Text())<br>cmd := args[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">switch</span> cmd &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;close&quot;</span>:<br><span class="hljs-keyword">break</span> CLOSE<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cd&quot;</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span> &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;not enough argument&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cwd += <span class="hljs-string">&quot;/&quot;</span> + args[<span class="hljs-number">1</span>]<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ls&quot;</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span> &#123;<br>ls(conn, cwd)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>path := args[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> err := ls(conn, path); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprint(conn, err)<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;get&quot;</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span> &#123;<br>fmt.Fprintln(conn, <span class="hljs-string">&quot;not enough argument&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>filename := args[<span class="hljs-number">1</span>]<br>data, err := os.ReadFile(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprint(conn, err)<br>&#125;<br>fmt.Fprintf(conn, <span class="hljs-string">&quot;%s\n&quot;</span>, data)<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;send&quot;</span>:<br>sp := strings.Split(args[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;/&quot;</span>)<br>filename := sp[<span class="hljs-built_in">len</span>(sp)<span class="hljs-number">-1</span>]<br>f, err := os.Create(<span class="hljs-string">&quot;./ex/ex8/ex8.2/server/&quot;</span> + filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprint(conn, err)<br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br><br>c, err := strconv.Atoi(args[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprint(conn, err)<br>&#125;<br><br><span class="hljs-keyword">var</span> texts <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; c &amp;&amp; sc.Scan(); i++ &#123;<br>texts += sc.Text() + <span class="hljs-string">&quot;\n&quot;</span><br>&#125;<br>texts = strings.TrimSuffix(texts, <span class="hljs-string">&quot;\n&quot;</span>)<br>fmt.Fprint(f, texts)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ls</span><span class="hljs-params">(w io.Writer, dir <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>files, err := os.ReadDir(dir)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s\n&quot;</span>, file.Name())<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-keyword">go</span> mustCopy(os.Stdout, conn)<br><br>sc := bufio.NewScanner(os.Stdin)<br>CLOSE:<br><span class="hljs-keyword">for</span> sc.Scan() &#123;<br>args := strings.Fields(sc.Text())<br>cmd := args[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">switch</span> cmd &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;close&quot;</span>:<br>fmt.Fprintln(conn, sc.Text())<br><span class="hljs-keyword">break</span> CLOSE<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;cd&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>:<br>fmt.Fprintln(conn, sc.Text())<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;send&quot;</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &lt; <span class="hljs-number">2</span> &#123;<br>log.Println(<span class="hljs-string">&quot;not enough argument&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>filename := args[<span class="hljs-number">1</span>]<br>data, err := os.ReadFile(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Printf(<span class="hljs-string">&quot;read file err: %v&quot;</span>, err)<br>&#125;<br>fmt.Fprintf(conn, <span class="hljs-string">&quot;%s %d\n&quot;</span>, sc.Text(), countLines(data))<br>fmt.Fprintf(conn, <span class="hljs-string">&quot;%s&quot;</span>, data)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countLines</span><span class="hljs-params">(data []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>c := <span class="hljs-number">0</span><br>sc := bufio.NewScanner(bytes.NewReader(data))<br><span class="hljs-keyword">for</span> sc.Scan() &#123;<br>c++<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mustCopy</span><span class="hljs-params">(dst io.Writer, src io.Reader)</span></span> &#123;<br><span class="hljs-keyword">if</span> _, err := io.Copy(dst, src); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.1. Goroutines</title>
      <link href="/posts/dbf6e956aad2/"/>
      <url>/posts/dbf6e956aad2/</url>
      
        <content type="html"><![CDATA[<p>在Go语言中，每一个并发的执行单元叫作一个<code>goroutine</code>。<br>新的<code>goroutine</code>会用<code>go</code>语句来创建。在语法上，<code>go</code>语句是一个普通的函数或方法调用前加上关键字<code>go</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">f()<br><span class="hljs-keyword">go</span> f()<br></code></pre></td></tr></table></figure><p>下面的例子，<code>main goroutine</code>将计算菲波那契数列的第45个元素值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> spinner(<span class="hljs-number">100</span> * time.Millisecond)<br><span class="hljs-keyword">const</span> n = <span class="hljs-number">45</span><br>fibN := fib(n) <span class="hljs-comment">// slow</span><br>fmt.Printf(<span class="hljs-string">&quot;\rFibonacci(%d) = %d\n&quot;</span>, n, fibN)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">spinner</span><span class="hljs-params">(delay time.Duration)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> <span class="hljs-string">`——\|/`</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\r%c&quot;</span>, r) <span class="hljs-comment">// \r转义字符，将光标移动到当前行的首位，以便下次输出覆盖该行内容。</span><br>time.Sleep(delay)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> x<br>&#125;<br><span class="hljs-keyword">return</span> fib(x<span class="hljs-number">-1</span>) + fib(x<span class="hljs-number">-2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>动画显示了几秒之后，fib(45)的调用成功地返回，并且打印结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Fibonacci(<span class="hljs-number">45</span>) = <span class="hljs-number">1134903170</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八章 Goroutines和Channels</title>
      <link href="/posts/160e8baeca27/"/>
      <url>/posts/160e8baeca27/</url>
      
        <content type="html"><![CDATA[<p>并发程序指同时进行多个任务的程序。<br>Go语言中的并发程序可以用两种手段来实现。</p><ul><li>goroutine</li><li>channel</li></ul><p>还支持<code>顺序通信进程（communicating sequential processes）</code>，简称<code>CSP</code>。<code>CSP</code>是一种现代的并发编程模型，在这种编程模型中值会在不同的运行实例<code>goroutine</code>中传递，尽管会别被限制在单一实例中。<br>第9章则是更为传统的并发模型：<code>多线程共享内存</code>。</p><p><a href="/posts/dbf6e956aad2/">8.1. Goroutines</a><br><a href="/posts/fca3f5579354/">8.2. 示例：并发的Clock服务</a><br><a href>8.3. 示例：并发的Echo服务</a><br><a href="/posts/e24baaf2eab7/">8.4. Channels</a><br><a href="/posts/5f0a41aff939/">8.5. 并发的循环</a><br><a href="/posts/1258766bd2ef/">8.6. 示例：并发的Web爬虫</a><br><a href="/posts/866000668cee/">8.7. 基于select的多路复用</a><br><a href="/posts/dbf617f2750e/">8.8. 示例：并发的字典遍历</a><br><a href="/posts/92d779dbee59/">8.9. 并发的退出</a><br><a href="/posts/7a3e094c0893/">8.10. 示例：聊天服务</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.15. 一些建议</title>
      <link href="/posts/8520b52085ef/"/>
      <url>/posts/8520b52085ef/</url>
      
        <content type="html"><![CDATA[<p>当设计一个新包时，一般情况下是创建一个接口的集合开始和定义它们的具体类型。<br>这种方式会导致有很多接口，且每一个都会仅有一个实现。<br>这种设计方式是错误的，这种接口是不必要的抽象，且还有运行时损耗。<br>实际上，可以使用导出机制来限制一个类型的方法或一个结构体的字段是否在包外可见。接口只有在当两个或两个以上的具体类型必须以相同的方式进行处理时才需要。</p><p>当一个接口只被一个具体类型实现时，往往是因为依赖，即依赖于另外一个包内的接口类型。这种情况下，<code>一个接口是解耦两个包的一个好的方式</code>。</p><p>在Go语言中只有当两个或更多的类型需要实现同一个接口时才使用接口。接口尽量使用小接口，方法尽可能少，如<code>io.Writer</code>或<code>fmt.Stringer</code>只有一个方法。<br>对于接口设计的一个好的标准就是<code>ask only for what you need</code>(只考虑你需要的)。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.14. 示例：基于标记的XML解码</title>
      <link href="/posts/c380e460aca4/"/>
      <url>/posts/c380e460aca4/</url>
      
        <content type="html"><![CDATA[<p>第4.5章节展示了如何使用<code>encoding/json</code>包中的<code>Marshal</code>和<code>Unmarshal</code>函数来将JSON文档转换成Go语言的数据结构。<code>encoding/xml</code>包提供了一个相似的API。<br><code>encoding/xml</code>包也提供了一个更低层的基于标记的API用于XML解码。在基于标记的样式中，解析器消费输入和产生一个标记流；四个主要的标记类型－<code>StartElement</code>，<code>EndElement</code>，<code>CharData</code>，和<code>Comment</code>－每一个都是<code>encoding/xml</code>包中的具体类型。每一个对<code>(*xml.Decoder).Token</code>的调用都返回一个标记。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> xml<br><br><span class="hljs-keyword">type</span> Name <span class="hljs-keyword">struct</span> &#123;<br>    Local <span class="hljs-type">string</span> <span class="hljs-comment">// e.g., &quot;Title&quot; or &quot;id&quot;</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Attr <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// e.g., name=&quot;value&quot;</span><br>    Name  Name<br>    Value <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// A Token includes StartElement, EndElement, CharData,</span><br><span class="hljs-comment">// and Comment, plus a few esoteric types (not shown).</span><br><span class="hljs-keyword">type</span> Token <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">type</span> StartElement <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// e.g., &lt;name&gt;</span><br>    Name Name<br>    Attr []Attr<br>&#125;<br><span class="hljs-keyword">type</span> EndElement <span class="hljs-keyword">struct</span> &#123; Name Name &#125; <span class="hljs-comment">// e.g., &lt;/name&gt;</span><br><span class="hljs-keyword">type</span> CharData []<span class="hljs-type">byte</span>                 <span class="hljs-comment">// e.g., &lt;p&gt;CharData&lt;/p&gt;</span><br><span class="hljs-keyword">type</span> Comment []<span class="hljs-type">byte</span>                  <span class="hljs-comment">// e.g., &lt;!-- Comment --&gt;</span><br><span class="hljs-keyword">type</span> Decoder <span class="hljs-keyword">struct</span>&#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDecoder</span><span class="hljs-params">(io.Reader)</span></span> *Decoder<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*Decoder)</span></span> Token() (Token, <span class="hljs-type">error</span>) <span class="hljs-comment">// returns next Token in sequence</span><br></code></pre></td></tr></table></figure><p>这个没有方法的Token接口也是一个可识别联合的例子。<br>传统的接口如io.Reader的目的是隐藏满足它的具体类型的细节，这样就可以创造出新的实现。<br>在这个实现中每个具体类型都被统一地对待。<br>相反，<code>满足可识别联合的具体类型的集合被设计确定和暴露，而不是隐藏。</code><br><code>可识别的联合类型几乎没有方法；</code><br><code>操作它们的函数使用一个类型开关的case集合来进行表述；</code><br><code>这个case集合中每一个case中有不同的逻辑。</code></p><p>下面的<code>xmlselect</code>程序获取和打印在一个XML文档树中确定的元素下找到的文本。使用上面的API，它可以在输入上一次完成它的工作而从来不要具体化这个文档树。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Xmlselect prints the text of selected elements of an XML document.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/xml&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>dec := xml.NewDecoder(os.Stdin)<br><span class="hljs-keyword">var</span> stack []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> &#123;<br>tok, err := dec.Token()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;xmlselect: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">switch</span> tok := tok.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> xml.StartElement:<br>stack = <span class="hljs-built_in">append</span>(stack, tok.Name.Local) <span class="hljs-comment">// push</span><br><span class="hljs-keyword">case</span> xml.EndElement:<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] <span class="hljs-comment">// pop</span><br><span class="hljs-keyword">case</span> xml.CharData:<br><span class="hljs-keyword">if</span> containsAll(stack, os.Args[<span class="hljs-number">1</span>:]) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s: %s\n&quot;</span>, strings.Join(stack, <span class="hljs-string">&quot; &quot;</span>), tok)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// containsAll reports whether x contains the elements of y, in order</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsAll</span><span class="hljs-params">(x, y []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(y) &lt;= <span class="hljs-built_in">len</span>(x) &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> x[<span class="hljs-number">0</span>] == y[<span class="hljs-number">0</span>] &#123;<br>y = y[<span class="hljs-number">1</span>:]<br>&#125;<br>x = x[<span class="hljs-number">1</span>:]<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面的命令打印出任意出现在两层div元素下的h2元素的文本。它的输入是XML的说明文档，并且它自己就是XML文档格式的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build -o xmlselect ./main.go</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../../ch1/fetch http://www.w3.org/TR/2006/REC-xml11-20060816 | ./xmlselect div div h2</span><br>html body div div h2: 1 Introduction<br>html body div div h2: 2 Documents<br>html body div div h2: 3 Logical Structures<br>html body div div h2: 4 Physical Structures<br>html body div div h2: 5 Conformance<br>html body div div h2: 6 Notation<br>html body div div h2: A References<br>html body div div h2: B Definitions for Character Normalization<br>html body div div h2: C Expansion of Entity and Character References (Non-Normative)<br>html body div div h2: D Deterministic Content Models (Non-Normative)<br>html body div div h2: E Autodetection of Character Encodings (Non-Normative)<br>html body div div h2: F W3C XML Working Group (Non-Normative)<br>html body div div h2: G W3C XML Core Working Group (Non-Normative)<br>html body div div h2: H Production Notes (Non-Normative)<br>html body div div h2: I Suggestions for XML Names (Non-Normative)<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.17：</strong> 扩展xmlselect程序以便让元素不仅仅可以通过名称选择，也可以通过它们CSS样式上属性进行选择；例如一个像这样的元素可以通过匹配id或者class同时还有它的名称来进行选择。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/xml&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// cat in.html | go run main.go id=p3</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>decoder := xml.NewDecoder(os.Stdin)<br><span class="hljs-keyword">var</span> stack []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> attrs []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> &#123;<br>token, err := decoder.Token()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;xmlselect: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">switch</span> token := token.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> xml.StartElement:<br>stack = <span class="hljs-built_in">append</span>(stack, token.Name.Local) <span class="hljs-comment">// push</span><br>attr := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> token.Attr &#123;<br>attr[a.Name.Local] = a.Value<br>&#125;<br>attrs = <span class="hljs-built_in">append</span>(attrs, attr)<br><span class="hljs-keyword">case</span> xml.EndElement:<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] <span class="hljs-comment">// pop</span><br>attrs = attrs[:<span class="hljs-built_in">len</span>(attrs)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">case</span> xml.CharData:<br><span class="hljs-keyword">if</span> containsAll(toSlice(stack, attrs), os.Args[<span class="hljs-number">1</span>:]) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s: %s\n&quot;</span>, strings.Join(stack, <span class="hljs-string">&quot; &quot;</span>), token)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsAll</span><span class="hljs-params">(x, y []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(y) &lt;= <span class="hljs-built_in">len</span>(x) &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> x[<span class="hljs-number">0</span>] == y[<span class="hljs-number">0</span>] &#123;<br>y = y[<span class="hljs-number">1</span>:]<br>&#125;<br>x = x[<span class="hljs-number">1</span>:]<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">toSlice</span><span class="hljs-params">(stack []<span class="hljs-type">string</span>, attrs []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> i, name := <span class="hljs-keyword">range</span> stack &#123;<br>result = <span class="hljs-built_in">append</span>(result, name)<br><span class="hljs-keyword">for</span> attr, value := <span class="hljs-keyword">range</span> attrs[i] &#123;<br>result = <span class="hljs-built_in">append</span>(result, attr+<span class="hljs-string">&quot;=&quot;</span>+value)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>in.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xml:lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Extensible Markup Language (XML) 1.1 (Second Edition)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span>d1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span>d2<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d3&quot;</span>&gt;</span>d3<br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>练习 7.18：</strong> 使用基于标记的解码API，编写一个可以读取任意XML文档和构造这个文档所代表的普通节点树的程序。节点有两种类型：CharData节点表示文本字符串，和 Element节点表示被命名的元素和它们的属性。每一个元素节点有一个字节点的切片。<br>你可能发现下面的定义会对你有帮助。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;encoding/xml&quot;</span><br><br><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-comment">// CharData or *Element</span><br><br><span class="hljs-keyword">type</span> CharData <span class="hljs-type">string</span><br><br><span class="hljs-keyword">type</span> Element <span class="hljs-keyword">struct</span> &#123;<br>    Type     xml.Name<br>    Attr     []xml.Attr<br>    Children []Node<br>&#125;<br></code></pre></td></tr></table></figure><p>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/xml&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-comment">// cat in.html | go run main.go</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>node, err := parse(xml.NewDecoder(os.Stdin))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, node)<br>&#125;<br><br><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> CharData <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CharData)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(c)<br>&#125;<br><br><span class="hljs-keyword">type</span> Element <span class="hljs-keyword">struct</span> &#123;<br>Type     xml.Name<br>Attr     []xml.Attr<br>Children []Node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Element)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> attrs, children <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, attr := <span class="hljs-keyword">range</span> e.Attr &#123;<br>attrs += fmt.Sprintf(<span class="hljs-string">&quot; %s=%q&quot;</span>, attr.Name.Local, attr.Value)<br>&#125;<br><span class="hljs-keyword">for</span> _, child := <span class="hljs-keyword">range</span> e.Children &#123;<br>children += child.String()<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;&lt;%s%s&gt;%s&lt;%s&gt;&quot;</span>,<br>e.Type.Local, attrs, children, e.Type.Local)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parse</span><span class="hljs-params">(dec *xml.Decoder)</span></span> (Node, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> stack []*Element<br><span class="hljs-keyword">for</span> &#123;<br>token, err := dec.Token()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">switch</span> token := token.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> xml.StartElement:<br>e := &amp;Element&#123;token.Name, token.Attr, []Node&#123;&#125;&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<br>p := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>p.Children = <span class="hljs-built_in">append</span>(p.Children, e)<br>&#125;<br>stack = <span class="hljs-built_in">append</span>(stack, e)<br><span class="hljs-keyword">case</span> xml.EndElement:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unexpected tag closing&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> stack[<span class="hljs-number">0</span>], <span class="hljs-literal">nil</span><br>&#125;<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">case</span> xml.CharData:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<br>p := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>p.Children = <span class="hljs-built_in">append</span>(p.Children, CharData(token))<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.13. 类型开关</title>
      <link href="/posts/c4e3ed798cee/"/>
      <url>/posts/c4e3ed798cee/</url>
      
        <content type="html"><![CDATA[<p>接口一般以两种方式使用。</p><ul><li>第一个方式中，<code>io.Reader</code>、<code>io.Writer</code>、<code>fmt.Stringer</code>、<code>sort.Interface</code>、<code>http.Handler</code>、和<code>error</code>为例，一个接口的方法表达了实现这个接口的具体类型间的相思性，但是隐藏了代表的细节和这些具体类型本身的操作。重点在于方法上，而不是具体的类型上。</li><li>第二个方式利用一个接口值可以持有各种具体类型值的能力并且将这个接口认为是这些类型的<code>union</code>（联合）。类型断言用来动态地区别这些类型并且对每一种情况都不一样。在这个方式中，重点在于具体的类型满足这个接口，而不是在于接口的方法（如果它确实有一些的话），并且没有任何的信息隐藏。我们将以这种方式使用的接口描述为<code>discriminated unions</code>（可辨识联合）。</li></ul><p>在面向对象编程中，这两种方式分别是<code>subtype polymorphism</code>（子类型多态）和 <code>ad-hoc polymorphism</code>（非参数多态）</p><h1 id="SQL数据库例子"><a href="#SQL数据库例子" class="headerlink" title="SQL数据库例子"></a>SQL数据库例子</h1><p>Go语言查询一个SQL数据库的API会干净地将查询中固定的部分和变化的部分分开。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;database/sql&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">listTracks</span><span class="hljs-params">(db sql.DB, artist <span class="hljs-type">string</span>, minYear, maxYear <span class="hljs-type">int</span>)</span></span> &#123;<br>db.Exec(<span class="hljs-string">&quot;SELECT * FROM tracks WHERE artist = ? AND ? &lt;= year AND year &lt;= ?&quot;</span>,<br>artist, minYear, maxYear)<br><span class="hljs-comment">// ...</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>Exec方法使用SQL字面量替换在查询字符串中的每个’?’；SQL字面量表示相应参数的值，它有可能是一个布尔值，一个数字，一个字符串，或者nil空值。<br>这种方式构造查询可以帮助避免SQL注入攻击；这种攻击就是对手可以通过利用输入内容中不正确的引文来控制查询语句。</p><p>在Exec函数内部，我们可能会找到像下面这样的一个函数，它会将每一个参数值转换成它的SQL字面量符号。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sqlQuote</span><span class="hljs-params">(x <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> x == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NULL&quot;</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> _, ok := x.(<span class="hljs-type">int</span>); ok &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, x)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> _, ok := x.(<span class="hljs-type">uint</span>); ok &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, x)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b, ok := x.(<span class="hljs-type">bool</span>); ok &#123;<br><span class="hljs-keyword">if</span> b &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;TRUE&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FALSE&quot;</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> _, ok := x.(<span class="hljs-type">string</span>); ok &#123;<br><span class="hljs-keyword">return</span> sqlQuoteString(s)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected type %T: %v&quot;</span>, x, x))<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>switch</code>语句简化<code>if-else</code>链。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> x.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:       <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">int</span>, <span class="hljs-type">uint</span>: <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">bool</span>:      <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">default</span>:        <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>和普通<code>switch</code>语句一样，每一个<code>case</code>会被顺序的进行考虑，并且当一个匹配找到时，这个<code>case</code>中的内容会被执行。当一个或多个<code>case</code>类型是接口时，<code>case</code>的顺序就会变得很重要，因为可能会有两个<code>case</code>同时匹配的情况。<code>default case</code>相对其它<code>case</code>的位置是无所谓的。它不会允许落空发生。</p><p>注意到在原来的函数中，对于<code>bool</code>和<code>string</code>情况的逻辑需要通过类型断言访问提取的值。因为这个做法很典型，类型开关语句有一个扩展的形式，它可以将提取的值绑定到一个在每个<code>case</code>范围内的新变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> x := x.(<span class="hljs-keyword">type</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>已经将新的变量也命名为<code>x</code>；和类型断言一样，重用变量名是很常见的。和一个<code>switch</code>语句相似地，一个类型开关隐式的创建了一个语言块，因此新变量<code>x</code>的定义不会和外面块中的<code>x</code>变量冲突。每一个<code>case</code>也会隐式的创建一个单独的语言块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sqlQuote</span><span class="hljs-params">(x <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">switch</span> x := x.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NULL&quot;</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">int</span>, <span class="hljs-type">uint</span>:<br>        <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, x) <span class="hljs-comment">// x has type interface&#123;&#125; here.</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">bool</span>:<br>        <span class="hljs-keyword">if</span> x &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;TRUE&quot;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FALSE&quot;</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:<br>        <span class="hljs-keyword">return</span> sqlQuoteString(x) <span class="hljs-comment">// (not shown)</span><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected type %T: %v&quot;</span>, x, x))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>当多个case需要相同的操作时，比如int和uint的情况，类型开关可以进行合并。</code><br>虽然<code>x</code>的类型是<code>interface&#123;&#125;</code>，但是我们把它认为是一个<code>int</code>，<code>uint</code>，<code>bool</code>，<code>string</code>，和<code>nil</code>值的<code>discriminated union</code>（可识别联合）。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.12. 通过类型断言询问行为</title>
      <link href="/posts/b10f700bc1c1/"/>
      <url>/posts/b10f700bc1c1/</url>
      
        <content type="html"><![CDATA[<h1 id="stringWriter"><a href="#stringWriter" class="headerlink" title="stringWriter"></a>stringWriter</h1><p>下面程序与<code>net/http</code>包中web服务器负责写入<code>HTTP</code>头字段（如：<code>Content-type:text/html</code>）的部分相似。<br><code>io.Writer</code>接口类型的变量w代表HTTP响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeHeader</span><span class="hljs-params">(w io.Writer, contentType <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> _, err := w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Content-Type:&quot;</span>)); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> _, err := w.Write([]<span class="hljs-type">byte</span>(contentType)); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为<code>Write</code>方法需要传入一个<code>bbyte</code>切片，而我们希望写入的值是一个字符串，所以需要使用<code>[]byte(...)</code>进行转换。<br>这个转换还做了拷贝，而拷贝在转换后几乎立马就被丢弃掉。<br>这个内存分配可能导致服务器的速度变慢，那这里可以避免内存分配么？</p><p><code>io.Writer</code>接口的方法是<code>Write(p []byte) (n int, err error)</code>, 那么只能传入字节切片。那么程序中的<code>w</code>变量持有的动态类型也有一个允许字符串高效写入的<code>WriteString</code>方法，就可以避免分配一个临时的拷贝。<br>很多满足<code>io.Writer</code>接口的类型同时也有<code>WriteString</code>方法，包括<code>*bytes.Buffer</code>，<code>os.File</code>和<code>*bufio.Writer</code>。<br>所以假设变量<code>w</code>也拥有<code>WriteString</code>方法，且定义一个只有<code>WriteString</code>方法的新接口，还可以使用类型断言来检测是否变量w的动态类型满足这个新接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeString</span><span class="hljs-params">(w io.Writer, s <span class="hljs-type">string</span>)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">type</span> stringWriter <span class="hljs-keyword">interface</span> &#123;<br>WriteString(<span class="hljs-type">string</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br>&#125;<br><span class="hljs-keyword">if</span> sw, ok := w.(stringWriter); ok &#123;<br><span class="hljs-keyword">return</span> sw.WriteString(s) <span class="hljs-comment">// avoid a copy</span><br>&#125;<br><span class="hljs-keyword">return</span> w.Write([]<span class="hljs-type">byte</span>(s)) <span class="hljs-comment">// allocate temporary copy</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeHeader</span><span class="hljs-params">(w io.Writer, contentType <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> _, err := writeString(w, <span class="hljs-string">&quot;Content-Type:&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> _, err := writeString(w, contentType); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为了避免重复定义，我们将这个检查移入到一个实用工具函数<code>writeString</code>中。甚至于它太有用了，标准库中也存在该函数<code>io.WriteString</code>。</p><p>这个例子神奇之处在于没有定义<code>WriteString</code>方法的标准接口和没有指定它是一个需要行为的标准接口。而是通过它的方法来决定它是否满足<code>stringWriter</code>接口。</p><h1 id="Stringer"><a href="#Stringer" class="headerlink" title="Stringer"></a>Stringer</h1><p><code>fmt.Fprintf</code>也是通过该技巧进行对其他所有值中区分满足<code>error</code>或<code>fmt.Stringer</code>接口的值。<br>在<code>fmt.Fprintf</code>中，有一个将单个操作对象转换成一个字符串的的步骤。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> fmt<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">formatOneValue</span><span class="hljs-params">(x <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">if</span> err, ok := x.(<span class="hljs-type">error</span>); ok &#123;<br>        <span class="hljs-keyword">return</span> err.Error()<br>    &#125;<br>    <span class="hljs-keyword">if</span> str, ok := x.(Stringer); ok &#123;<br>        <span class="hljs-keyword">return</span> str.String()<br>    &#125;<br>    <span class="hljs-comment">// ...all other types...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>x</code>满足上面2个接口之一，那么满足接口决定值的格式化方式。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.11. 基于类型断言区别错误类型</title>
      <link href="/posts/179a7331746a/"/>
      <url>/posts/179a7331746a/</url>
      
        <content type="html"><![CDATA[<p>os包中文件操作返回的错误集合。<br><code>I/O</code>可以因为任何数量的原因失败，但是有三种经常的错误必须进行不同的处理：</p><ul><li>文件已经存在（对于创建操作）  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">os.IsExist(err <span class="hljs-type">error</span>) <span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure></li><li>找不到文件（对于读取操作）  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">os.IsNotExist(err <span class="hljs-type">error</span>) <span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure></li><li>权限拒绝  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">os.IsPermission(err <span class="hljs-type">error</span>) <span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure></li></ul><p>可能会检测错误信息中是否包含特定的字符串的方式去实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsNotExist</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> not robust!</span><br>    <span class="hljs-keyword">return</span> strings.Contains(err.Error(), <span class="hljs-string">&quot;file does not exist&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这种方案并不健壮，处理<code>I/O</code>错误的逻辑可能一个和另一个平台非常的不同，并且对相同的失败可能报出各种不同的错误信息。</p><p>可以使用专门的类型来描述结构化的错误，如<code>os</code>包中的<code>PathError</code>类型来描述文件路径操作中涉及到的失败，如<code>Open</code>和<code>Delete</code>方法。<br>还有一个叫<code>LinkError</code>类型描述涉及到两个文件路径的操作，如<code>Symlink</code>和<code>Rename</code>方法。<br>下面是<code>PathError</code>的源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PathError <span class="hljs-keyword">struct</span> &#123;<br>Op   <span class="hljs-type">string</span><br>Path <span class="hljs-type">string</span><br>Err  <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *PathError)</span></span> Error() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> e.Op + <span class="hljs-string">&quot; &quot;</span> + e.Path + <span class="hljs-string">&quot;: &quot;</span> + e.Err.Error() &#125;<br></code></pre></td></tr></table></figure><p>虽然<code>PathError</code>的<code>Error</code>方法简单连接字段拼接成错误信息。<br>但是<code>PathError</code>的结构保护了内部的组件，也使得调用方需要使用类型断言来检测错误的具体类型来以便区分<code>error</code>。而且类型比字符串能提供更多细节。</p><p>下面是关于上面三个函数的工作流程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">_, err := os.Open(<span class="hljs-string">&quot;/no/such/file&quot;</span>)<br>fmt.Println(err)         <span class="hljs-comment">// open /no/such/file: no such file or directory</span><br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, err) <span class="hljs-comment">// &amp;fs.PathError&#123;Op:&quot;open&quot;, Path:&quot;/no/such/file&quot;, Err:0x2&#125;</span><br></code></pre></td></tr></table></figure><p>下面展示的<code>IsNotExist</code>，它会报出是否一个错误和<code>syscall.ENOENT</code>(§7.8)或者和有名的错误<code>os.ErrNotExist</code>相等(可以在§5.4.2中找到io.EOF）；或者是一个<code>*PathError</code>，它内部的错误是<code>syscall.ENOENT</code>和<code>os.ErrNotExist</code>其中之一。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsNotExist</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> underlyingErrorIs(err, ErrNotExist)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ErrNotExist</code>&#x3D;&gt;<code>os.ErrNotExist</code>&#x3D;&gt;<code>fs.ErrNotExist</code>&#x3D;&gt;<code>oserror.ErrNotExist</code>&#x3D;&gt;<code> errors.New(&quot;file does not exist&quot;)</code></p><p>方法<code>underlyingErrorIs</code>有对<code>syscall.ENOENT</code>进行相等判断。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">underlyingErrorIs</span><span class="hljs-params">(err, target <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// Note that this function is not errors.Is:</span><br><span class="hljs-comment">// underlyingError only unwraps the specific error-wrapping types</span><br><span class="hljs-comment">// that it historically did, not all errors implementing Unwrap().</span><br>err = underlyingError(err)<br><span class="hljs-keyword">if</span> err == target &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// To preserve prior behavior, only examine syscall errors.</span><br>e, ok := err.(syscallErrorType)<br><span class="hljs-keyword">return</span> ok &amp;&amp; e.Is(target)<br>&#125;<br></code></pre></td></tr></table></figure><p>方法<code>underlyingError</code>对<code>PathError</code>进行相等判断。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">underlyingError</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">switch</span> err := err.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *PathError:<br><span class="hljs-keyword">return</span> err.Err<br><span class="hljs-keyword">case</span> *LinkError:<br><span class="hljs-keyword">return</span> err.Err<br><span class="hljs-keyword">case</span> *SyscallError:<br><span class="hljs-keyword">return</span> err.Err<br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br></code></pre></td></tr></table></figure><p>应用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">_, err := os.Open(<span class="hljs-string">&quot;/no/such/file&quot;</span>)<br>fmt.Println(os.IsNotExist(err)) <span class="hljs-comment">// &quot;true”</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.10. 类型断言</title>
      <link href="/posts/fcef06327bd8/"/>
      <url>/posts/fcef06327bd8/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>类型断言是作用在接口值上的。<br>断言类型语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x.(T)<br></code></pre></td></tr></table></figure><p><code>x</code>表示接口类型；<code>T</code>表示类型。<br>一个类型断言检查它操作对象的动态类型是否和断言的类型匹配。</p><h1 id="具体类型"><a href="#具体类型" class="headerlink" title="具体类型"></a>具体类型</h1><p>如果断言的类型<code>T</code>是一个具体类型，然后类型断言检查<code>x</code>的动态类型是否和<code>T</code>相同。<br>如果成功了，类型断言的结果是<code>x</code>的动态值，当然它的类型是<code>T</code>。<br>如果检查失败，接下来这个操作会抛出panic。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w io.Writer<br>w = os.Stdout<br>f := w.(*os.File) <span class="hljs-comment">// success: f == os.Stdout</span><br>c := w.(*bytes.Buffer) <span class="hljs-comment">// panic: interface conversion: io.Writer is *os.File, not *bytes.Buffer</span><br>fmt.Println(f, c)<br></code></pre></td></tr></table></figure><h1 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h1><p>如果相反断言的类型<code>T</code>是一个接口类型，然后类型断言检查是否<code>x</code>的动态类型满足T。<br>如果这个检查成功了，动态值没有获取到；这个结果仍然是一个有相同类型和值部分的接口值，但是结果有类型<code>T</code>。<br>即，对一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大），但也被保护了接口值内部的动态类型和值的部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w io.Writer<br>w = os.Stdout<br>rw := w.(io.ReadWriter) <span class="hljs-comment">// success: *os.File has both Read and Write</span><br>w = <span class="hljs-built_in">new</span>(ByteCounter)<br>rw = w.(io.ReadWriter) <span class="hljs-comment">// panic: interface conversion: *main.ByteCounter is not io.ReadWriter: missing method Read</span><br>fmt.Println(rw, w)<br></code></pre></td></tr></table></figure><p>在上面的第一个类型断言后，w和rw都持有<code>os.Stdout</code>，并且还有一个动态类型<code>*os.File</code>。但是变量w是一个<code>io.Writer</code>类型只对公开出文件的<code>Write</code>方法，然而<code>rw</code>变量也只公开它的<code>Read</code>方法。</p><h1 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h1><p>如果断言操作的对象是一个nil接口值，那么不论被断言的类型是什么这个类型断言都会失败。我们几乎不需要对一个更少限制性的接口类型（更少的方法集合）做断言，因为它表现的就像赋值操作一样，除了对于nil接口值的情况。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">w = rw             <span class="hljs-comment">// io.ReadWriter is assignable to io.Writer</span><br>w = rw.(io.Writer) <span class="hljs-comment">// fails only if rw == nil</span><br></code></pre></td></tr></table></figure><h1 id="检测接口值"><a href="#检测接口值" class="headerlink" title="检测接口值"></a>检测接口值</h1><p>一个接口值的动态类型是不确定的，并且我们更愿意去检验它是否是一些特定的类型。<br>类型断言会返回2个返回值，类型断言成功后返回的变量和是否断言成功的布尔值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w io.Writer = os.Stdout<br>f, ok := w.(*os.File)      <span class="hljs-comment">// success: ok, f==os.Stdout</span><br>b, ok := w.(*bytes.Buffer) <span class="hljs-comment">// failure: !ok, b==nil</span><br></code></pre></td></tr></table></figure><p>如果断言操作失败，第一个结果等于被断言类型的零值，如该例子中就是<code>nil</code>的<code>*bytes.Buffer</code>类型。</p><p>简洁的写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> f, ok := w.(*os.File); ok &#123;<br><span class="hljs-comment">// use f</span><br>&#125;<br></code></pre></td></tr></table></figure><p>变量名重用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> w, ok := w.(*os.File); ok &#123;<br><span class="hljs-comment">// use w</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.9. 示例：表达式求值</title>
      <link href="/posts/d3aed5deb5f5/"/>
      <url>/posts/d3aed5deb5f5/</url>
      
        <content type="html"><![CDATA[<h1 id="表达式求值器"><a href="#表达式求值器" class="headerlink" title="表达式求值器"></a>表达式求值器</h1><p>在本节中，我们会构建一个简单算术表达式的求值器。<br>下面为一些表达式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">sqrt(A / pi)<br>pow(x, <span class="hljs-number">3</span>) + pow(y, <span class="hljs-number">3</span>)<br>(F - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span>”<br></code></pre></td></tr></table></figure><ul><li>使用一个接口Expr来表示Go语言中任意的表达式。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><code>Var</code>类型表示一个变量。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Var <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure></li><li><code>literal</code>类型表示一个浮点型常量。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> literal <span class="hljs-type">float64</span><br></code></pre></td></tr></table></figure></li><li><code>unary</code>和<code>binary</code>类型表示有一到两个运算对象的运算符表达式，这些操作数可以是任意的Expr类型。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A unary represents a unary operator expression, e.g., -x.</span><br><span class="hljs-keyword">type</span> unary <span class="hljs-keyword">struct</span> &#123;<br>op <span class="hljs-type">rune</span> <span class="hljs-comment">// one of &#x27;+&#x27;,&#x27;-&#x27;</span><br>x  Expr<br>&#125;<br><br><span class="hljs-comment">// A binary represents a binary operator expression, e.g., x+y.</span><br><span class="hljs-keyword">type</span> binary <span class="hljs-keyword">struct</span> &#123;<br>op   <span class="hljs-type">rune</span> <span class="hljs-comment">// one of &#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;</span><br>x, y Expr<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>call</code>类型表示对一个函数的调用。并且其字段<code>fn</code>只能是<code>pow</code>,<code>sin</code>和<code>sqrt</code>。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A call represents a function call expression, e.g., sin(x).</span><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>fn   <span class="hljs-type">string</span><br>args []Expr<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>为了计算表达式的值，还需要<code>environment</code>变量将变量的名字映射成对应的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">float64</span><br></code></pre></td></tr></table></figure><p>还要定义一个<code>Eval</code>方法，根据输入的<code>environment</code>返回表达式的值。<br>所以加入到<code>Expr</code>接口方法中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// Eval returns the value of this Expr in the environment env.</span><br>Eval(env Env) <span class="hljs-type">float64</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而且每个表达式都要实现该方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> env[v]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Eval(_ Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> u.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> +u.x.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> -u.x.Eval(env)<br>&#125;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported unary operator: %q&quot;</span>, u.op))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> b.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) + b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) - b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) * b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) / b.y.Eval(env)<br>&#125;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported binary operator: %q&quot;</span>, b.op))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> c.fn &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pow&quot;</span>:<br><span class="hljs-keyword">return</span> math.Pow(c.args[<span class="hljs-number">0</span>].Eval(env), c.args[<span class="hljs-number">1</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sin&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sin(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sqrt&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sqrt(c.args[<span class="hljs-number">0</span>].Eval(env))<br>&#125;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported function call: %s&quot;</span>, c.fn))<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以编写测试案例去验证我们的程序。<br>eval_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestEval</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span> &#123;<br>expr <span class="hljs-type">string</span><br>env  Env<br>want <span class="hljs-type">string</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;sqrt(A / pi)&quot;</span>, Env&#123;<span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-number">87616</span>, <span class="hljs-string">&quot;pi&quot;</span>: math.Pi&#125;, <span class="hljs-string">&quot;167&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;pow(x, 3) + pow(y, 3)&quot;</span>, Env&#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">1</span>&#125;, <span class="hljs-string">&quot;1729&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;pow(x, 3) + pow(y, 3)&quot;</span>, Env&#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">10</span>&#125;, <span class="hljs-string">&quot;1729&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;5 / 9 * (F - 32)&quot;</span>, Env&#123;<span class="hljs-string">&quot;F&quot;</span>: <span class="hljs-number">-40</span>&#125;, <span class="hljs-string">&quot;-40&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;5 / 9 * (F - 32)&quot;</span>, Env&#123;<span class="hljs-string">&quot;F&quot;</span>: <span class="hljs-number">32</span>&#125;, <span class="hljs-string">&quot;0&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;5 / 9 * (F - 32)&quot;</span>, Env&#123;<span class="hljs-string">&quot;F&quot;</span>: <span class="hljs-number">212</span>&#125;, <span class="hljs-string">&quot;100&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">var</span> prevExpr <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, test := <span class="hljs-keyword">range</span> tests &#123;<br><span class="hljs-keyword">if</span> test.expr != prevExpr &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\n%s\n&quot;</span>, test.expr)<br>prevExpr = test.expr<br>&#125;<br>expr, err := Parse(test.expr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>t.Error(err) <span class="hljs-comment">// parse error</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>got := fmt.Sprintf(<span class="hljs-string">&quot;%.6g&quot;</span>, expr.Eval(test.env))<br>fmt.Printf(<span class="hljs-string">&quot;\t%v =&gt; %s\n&quot;</span>, test.env, got)<br><span class="hljs-keyword">if</span> got != test.want &#123;<br>t.Errorf(<span class="hljs-string">&quot;%s.Eval() in %v = %q, want %q\n&quot;</span>, test.expr, test.env, got, test.want)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是将字符串格式的表达式转换成<code>Expr</code>类型。<br>parse.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;text/scanner&quot;</span><br>)<br><br><span class="hljs-comment">// This lexer is similar to the one described in Chapter 13.</span><br><span class="hljs-keyword">type</span> lexer <span class="hljs-keyword">struct</span> &#123;<br>scan  scanner.Scanner<br>token <span class="hljs-type">rune</span> <span class="hljs-comment">// current lookahead token</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> next()        &#123; lex.token = lex.scan.Scan() &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> text() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> lex.scan.TokenText() &#125;<br><br><span class="hljs-keyword">type</span> lexPanic <span class="hljs-type">string</span><br><br><span class="hljs-comment">// describe returns a string describing the current token, for use in errors.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> describe() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.EOF:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;end of file&quot;</span><br><span class="hljs-keyword">case</span> scanner.Ident:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;identifier %s&quot;</span>, lex.text())<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;number %s&quot;</span>, lex.text())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%q&quot;</span>, <span class="hljs-type">rune</span>(lex.token)) <span class="hljs-comment">// any other rune</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">precedence</span><span class="hljs-params">(op <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Parse parses the input string as an arithmetic expression.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> (_ Expr, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> x := <span class="hljs-built_in">recover</span>().(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br><span class="hljs-comment">// no panic</span><br><span class="hljs-keyword">case</span> lexPanic:<br>err = fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, x)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// unexpected panic: resume state of panic.</span><br><span class="hljs-built_in">panic</span>(x)<br>&#125;<br>&#125;()<br>lex := <span class="hljs-built_in">new</span>(lexer)<br>lex.scan.Init(strings.NewReader(input))<br>lex.scan.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanFloats<br>lex.next()<br>e := parseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != scanner.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br>&#125;<br><span class="hljs-keyword">return</span> e, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseExpr</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">return</span> parseBinary(lex, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-comment">// binary = unary(&#x27;+&#x27; binary)*</span><br><span class="hljs-comment">// parseBinary stops when it encounters an</span><br><span class="hljs-comment">// operator of lower precedence than precl.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseBinary</span><span class="hljs-params">(lex *lexer, precl <span class="hljs-type">int</span>)</span></span> Expr &#123;<br>lhs := parseUnary(lex)<br><span class="hljs-keyword">for</span> prec := precedence(lex.token); prec &gt;= precl; prec-- &#123;<br><span class="hljs-keyword">for</span> precedence(lex.token) == prec &#123;<br>op := lex.token<br>lex.next()<br>rhs := parseBinary(lex, prec+<span class="hljs-number">1</span>)<br>lhs = binary&#123;op, lhs, rhs&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br><br><span class="hljs-comment">// unary = &#x27;+&#x27; expr | primary</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseUnary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">if</span> lex.token == <span class="hljs-string">&#x27;+&#x27;</span> || lex.token == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>op := lex.token<br>lex.next()<br><span class="hljs-keyword">return</span> unary&#123;op, parseUnary(lex)&#125;<br>&#125;<br><span class="hljs-keyword">return</span> parsePrimary(lex)<br>&#125;<br><br><span class="hljs-comment">// primary = id</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//   | id &#x27;(&#x27; expr &#x27;,&#x27; ... &#x27;,&#x27; expr &#x27;)&#x27;</span><br><span class="hljs-comment">//   | num</span><br><span class="hljs-comment">//        | &#x27;(&#x27; expr &#x27;)&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parsePrimary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br>id := lex.text()<br>lex.next()<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> Var(id)<br>&#125;<br>lex.next()<br><span class="hljs-keyword">var</span> args []Expr<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>args = <span class="hljs-built_in">append</span>(args, parseExpr(lex))<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;,&#x27;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;,&#x27;</span><br>&#125;<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %s, want &#x27;)&#x27;&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> call&#123;id, args&#125;<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br>f, err := strconv.ParseFloat(lex.text(), <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(lexPanic(err.Error()))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume number</span><br><span class="hljs-keyword">return</span> literal(f)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br>e := parseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %s, want &#x27;)&#x27;&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> e<br>&#125;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br></code></pre></td></tr></table></figure><p>使用一下命令去测试， <code>-v</code>是输出<code>fmt.Printf</code>打印内容，默认是不输出的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go test -v ./ch/ch7/eval<br></code></pre></td></tr></table></figure><p>打印出一下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">=== RUN   TestEval<br><br>sqrt(A / pi)<br>        <span class="hljs-keyword">map</span>[A:<span class="hljs-number">87616</span> pi:<span class="hljs-number">3.141592653589793</span>] =&gt; <span class="hljs-number">167</span><br><br>pow(x, <span class="hljs-number">3</span>) + pow(y, <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">map</span>[x:<span class="hljs-number">12</span> y:<span class="hljs-number">1</span>] =&gt; <span class="hljs-number">1729</span><br>        <span class="hljs-keyword">map</span>[x:<span class="hljs-number">9</span> y:<span class="hljs-number">10</span>] =&gt; <span class="hljs-number">1729</span><br><br><span class="hljs-number">5</span> / <span class="hljs-number">9</span> * (F - <span class="hljs-number">32</span>)<br>        <span class="hljs-keyword">map</span>[F:<span class="hljs-number">-40</span>] =&gt; <span class="hljs-number">-40</span><br>        <span class="hljs-keyword">map</span>[F:<span class="hljs-number">32</span>] =&gt; <span class="hljs-number">0</span><br>        <span class="hljs-keyword">map</span>[F:<span class="hljs-number">212</span>] =&gt; <span class="hljs-number">100</span><br>--- PASS: TestEval (<span class="hljs-number">0.00</span>s)<br>PASS<br>ok      <span class="hljs-keyword">go</span>-learn-gopl/ch/ch7/eval       <span class="hljs-number">0.128</span>s<br></code></pre></td></tr></table></figure><p>在解释型语言中，为了静态错误检查语法是非常常见的；<br>静态错误就是不用运行程序就可以检测出来的错误。<br>通过将静态检查和动态的部分分开，我们可以快速的检查错误并且对于多次检查只执行一次而不是每次表达式计算的时候都进行检查。<br>往<code>Expr</code>接口中增加另一个方法。Check方法在一个表达式语义树检查出静态错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// Eval returns the value of this Expr in the environment env.</span><br>Eval(env Env) <span class="hljs-type">float64</span><br><span class="hljs-comment">// Check reports errors in this Expr and adds its Vars to the set.</span><br>Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Var</code>类型是不可能出现问题的，<code>literal</code>类型也是如此。<br><code>unary</code>和<code>binary</code>类型要考虑符号是否正确，然后再递归检查运算单元。<br><code>call</code>要考虑函数是否已知并且参数数量是否无误，然后再递归检查每一个参数的有效性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>vars[v] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, u.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unexpected unary op %q&quot;</span>, u.op)<br>&#125;<br><span class="hljs-keyword">return</span> u.x.Check(vars)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-*/&quot;</span>, b.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unexpected unary op %q&quot;</span>, b.op)<br>&#125;<br><br><span class="hljs-keyword">if</span> err := b.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> b.y.Check(vars)<br>&#125;<br><br><span class="hljs-keyword">var</span> numParams = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;pow&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;sin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;sqrt&quot;</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>arity, ok := numParams[c.fn]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unknown function %q&quot;</span>, c.fn)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(c.args) != arity &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;car to %s has %d args, want %d&quot;</span>, c.fn, <span class="hljs-built_in">len</span>(c.args), arity)<br>&#125;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br><span class="hljs-keyword">if</span> err := arg.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>写一个测试案例去测试<code>Check</code>是否有效。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestError</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, test := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">struct</span>&#123; expr, wantErr <span class="hljs-type">string</span> &#125;&#123;<br>&#123;<span class="hljs-string">&quot;x % 2&quot;</span>, <span class="hljs-string">&quot;unexpected &#x27;%&#x27;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;math.Pi&quot;</span>, <span class="hljs-string">&quot;unexpected &#x27;.&#x27;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;!true&quot;</span>, <span class="hljs-string">&quot;unexpected &#x27;!&#x27;&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;log(10)&quot;</span>, <span class="hljs-string">`unknown function &quot;log&quot;`</span>&#125;,<br>&#123;<span class="hljs-string">&quot;sqrt(i, 2)&quot;</span>, <span class="hljs-string">&quot;call to sqrt has 2 args, want 1&quot;</span>&#125;,<br>&#125; &#123;<br>expr, err := Parse(test.expr)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>vars := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>)<br>err = expr.Check(vars)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>t.Errorf(<span class="hljs-string">&quot;unexpected success: %s&quot;</span>, test.expr)<br><span class="hljs-keyword">continue</span><br>&#125;<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%-20s%v\n&quot;</span>, test.expr, err)<br><span class="hljs-keyword">if</span> err.Error() != test.wantErr &#123;<br>t.Errorf(<span class="hljs-string">&quot;got error %s, want %s&quot;</span>, err, test.wantErr)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//!+output</span><br><span class="hljs-comment">=== RUN   TestError</span><br><span class="hljs-comment">x % 2               unexpected &#x27;%&#x27;</span><br><span class="hljs-comment">math.Pi             unexpected &#x27;.&#x27;</span><br><span class="hljs-comment">!true               unexpected &#x27;!&#x27;</span><br><span class="hljs-comment">log(10)             unknown function &quot;log&quot;</span><br><span class="hljs-comment">sqrt(i, 2)          car to sqrt has 2 args, want 1</span><br><span class="hljs-comment">    eval_test.go:82: got error car to sqrt has 2 args, want 1, want call to sqrt has 2 args, want 1</span><br><span class="hljs-comment">--- FAIL: TestError (0.00s)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">FAIL</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="surface"><a href="#surface" class="headerlink" title="surface"></a>surface</h1><p><code>ParseAndCheck</code>函数将转换和检查结合在一起，下面是例子<code>surface</code>中的<code>ParseAndCheck</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseAndCheck</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> (eval.Expr, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;empty expression&quot;</span>)<br>&#125;<br>expr, err := eval.Parse(s)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>vars := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[eval.Var]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">if</span> err := expr.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> vars &#123;<br><span class="hljs-keyword">if</span> v != <span class="hljs-string">&quot;x&quot;</span> &amp;&amp; v != <span class="hljs-string">&quot;y&quot;</span> &amp;&amp; v != <span class="hljs-string">&quot;r&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;undefined variable: %s&quot;</span>, v)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> expr, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>surface</code>改成web应用，那么需要一个接口函数<code>plot</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plot</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>req.ParseForm()<br>expr, err := parseAndCheck(req.Form.Get(<span class="hljs-string">&quot;expr&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;bad expr:&quot;</span>+err.Error(), http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br>w.Header().Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;image/svg+xml&quot;</span>)<br>surface(w, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>r := math.Hypot(x, y)<br><span class="hljs-keyword">return</span> expr.Eval(eval.Env&#123;<span class="hljs-string">&quot;x&quot;</span>: x, <span class="hljs-string">&quot;y&quot;</span>: y, <span class="hljs-string">&quot;r&quot;</span>: r&#125;)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>plot</code>函数中，转换和检查HTTP请求中的指定表达式，并且创建一个符合<code>surface()</code>函数中的匿名函数。<br>全部代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch7/eval&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>width, height = <span class="hljs-number">600</span>, <span class="hljs-number">320</span>            <span class="hljs-comment">// canvas size in pixels</span><br>cells         = <span class="hljs-number">100</span>                 <span class="hljs-comment">// number of grid cells</span><br>xyrange       = <span class="hljs-number">30.0</span>                <span class="hljs-comment">// x, y axis range (-xyrange..+xyrange)</span><br>xyscale       = width / <span class="hljs-number">2</span> / xyrange <span class="hljs-comment">// pixels per x or y unit</span><br>zscale        = height * <span class="hljs-number">0.4</span>        <span class="hljs-comment">// pixels per z unit</span><br>)<br><br><span class="hljs-keyword">var</span> sin30, cos30 = <span class="hljs-number">0.5</span>, math.Sqrt(<span class="hljs-number">3.0</span> / <span class="hljs-number">4.0</span>) <span class="hljs-comment">// sin(30°)， cos(30°)</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">corner</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span>, i, j <span class="hljs-type">int</span>) (<span class="hljs-type">float64</span>, <span class="hljs-type">float64</span>) &#123;<br><span class="hljs-comment">// find point (x,y) at corner of cell (i,j).</span><br>x := xyrange * (<span class="hljs-type">float64</span>(i)/cells - <span class="hljs-number">0.5</span>)<br>y := xyrange * (<span class="hljs-type">float64</span>(j)/cells - <span class="hljs-number">0.5</span>)<br><br>z := f(x, y) <span class="hljs-comment">// compute surface height z</span><br><br>sx := width/<span class="hljs-number">2</span> + (x-y)*cos30*xyrange<br>sy := height/<span class="hljs-number">2</span> + (x+y)*sin30*xyscale - z*zscale<br><span class="hljs-keyword">return</span> sx, sy<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">surface</span><span class="hljs-params">(w io.Writer, f <span class="hljs-keyword">func</span>(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span>) &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; &quot;</span>+<br><span class="hljs-string">&quot;style=&#x27;stroke: grey; fill: white; stroke-width: 0.7&#x27; &quot;</span>+<br><span class="hljs-string">&quot;width=&#x27;%d&#x27; height=&#x27;%d&#x27;&gt;&quot;</span>, width, height)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; cells; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; cells; j++ &#123;<br>ax, ay := corner(f, i+<span class="hljs-number">1</span>, j)<br>bx, by := corner(f, i, j)<br>cx, cy := corner(f, i, j+<span class="hljs-number">1</span>)<br>dx, dy := corner(f, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;&lt;polygon points=&#x27;%g,%g %g,%g %g,%g %g,%g&#x27;/&gt;\n&quot;</span>,<br>ax, ay, bx, by, cx, cy, dx, dy)<br>&#125;<br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;&lt;/svg&gt;&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseAndCheck</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> (eval.Expr, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;empty expression&quot;</span>)<br>&#125;<br>expr, err := eval.Parse(s)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>vars := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[eval.Var]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">if</span> err := expr.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> vars &#123;<br><span class="hljs-keyword">if</span> v != <span class="hljs-string">&quot;x&quot;</span> &amp;&amp; v != <span class="hljs-string">&quot;y&quot;</span> &amp;&amp; v != <span class="hljs-string">&quot;r&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;undefined variable: %s&quot;</span>, v)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> expr, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plot</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>req.ParseForm()<br>expr, err := parseAndCheck(req.Form.Get(<span class="hljs-string">&quot;expr&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;bad expr:&quot;</span>+err.Error(), http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br>w.Header().Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;image/svg+xml&quot;</span>)<br>surface(w, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>r := math.Hypot(x, y)<br><span class="hljs-keyword">return</span> expr.Eval(eval.Env&#123;<span class="hljs-string">&quot;x&quot;</span>: x, <span class="hljs-string">&quot;y&quot;</span>: y, <span class="hljs-string">&quot;r&quot;</span>: r&#125;)<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/plot&quot;</span>, plot)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是几个表达式形成svg的图：</p><p><img src="/posts/d3aed5deb5f5/1692541290123.png" alt="sin(-x)*pow(1.5, -r)"></p><p><img src="/posts/d3aed5deb5f5/1692541447313.png" alt="pow(2,sin(y))*pow(2,sin(x))/12"></p><p><img src="/posts/d3aed5deb5f5/1692541516092.png" alt="sin(x*y/10)/10"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.13：</strong> 为Expr增加一个String方法来打印美观的语法树。当再一次解析的时候，检查它的结果是否生成相同的语法树。<br>解：<br>ast.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span> &#123;<br>Eval(env Env) <span class="hljs-type">float64</span><br>Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span><br>String() <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Var <span class="hljs-type">string</span><br><br><span class="hljs-keyword">type</span> literal <span class="hljs-type">float64</span><br><br><span class="hljs-keyword">type</span> unary <span class="hljs-keyword">struct</span> &#123;<br>op <span class="hljs-type">rune</span> <span class="hljs-comment">// one of +, -</span><br>x  Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> binary <span class="hljs-keyword">struct</span> &#123;<br>op   <span class="hljs-type">rune</span> <span class="hljs-comment">// one of &#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;</span><br>x, y Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>fn   <span class="hljs-type">string</span> <span class="hljs-comment">// one of sin,pow,sqrt</span><br>args []Expr<br>&#125;<br></code></pre></td></tr></table></figure><p>eval.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> env[v]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> u.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> +u.x.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> -u.x.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported unary operator: %q&quot;</span>, u.op))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> b.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) + b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) - b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) * b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) / b.y.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported binary operator: %q&quot;</span>, b.op))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> c.fn &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pow&quot;</span>:<br><span class="hljs-keyword">return</span> math.Pow(c.args[<span class="hljs-number">0</span>].Eval(env), c.args[<span class="hljs-number">1</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sin&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sin(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sqrt&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sqrt(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported function call: %q&quot;</span>, c.fn))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>check.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, u.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupport unary operator: %q&quot;</span>, u.op)<br>&#125;<br><span class="hljs-keyword">return</span> u.x.Check(vars)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-*/&quot;</span>, b.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupport binary operator: %q&quot;</span>, b.op)<br>&#125;<br><span class="hljs-keyword">if</span> err := b.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> b.y.Check(vars)<br>&#125;<br><br><span class="hljs-keyword">var</span> numParams = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;pow&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;sin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;sqrt&quot;</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>arity, ok := numParams[c.fn]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unknown function %q &quot;</span>, c.fn)<br>&#125;<br><span class="hljs-keyword">if</span> arity != <span class="hljs-built_in">len</span>(c.args) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;call to %s has %d args, want %d&quot;</span>, c.fn, <span class="hljs-built_in">len</span>(c.args), arity)<br>&#125;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br><span class="hljs-keyword">if</span> err := arg.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>string.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(v)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g&quot;</span>, l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%c%s&quot;</span>, u.op, u.x)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s)&quot;</span>, b.x, b.op, b.y)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> args []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br>args = <span class="hljs-built_in">append</span>(args, arg.String())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s(%s)&quot;</span>, c.fn, strings.Join(args, <span class="hljs-string">&quot;, &quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>parse.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;text/scanner&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> lexer <span class="hljs-keyword">struct</span> &#123;<br>scan  scanner.Scanner<br>token <span class="hljs-type">rune</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> next()        &#123; lex.token = lex.scan.Scan() &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> text() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> lex.scan.TokenText() &#125;<br><br><span class="hljs-keyword">type</span> lexPanic <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> describe() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.EOF:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;end of file&quot;</span>)<br><span class="hljs-keyword">case</span> scanner.Ident:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;identifier %s&quot;</span>, lex.text())<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;number %s&quot;</span>, lex.text())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%q&quot;</span>, lex.text())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">precedence</span><span class="hljs-params">(op <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> (_ Expr, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> x := <span class="hljs-built_in">recover</span>().(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br><span class="hljs-keyword">case</span> lexPanic:<br>err = fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, x)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(x)<br>&#125;<br>&#125;()<br>lex := <span class="hljs-built_in">new</span>(lexer)<br>lex.scan.Init(strings.NewReader(input))<br>lex.scan.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanFloats<br>lex.next()<br>e := parseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != scanner.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br>&#125;<br><span class="hljs-keyword">return</span> e, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseExpr</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">return</span> parseBinary(lex, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseBinary</span><span class="hljs-params">(lex *lexer, precl <span class="hljs-type">int</span>)</span></span> Expr &#123;<br>lhs := parseUnary(lex)<br><span class="hljs-keyword">for</span> prec := precedence(lex.token); prec &gt;= precl; prec-- &#123;<br><span class="hljs-keyword">for</span> precedence(lex.token) == prec &#123;<br>op := lex.token<br>lex.next()<br>rhs := parseBinary(lex, prec+<span class="hljs-number">1</span>)<br>lhs = binary&#123;op, lhs, rhs&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseUnary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">if</span> lex.token == <span class="hljs-string">&#x27;+&#x27;</span> || lex.token == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>op := lex.token<br>lex.next()<br><span class="hljs-keyword">return</span> unary&#123;<br>op: op,<br>x:  parseUnary(lex),<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> parsePrimary(lex)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parsePrimary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br>id := lex.text()<br>lex.next()<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> Var(id)<br>&#125;<br>lex.next()<br><span class="hljs-keyword">var</span> args []Expr<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>args = <span class="hljs-built_in">append</span>(args, parseExpr(lex))<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;,&#x27;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>lex.next()<br>&#125;<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %s, want &#x27;)&#x27;&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>&#125;<br>lex.next()<br><span class="hljs-keyword">return</span> call&#123;id, args&#125;<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br>f, err := strconv.ParseFloat(lex.text(), <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(lexPanic(err.Error()))<br>&#125;<br>lex.next()<br><span class="hljs-keyword">return</span> literal(f)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>lex.next()<br>e := parseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %s, want &#x27;)&#x27;&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>lex.next()<br><span class="hljs-keyword">return</span> e<br>&#125;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br></code></pre></td></tr></table></figure><p>string_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> tests = []<span class="hljs-keyword">struct</span> &#123;<br>expr <span class="hljs-type">string</span><br>want <span class="hljs-type">string</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;-1 + -x&quot;</span>, <span class="hljs-string">&quot;(-1 + -x)&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;-1 - x&quot;</span>, <span class="hljs-string">&quot;(-1 - x)&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;sqrt(A / pi)&quot;</span>, <span class="hljs-string">&quot;sqrt((A / pi))&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;pow(x, 3) + pow(y, 3)&quot;</span>, <span class="hljs-string">&quot;(pow(x, 3) + pow(y, 3))&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;5 / 9 * (F - 32)&quot;</span>, <span class="hljs-string">&quot;((5 / 9) * (F - 32))&quot;</span>&#125;,<br>&#125;<br><span class="hljs-keyword">for</span> i, tt := <span class="hljs-keyword">range</span> tests &#123;<br>expr, err := Parse(tt.expr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>t.Error(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>got := expr.String()<br><span class="hljs-keyword">if</span> got != tt.want &#123;<br>t.Logf(<span class="hljs-string">&quot;%d. got %s, want %s&quot;</span>, i, got, tt.want)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.14：</strong> 定义一个新的满足Expr接口的具体类型并且提供一个新的操作例如对它运算单元中的最小值的计算。因为Parse函数不会创建这个新类型的实例，为了使用它你可能需要直接构造一个语法树（或者继承parser接口）。<br>解：<br>ast.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span> &#123;<br>Eval(env Env) <span class="hljs-type">float64</span><br>Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span><br>String() <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Var <span class="hljs-type">string</span><br><br><span class="hljs-keyword">type</span> literal <span class="hljs-type">float64</span><br><br><span class="hljs-keyword">type</span> unary <span class="hljs-keyword">struct</span> &#123;<br>op <span class="hljs-type">rune</span> <span class="hljs-comment">// one of &#x27;+&#x27;,&#x27;-&#x27;</span><br>x  Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> binary <span class="hljs-keyword">struct</span> &#123;<br>op   <span class="hljs-type">rune</span> <span class="hljs-comment">// one of &#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;</span><br>x, y Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>fn   <span class="hljs-type">string</span> <span class="hljs-comment">// one of sqrt, pow, sin</span><br>args []Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> ternary <span class="hljs-keyword">struct</span> &#123;<br>op1, op2 <span class="hljs-type">rune</span> <span class="hljs-comment">// one of &#x27;?&#x27;,&#x27;:&#x27;</span><br>x, y, z  Expr<br>&#125;<br></code></pre></td></tr></table></figure><p>eval.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> env[v]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> u.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> +u.x.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> -u.x.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported unary operator: %q&quot;</span>, u.op))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> b.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) + b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) - b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) * b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) / b.y.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported binary operator: %q&quot;</span>, b.op))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> c.fn &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pow&quot;</span>:<br><span class="hljs-keyword">return</span> math.Pow(c.args[<span class="hljs-number">0</span>].Eval(env), c.args[<span class="hljs-number">1</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sin&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sin(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sqrt&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sqrt(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unknown function: %q&quot;</span>, c.fn))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">if</span> t.op1 == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; t.op2 == <span class="hljs-string">&#x27;:&#x27;</span> &#123;<br><span class="hljs-keyword">if</span> t.x.Eval(env) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> t.y.Eval(env)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> t.z.Eval(env)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unsupported ternary operator: %q, %q&quot;</span>, t.op1, t.op2))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>check.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, u.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupported unary operator: %q&quot;</span>, u.op)<br>&#125;<br><span class="hljs-keyword">return</span> u.x.Check(vars)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-*/&quot;</span>, b.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupported binary operator: %q&quot;</span>, b.op)<br>&#125;<br><span class="hljs-keyword">if</span> err := b.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> b.y.Check(vars)<br>&#125;<br><br><span class="hljs-keyword">var</span> numParams = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;pow&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;sin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;sqrt&quot;</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>arity, ok := numParams[c.fn]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unknown function: %q&quot;</span>, c.fn)<br>&#125;<br><span class="hljs-keyword">if</span> arity != <span class="hljs-built_in">len</span>(c.args) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;call to %s has %d args, want %d&quot;</span>, c.fn, <span class="hljs-built_in">len</span>(c.args), arity)<br>&#125;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br><span class="hljs-keyword">if</span> err := arg.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;?:&quot;</span>, t.op1) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unexpected ternary operator: %q&quot;</span>, t.op1)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> strings.ContainsRune(<span class="hljs-string">&quot;?:&quot;</span>, t.op2) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unexpected ternary operator: %q&quot;</span>, t.op2)<br>&#125;<br><span class="hljs-keyword">if</span> err := t.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> err := t.y.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> t.z.Check(vars)<br>&#125;<br></code></pre></td></tr></table></figure><p>string.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(v)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g&quot;</span>, l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%c%s&quot;</span>, u.op, u.x.String())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s)&quot;</span>, b.x.String(), b.op, b.y.String())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> args []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br>args = <span class="hljs-built_in">append</span>(args, arg.String())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s(%s)&quot;</span>, c.fn, strings.Join(args, <span class="hljs-string">&quot;,&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s %c %s)&quot;</span>, t.x, t.op1, t.y, t.op2, t.z)<br>&#125;<br></code></pre></td></tr></table></figure><p>parse.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;text/scanner&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> lexer <span class="hljs-keyword">struct</span> &#123;<br>scan  scanner.Scanner<br>token <span class="hljs-type">rune</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> next()        &#123; lex.token = lex.scan.Scan() &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> text() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> lex.scan.TokenText() &#125;<br><br><span class="hljs-keyword">type</span> lexPanic <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> describe() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.EOF:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;end of file&quot;</span>)<br><span class="hljs-keyword">case</span> scanner.Ident:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;identifier %s&quot;</span>, lex.text())<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;number %s&quot;</span>, lex.text())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%q&quot;</span>, <span class="hljs-type">rune</span>(lex.token))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">precedence</span><span class="hljs-params">(op <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> (_ Expr, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> x := <span class="hljs-built_in">recover</span>().(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br><span class="hljs-keyword">case</span> lexPanic:<br>err = fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, x)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(x)<br>&#125;<br>&#125;()<br>lex := <span class="hljs-built_in">new</span>(lexer)<br>lex.scan.Init(strings.NewReader(input))<br>lex.scan.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanFloats<br>lex.next() <span class="hljs-comment">// initial lookahead</span><br>e := parseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != scanner.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br>&#125;<br><span class="hljs-keyword">return</span> e, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseExpr</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">return</span> parseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseBinaryOrTernary</span><span class="hljs-params">(lex *lexer, precl <span class="hljs-type">int</span>)</span></span> Expr &#123;<br>lhs := parseUnary(lex)<br><span class="hljs-keyword">for</span> prec := precedence(lex.token); prec &gt;= precl; prec-- &#123;<br><span class="hljs-keyword">for</span> precedence(lex.token) == prec &#123;<br>op := lex.token<br><span class="hljs-keyword">if</span> strings.ContainsRune(<span class="hljs-string">&quot;+-*/&quot;</span>, op) &#123;<br>lex.next()<br>rhs := parseBinaryOrTernary(lex, prec+<span class="hljs-number">1</span>)<br>lhs = binary&#123;op, lhs, rhs&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;?&#x27;</span> &#123;<br>lex.next() <span class="hljs-comment">// consume &#x27;?&#x27;</span><br>y := parseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>op2 := lex.token<br>lex.next() <span class="hljs-comment">// consume &#x27;:&#x27;</span><br>z := parseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>lhs = ternary&#123;op, op2, lhs, y, z&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;:&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseUnary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">if</span> lex.token == <span class="hljs-string">&#x27;+&#x27;</span> || lex.token == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>op := lex.token<br>lex.next()<br><span class="hljs-keyword">return</span> unary&#123;op, parseUnary(lex)&#125;<br>&#125;<br><span class="hljs-keyword">return</span> parsePrimary(lex)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parsePrimary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br>id := lex.text()<br>lex.next() <span class="hljs-comment">// consume Ident</span><br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> Var(id)<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br><span class="hljs-keyword">var</span> args []Expr<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>args = <span class="hljs-built_in">append</span>(args, parseExpr(lex))<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;,&#x27;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;,&#x27;</span><br>&#125;<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %q, want &#x27;)&#x27; &quot;</span>, lex.token)<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> call&#123;id, args&#125;<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br>f, err := strconv.ParseFloat(lex.text(), <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(lexPanic(err.Error()))<br>&#125;<br>lex.next()<br><span class="hljs-keyword">return</span> literal(f)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br>e := parseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %s, want &#x27;)&#x27; &quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> e<br>&#125;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br></code></pre></td></tr></table></figure><p>print.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Format</span><span class="hljs-params">(expr Expr)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>write(&amp;buf, expr)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">write</span><span class="hljs-params">(buf *bytes.Buffer, expr Expr)</span></span> &#123;<br><span class="hljs-keyword">switch</span> e := expr.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> Var:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%s&quot;</span>, e)<br><span class="hljs-keyword">case</span> literal:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%g&quot;</span>, e)<br><span class="hljs-keyword">case</span> unary:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;(%c&quot;</span>, e.op)<br>write(buf, e.x)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> binary:<br>buf.WriteByte(<span class="hljs-string">&#x27;(&#x27;</span>)<br>write(buf, e.x)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op)<br>write(buf, e.y)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> call:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%s(&quot;</span>, e.fn)<br><span class="hljs-keyword">for</span> i, arg := <span class="hljs-keyword">range</span> e.args &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>buf.WriteString(<span class="hljs-string">&quot;, &quot;</span>)<br>&#125;<br>write(buf, arg)<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> ternary:<br>buf.WriteByte(<span class="hljs-string">&#x27;(&#x27;</span>)<br>write(buf, e.x)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op1)<br>write(buf, e.y)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op2)<br>write(buf, e.z)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.15：</strong> 编写一个从标准输入中读取一个单一表达式的程序，用户及时地提供对于任意变量的值，然后在结果环境变量中计算表达式的值。优雅的处理所有遇到的错误。<br>解：<br>ast.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span> &#123;<br>Eval(env Env) <span class="hljs-type">float64</span><br>Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span><br>String() <span class="hljs-type">string</span><br>Vars() []Var<br>&#125;<br><br><span class="hljs-keyword">type</span> Var <span class="hljs-type">string</span><br><br><span class="hljs-keyword">type</span> literal <span class="hljs-type">float64</span><br><br><span class="hljs-keyword">type</span> unary <span class="hljs-keyword">struct</span> &#123;<br>op <span class="hljs-type">rune</span><br>x  Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> binary <span class="hljs-keyword">struct</span> &#123;<br>op   <span class="hljs-type">rune</span><br>x, y Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>fn   <span class="hljs-type">string</span><br>args []Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> ternary <span class="hljs-keyword">struct</span> &#123;<br>op1, op2 <span class="hljs-type">rune</span><br>x, y, z  Expr<br>&#125;<br></code></pre></td></tr></table></figure><p>eval.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> env[v]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> u.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> +u.x.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> -u.x.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected unary operator: %q&quot;</span>, u.x))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> b.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) + b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) - b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) * b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) / b.y.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected binary operator: %q&quot;</span>, b.op))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> c.fn &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pow&quot;</span>:<br><span class="hljs-keyword">return</span> math.Pow(c.args[<span class="hljs-number">0</span>].Eval(env), c.args[<span class="hljs-number">1</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sin&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sin(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sqrt&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sqrt(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unknown function: %q&quot;</span>, c.fn))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">if</span> t.op1 == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; t.op2 == <span class="hljs-string">&#x27;:&#x27;</span> &#123;<br><span class="hljs-keyword">if</span> t.x.Eval(env) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> t.y.Eval(env)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> t.z.Eval(env)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected ternary operator: %q and %q&quot;</span>, t.op1, t.op2))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>check.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, u.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupport unary operator: %q&quot;</span>, u.op)<br>&#125;<br><span class="hljs-keyword">return</span> u.x.Check(vars)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-*/&quot;</span>, b.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupport binary operator: %q&quot;</span>, b.op)<br>&#125;<br><span class="hljs-keyword">if</span> err := b.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> b.y.Check(vars)<br>&#125;<br><br><span class="hljs-keyword">var</span> numParams = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;pow&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;sin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;sqrt&quot;</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>arity, ok := numParams[c.fn]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unknown function: %q&quot;</span>, c.fn)<br>&#125;<br><span class="hljs-keyword">if</span> arity != <span class="hljs-built_in">len</span>(c.args) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;call to %s has %d args, want %d&quot;</span>, c.fn, <span class="hljs-built_in">len</span>(c.args), arity)<br>&#125;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br><span class="hljs-keyword">if</span> err := arg.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> t.op1 == <span class="hljs-string">&#x27;?&#x27;</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected ternary operator: %q&quot;</span>, t.op1))<br>&#125;<br><span class="hljs-keyword">if</span> t.op2 == <span class="hljs-string">&#x27;:&#x27;</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected ternary operator: %q&quot;</span>, t.op2))<br>&#125;<br><span class="hljs-keyword">if</span> err := t.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> err := t.y.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> t.z.Check(vars)<br>&#125;<br></code></pre></td></tr></table></figure><p>string.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(v)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g&quot;</span>, l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%c%s&quot;</span>, u.op, u.x.String())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s)&quot;</span>, b.x.String(), b.op, b.y.String())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> args []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br>args = <span class="hljs-built_in">append</span>(args, arg.String())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s(%s)&quot;</span>, c.fn, strings.Join(args, <span class="hljs-string">&quot;,&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s %c %s)&quot;</span>, t.x.String(), t.op1, t.y.String(), t.op2, t.z.String())<br>&#125;<br></code></pre></td></tr></table></figure><p>vars.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> []Var&#123;v&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> []Var&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> u.x.Vars()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(b.x.Vars(), b.y.Vars()...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">var</span> vars []Var<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br>vars = <span class="hljs-built_in">append</span>(vars, arg.Vars()...)<br>&#125;<br><span class="hljs-keyword">return</span> vars<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Vars() []Var &#123;<br>vars := <span class="hljs-built_in">append</span>(t.x.Vars(), t.y.Vars()...)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(vars, t.z.Vars()...)<br>&#125;<br></code></pre></td></tr></table></figure><p>parse.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;text/scanner&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> lexer <span class="hljs-keyword">struct</span> &#123;<br>scan  scanner.Scanner<br>token <span class="hljs-type">rune</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> next()        &#123; lex.token = lex.scan.Scan() &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> text() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> lex.scan.TokenText() &#125;<br><br><span class="hljs-keyword">type</span> lexPanic <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> describe() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;identifier %q&quot;</span>, lex.token)<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;numbber %q&quot;</span>, lex.token)<br><span class="hljs-keyword">case</span> scanner.EOF:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;end of file&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%q&quot;</span>, <span class="hljs-type">rune</span>(lex.token))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">precedence</span><span class="hljs-params">(op <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(inputStr <span class="hljs-type">string</span>)</span></span> (_ Expr, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> x := <span class="hljs-built_in">recover</span>().(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br><span class="hljs-keyword">case</span> lexPanic:<br>err = fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, x)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(x)<br>&#125;<br>&#125;()<br>lex := <span class="hljs-built_in">new</span>(lexer)<br>lex.scan.Init(strings.NewReader(inputStr))<br>lex.scan.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanFloats<br>lex.next()<br>e := ParseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != scanner.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br>&#125;<br><span class="hljs-keyword">return</span> e, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseExpr</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">return</span> ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseBinaryOrTernary</span><span class="hljs-params">(lex *lexer, precl <span class="hljs-type">int</span>)</span></span> Expr &#123;<br>lhs := ParseUnary(lex)<br><span class="hljs-keyword">for</span> prec := precedence(lex.token); prec &gt;= precl; prec-- &#123;<br><span class="hljs-keyword">for</span> prec == precedence(lex.token) &#123;<br>op := lex.token<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume operator</span><br>rhs := ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>lhs = binary&#123;op, lhs, rhs&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume &#x27;?&#x27;</span><br>rhs := ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>op2 := lex.token<br>lex.next() <span class="hljs-comment">// consume &#x27;:&#x27;</span><br>z := ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>lhs = ternary&#123;op, op2, lhs, rhs, z&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;:&#x27;</span>:<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseUnary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">if</span> strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, lex.token) &#123;<br>op := lex.token<br>lex.next() <span class="hljs-comment">// consume &#x27;+&#x27; or &#x27;-&#x27;</span><br><span class="hljs-keyword">return</span> unary&#123;op, ParseUnary(lex)&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ParsePrimary(lex)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParsePrimary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br>id := lex.text()<br>lex.next() <span class="hljs-comment">// consume Ident</span><br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> Var(id)<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br><span class="hljs-keyword">var</span> args []Expr<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>args = <span class="hljs-built_in">append</span>(args, ParseExpr(lex))<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;,&#x27;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;,&#x27;</span><br>&#125;<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %q, want &#x27;)&#x27;&quot;</span>, lex.token)<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> call&#123;id, args&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br>e := ParseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %q, want &#x27;)&#x27;&quot;</span>, lex.token)<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> e<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br>f, err := strconv.ParseFloat(lex.text(), <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(lexPanic(err.Error()))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume number</span><br><span class="hljs-keyword">return</span> literal(f)<br><span class="hljs-keyword">default</span>:<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;unexpected %q&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(msg)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>print.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Format</span><span class="hljs-params">(expr Expr)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>write(&amp;buf, expr)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">write</span><span class="hljs-params">(buf *bytes.Buffer, expr Expr)</span></span> &#123;<br><span class="hljs-keyword">switch</span> e := expr.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> Var:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%s&quot;</span>, e)<br><span class="hljs-keyword">case</span> literal:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%g&quot;</span>, e)<br><span class="hljs-keyword">case</span> unary:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;(%c&quot;</span>, e.op)<br>write(buf, e.x)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> binary:<br>buf.WriteByte(<span class="hljs-string">&#x27;(&#x27;</span>)<br>write(buf, e.x)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op)<br>write(buf, e.y)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> call:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%s(&quot;</span>, e.fn)<br><span class="hljs-keyword">for</span> i, arg := <span class="hljs-keyword">range</span> e.args &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>buf.WriteString(<span class="hljs-string">&quot;, &quot;</span>)<br>&#125;<br>write(buf, arg)<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> ternary:<br>buf.WriteByte(<span class="hljs-string">&#x27;(&#x27;</span>)<br>write(buf, e.x)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op1)<br>write(buf, e.y)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op2)<br>write(buf, e.z)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex7/ex7.15/eval&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-comment">// control + D mac系统输入结束符 EOF</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Print(<span class="hljs-string">&quot;Expr: &quot;</span>)<br><br>b, err := io.ReadAll(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>expr, err := eval.Parse(<span class="hljs-type">string</span>(b))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>fmt.Print(<span class="hljs-string">&quot;\n&quot;</span>)<br>env := Env(expr)<br>fmt.Printf(<span class="hljs-string">&quot;Expr = %g\n&quot;</span>, expr.Eval(env))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Env</span><span class="hljs-params">(expr eval.Expr)</span></span> eval.Env &#123;<br>env := <span class="hljs-built_in">make</span>(eval.Env)<br>scanner := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> expr.Vars() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s: &quot;</span>, v)<br><br><span class="hljs-keyword">if</span> !scanner.Scan() &#123;<br>log.Fatal(<span class="hljs-string">&quot;not enough var!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> err := scanner.Err(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>f, err := strconv.ParseFloat(scanner.Text(), <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>env[v] = f<br>&#125;<br><span class="hljs-keyword">return</span> env<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.16：</strong> 编写一个基于web的计算器程序。<br>解：<br>ast.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">type</span> Expr <span class="hljs-keyword">interface</span> &#123;<br>Eval(env Env) <span class="hljs-type">float64</span><br>Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span><br>String() <span class="hljs-type">string</span><br>Vars() []Var<br>&#125;<br><br><span class="hljs-keyword">type</span> Var <span class="hljs-type">string</span><br><br><span class="hljs-keyword">type</span> literal <span class="hljs-type">float64</span><br><br><span class="hljs-keyword">type</span> unary <span class="hljs-keyword">struct</span> &#123;<br>op <span class="hljs-type">rune</span><br>x  Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> binary <span class="hljs-keyword">struct</span> &#123;<br>op   <span class="hljs-type">rune</span><br>x, y Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>fn   <span class="hljs-type">string</span><br>args []Expr<br>&#125;<br><br><span class="hljs-keyword">type</span> ternary <span class="hljs-keyword">struct</span> &#123;<br>op1, op2 <span class="hljs-type">rune</span><br>x, y, z  Expr<br>&#125;<br></code></pre></td></tr></table></figure><p>eval.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> env[v]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> u.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> +u.x.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> -u.x.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected unary operator: %q&quot;</span>, u.x))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> b.op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) + b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) - b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) * b.y.Eval(env)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> b.x.Eval(env) / b.y.Eval(env)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected binary operator: %q&quot;</span>, b.op))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">switch</span> c.fn &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pow&quot;</span>:<br><span class="hljs-keyword">return</span> math.Pow(c.args[<span class="hljs-number">0</span>].Eval(env), c.args[<span class="hljs-number">1</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sin&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sin(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sqrt&quot;</span>:<br><span class="hljs-keyword">return</span> math.Sqrt(c.args[<span class="hljs-number">0</span>].Eval(env))<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unknown function: %q&quot;</span>, c.fn))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Eval(env Env) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">if</span> t.op1 == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; t.op2 == <span class="hljs-string">&#x27;:&#x27;</span> &#123;<br><span class="hljs-keyword">if</span> t.x.Eval(env) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> t.y.Eval(env)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> t.z.Eval(env)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected ternary operator: %q and %q&quot;</span>, t.op1, t.op2))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>check.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, u.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupport unary operator: %q&quot;</span>, u.op)<br>&#125;<br><span class="hljs-keyword">return</span> u.x.Check(vars)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !strings.ContainsRune(<span class="hljs-string">&quot;+-*/&quot;</span>, b.op) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unsupport binary operator: %q&quot;</span>, b.op)<br>&#125;<br><span class="hljs-keyword">if</span> err := b.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> b.y.Check(vars)<br>&#125;<br><br><span class="hljs-keyword">var</span> numParams = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;pow&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;sin&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;sqrt&quot;</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>arity, ok := numParams[c.fn]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unknown function: %q&quot;</span>, c.fn)<br>&#125;<br><span class="hljs-keyword">if</span> arity != <span class="hljs-built_in">len</span>(c.args) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;call to %s has %d args, want %d&quot;</span>, c.fn, <span class="hljs-built_in">len</span>(c.args), arity)<br>&#125;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br><span class="hljs-keyword">if</span> err := arg.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Check(vars <span class="hljs-keyword">map</span>[Var]<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> t.op1 == <span class="hljs-string">&#x27;?&#x27;</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected ternary operator: %q&quot;</span>, t.op1))<br>&#125;<br><span class="hljs-keyword">if</span> t.op2 == <span class="hljs-string">&#x27;:&#x27;</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;unexpected ternary operator: %q&quot;</span>, t.op2))<br>&#125;<br><span class="hljs-keyword">if</span> err := t.x.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> err := t.y.Check(vars); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> t.z.Check(vars)<br>&#125;<br></code></pre></td></tr></table></figure><p>string.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(v)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g&quot;</span>, l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%c%s&quot;</span>, u.op, u.x.String())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s)&quot;</span>, b.x.String(), b.op, b.y.String())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> args []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br>args = <span class="hljs-built_in">append</span>(args, arg.String())<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s(%s)&quot;</span>, c.fn, strings.Join(args, <span class="hljs-string">&quot;,&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;(%s %c %s %c %s)&quot;</span>, t.x.String(), t.op1, t.y.String(), t.op2, t.z.String())<br>&#125;<br></code></pre></td></tr></table></figure><p>vars.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Var)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> []Var&#123;v&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l literal)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> []Var&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u unary)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> u.x.Vars()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b binary)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(b.x.Vars(), b.y.Vars()...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c call)</span></span> Vars() []Var &#123;<br><span class="hljs-keyword">var</span> vars []Var<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.args &#123;<br>vars = <span class="hljs-built_in">append</span>(vars, arg.Vars()...)<br>&#125;<br><span class="hljs-keyword">return</span> vars<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t ternary)</span></span> Vars() []Var &#123;<br>vars := <span class="hljs-built_in">append</span>(t.x.Vars(), t.y.Vars()...)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(vars, t.z.Vars()...)<br>&#125;<br></code></pre></td></tr></table></figure><p>parse.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;text/scanner&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> lexer <span class="hljs-keyword">struct</span> &#123;<br>scan  scanner.Scanner<br>token <span class="hljs-type">rune</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> next()        &#123; lex.token = lex.scan.Scan() &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> text() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> lex.scan.TokenText() &#125;<br><br><span class="hljs-keyword">type</span> lexPanic <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lex *lexer)</span></span> describe() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;identifier %q&quot;</span>, lex.token)<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;numbber %q&quot;</span>, lex.token)<br><span class="hljs-keyword">case</span> scanner.EOF:<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;end of file&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%q&quot;</span>, <span class="hljs-type">rune</span>(lex.token))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">precedence</span><span class="hljs-params">(op <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(inputStr <span class="hljs-type">string</span>)</span></span> (_ Expr, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> x := <span class="hljs-built_in">recover</span>().(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br><span class="hljs-keyword">case</span> lexPanic:<br>err = fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, x)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(x)<br>&#125;<br>&#125;()<br>lex := <span class="hljs-built_in">new</span>(lexer)<br>lex.scan.Init(strings.NewReader(inputStr))<br>lex.scan.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanFloats<br>lex.next()<br>e := ParseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != scanner.EOF &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unexpected %s&quot;</span>, lex.describe())<br>&#125;<br><span class="hljs-keyword">return</span> e, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseExpr</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">return</span> ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseBinaryOrTernary</span><span class="hljs-params">(lex *lexer, precl <span class="hljs-type">int</span>)</span></span> Expr &#123;<br>lhs := ParseUnary(lex)<br><span class="hljs-keyword">for</span> prec := precedence(lex.token); prec &gt;= precl; prec-- &#123;<br><span class="hljs-keyword">for</span> prec == precedence(lex.token) &#123;<br>op := lex.token<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume operator</span><br>rhs := ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>lhs = binary&#123;op, lhs, rhs&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume &#x27;?&#x27;</span><br>rhs := ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>op2 := lex.token<br>lex.next() <span class="hljs-comment">// consume &#x27;:&#x27;</span><br>z := ParseBinaryOrTernary(lex, <span class="hljs-number">1</span>)<br>lhs = ternary&#123;op, op2, lhs, rhs, z&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;:&#x27;</span>:<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lhs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseUnary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">if</span> strings.ContainsRune(<span class="hljs-string">&quot;+-&quot;</span>, lex.token) &#123;<br>op := lex.token<br>lex.next() <span class="hljs-comment">// consume &#x27;+&#x27; or &#x27;-&#x27;</span><br><span class="hljs-keyword">return</span> unary&#123;op, ParseUnary(lex)&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ParsePrimary(lex)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParsePrimary</span><span class="hljs-params">(lex *lexer)</span></span> Expr &#123;<br><span class="hljs-keyword">switch</span> lex.token &#123;<br><span class="hljs-keyword">case</span> scanner.Ident:<br>id := lex.text()<br>lex.next() <span class="hljs-comment">// consume Ident</span><br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> Var(id)<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br><span class="hljs-keyword">var</span> args []Expr<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>args = <span class="hljs-built_in">append</span>(args, ParseExpr(lex))<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;,&#x27;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;,&#x27;</span><br>&#125;<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %q, want &#x27;)&#x27;&quot;</span>, lex.token)<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> call&#123;id, args&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>lex.next() <span class="hljs-comment">// consume &#x27;(&#x27;</span><br>e := ParseExpr(lex)<br><span class="hljs-keyword">if</span> lex.token != <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;got %q, want &#x27;)&#x27;&quot;</span>, lex.token)<br><span class="hljs-built_in">panic</span>(lexPanic(msg))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume &#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> e<br><span class="hljs-keyword">case</span> scanner.Int, scanner.Float:<br>f, err := strconv.ParseFloat(lex.text(), <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(lexPanic(err.Error()))<br>&#125;<br>lex.next() <span class="hljs-comment">// consume number</span><br><span class="hljs-keyword">return</span> literal(f)<br><span class="hljs-keyword">default</span>:<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;unexpected %q&quot;</span>, lex.describe())<br><span class="hljs-built_in">panic</span>(msg)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>print.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> eval<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Format</span><span class="hljs-params">(expr Expr)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>write(&amp;buf, expr)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">write</span><span class="hljs-params">(buf *bytes.Buffer, expr Expr)</span></span> &#123;<br><span class="hljs-keyword">switch</span> e := expr.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> Var:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%s&quot;</span>, e)<br><span class="hljs-keyword">case</span> literal:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%g&quot;</span>, e)<br><span class="hljs-keyword">case</span> unary:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;(%c&quot;</span>, e.op)<br>write(buf, e.x)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> binary:<br>buf.WriteByte(<span class="hljs-string">&#x27;(&#x27;</span>)<br>write(buf, e.x)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op)<br>write(buf, e.y)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> call:<br>fmt.Fprintf(buf, <span class="hljs-string">&quot;%s(&quot;</span>, e.fn)<br><span class="hljs-keyword">for</span> i, arg := <span class="hljs-keyword">range</span> e.args &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>buf.WriteString(<span class="hljs-string">&quot;, &quot;</span>)<br>&#125;<br>write(buf, arg)<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">case</span> ternary:<br>buf.WriteByte(<span class="hljs-string">&#x27;(&#x27;</span>)<br>write(buf, e.x)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op1)<br>write(buf, e.y)<br>fmt.Fprintf(buf, <span class="hljs-string">&quot; %c &quot;</span>, e.op2)<br>write(buf, e.z)<br>buf.WriteByte(<span class="hljs-string">&#x27;)&#x27;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ex/ex7/ex7.16/eval&quot;</span><br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;unicode&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, index)<br>http.HandleFunc(<span class="hljs-string">&quot;/calc&quot;</span>, calc)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:8888&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>templ := template.Must(template.ParseFiles(<span class="hljs-string">&quot;./ex/ex7/ex7.16/index.html&quot;</span>))<br><span class="hljs-keyword">if</span> err := templ.Execute(w, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;<br>templ := template.Must(template.ParseFiles(<span class="hljs-string">&quot;./ex/ex7/ex7.16/index.html&quot;</span>))<br>exprStr := req.PostFormValue(<span class="hljs-string">&quot;expr&quot;</span>)<br>envStr := req.PostFormValue(<span class="hljs-string">&quot;env&quot;</span>)<br>expr, err := eval.Parse(exprStr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>env, err := parseEnv(envStr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> err := templ.Execute(w, expr.Eval(env)); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseEnv</span><span class="hljs-params">(envStr <span class="hljs-type">string</span>)</span></span> (eval.Env, <span class="hljs-type">error</span>) &#123;<br>env := <span class="hljs-built_in">make</span>(eval.Env)<br>fields := strings.FieldsFunc(envStr, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> strings.ContainsRune(<span class="hljs-string">`&quot;:=,&#123;&#125;\&quot;`</span>, r) ||<br>unicode.IsSpace(r)<br>&#125;)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(fields); i += <span class="hljs-number">2</span> &#123;<br>k := strings.TrimSpace(fields[i])<br>v := strings.TrimSpace(fields[i+<span class="hljs-number">1</span>])<br>val, err := strconv.ParseFloat(v, <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>env[eval.Var(k)] = val<br>&#125;<br><span class="hljs-keyword">return</span> env, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Calculator&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;/calc&quot;</span>&gt;<br>    &lt;p&gt;Expr: &lt;/p&gt;&lt;textarea name=<span class="hljs-string">&quot;expr&quot;</span>&gt;&lt;/textarea&gt;<br>    &lt;p&gt;Env: &lt;/p&gt;&lt;textarea name=<span class="hljs-string">&quot;env&quot;</span>&gt;&lt;/textarea&gt;<br>    &lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Calculate&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;p&gt;Result: &#123;&#123;.&#125;&#125;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.8. error接口</title>
      <link href="/posts/21f47e2c8c53/"/>
      <url>/posts/21f47e2c8c53/</url>
      
        <content type="html"><![CDATA[<h1 id="error接口"><a href="#error接口" class="headerlink" title="error接口"></a>error接口</h1><p><code>error</code>接口是<code>interface</code>类型，这个类型只有一个返回错误信息的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> <span class="hljs-type">error</span> <span class="hljs-keyword">interface</span> &#123;<br>Error() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="创建error"><a href="#创建error" class="headerlink" title="创建error"></a>创建error</h1><h2 id="errors-New"><a href="#errors-New" class="headerlink" title="errors.New"></a>errors.New</h2><p>创建error的最简单方法就是调用<code>errors.New</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> errors<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(text <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> &amp;errorString&#123;text&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> errorString <span class="hljs-keyword">struct</span> &#123;<br>s <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *errorString)</span></span> Error() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> e.s<br>&#125;<br></code></pre></td></tr></table></figure><p><code>errors.New</code>函数根据传入的错误信息返回一个新的<code>error</code>。<br>实现error接口的是<code>errorString</code>结构体指针，而非字符串。<br>原因在于避免其被无意中修改，而且因为<code>*errorString</code>指针类型满足<code>error</code>接口而非<code>errorString</code>，所以每次调用<code>New</code>都会生成不同的实例。<br>如<code>io.EOF</code>和相同的错误信息的<code>error</code>实例不同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(io.EOF == errors.New(<span class="hljs-string">&quot;EOF&quot;</span>))            <span class="hljs-comment">// false</span><br>fmt.Println(errors.New(<span class="hljs-string">&quot;EOF&quot;</span>) == errors.New(<span class="hljs-string">&quot;EOF&quot;</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>一般情况下，使用<code>errors.New</code>函数比较少，我们常用<code>fmt.Errorf</code>函数。</p><h2 id="fmt-Errorf"><a href="#fmt-Errorf" class="headerlink" title="fmt.Errorf"></a>fmt.Errorf</h2><p><code>fmt.Errorf</code>还能格式化错误信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> fmt<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;errors&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Errorf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...any)</span></span> <span class="hljs-type">error</span> &#123;<br>p := newPrinter()<br>p.wrapErrs = <span class="hljs-literal">true</span><br>p.doPrintf(format, a)<br>s := <span class="hljs-type">string</span>(p.buf)<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">if</span> p.wrappedErr == <span class="hljs-literal">nil</span> &#123;<br>err = errors.New(s)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = &amp;wrapError&#123;s, p.wrappedErr&#125;<br>&#125;<br>p.free()<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">type</span> wrapError <span class="hljs-keyword">struct</span> &#123;<br>msg <span class="hljs-type">string</span><br>err <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *wrapError)</span></span> Error() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> e.msg<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *wrapError)</span></span> Unwrap() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> e.err<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="syscall-Errno"><a href="#syscall-Errno" class="headerlink" title="syscall.Errno"></a>syscall.Errno</h1><p><code>syscall</code>包提供了Go语言底层系统调用API。<br>在多个平台上，它定义一个实现error接口的数字类型Errno，并且在Unix平台上，Errno的Error方法会从一个字符串表中查找错误消息，如下面展示的这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Errno <span class="hljs-type">uintptr</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Errno)</span></span> Error() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-type">int</span>(e) &amp;&amp; <span class="hljs-type">int</span>(e) &lt; <span class="hljs-built_in">len</span>(errors) &#123;<br>s := errors[e]<br><span class="hljs-keyword">if</span> s != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> s<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;errno &quot;</span> + itoa.Itoa(<span class="hljs-type">int</span>(e))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Errno)</span></span> Is(target <span class="hljs-type">error</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">switch</span> target &#123;<br><span class="hljs-keyword">case</span> oserror.ErrPermission:<br><span class="hljs-keyword">return</span> e == EACCES || e == EPERM<br><span class="hljs-keyword">case</span> oserror.ErrExist:<br><span class="hljs-keyword">return</span> e == EEXIST || e == ENOTEMPTY<br><span class="hljs-keyword">case</span> oserror.ErrNotExist:<br><span class="hljs-keyword">return</span> e == ENOENT<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Errno)</span></span> Temporary() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> e == EINTR || e == EMFILE || e == ENFILE || e.Timeout()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Errno)</span></span> Timeout() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> e == EAGAIN || e == EWOULDBLOCK || e == ETIMEDOUT<br>&#125;<br><br><span class="hljs-comment">// Do the interface allocations only once for common</span><br><span class="hljs-comment">// Errno values.</span><br><span class="hljs-keyword">var</span> (<br>errEAGAIN <span class="hljs-type">error</span> = EAGAIN<br>errEINVAL <span class="hljs-type">error</span> = EINVAL<br>errENOENT <span class="hljs-type">error</span> = ENOENT<br>)<br><br><span class="hljs-comment">// errnoErr returns common boxed Errno values, to prevent</span><br><span class="hljs-comment">// allocations at runtime.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">errnoErr</span><span class="hljs-params">(e Errno)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">switch</span> e &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> EAGAIN:<br><span class="hljs-keyword">return</span> errEAGAIN<br><span class="hljs-keyword">case</span> EINVAL:<br><span class="hljs-keyword">return</span> errEINVAL<br><span class="hljs-keyword">case</span> ENOENT:<br><span class="hljs-keyword">return</span> errENOENT<br>&#125;<br><span class="hljs-keyword">return</span> e<br>&#125;<br><br><span class="hljs-keyword">var</span> errors = [...]<span class="hljs-type">string</span>&#123;<br><span class="hljs-number">1</span>:   <span class="hljs-string">&quot;operation not permitted&quot;</span>,<br><span class="hljs-number">2</span>:   <span class="hljs-string">&quot;no such file or directory&quot;</span>,<br><span class="hljs-number">3</span>:   <span class="hljs-string">&quot;no such process&quot;</span>,<br><span class="hljs-number">4</span>:   <span class="hljs-string">&quot;interrupted system call&quot;</span>,<br><span class="hljs-number">5</span>:   <span class="hljs-string">&quot;input/output error&quot;</span>,<br><span class="hljs-number">6</span>:   <span class="hljs-string">&quot;device not configured&quot;</span>,<br><span class="hljs-number">7</span>:   <span class="hljs-string">&quot;argument list too long&quot;</span>,<br><span class="hljs-number">8</span>:   <span class="hljs-string">&quot;exec format error&quot;</span>,<br><span class="hljs-number">9</span>:   <span class="hljs-string">&quot;bad file descriptor&quot;</span>,<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是创建<code>error</code>的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span> = syscall.Errno(<span class="hljs-number">2</span>)<br>fmt.Println(err.Error()) <span class="hljs-comment">// &quot;no such file or directory&quot;</span><br>fmt.Println(err)         <span class="hljs-comment">// &quot;no such file or directory&quot;</span><br></code></pre></td></tr></table></figure><p><code>Errno</code>是一个系统调用错误的高效表示方式，它通过一个有限的集合进行描述，并且它满足标准的错误接口。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.7. http.Handler接口</title>
      <link href="/posts/fc3145dbfc40/"/>
      <url>/posts/fc3145dbfc40/</url>
      
        <content type="html"><![CDATA[<h1 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h1><p><code>http.Handler</code>接口用于实现客户端和服务器。具体接口如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Handler <span class="hljs-keyword">interface</span> &#123;<br>ServeHTTP(ResponseWriter, *Request)<br>&#125;<br></code></pre></td></tr></table></figure><p>而常与<code>func ListenAndServe(address string, h Handler) error</code>结合使用，该方法需要一个服务器地址和接口分派的<code>Handler</code>接口实例。<br>该方法会一直运行，直到服务器因为错误而关闭或启动错误。</p><p>如一个电子商务网站，为了销售它的数据库将它物品的价格映射成美元。下面这个程序可能是能想到的最简单的实现了。它将库存清单模型化为一个命名为database的map类型，我们给这个类型一个ServeHttp方法，这样它可以满足http.Handler接口。这个handler会遍历整个map并输出物品信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>db := database&#123;<span class="hljs-string">&quot;shoes&quot;</span>: <span class="hljs-number">210</span>&#125;<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, db))<br>&#125;<br><br><span class="hljs-keyword">type</span> dollars <span class="hljs-type">float32</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dollars)</span></span> String() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;$%.2f&quot;</span>, d) &#125;<br><br><span class="hljs-keyword">type</span> database <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]dollars<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br><span class="hljs-keyword">for</span> item, price := <span class="hljs-keyword">range</span> db &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s:%s&quot;</span>, item, price)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在后台运行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./main.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main &amp;</span><br></code></pre></td></tr></table></figure><p>可以在web访问<a href="http://localhost:8080，即可得到以下输出。">http://localhost:8080，即可得到以下输出。</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">shoes:$210.00<br>socks:$5.00<br></code></pre></td></tr></table></figure><p>当然可以使用<code>fetch</code>程序访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./ch/ch1/fetch http://localhost:8080</span><br>shoes:$210.00<br>socks:$5.00<br></code></pre></td></tr></table></figure><p>目前为止，这个服务器不考虑URL只能为每个请求列出它全部的库存清单。更真实的服务器会定义多个不同的URL，每一个都会触发一个不同的行为。让我们使用&#x2F;list来调用已经存在的这个行为并且增加另一个&#x2F;price调用表明单个货品的价格，像这样&#x2F;price?item&#x3D;socks来指定一个请求参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>db := database&#123;<span class="hljs-string">&quot;shoes&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;socks&quot;</span>: <span class="hljs-number">50</span>&#125;<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, db))<br>&#125;<br><br><span class="hljs-keyword">type</span> dollars <span class="hljs-type">float32</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dollars)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;$%.2f&quot;</span>, d)<br>&#125;<br><br><span class="hljs-keyword">type</span> database <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]dollars<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br><span class="hljs-keyword">switch</span> req.URL.Path &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/list&quot;</span>:<br><span class="hljs-keyword">for</span> item, price := <span class="hljs-keyword">range</span> db &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s:%s\n&quot;</span>, item, price)<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/price&quot;</span>:<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>price, ok := db[item]<br><span class="hljs-keyword">if</span> !ok &#123;<br>w.WriteHeader(http.StatusNotFound)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;not such item:%q\n&quot;</span>, item)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s:%s\n&quot;</span>, item, price)<br><span class="hljs-keyword">default</span>:<br>w.WriteHeader(http.StatusNotFound)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;not such page:%q\n&quot;</span>, req.URL)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中的<code>w.WriteHeader(http.StatusNotFound)</code>实际上是返回一个404的错误状态码。<br>等效于</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">msg := fmt.Sprintf(<span class="hljs-string">&quot;not such page:%q\n&quot;</span>, req.URL)<br>http.Error(w, msg, http.StatusNotFound)<br></code></pre></td></tr></table></figure><p>下面是编译运行的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./ch/ch7/http2</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./http2 &amp;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./ch/ch1/fetch http://localhost:8080/list</span><br>shoes:$100.00<br>socks:$50.00<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./ch/ch1/fetch http://localhost:8080/price?item=shoes</span><br>shoes:$100.00<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./ch/ch1/fetch http://localhost:8080/price?item=socks</span><br>socks:$50.00<br>./ch/ch1/fetch http://localhost:8080/price?item=hats<br>not such item:&quot;hats&quot;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./ch/ch1/fetch http://localhost:8080/help</span><br>not such page:&quot;/help&quot;<br></code></pre></td></tr></table></figure><h1 id="ServeMux"><a href="#ServeMux" class="headerlink" title="ServeMux"></a>ServeMux</h1><p>如果有多个接口呢，继续增加<code>case</code>?<br>显然，这样过于臃肿。在实际应用中，我们可以使用将每个case中的逻辑定义到一个分开的方法或函数中。此外，相近的URL可能需要相似的逻辑，例如几个图片文件可能有形如<code>/images/*.png</code>的URL。<br>在Go语言中，<code>net/http</code>提供了提供了请求多路由器<code>ServeMux</code>来简化<code>URL</code>和<code>handlers</code>的联系。<br>一个<code>ServeMux</code>将一批<code>http.Handler</code>聚集到一个单一的<code>http.Handler</code>中。我们可以看到满足同一接口的不同类型是可替换的：web服务器将请求指派给任意的<code>http.Handler</code>而不需要考虑它后面的具体类型。<br>对于更复杂的应用，一些ServeMux可以通过组合来处理更加错综复杂的路由需求。</p><p>在下面的程序中，我们创建一个<code>ServeMux</code>并且使用它将URL和相应处理<code>/list</code>和<code>/price</code>操作的<code>handler</code>联系起来，这些操作逻辑都已经被分到不同的方法中。然后我门在调用<code>ListenAndServe</code>函数中使用<code>ServeMux</code>最为主要的<code>handler</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>db := database&#123;<span class="hljs-string">&quot;shoes&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;socks&quot;</span>: <span class="hljs-number">50</span>&#125;<br>mux := http.NewServeMux()<br>mux.Handle(<span class="hljs-string">&quot;/list&quot;</span>, http.HandlerFunc(db.list))<br>mux.Handle(<span class="hljs-string">&quot;/price&quot;</span>, http.HandlerFunc(db.price))<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, mux))<br>&#125;<br><br><span class="hljs-keyword">type</span> dollars <span class="hljs-type">float32</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dollars)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;$%.2f&quot;</span>, d)<br>&#125;<br><br><span class="hljs-keyword">type</span> database <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]dollars<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> list(w http.ResponseWriter, req *http.Request) &#123;<br><span class="hljs-keyword">for</span> item, price := <span class="hljs-keyword">range</span> db &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s: %s\n&quot;</span>, item, price)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> price(w http.ResponseWriter, req *http.Request) &#123;<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>price, ok := db[item]<br><span class="hljs-keyword">if</span> !ok &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;not such item: %q&quot;</span>, item)<br>http.Error(w, msg, http.StatusNotFound)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s: %s\n&quot;</span>, item, price)<br>&#125;<br><span class="hljs-string">``</span><span class="hljs-string">``</span><br><br><span class="hljs-string">`list`</span>和<span class="hljs-string">`price`</span>注册到<span class="hljs-string">`handlers`</span>上，<span class="hljs-string">`db.list`</span>实现了handler类似行为的函数，但是却没有实现<span class="hljs-string">`http.handler`</span>接口，所以不能直接传给<span class="hljs-string">`mux.Handle`</span>。<br><span class="hljs-string">`http.HandlerFunc(db.list)`</span>是<span class="hljs-string">`HandlerFunc`</span>类型，该语句为类型转换成<span class="hljs-string">`HandlerFunc`</span>类型。<br><span class="hljs-string">``</span><span class="hljs-string">`go</span><br><span class="hljs-string">type HandlerFunc func(ResponseWriter, *Request)</span><br><span class="hljs-string"></span><br><span class="hljs-string">// ServeHTTP calls f(w, r).</span><br><span class="hljs-string">func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) &#123;</span><br><span class="hljs-string">f(w, r)</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>该类型实现了<code>http.Handler</code>接口，<code>ServeHttp</code>方法内部调用了自身方法<code>f(w, r)</code>。</p><p>其实，<code>ServeMux</code>有一个简化的函数，<code>HandleFunc</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">mux := http.NewServeMux()<br>mux.HandleFunc(<span class="hljs-string">&quot;/list&quot;</span>, db.list)<br>mux.HandleFunc(<span class="hljs-string">&quot;/price&quot;</span>, db.price)<br></code></pre></td></tr></table></figure><h1 id="DefaultServerMux"><a href="#DefaultServerMux" class="headerlink" title="DefaultServerMux"></a>DefaultServerMux</h1><p>上述例子实现了两个不同的web服务器来监听不同的端口，并且指派了不同的URL给不同的handler。只要构建另外一个<code>ServeMux</code>并且在调用一次ListenAndServe（可能并行的）。<br>此外，在一个应用程序的多个文件中定义HTTP handler也是非常典型的，如果它们必须全部都显示的注册到这个应用的ServeMux实例上会比较麻烦。<br>为了方便，<code>net/http</code>包提供了一个全局的<code>ServeMux</code>实例<code>DefaultServerMux</code>和包级别的<code>http.Handle</code>和<code>http.HandleFunc</code>函数。<br>为了使用<code>DefaultServerMux</code>作为服务器的主handler，我们不需要将它传给ListenAndServe函数；nil值就可以工作。<br>下面是修改后的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">db := database&#123;<span class="hljs-string">&quot;shoes&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;socks&quot;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&quot;hats&quot;</span>: <span class="hljs-number">20</span>&#125;<br>http.HandleFunc(<span class="hljs-string">&quot;/list&quot;</span>, db.list)<br>http.HandleFunc(<span class="hljs-string">&quot;/price&quot;</span>, db.price)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.11：</strong> 增加额外的handler让客户端可以创建，读取，更新和删除数据库记录。例如，一个形如 &#x2F;update?item&#x3D;socks&amp;price&#x3D;6 的请求会更新库存清单里一个货品的价格并且当这个货品不存在或价格无效时返回一个错误值。（注意：这个修改会引入变量同时更新的问题）<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>db := database&#123;<span class="hljs-string">&quot;shoes&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;socks&quot;</span>: <span class="hljs-number">50</span>&#125;<br>http.HandleFunc(<span class="hljs-string">&quot;/list&quot;</span>, db.list)<br>http.HandleFunc(<span class="hljs-string">&quot;/price&quot;</span>, db.price)<br>http.HandleFunc(<span class="hljs-string">&quot;/create&quot;</span>, db.create)<br>http.HandleFunc(<span class="hljs-string">&quot;/delete&quot;</span>, db.<span class="hljs-built_in">delete</span>)<br>http.HandleFunc(<span class="hljs-string">&quot;/update&quot;</span>, db.update)<br>http.HandleFunc(<span class="hljs-string">&quot;/read&quot;</span>, db.read)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-keyword">var</span> mu sync.Mutex<br><br><span class="hljs-keyword">type</span> dollars <span class="hljs-type">float32</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dollars)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;$%.2f&quot;</span>, d)<br>&#125;<br><br><span class="hljs-keyword">type</span> database <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]dollars<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> list(w http.ResponseWriter, req *http.Request) &#123;<br><span class="hljs-keyword">for</span> item, price := <span class="hljs-keyword">range</span> db &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s:%s\n&quot;</span>, item, price)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> price(w http.ResponseWriter, req *http.Request) &#123;<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>price, ok := db[item]<br><span class="hljs-keyword">if</span> !ok &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;not such item:%q&quot;</span>, item)<br>http.Error(w, msg, http.StatusNotFound)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s:%s\n&quot;</span>, item, price)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> create(w http.ResponseWriter, req *http.Request) &#123;<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>price := req.URL.Query().Get(<span class="hljs-string">&quot;price&quot;</span>)<br>p, err := strconv.ParseFloat(price, <span class="hljs-number">32</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;params err: %s\n&quot;</span>, err)<br>http.Error(w, msg, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br>mu.Lock()<br><span class="hljs-keyword">if</span> _, ok := db[item]; ok &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;%s is exist.\n&quot;</span>, item)<br>http.Error(w, msg, http.StatusNotFound)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>db[item] = dollars(p)<br>&#125;<br>mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> <span class="hljs-built_in">delete</span>(w http.ResponseWriter, req *http.Request) &#123;<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>mu.Lock()<br><span class="hljs-keyword">if</span> _, ok := db[item]; !ok &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;%s is not exist.\n&quot;</span>, item)<br>http.Error(w, msg, http.StatusNotFound)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">delete</span>(db, item)<br>&#125;<br>mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> update(w http.ResponseWriter, req *http.Request) &#123;<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>price := req.URL.Query().Get(<span class="hljs-string">&quot;price&quot;</span>)<br>p, err := strconv.ParseFloat(price, <span class="hljs-number">32</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;params err: %v.\n&quot;</span>, err)<br>http.Error(w, msg, http.StatusBadRequest)<br><span class="hljs-keyword">return</span><br>&#125;<br>mu.Lock()<br><span class="hljs-keyword">if</span> _, ok := db[item]; !ok &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;%s is not exist.\n&quot;</span>, item)<br>http.Error(w, msg, http.StatusNotFound)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>db[item] = dollars(p)<br>&#125;<br>mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> read(w http.ResponseWriter, req *http.Request) &#123;<br>item := req.URL.Query().Get(<span class="hljs-string">&quot;item&quot;</span>)<br>price, ok := db[item]<br><span class="hljs-keyword">if</span> !ok &#123;<br>msg := fmt.Sprintf(<span class="hljs-string">&quot;%s is not exist.\n&quot;</span>, item)<br>http.Error(w, msg, http.StatusNotFound)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s:%s\n&quot;</span>, item, price)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.12：</strong> 修改&#x2F;list的handler让它把输出打印成一个HTML的表格而不是文本。html&#x2F;template包(§4.6)可能会对你有帮助。<br>解：<br>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Item<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Price<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  &#123;&#123;range $item, $price := .&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;$item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;$price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  &#123;&#123;end&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>db := database&#123;<span class="hljs-string">&quot;shoes&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;socks&quot;</span>: <span class="hljs-number">10</span>&#125;<br>http.HandleFunc(<span class="hljs-string">&quot;/list&quot;</span>, db.list)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-keyword">type</span> database <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(db database)</span></span> list(w http.ResponseWriter, req *http.Request) &#123;<br>tmpl := template.Must(template.ParseFiles(<span class="hljs-string">&quot;./ex/ex7/ex7.12/list.html&quot;</span>))<br><span class="hljs-keyword">if</span> err := tmpl.Execute(w, db); err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.6. sort.Interface接口</title>
      <link href="/posts/8d8e98ca9007/"/>
      <url>/posts/8d8e98ca9007/</url>
      
        <content type="html"><![CDATA[<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p><code>sort</code>包内包含对任何序列进行排序的接口，<code>sort.Interface</code>接口。<br>该接口规定了序列的排序算法和对序列类型之间的约定。<br>排序算法包含了以下三个要点：</p><ul><li>序列长度</li><li>元素比较的结果</li><li>交换元素的方式</li></ul><p>三个要点也对应着<code>sort.Interface</code>的三个方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Interface <span class="hljs-keyword">interface</span> &#123;<br>Len() <span class="hljs-type">int</span><br>Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span><br>Swap(i, j <span class="hljs-type">int</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是应用该接口的简单例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> StringSlice<br><br><span class="hljs-keyword">type</span> StringSlice []<span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s StringSlice)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s StringSlice)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> s[i] &gt; s[j]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s StringSlice)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>s[i], s[j] = s[j], s[i]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接着就是直接调用<code>sort.Sort()</code>方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">s := StringSlice&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>sort.Sort(s) <span class="hljs-comment">// [c b a]</span><br></code></pre></td></tr></table></figure><h1 id="复杂结构的排序"><a href="#复杂结构的排序" class="headerlink" title="复杂结构的排序"></a>复杂结构的排序</h1><p>下面的例子是对一个表格中的音乐播放列表进行排序。每个track都是单独的一行，每一列都是这个track的属性像艺术家，标题，和运行时间。想象一个图形用户界面来呈现这个表格，并且点击一个属性的顶部会使这个列表按照这个属性进行排序；再一次点击相同属性的顶部会进行逆向排序。<br>音乐播放列表模型如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Track <span class="hljs-keyword">struct</span> &#123;<br>Title  <span class="hljs-type">string</span><br>Artist <span class="hljs-type">string</span><br>Album  <span class="hljs-type">string</span><br>Year   <span class="hljs-type">int</span><br>Length time.Duration<br>&#125;<br><br><span class="hljs-keyword">var</span> tracks = []*Track&#123;<br>&#123;<span class="hljs-string">&quot;Go&quot;</span>, <span class="hljs-string">&quot;Delilah&quot;</span>, <span class="hljs-string">&quot;From the Roots Up&quot;</span>, <span class="hljs-number">2012</span>, length(<span class="hljs-string">&quot;3m38s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Go&quot;</span>, <span class="hljs-string">&quot;Moby&quot;</span>, <span class="hljs-string">&quot;Moby&quot;</span>, <span class="hljs-number">1992</span>, length(<span class="hljs-string">&quot;3m37s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Go Ahead&quot;</span>, <span class="hljs-string">&quot;Alicia Keys&quot;</span>, <span class="hljs-string">&quot;As I Am&quot;</span>, <span class="hljs-number">2007</span>, length(<span class="hljs-string">&quot;4m36s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Ready 2 Go&quot;</span>, <span class="hljs-string">&quot;Martin Solveig&quot;</span>, <span class="hljs-string">&quot;Smash&quot;</span>, <span class="hljs-number">2011</span>, length(<span class="hljs-string">&quot;4m24s&quot;</span>)&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">length</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> time.Duration &#123;<br>d, err := time.ParseDuration(s)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(s)<br>&#125;<br><span class="hljs-keyword">return</span> d<br>&#125;<br></code></pre></td></tr></table></figure><p>定义<code>printTracks</code>函数，音乐播放列表打印成表格。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printTracks</span><span class="hljs-params">(tracks []*Track)</span></span> &#123;<br><span class="hljs-keyword">const</span> format = <span class="hljs-string">&quot;%v\t%v\t%v\t%v\t%v\t\n&quot;</span><br>tw := <span class="hljs-built_in">new</span>(tabwriter.Writer).Init(os.Stdout, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>)<br>fmt.Fprintf(tw, format, <span class="hljs-string">&quot;Title&quot;</span>, <span class="hljs-string">&quot;Artist&quot;</span>, <span class="hljs-string">&quot;Album&quot;</span>, <span class="hljs-string">&quot;Year&quot;</span>, <span class="hljs-string">&quot;Length&quot;</span>)<br>fmt.Fprintf(tw, format, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>)<br><span class="hljs-keyword">for</span> _, t := <span class="hljs-keyword">range</span> tracks &#123;<br>fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)<br>&#125;<br>tw.Flush()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>text/tabwriter</code>包可以生成列是对齐且隔开的表格。<br><code>*tabwriter.Write</code>实现了<code>io.Writer</code>接口，所以能收集其数据。<br>其<code>Flush()</code>方法会格式化整个表格且使用<code>os.Stdout</code>输出。</p><p>按<code>Artist</code>字段对音乐播放列表排序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> byArtist []*Track<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x byArtist)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(x)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x byArtist)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x[i].Artist &lt; x[j].Artist<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x byArtist)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>x[i], x[j] = x[j], x[i]<br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>track</code>类型转换成<code>byArtist</code>，并继续排序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">sort.Sort(byArtist(tracks))<br></code></pre></td></tr></table></figure><p>打印排序后的列表。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">printTracks(tracks)<br></code></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">byArtist:<br>Title       Artist          Album              Year   Length  <br>-----       -----           -----              -----  -----   <br>Go Ahead    Alicia Keys     As I Am            2007   4m36s   <br>Go          Delilah         From the Roots Up  2012   3m38s   <br>Ready 2 Go  Martin Solveig  Smash              2011   4m24s   <br>Go          Moby            Moby               1992   3m37s  <br></code></pre></td></tr></table></figure><p>对排序后的播放列表进行逆向排序，<code>printTracks</code>输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">sort.Sort(sort.Reverse(byArtist(tracks)))<br>printTracks(tracks)<br><br>----------------------------------------<br>Title       Artist          Album              Year   Length  <br>-----       -----           -----              -----  -----   <br>Go          Moby            Moby               <span class="hljs-number">1992</span>   <span class="hljs-number">3</span>m37s   <br>Ready <span class="hljs-number">2</span> Go  Martin Solveig  Smash              <span class="hljs-number">2011</span>   <span class="hljs-number">4</span>m24s   <br>Go          Delilah         From the Roots Up  <span class="hljs-number">2012</span>   <span class="hljs-number">3</span>m38s   <br>Go Ahead    Alicia Keys     As I Am            <span class="hljs-number">2007</span>   <span class="hljs-number">4</span>m36s <br></code></pre></td></tr></table></figure><p>按<code>Year</code>进行排序，首先实现接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> byYear []*Track<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x byYear)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(x)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x byYear)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x[i].Year &lt; x[j].Year<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x byYear)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>x[i], x[j] = x[j], x[i]<br>&#125;<br><br>......<br><br>sort.Sort(byYear(tracks))<br>printTracks(tracks)<br><br>打印内容：<br>Title       Artist          Album              Year   Length  <br>-----       -----           -----              -----  -----   <br>Go          Moby            Moby               <span class="hljs-number">1992</span>   <span class="hljs-number">3</span>m37s   <br>Go Ahead    Alicia Keys     As I Am            <span class="hljs-number">2007</span>   <span class="hljs-number">4</span>m36s   <br>Ready <span class="hljs-number">2</span> Go  Martin Solveig  Smash              <span class="hljs-number">2011</span>   <span class="hljs-number">4</span>m24s   <br>Go          Delilah         From the Roots Up  <span class="hljs-number">2012</span>   <span class="hljs-number">3</span>m38s   <br><br></code></pre></td></tr></table></figure><p>接下来，思考一个问题。<br>如果要对列表进行多个排序，难道要实现多个<code>sort.Interface</code>接口？<br>如果要继续多重排序呢？</p><p>我们可以定义一个自定义排序，只要实现比较接口就可以实现上述问题。<br>而且，非slice也可以实现<code>sort.Interface</code>接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> customSort <span class="hljs-keyword">struct</span> &#123;<br>t    []*Track<br>less <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x customSort)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(x.t)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x customSort)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.less(x.t[i], x.t[j])<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(x customSort)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>x.t[i], x.t[j] = x.t[j], x.t[i]<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码并未实现具体字段排序。<br>可以看出<code>customSort</code>类型有两个成员变量，slice列表<code>t []*Track</code>和比较函数<code>less func(x,y *Track) bool</code>。 <code>customSort</code>类型实现了<code>sort.Interface</code>，并在<code>Less</code>方法中调用成员变量中的<code>less</code>函数。<br>实现比较方法<code>less</code>即可进行排序，当然也可以进行多重排序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">sort.Sort(customSort&#123;tracks, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> x.Title != y.Title &#123;<br><span class="hljs-keyword">return</span> x.Title &lt; y.Title<br>&#125;<br><span class="hljs-keyword">if</span> x.Year != y.Year &#123;<br><span class="hljs-keyword">return</span> x.Year &lt; y.Year<br>&#125;<br><span class="hljs-keyword">if</span> x.Length != y.Length &#123;<br><span class="hljs-keyword">return</span> x.Length &lt; y.Length<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;&#125;)<br></code></pre></td></tr></table></figure><p>上述代码为多重排序，以<code>Title</code>从小到大、<code>Year</code>从小到大、<code>Length</code>从小到大排序。打印如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">Title       Artist          Album              Year   Length  <br>-----       -----           -----              -----  -----   <br>Go          Moby            Moby               1992   3m37s   <br>Go          Delilah         From the Roots Up  2012   3m38s   <br>Go Ahead    Alicia Keys     As I Am            2007   4m36s   <br>Ready 2 Go  Martin Solveig  Smash              2011   4m24s   <br><br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.8：</strong> 很多图形界面提供了一个有状态的多重排序表格插件：主要的排序键是最近一次点击过列头的列，第二个排序键是第二最近点击过列头的列，等等。定义一个sort.Interface的实现用在这样的表格中。比较这个实现方式和重复使用sort.Stable来排序的方式。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;text/tabwriter&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Track <span class="hljs-keyword">struct</span> &#123;<br>Title  <span class="hljs-type">string</span><br>Artist <span class="hljs-type">string</span><br>Album  <span class="hljs-type">string</span><br>Year   <span class="hljs-type">int</span><br>Length time.Duration<br>&#125;<br><br><span class="hljs-keyword">var</span> tracks = []*Track&#123;<br>&#123;<span class="hljs-string">&quot;Go&quot;</span>, <span class="hljs-string">&quot;Delilah&quot;</span>, <span class="hljs-string">&quot;From the Roots Up&quot;</span>, <span class="hljs-number">2012</span>, length(<span class="hljs-string">&quot;3m38s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Go&quot;</span>, <span class="hljs-string">&quot;Moby&quot;</span>, <span class="hljs-string">&quot;Moby&quot;</span>, <span class="hljs-number">1992</span>, length(<span class="hljs-string">&quot;3m37s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Go Ahead&quot;</span>, <span class="hljs-string">&quot;Alicia Keys&quot;</span>, <span class="hljs-string">&quot;As I Am&quot;</span>, <span class="hljs-number">2007</span>, length(<span class="hljs-string">&quot;4m36s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Ready 2 Go&quot;</span>, <span class="hljs-string">&quot;Martin Solveig&quot;</span>, <span class="hljs-string">&quot;Smash&quot;</span>, <span class="hljs-number">2011</span>, length(<span class="hljs-string">&quot;4m24s&quot;</span>)&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">length</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> time.Duration &#123;<br>d, err := time.ParseDuration(s)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(s)<br>&#125;<br><span class="hljs-keyword">return</span> d<br>&#125;<br><br><span class="hljs-keyword">type</span> CustomSort <span class="hljs-keyword">struct</span> &#123;<br>t    []*Track<br>less <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span><br>swap <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CustomSort)</span></span> Len() <span class="hljs-type">int</span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(c.t) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CustomSort)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> c.less(c.t[i], c.t[j]) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CustomSort)</span></span> Swap(i, j <span class="hljs-type">int</span>)      &#123; c.t[i], c.t[j] = c.t[j], c.t[i] &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printTracks</span><span class="hljs-params">(tracks []*Track)</span></span> &#123;<br><span class="hljs-keyword">const</span> format = <span class="hljs-string">&quot;%v\t%v\t%v\t%v\t%v\t\n&quot;</span><br>tw := <span class="hljs-built_in">new</span>(tabwriter.Writer).Init(os.Stdout, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>)<br>fmt.Fprintf(tw, format, <span class="hljs-string">&quot;Title&quot;</span>, <span class="hljs-string">&quot;Artist&quot;</span>, <span class="hljs-string">&quot;Album&quot;</span>, <span class="hljs-string">&quot;Year&quot;</span>, <span class="hljs-string">&quot;Length&quot;</span>)<br>fmt.Fprintf(tw, format, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-string">&quot;-----&quot;</span>)<br><span class="hljs-keyword">for</span> _, t := <span class="hljs-keyword">range</span> tracks &#123;<br>fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)<br>&#125;<br>tw.Flush()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">click</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">switch</span> s &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Title&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Title &lt; y.Title<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Title, y.Title = y.Title, x.Title<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Artist&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Artist &lt; y.Artist<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Artist, y.Artist = y.Artist, x.Artist<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Album&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Album &lt; y.Album<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Album, y.Album = y.Album, x.Album<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Year&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Year &lt; y.Year<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Year, y.Year = y.Year, x.Year<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Length&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Length &lt; y.Length<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Length, y.Length = y.Length, x.Length<br>&#125;,<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>click(<span class="hljs-string">&quot;Title&quot;</span>)<br>printTracks(tracks)<br><br>click(<span class="hljs-string">&quot;Artist&quot;</span>)<br>printTracks(tracks)<br><br>click(<span class="hljs-string">&quot;Album&quot;</span>)<br>printTracks(tracks)<br><br>click(<span class="hljs-string">&quot;Year&quot;</span>)<br>printTracks(tracks)<br><br>click(<span class="hljs-string">&quot;Length&quot;</span>)<br>printTracks(tracks)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.9：</strong> 使用html&#x2F;template包 (§4.6) 替代printTracks将tracks展示成一个HTML表格。将这个解决方案用在前一个练习中，让每次点击一个列的头部产生一个HTTP请求来排序这个表格。<br>解：<br>index.html</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Track&lt;/title&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;icon&quot;</span> href=<span class="hljs-string">&quot;data:;&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;table&gt;<br>    &lt;tr style=<span class="hljs-string">&quot;text-align: left&quot;</span>&gt;<br>        &lt;th&gt;&lt;a href=<span class="hljs-string">&quot;/title&quot;</span>&gt;Title&lt;/a&gt;&lt;/th&gt;<br>        &lt;th&gt;&lt;a href=<span class="hljs-string">&quot;/artist&quot;</span>&gt;Artist&lt;/a&gt;&lt;/th&gt;<br>        &lt;th&gt;&lt;a href=<span class="hljs-string">&quot;/album&quot;</span>&gt;Album&lt;/a&gt;&lt;/th&gt;<br>        &lt;th&gt;&lt;a href=<span class="hljs-string">&quot;/year&quot;</span>&gt;Year&lt;/a&gt;&lt;/th&gt;<br>        &lt;th&gt;&lt;a href=<span class="hljs-string">&quot;/length&quot;</span>&gt;Length&lt;/a&gt;&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123;<span class="hljs-keyword">range</span> .&#125;&#125;<br>    &lt;tr&gt;<br>        &lt;td&gt;&#123;&#123;.Title&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.Artist&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.Album&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.Year&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.Length&#125;&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123;end&#125;&#125;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, index)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:8888&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">switch</span> r.URL.Path &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/title&quot;</span>:<br>click(<span class="hljs-string">&quot;Title&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/artist&quot;</span>:<br>click(<span class="hljs-string">&quot;Artist&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/album&quot;</span>:<br>click(<span class="hljs-string">&quot;Album&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/year&quot;</span>:<br>click(<span class="hljs-string">&quot;Year&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/length&quot;</span>:<br>click(<span class="hljs-string">&quot;Length&quot;</span>)<br>&#125;<br><br>tmpl := template.Must(template.ParseFiles(<span class="hljs-string">&quot;./ex/ex7/ex7.9/index.html&quot;</span>))<br><span class="hljs-keyword">if</span> err := tmpl.Execute(w, &amp;tracks); err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">click</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">switch</span> s &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Title&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Title &lt; y.Title<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Title, y.Title = y.Title, x.Title<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Artist&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Artist &lt; y.Artist<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Artist, y.Artist = y.Artist, x.Artist<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Album&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Album &lt; y.Album<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Album, y.Album = y.Album, x.Album<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Year&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Year &lt; y.Year<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Year, y.Year = y.Year, x.Year<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Length&quot;</span>:<br>sort.Stable(CustomSort&#123;<br>t: tracks,<br>less: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> x.Length &lt; y.Length<br>&#125;,<br>swap: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> &#123;<br>x.Length, y.Length = y.Length, x.Length<br>&#125;,<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Track <span class="hljs-keyword">struct</span> &#123;<br>Title  <span class="hljs-type">string</span><br>Artist <span class="hljs-type">string</span><br>Album  <span class="hljs-type">string</span><br>Year   <span class="hljs-type">int</span><br>Length time.Duration<br>&#125;<br><br><span class="hljs-keyword">var</span> tracks = []*Track&#123;<br>&#123;<span class="hljs-string">&quot;Go&quot;</span>, <span class="hljs-string">&quot;Delilah&quot;</span>, <span class="hljs-string">&quot;From the Roots Up&quot;</span>, <span class="hljs-number">2012</span>, length(<span class="hljs-string">&quot;3m38s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Go&quot;</span>, <span class="hljs-string">&quot;Moby&quot;</span>, <span class="hljs-string">&quot;Moby&quot;</span>, <span class="hljs-number">1992</span>, length(<span class="hljs-string">&quot;3m37s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Go Ahead&quot;</span>, <span class="hljs-string">&quot;Alicia Keys&quot;</span>, <span class="hljs-string">&quot;As I Am&quot;</span>, <span class="hljs-number">2007</span>, length(<span class="hljs-string">&quot;4m36s&quot;</span>)&#125;,<br>&#123;<span class="hljs-string">&quot;Ready 2 Go&quot;</span>, <span class="hljs-string">&quot;Martin Solveig&quot;</span>, <span class="hljs-string">&quot;Smash&quot;</span>, <span class="hljs-number">2011</span>, length(<span class="hljs-string">&quot;4m24s&quot;</span>)&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">length</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> time.Duration &#123;<br>duration, err := time.ParseDuration(s)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(s)<br>&#125;<br><span class="hljs-keyword">return</span> duration<br>&#125;<br><br><span class="hljs-keyword">type</span> CustomSort <span class="hljs-keyword">struct</span> &#123;<br>t    []*Track<br>less <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span> <span class="hljs-type">bool</span><br>swap <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y *Track)</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CustomSort)</span></span> Len() <span class="hljs-type">int</span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(c.t) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CustomSort)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> c.less(c.t[i], c.t[j]) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c CustomSort)</span></span> Swap(i, j <span class="hljs-type">int</span>)      &#123; c.swap(c.t[i], c.t[j]) &#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.10：</strong> sort.Interface类型也可以适用在其它地方。编写一个IsPalindrome(s sort.Interface) bool函数表明序列s是否是回文序列，换句话说反向排序不会改变这个序列。假设如果!s.Less(i, j) &amp;&amp; !s.Less(j, i)则索引i和j上的元素相等。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> str []<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s str)</span></span> Len() <span class="hljs-type">int</span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s str)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> s[i] &lt; s[j] &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s str)</span></span> Swap(i, j <span class="hljs-type">int</span>)      &#123; s[i], s[j] = s[j], s[i] &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsPalindrome</span><span class="hljs-params">(s sort.Interface)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> i, j := <span class="hljs-number">0</span>, s.Len()<span class="hljs-number">-1</span>; i &lt;= j; i, j = i+<span class="hljs-number">1</span>, j<span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">if</span> s.Less(i, j) || s.Less(j, i) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := <span class="hljs-string">&quot;abccba&quot;</span><br>fmt.Println(IsPalindrome(str(s)))<br>s1 := <span class="hljs-string">&quot;abccbad&quot;</span><br>fmt.Println(IsPalindrome(str(s1)))<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.5 接口值</title>
      <link href="/posts/b8be0b651295/"/>
      <url>/posts/b8be0b651295/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>接口值由两部分组成，具体类型和类型的值，也称为动态类型和动态值。<br>如下例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w io.Writer<br>w = os.Stdout<br>w = <span class="hljs-built_in">new</span>(bytes.Buffer)<br>w = <span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><p>4个语句中，变量w得到了3个不同的值。<br>在Go语言中，变量在声明中会被初始化为其类型的零值。<br>对于接口类型，同样会被初始化为零值，一个接口的零值指的是接口的类型和值都是nil。<br>一个接口值基于它的动态类型被描述为空或非空，所以这是一个空的接口值。<br>同样的，可以使用<code>w==nil</code>和<code>w!=nil</code>判断接口值是否为空。<br>需要注意的是，调用空接口值的任何方法都会导致Panic。</p><p>在上述的例子中，第二条语句<code>w = os.Stdout</code>的赋值过程，具体类型隐式转换到接口类型，和显式转换<code>w = io.Writer(os.Stdout)</code>是等价的。<br>无论隐式转换和显式转换，接口的动态类型为具体类型的指针类型<code>*os.File</code>，动态值为<code>os.Stdout</code>的拷贝。</p><p><img src="/posts/b8be0b651295/1688959129573.png"><br>上图是<code>w = os.Stdout</code>的内存解析图，可知接口类型的变量w，具体类型为<code>os.Stdout</code>的类型<code>*os.File</code>，值为stdout的输出值。</p><p>调用方法，如下面的例子，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>)) <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><p>接口类型的变量w调用<code>*os.File</code>的方法<code>Write</code>，即<code>(*os.File).Write</code>方法被调用，并输出hello。</p><p>在编译过程中，编译器并不知道接口值的动态类型是什么，所以在接口的调用必然是动态分配，而不是直接调用。所以编译器必须把代码生成在类型描述符的方法Write上，然后间接调用那个地址。<br>调用的接收者是一个接口动态值的拷贝，os.Stdout。效果和下面这个直接调用一样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">os.Stdout.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>)) <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><p>第三个语句<code>w = new(bytes.Buffer)</code>，给接口值赋值了<code>*bytes.Buffer</code>类型的值。<br>解析图如下，<br><img src="/posts/b8be0b651295/1688960089162.png"></p><p>接口值的动态类型为<code>*bytes.Buffer</code>，动态值为一个指向新分配的缓冲区的指针。<br><code>w.Write([]byte(&quot;hello&quot;))</code>方法调用与第二条语句一样的机制。<br>这次类型描述符是<code>*bytes.Buffer</code>，所以调用了<code>(*bytes.Buffer).Write</code>方法，并且接收者是该缓冲区的地址。这个调用把字符串“hello”添加到缓冲区中。</p><p>最后，第四个语句<code>w = nil</code>是把nil赋值给了接口值。<br>它把接口值所有部分重置为nil，如下图，<br><img src="/posts/b8be0b651295/1688960372400.png"></p><h1 id="任意大的接口值"><a href="#任意大的接口值" class="headerlink" title="任意大的接口值"></a>任意大的接口值</h1><p><code>一个接口值可以持有任意大的动态值。</code><br>如<code>time.Time</code>类型，有几个不公开的字段，如下，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125; = time.Now()<br></code></pre></td></tr></table></figure><p>从概念上讲，不论接口值多大，动态值总是可以容下它。（这只是一个概念上的模型；具体的实现可能会非常不同）下图仅是相似：<br><img src="/posts/b8be0b651295/1688961015374.png"></p><h1 id="接口值的比较"><a href="#接口值的比较" class="headerlink" title="接口值的比较"></a>接口值的比较</h1><p>接口值可以使用<code>==</code>和<code>!=</code>来进行比较。<br>两个接口值相同的条件：</p><ul><li>都为nil值。</li><li>动态类型相同且动态值也能使用<code>==</code>匹配。</li></ul><p>如果动态类型相同，但动态类型不能进行比较，如<code>slice</code>，将它们进行比较式，会产生panic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125; = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>fmt.Println(x == x) <span class="hljs-comment">// panic: runtime error: comparing uncomparable type []int</span><br></code></pre></td></tr></table></figure><p>可比较类型有<code>基本类型和指针</code>，不可比较类型<code>slice</code>，<code>map</code>和<code>函数</code>。<br>但在比较接口值包含聚合类型时，必须要考虑可能会出现的异常。同样的，当接口值当做map的键或者switch的操作数时，要考虑到动态值的是否可以比较。</p><h1 id="获取接口值的类型"><a href="#获取接口值的类型" class="headerlink" title="获取接口值的类型"></a>获取接口值的类型</h1><p>在fmt包内，我们可以使用<code>%T</code>的输出格式符用于输出接口值的类型，便于处理错误和调试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w io.Writer<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, w) <span class="hljs-comment">// &lt;nil&gt;</span><br>w = os.Stdout<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, w) <span class="hljs-comment">// *os.File</span><br>w = <span class="hljs-built_in">new</span>(bytes.Buffer)<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, w) <span class="hljs-comment">// *bytes.Buffer</span><br></code></pre></td></tr></table></figure><h1 id="7-5-1-警告：一个包含nil指针的接口不是nil接口"><a href="#7-5-1-警告：一个包含nil指针的接口不是nil接口" class="headerlink" title="7.5.1.  警告：一个包含nil指针的接口不是nil接口"></a>7.5.1.  警告：一个包含nil指针的接口不是nil接口</h1><p>一个不包含任何值的nil接口值和一个刚好包含nil指针的接口值是不同的。<br>下面例子，可以很好说明两者的区别。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> debug = <span class="hljs-literal">true</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> buf *bytes.Buffer<br><span class="hljs-keyword">if</span> debug &#123;<br>buf = <span class="hljs-built_in">new</span>(bytes.Buffer)<br>&#125;<br>f(buf)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(out io.Writer)</span></span> &#123;<br><span class="hljs-keyword">if</span> out != <span class="hljs-literal">nil</span> &#123;<br>out.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;done!\n&quot;</span>)) <span class="hljs-comment">// if debug = false, panic: runtime error: invalid memory address or nil pointer dereference</span><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>声明buf指针变量，即空指针，当debug为true时，<code>new(bytes.Buffer)</code>创建了空间， buf又指向了该空间。<br>随后当调用f函数，将buf变量赋予给out接口值，out的动态类型为<code>*bytes.Buffer</code>，动态值为new创建的变量，最后是调用了<code>bytes.Buffer</code>的write方法。<br>而当debug为false时，buf未被重新赋值，仍是空指针，调用f函数时，out参数被赋值为<code>*bytes.Buffer</code>的空指针，即out的动态值为nil，动态类型为<code>*bytes.Buffer</code>，也就是说out是包含空指针值的非空接口，如下图，<br><img src="/posts/b8be0b651295/1688978957852.png"><br>动态分配机制使得out仍然会调用<code>(*bytes.Buffer)Write</code>方法，但是接收者为nil，对于<code>*os.File</code>类型，nil依然是有效的接收者，显然<code>*bytes.Buffer</code>类型不是。方法被调用后，尝试获取缓冲区的内容导致异常。</p><p>虽然nil的<code>*bytes.Buffer</code>指针可以实现<code>io.Write</code>接口的方法，但是却不满足具体方法<code>(*bytes.Buffer).Write</code>接收者不能为nil的先决条件。<br>将<code>*bytes.Buffer</code>改成<code>io.Writer</code>类型即可，避免将不完全的值赋值给<code>io.Writer</code>这个接口即可解决这个问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> debug = <span class="hljs-literal">false</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//var buf *bytes.Buffer</span><br><span class="hljs-keyword">var</span> buf io.Writer<br><span class="hljs-keyword">if</span> debug &#123;<br>buf = <span class="hljs-built_in">new</span>(bytes.Buffer)<br>&#125;<br>f(buf)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(out io.Writer)</span></span> &#123;<br><span class="hljs-keyword">if</span> out != <span class="hljs-literal">nil</span> &#123;<br>out.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;done!\n&quot;</span>)) <span class="hljs-comment">// if debug = false, panic: runtime error: invalid memory address or nil pointer dereference</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.4 flag.Value接口</title>
      <link href="/posts/146b263d555d/"/>
      <url>/posts/146b263d555d/</url>
      
        <content type="html"><![CDATA[<p>使用<code>flag.Value</code>接口，可以定义新的命令行符号。<br>下面是休眠特定时间的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> period = flag.Duration(<span class="hljs-string">&quot;period&quot;</span>, <span class="hljs-number">1</span>*time.Second, <span class="hljs-string">&quot;sleep period&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>fmt.Printf(<span class="hljs-string">&quot;Sleeping for %v...&quot;</span>, *period)<br>time.Sleep(*period)<br>fmt.Println()<br>&#125;<br></code></pre></td></tr></table></figure><p>在休眠前，打印出休眠的时长。<br>fmt包调用time.Duration的String方法打印这个时间周期是以用户友好的注解方式，而不是一个纳秒数字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> build /sleep/main.<span class="hljs-keyword">go</span><br>$ ./main<br>Sleeping <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>s...<br></code></pre></td></tr></table></figure><p>flag.Duration函数创建一个time.Duration类型的标记变量并且允许用户通过多种用户友好的方式来设置这个变量的大小，这种方式还包括和String方法相同的符号排版形式。这种对称设计使得用户交互良好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./sleep -period 50ms</span><br>Sleeping for 50ms...<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./sleep -period 2m30s</span><br>Sleeping for 2m30s...<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./sleep -period 1.5h</span><br>Sleeping for 1h30m0s...<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./sleep -period <span class="hljs-string">&quot;1 day&quot;</span></span><br>invalid value &quot;1 day&quot; for flag -period: time: invalid duration 1 day<br></code></pre></td></tr></table></figure><p>定义新的命令行标记符号，只需要实现<code>flag.Value</code>接口即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Value <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-type">string</span><br>Set(<span class="hljs-type">string</span>) <span class="hljs-type">error</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>String</code>方法是格式化<code>flag.Value</code>，使得每个<code>flag.Value</code>都是一个<code>fmt.Stringer</code>。<br><code>Set</code>方法解析字符串参数并且更新<code>flag.Value</code>的值。</p><p>定义一个允许通过摄氏度或者华氏温度变换的形式指定温度的celsiusFlag类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> tempconv<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Celsius <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Fahrenheit <span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CToF</span><span class="hljs-params">(c Celsius)</span></span> Fahrenheit &#123;<br><span class="hljs-keyword">return</span> Fahrenheit(c*<span class="hljs-number">9.0</span>/<span class="hljs-number">5.0</span> + <span class="hljs-number">32.0</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FToC</span><span class="hljs-params">(f Fahrenheit)</span></span> Celsius &#123;<br><span class="hljs-keyword">return</span> Celsius((f - <span class="hljs-number">32.0</span>) * <span class="hljs-number">5.0</span> / <span class="hljs-number">9.0</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Celsius)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g°C&quot;</span>, c)<br>&#125;<br><br><span class="hljs-keyword">type</span> celsiusFlag <span class="hljs-keyword">struct</span> &#123;<br>Celsius<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *celsiusFlag)</span></span> Set(s <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-type">uint</span> <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> value <span class="hljs-type">float64</span><br>fmt.Sscanf(s, <span class="hljs-string">&quot;%f%s&quot;</span>, &amp;value, &amp;<span class="hljs-type">uint</span>)<br><span class="hljs-keyword">switch</span> <span class="hljs-type">uint</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;°C&quot;</span>:<br>f.Celsius = Celsius(value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;°F&quot;</span>:<br>f.Celsius = FToC(Fahrenheit(value))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;invalid temperature %q&quot;</span>, s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CelsiusFlag</span><span class="hljs-params">(name <span class="hljs-type">string</span>, value Celsius, usage <span class="hljs-type">string</span>)</span></span> *Celsius &#123;<br>f := celsiusFlag&#123;value&#125;<br>flag.CommandLine.Var(&amp;f, name, usage)<br><span class="hljs-keyword">return</span> &amp;f.Celsius<br>&#125;<br></code></pre></td></tr></table></figure><p>Celsius类型实现了String方法，celsiusFlag实现了Set方法。<br>flag.CommandLine.Var调用Var方法将一个celsiusFlag参数赋值给一个flag.Value参数,导致编译器去检查celsiusFlag是否有必须的方法。</p><p>下面是使用新命令行的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch7/tempconv&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> temp = tempconv.CelsiusFlag(<span class="hljs-string">&quot;temp&quot;</span>, <span class="hljs-number">20.0</span>, <span class="hljs-string">&quot;the temperature&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>fmt.Println(*temp)<br>&#125;<br></code></pre></td></tr></table></figure><p>上方例子中，可根据输入的温度转换为摄氏度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build tempflag.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./tempflag</span><br>20°C<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./tempflag -temp -18C</span><br>-18°C<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./tempflag -temp 212°F</span><br>100°C<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.6：</strong> 对tempFlag加入支持开尔文温度。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> tempconv<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Celsius <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Fahrenheit <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Kelvin <span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CToF</span><span class="hljs-params">(c Celsius)</span></span> Fahrenheit &#123;<br><span class="hljs-keyword">return</span> Fahrenheit(c*<span class="hljs-number">9.0</span>/<span class="hljs-number">5.0</span> + <span class="hljs-number">32.0</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FToC</span><span class="hljs-params">(f Fahrenheit)</span></span> Celsius &#123;<br><span class="hljs-keyword">return</span> Celsius((f - <span class="hljs-number">32.0</span>) * <span class="hljs-number">5.0</span> / <span class="hljs-number">9.0</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CToK</span><span class="hljs-params">(c Celsius)</span></span> Kelvin &#123;<br><span class="hljs-keyword">return</span> Kelvin(c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">KToC</span><span class="hljs-params">(k Kelvin)</span></span> Celsius &#123;<br><span class="hljs-keyword">return</span> Celsius(k)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Celsius)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g°C&quot;</span>, c)<br>&#125;<br><br><span class="hljs-keyword">type</span> celsiusFlag <span class="hljs-keyword">struct</span> &#123;<br>Celsius<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f celsiusFlag)</span></span> Set(s <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-type">uint</span> <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> value <span class="hljs-type">float64</span><br>fmt.Sscanf(s, <span class="hljs-string">&quot;%s%g&quot;</span>, &amp;<span class="hljs-type">uint</span>, &amp;value)<br><span class="hljs-keyword">switch</span> <span class="hljs-type">uint</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;°C&quot;</span>:<br>f.Celsius = Celsius(value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;°F&quot;</span>:<br>f.Celsius = FToC(Fahrenheit(value))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;K&quot;</span>:<br>f.Celsius = KToC(Kelvin(value))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;invaild temperature %q&quot;</span>, s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CelsiusFlag</span><span class="hljs-params">(name <span class="hljs-type">string</span>, value Celsius, usage <span class="hljs-type">string</span>)</span></span> *Celsius &#123;<br>f := celsiusFlag&#123;value&#125;<br>flag.CommandLine.Var(&amp;f, name, usage)<br><span class="hljs-keyword">return</span> &amp;f.Celsius<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 7.7：</strong> 解释为什么帮助信息在它的默认值是20.0没有包含°C的情况下输出了°C。<br>解：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">因为默认值类型为*Celsius, 而Celsius类型实现了String()方法，<br>所以在fmt.Println(*temp)时，按照String()方法格式化输出了20°C。<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.3 实现接口的条件</title>
      <link href="/posts/001ff23c523b/"/>
      <url>/posts/001ff23c523b/</url>
      
        <content type="html"><![CDATA[<h1 id="实现接口的规则"><a href="#实现接口的规则" class="headerlink" title="实现接口的规则"></a>实现接口的规则</h1><p>一个类型如果拥有一个接口需要的所有方法，那么这个类型就实现了这个接口。<br>如果一个类型属于某个接口，只要这个类型实现这个接口。<br>如果某类型能够赋值或new对象赋值给接口类型，那么说明该类型实现了接口的所有方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w io.Writer<br>w = os.Stdout         <span class="hljs-comment">// *File 实现了Write方法</span><br>w = <span class="hljs-built_in">new</span>(bytes.Buffer) <span class="hljs-comment">// *bytes.Buffer 实现了Write方法</span><br><span class="hljs-comment">//w = time.Second       // 编译错误，time.Duration 没有实现Write方法</span><br>fmt.Println(w)<br><br><span class="hljs-keyword">var</span> rwc io.ReadWriteCloser<br>rwc = os.Stdout <span class="hljs-comment">// *File实现了Read,Write,Close方法</span><br><span class="hljs-comment">//rwc = new(bytes.Buffer) // 编译错误， *bytes.Buffer没有实现Close方法</span><br>fmt.Println(rwc)<br></code></pre></td></tr></table></figure><p>这个规则也可以适用于两个接口类。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">w = rwc <span class="hljs-comment">// rwc实现了w接口的方法</span><br>rwc = w <span class="hljs-comment">// 编译错误，w未实现rwc接口的所有方法</span><br></code></pre></td></tr></table></figure><h1 id="类型的指针与类型实现接口"><a href="#类型的指针与类型实现接口" class="headerlink" title="类型的指针与类型实现接口"></a>类型的指针与类型实现接口</h1><p>类型T的方法的接收器可以是类型<code>T</code>本身，也可以<code>*T</code>指针类型。<br>类型T的变量调用T类型的方法是合法。<br>T类型的值不拥有所有<code>*T</code>指针的方法，那这样T类型就可能只实现更少的接口。<br>对于<code>*T</code>指针实现接口，在T类型变量调用时，编译器可以隐式获取地址，即在变量前加上<code>&amp;</code>。<br>如下例子，IntSet类型的String方法的接收者是一个指针类型，所以我们不能在一个不能寻址的IntSet值上调用这个方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*IntSet)</span></span> String() <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> _ = IntSet&#123;&#125;.String() <span class="hljs-comment">// compile error: String requires *IntSet receiver</span><br></code></pre></td></tr></table></figure><p>但是可以在IntSet值上调用该方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s IntSet<br><span class="hljs-keyword">var</span> _ = s.String() <span class="hljs-comment">// OK: s is a variable and &amp;s has a String method</span><br></code></pre></td></tr></table></figure><p>然而，只有<code>*IntSet</code>拥有<code>String() string</code>方法，所以也有<code>*IntSet</code>类型实现了<code>fmt.Stringer</code>接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> _ fmt.Stringer = &amp;s <span class="hljs-comment">// OK</span><br><span class="hljs-keyword">var</span> _ fmt.Stringer = s  <span class="hljs-comment">// compile error: IntSet lacks String method</span><br></code></pre></td></tr></table></figure><h1 id="空接口类型"><a href="#空接口类型" class="headerlink" title="空接口类型"></a>空接口类型</h1><p><code>interface&#123;&#125;</code>为空接口类型，对类型没有要求，其变量则可以被任意类型的值赋值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> any <span class="hljs-keyword">interface</span>&#123;&#125;<br>any = <span class="hljs-literal">true</span><br>any = <span class="hljs-number">12.34</span><br>any = <span class="hljs-string">&quot;hello&quot;</span><br>any = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>: <span class="hljs-number">1</span>&#125;<br>any = <span class="hljs-built_in">new</span>(bytes.Buffer)<br></code></pre></td></tr></table></figure><p>由于空类型拥有任意类型，但不能对空类型持有的值进行直接操作，因为空类型没有任何方法。</p><h1 id="nil实现接口"><a href="#nil实现接口" class="headerlink" title="nil实现接口"></a>nil实现接口</h1><p>因为接口实现只依赖于判断的两个类型的方法，所以没有必要定义一个具体类型和它实现的接口之间的关系。<br>下面的定义在编译期断言一个<code>*bytes.Buffer</code>的值实现了io.Writer接口类型:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// *bytes.Buffer must satisfy io.Writer</span><br><span class="hljs-keyword">var</span> w io.Writer = <span class="hljs-built_in">new</span>(bytes.Buffer)<br></code></pre></td></tr></table></figure><p>任意bytes.Buffer的值，甚至包括nil通过(bytes.Buffer)(nil)进行显示的转换都实现了这个接口。<br>即：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// *bytes.Buffer must satisfy io.Writer</span><br><span class="hljs-keyword">var</span> _ io.Writer = (*bytes.Buffer)(<span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.2. 接口类型</title>
      <link href="/posts/55bc49f4b7cc/"/>
      <url>/posts/55bc49f4b7cc/</url>
      
        <content type="html"><![CDATA[<p>接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的实例。</p><h1 id="单方法接口命名"><a href="#单方法接口命名" class="headerlink" title="单方法接口命名"></a>单方法接口命名</h1><p>在Go语言中，单方法接口的命名习惯是很常见的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> io<br><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br>    Read(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br>&#125;<br><span class="hljs-keyword">type</span> Closer <span class="hljs-keyword">interface</span> &#123;<br>    Close() <span class="hljs-type">error</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="接口内嵌"><a href="#接口内嵌" class="headerlink" title="接口内嵌"></a>接口内嵌</h1><p>和结构内嵌相似，我们可以用这种方式以一个简写命名另一个接口，而不用声明它所有的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;<br>    Reader<br>    Writer<br>&#125;<br><span class="hljs-keyword">type</span> ReadWriteCloser <span class="hljs-keyword">interface</span> &#123;<br>    Reader<br>    Writer<br>    Closer<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="混合接口命名"><a href="#混合接口命名" class="headerlink" title="混合接口命名"></a>混合接口命名</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;<br>    Read(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br>    Writer<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述三种方法，都是一样的效果。方法的顺序变化不影响，主要是接口那的方法。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.4：</strong> strings.NewReader函数通过读取一个string参数返回一个满足io.Reader接口类型的值（和其它值）。实现一个简单版本的NewReader，并用它来构造一个接收字符串输入的HTML解析器（§5.2）<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>_, err := html.Parse(NewReader(<span class="hljs-string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>))<br><span class="hljs-keyword">for</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;html parse err: %v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> StringReader <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StringReader)</span></span> Read(p []<span class="hljs-type">byte</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-built_in">copy</span>(p, *s)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*s), io.EOF<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewReader</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> io.Reader &#123;<br>sr := StringReader(s)<br><span class="hljs-keyword">return</span> &amp;sr<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 7.5：</strong> io包里面的LimitReader函数接收一个io.Reader接口类型的r和字节数n，并且返回另一个从r中读取字节但是当读完n个字节后就表示读到文件结束的Reader。实现这个LimitReader函数：</p><blockquote><p>func LimitReader(r io.Reader, n int64) io.Reader</p></blockquote><p>解:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lr := LimitReader(strings.NewReader(<span class="hljs-string">&quot;12345&quot;</span>), <span class="hljs-number">1</span>)<br>b, err := io.ReadAll(lr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;err: %v&quot;</span>, err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, b)<br>&#125;<br><br><span class="hljs-keyword">type</span> LimitedReader <span class="hljs-keyword">struct</span> &#123;<br>underlyingReader io.Reader<br>remainBytes      <span class="hljs-type">int64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *LimitedReader)</span></span> Read(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> r.remainBytes &lt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, io.EOF<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-type">int64</span>(<span class="hljs-built_in">len</span>(p)) &gt; r.remainBytes &#123;<br>p = p[:r.remainBytes]<br>&#125;<br>n, err = r.underlyingReader.Read(p)<br>r.remainBytes -= <span class="hljs-type">int64</span>(n)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LimitReader</span><span class="hljs-params">(r io.Reader, n <span class="hljs-type">int64</span>)</span></span> io.Reader &#123;<br><span class="hljs-keyword">return</span> &amp;LimitedReader&#123;r, n&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.1. 接口约定</title>
      <link href="/posts/8e657f0750ec/"/>
      <url>/posts/8e657f0750ec/</url>
      
        <content type="html"><![CDATA[<p>接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会展示出它们自己的方法。</p><p>下面<code>*ByteCounter</code>类型里的Write方法，仅仅在丢失写向它的字节前统计它们的长度。(在这个+&#x3D;赋值语句中，让<code>len(p)</code>的类型和<code>*c</code>的类型匹配的转换是必须的。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Bytecounter demonstrates an implementation of io.Writer that counts bytes.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> ByteCounter <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *ByteCounter)</span></span> Write(p []<span class="hljs-type">byte</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>*c += ByteCounter(<span class="hljs-built_in">len</span>(p))<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> c ByteCounter<br>c.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>))<br>fmt.Println(c) <span class="hljs-comment">// 5</span><br><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Dolly&quot;</span><br>fmt.Fprintf(&amp;c, <span class="hljs-string">&quot;hello, %s&quot;</span>, name)<br>fmt.Println(c) <span class="hljs-comment">// 12</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为<code>*ByteCounter</code>满足<code>io.Writer</code>的约定，我们可以把它传入Fprintf函数中；Fprintf函数执行字符串格式化的过程不会去关注ByteCounter正确的累加结果的长度。<br>除了<code>io.Writer</code>这个接口，还有<code>fmt.Stringer</code>。如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>只要类型实现了该接口，则在fmt下既可以输出实现的返回值。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 7.1：</strong> 使用来自ByteCounter的思路，实现一个针对对单词和行数的计数器。你会发现bufio.ScanWords非常的有用。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := <span class="hljs-string">&quot;Hello, World!\nHello, 世界！&quot;</span><br><br><span class="hljs-keyword">var</span> wc WordCounter<br>fmt.Fprintf(&amp;wc, s)<br>fmt.Println(wc)<br><br><span class="hljs-keyword">var</span> lc LineCounter<br>fmt.Fprintf(&amp;lc, s)<br>fmt.Println(lc)<br>&#125;<br><br><span class="hljs-keyword">type</span> WordCounter <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *WordCounter)</span></span> Write(p []<span class="hljs-type">byte</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>scanner := bufio.NewScanner(bytes.NewReader(p))<br>scanner.Split(bufio.ScanWords)<br><span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>*c++<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> LineCounter <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LineCounter)</span></span> Write(p []<span class="hljs-type">byte</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>scanner := bufio.NewScanner(bytes.NewReader(p))<br>scanner.Split(bufio.ScanLines)<br><span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>*c++<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p), <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 7.2：</strong> 写一个带有如下函数签名的函数CountingWriter，传入一个io.Writer接口类型，返回一个新的Writer类型把原来的Writer封装在里面和一个表示写入新的Writer字节数的int64类型指针</p><blockquote><p>func CountingWriter(w io.Writer) (io.Writer, *int64)</p></blockquote><p>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>w, c := CountingWriter(io.Discard)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Hello, World!\n&quot;</span>)<br>fmt.Println(*c)<br>&#125;<br><br><span class="hljs-keyword">type</span> ByteCounter <span class="hljs-keyword">struct</span> &#123;<br>w       io.Writer<br>written <span class="hljs-type">int64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *ByteCounter)</span></span> Write(p []<span class="hljs-type">byte</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>n, err := c.w.Write(p)<br>c.written += <span class="hljs-type">int64</span>(n)<br><span class="hljs-keyword">return</span> n, err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CountingWriter</span><span class="hljs-params">(w io.Writer)</span></span> (io.Writer, *<span class="hljs-type">int64</span>) &#123;<br>c := ByteCounter&#123;w, <span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">return</span> &amp;c, &amp;c.written<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 7.3：</strong> 为在<code>gopl.io/ch4/treesort (§4.4)</code>的<code>*tree</code>类型实现一个String方法去展示tree类型的值序列。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> treesort<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;strconv&quot;</span><br><br><span class="hljs-keyword">type</span> tree <span class="hljs-keyword">struct</span> &#123;<br>value       <span class="hljs-type">int</span><br>left, right *tree<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sort</span><span class="hljs-params">(values []<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">var</span> root *tree<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>root = add(root, v)<br>&#125;<br>appendValues(values[:<span class="hljs-number">0</span>], root)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appendValues</span><span class="hljs-params">(values []<span class="hljs-type">int</span>, t *tree)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> t != <span class="hljs-literal">nil</span> &#123;<br>values = appendValues(values, t.left)<br>values = <span class="hljs-built_in">append</span>(values, t.value)<br>values = appendValues(values, t.right)<br>&#125;<br><span class="hljs-keyword">return</span> values<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(t *tree, value <span class="hljs-type">int</span>)</span></span> *tree &#123;<br><span class="hljs-keyword">if</span> t == <span class="hljs-literal">nil</span> &#123;<br>t = <span class="hljs-built_in">new</span>(tree)<br>t.value = value<br><span class="hljs-keyword">return</span> t<br>&#125;<br><span class="hljs-keyword">if</span> value &lt; t.value &#123;<br>t.left = add(t.left, value)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.right = add(t.right, value)<br>&#125;<br><span class="hljs-keyword">return</span> t<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *tree)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> t == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br>s += t.left.String()<br>s += strconv.Itoa(t.value)<br>s += t.right.String()<br><br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *tree)</span></span> Values() []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> vals []<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> t == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> vals<br>&#125;<br><br>vals = <span class="hljs-built_in">append</span>(vals, t.left.Values()...)<br>vals = <span class="hljs-built_in">append</span>(vals, t.value)<br>vals = <span class="hljs-built_in">append</span>(vals, t.right.Values()...)<br><br><span class="hljs-keyword">return</span> vals<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七章 接口</title>
      <link href="/posts/f2552a5080b3/"/>
      <url>/posts/f2552a5080b3/</url>
      
        <content type="html"><![CDATA[<p>接口类型是对其它类型行为的抽象和概括。<br>Go语言中接口类型的独特之处在于它是满足隐式实现的。也就是说，我们没有必要对于给定的具体类型定义所有满足的接口类型；简单地拥有一些必需的方法就足够了。</p><p><a href="/posts/8e657f0750ec/">7.1. 接口约定</a><br><a href="/posts/55bc49f4b7cc/">7.2. 接口类型</a><br><a href>7.3. 实现接口的条件</a><br><a href>7.4. flag.Value接口</a><br><a href>7.5. 接口值</a><br><a href="/posts/8d8e98ca9007/">7.6. sort.Interface接口</a><br><a href="/posts/fc3145dbfc40/">7.7. http.Handler接口</a><br><a href="/posts/21f47e2c8c53/">7.8. error接口</a><br><a href="/posts/d3aed5deb5f5/">7.9. 示例：表达式求值</a><br><a href="/posts/fcef06327bd8/">7.10. 类型断言</a><br><a href>7.11. 基于类型断言识别错误类型</a><br><a href>7.12. 通过类型断言查询接口</a><br><a href>7.13. 类型分支</a><br><a href>7.14. 示例：基于标志的XML解码</a><br><a href>7.15. 补充几点</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.6. 封装</title>
      <link href="/posts/387bb90cfe97/"/>
      <url>/posts/387bb90cfe97/</url>
      
        <content type="html"><![CDATA[<p>一个对象的方法和字段对调用方不可见，定义为封装。<br>封装也叫信息隐藏。</p><p>Go语言只有一种方法来控制可见性：<code>大写首字母的标识符会从定义它们的包中被导出，小写字母的则不会。</code><br>一般情况下，Go语言内，封装一个对象，只有定义为struct类型。<br>如<code>IntSet</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint</span><br>&#125;<br></code></pre></td></tr></table></figure><p>words只能在包内访问，所以能很好地隐藏。</p><p>封装的三个优点：</p><ul><li>因为调用方不能直接修改对象的变量值，其只需要关注少量的语句并且只要弄懂少量变量的可能的值即可。</li><li>隐藏实现的细节，可以防止调用方依赖那些可能变化的具体实现，这样使设计包的程序员在不破坏对外的api情况下能得到更大的自由。</li><li>阻止了外部调用方对对象内部的值任意地进行修改。</li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.5. 示例：Bit数组</title>
      <link href="/posts/aaab166a7bb7/"/>
      <url>/posts/aaab166a7bb7/</url>
      
        <content type="html"><![CDATA[<p>下面的这个程序展示了一个简单的bit数组类型，并且实现了三个函数来对这个bit数组来进行操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package intset provides a set of integers based on a bit vector.</span><br><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// An IntSet is a set of small non-negative integers.</span><br><span class="hljs-comment">// Its zero value represents the empty set.</span><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-comment">// Has reports whether the set contains the non-negative value x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Add adds the non-negative value x to the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// UnionWith sets s to the union of s and t.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-type">uint</span>(j)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">64</span>*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br></code></pre></td></tr></table></figure><p>因为每一个字都有64个二进制位，所以为了定位x的bit位，我们用了x&#x2F;64的商作为字的下标，并且用x%64得到的值作为这个字内的bit的所在位置。UnionWith这个方法里用到了bit位的“或”逻辑操作符号|来一次完成64个元素的或计算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x, y IntSet<br>x.Add(<span class="hljs-number">1</span>)<br>x.Add(<span class="hljs-number">144</span>)<br>x.Add(<span class="hljs-number">9</span>)<br>fmt.Println(x.String()) <span class="hljs-comment">// &#123;1 9 144&#125;</span><br><br>y.Add(<span class="hljs-number">9</span>)<br>y.Add(<span class="hljs-number">42</span>)<br>fmt.Println(y.String()) <span class="hljs-comment">// &#123;9 42&#125;</span><br><br>x.UnionWith(&amp;y)<br>fmt.Println(x.String()) <span class="hljs-comment">// &#123;1 9 42 144&#125;</span><br><br>fmt.Println(x.Has(<span class="hljs-number">9</span>), x.Has(<span class="hljs-number">123</span>)) <span class="hljs-comment">// true false</span><br></code></pre></td></tr></table></figure><p>String方法定义在IntSet指针上，所以当我们的变量是IntSet类型而不是IntSet指针时，可能会有下面这样让人意外的情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x IntSet<br>x.Add(<span class="hljs-number">1</span>)<br>x.Add(<span class="hljs-number">144</span>)<br>x.Add(<span class="hljs-number">9</span>)<br>x.Add(<span class="hljs-number">42</span>)<br><br><span class="hljs-comment">//!+note</span><br>fmt.Println(&amp;x)         <span class="hljs-comment">// &#123;1 9 42 144&#125;</span><br>fmt.Println(x.String()) <span class="hljs-comment">// &#123;1 9 42 144&#125;</span><br>fmt.Println(x)          <span class="hljs-comment">// &#123;[4398046511618 0 65536]&#125;</span><br><span class="hljs-comment">//!-note</span><br></code></pre></td></tr></table></figure><p>第一个Println中，打印的是<code>*IntSet</code>指针，这个指针类型有自定义的String方法。<br>第二个Println中，直接调用的变量<code>x</code>的<code>String()</code>方法，这种情况下编译器会隐式地在x前插入&amp;操作符，相当于调用的是<code>*IntSet</code>指针的<code>String()</code>。<br>第三个Println中，因为变量x的类型<code>IntSet</code>没有<code>String()</code>的方法，所以Println会直接按原始的方式打印。<br>所以在这种情况下，将<code>String()</code>绑定到<code>IntSet</code>类型上更合适，而不是绑定在<code>*IntSet</code>指针上。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习6.1:</strong> 为bit数组实现下面这些方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*IntSet)</span></span> Len() <span class="hljs-type">int</span>      <span class="hljs-comment">// return the number of elements</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*IntSet)</span></span> Remove(x <span class="hljs-type">int</span>)  <span class="hljs-comment">// remove x from the set</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*IntSet)</span></span> Clear()        <span class="hljs-comment">// remove all elements from the set</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*IntSet)</span></span> Copy() *IntSet <span class="hljs-comment">// return a copy of the set</span><br></code></pre></td></tr></table></figure><p>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-comment">// Has reports whether the set contains the non-negative value x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Add adds the non-negative value x to the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words); i &lt;= word; i++ &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// UnionWith sets s to the union of s and t.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// String returns the set as a string of the form &quot;&#123;1 2 3&#125;&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-type">uint</span>(j)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">64</span>*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-comment">// Len return the number of elements.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Len() <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">for</span> mask := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); mask &lt; <span class="hljs-number">64</span>; mask++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;mask) != <span class="hljs-number">0</span> &#123;<br>count++<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br><br><span class="hljs-comment">// Remove x from the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Remove(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> word &gt; <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>s.words[word] &amp;^= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// Clear remove all element of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Clear() &#123;<br>s.words = <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// Copy return a copy of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Copy() *IntSet &#123;<br>c := &amp;IntSet&#123;&#125;<br>c.words = <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint64</span>, <span class="hljs-built_in">len</span>(s.words))<br><span class="hljs-built_in">copy</span>(c.words, s.words)<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 6.2：</strong> 定义一个变参方法<code>(*IntSet).AddAll(...int)</code>，这个方法可以为一组IntSet值求和，比如s.AddAll(1,2,3)。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-comment">// Has reports whether the set contains the non-negative value x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Add adds the non-negative value x to the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words); i &lt;= word; i++ &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// UnionWith sets s to the union of s and t.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// String returns the set as a string of the form &quot;&#123;1 2 3&#125;&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-type">uint</span>(j)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">64</span>*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-comment">// Len return the number of elements.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Len() <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">for</span> mask := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); mask &lt; <span class="hljs-number">64</span>; mask++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;mask) != <span class="hljs-number">0</span> &#123;<br>count++<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br><br><span class="hljs-comment">// Remove x from the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Remove(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> word &gt; <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>s.words[word] &amp;^= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// Clear remove all element of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Clear() &#123;<br>s.words = <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// Copy return a copy of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Copy() *IntSet &#123;<br>c := &amp;IntSet&#123;&#125;<br>c.words = <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint64</span>, <span class="hljs-built_in">len</span>(s.words))<br><span class="hljs-built_in">copy</span>(c.words, s.words)<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> AddAll(ints ...<span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> _, x := <span class="hljs-keyword">range</span> ints &#123;<br>s.Add(x)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 6.3：</strong> <code>(*IntSet).UnionWith</code>会用|操作符计算两个集合的并集，我们再为IntSet实现另外的几个函数IntersectWith(交集：元素在A集合B集合均出现),<code>DifferenceWith</code>(差集：元素出现在A集合，未出现在B集合),<code>SymmetricDifference</code>(并差集：元素出现在A但没有出现在B，或者出现在B没有出现在A)。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-comment">// Has reports whether the set contains the non-negative value x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Add adds the non-negative value x to the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words); i &lt;= word; i++ &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// UnionWith sets s to the union of s and t.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// String returns the set as a string of the form &quot;&#123;1 2 3&#125;&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-type">uint</span>(j)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">64</span>*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-comment">// Len return the number of elements.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Len() <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">for</span> mask := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); mask &lt; <span class="hljs-number">64</span>; mask++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;mask) != <span class="hljs-number">0</span> &#123;<br>count++<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br><br><span class="hljs-comment">// Remove x from the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Remove(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> word &gt; <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>s.words[word] &amp;^= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// Clear remove all element of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Clear() &#123;<br>s.words = <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// Copy return a copy of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Copy() *IntSet &#123;<br>c := &amp;IntSet&#123;&#125;<br>c.words = <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint64</span>, <span class="hljs-built_in">len</span>(s.words))<br><span class="hljs-built_in">copy</span>(c.words, s.words)<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> AddAll(ints ...<span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> _, x := <span class="hljs-keyword">range</span> ints &#123;<br>s.Add(x)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 交集</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> IntersectWith(t *IntSet) &#123;<br>minLen := <span class="hljs-built_in">len</span>(s.words)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(t.words) &lt; minLen &#123;<br>minLen = <span class="hljs-built_in">len</span>(t.words)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; minLen; i++ &#123;<br>s.words[i] &amp;= t.words[i]<br>&#125;<br><br><span class="hljs-comment">// 去零 -1标识默认值，如果未改变，表示没有0</span><br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := minLen - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 差集 s有t没有 按t清除</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> DifferenceWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(t.words) &#123;<br>s.words[i] &amp;^= t.words[i]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 如果存在交集的集合，即一样的数，位清空后为0，则需要清除为0的数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 并差集: s有t没有或者t有s没有</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> SymmetricDifference(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] ^= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 如果存在交集的集合，即一样的数，位清空后为0，则需要清除为0的数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习6.4：</strong> 实现一个Elems方法，返回集合中的所有元素，用于做一些range之类的遍历操作。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint64</span><br>&#125;<br><br><span class="hljs-comment">// Has reports whether the set contains the non-negative value x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Add adds the non-negative value x to the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words); i &lt;= word; i++ &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// UnionWith sets s to the union of s and t.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> UnionWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// String returns the set as a string of the form &quot;&#123;1 2 3&#125;&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-type">uint</span>(j)) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">64</span>*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br><span class="hljs-comment">// Len return the number of elements.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Len() <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">for</span> mask := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); mask &lt; <span class="hljs-number">64</span>; mask++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;mask) != <span class="hljs-number">0</span> &#123;<br>count++<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br><br><span class="hljs-comment">// Remove x from the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Remove(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/<span class="hljs-number">64</span>, <span class="hljs-type">uint</span>(x%<span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>s.words[word] &amp;^= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-comment">// Clear remove all element of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Clear() &#123;<br>s.words = <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// Copy return a copy of the set.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Copy() *IntSet &#123;<br>c := &amp;IntSet&#123;&#125;<br>c.words = <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint64</span>, <span class="hljs-built_in">len</span>(s.words))<br><span class="hljs-built_in">copy</span>(c.words, s.words)<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> AddAll(ints ...<span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">for</span> _, x := <span class="hljs-keyword">range</span> ints &#123;<br>s.Add(x)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 交集</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> IntersectWith(t *IntSet) &#123;<br>minLen := <span class="hljs-built_in">len</span>(s.words)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(t.words) &lt; minLen &#123;<br>minLen = <span class="hljs-built_in">len</span>(t.words)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; minLen; i++ &#123;<br>s.words[i] &amp;= t.words[i]<br>&#125;<br><br><span class="hljs-comment">// 去零 -1标识默认值，如果未改变，表示没有0</span><br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := minLen - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] == <span class="hljs-number">0</span> &#123;<br>l = i<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 差集 s有t没有 按t清除</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> DifferenceWith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(t.words) &#123;<br>s.words[i] &amp;^= t.words[i]<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 如果存在交集的集合，即一样的数，位清空后为0，则需要清除为0的数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 并差集: s有t没有或者t有s没有</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> SymmetricDifference(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] ^= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 如果存在交集的集合，即一样的数，位清空后为0，则需要清除为0的数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s.words) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> l = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s.words[i] != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>l = i<br>&#125;<br><br><span class="hljs-keyword">if</span> l != <span class="hljs-number">-1</span> &#123;<br>s.words = s.words[:l]<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Elems() []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> elems []<span class="hljs-type">int</span><br>x := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">for</span> mask := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); mask &lt; <span class="hljs-number">64</span>; mask++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;mask) != <span class="hljs-number">0</span> &#123;<br>elems = <span class="hljs-built_in">append</span>(elems, x)<br>x++<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> elems<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 6.5：</strong> 我们这章定义的IntSet里的每个字都是用的uint64类型，但是64位的数值可能在32位的平台上不高效。修改程序，使其使用uint类型，这种类型对于32位平台来说更合适。当然了，这里我们可以不用简单粗暴地除64，可以定义一个常量来决定是用32还是64，这里你可能会用到平台的自动判断的一个智能表达式：<code>32 &lt;&lt; (^uint(0) &gt;&gt; 63)</code>。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intset<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// 当uint为64位时，^uint(0)为64个1，右移63位变成1，32再左移1位就变成64</span><br><span class="hljs-comment">// 当uint为32位时，^uint(0)为32个1，右移63位变成0，32再左移0位就变成32</span><br><span class="hljs-keyword">const</span> uintSize = <span class="hljs-number">32</span> &lt;&lt; (^<span class="hljs-type">uint</span>(<span class="hljs-number">0</span>) &gt;&gt; <span class="hljs-number">63</span>)<br><br><span class="hljs-keyword">type</span> IntSet <span class="hljs-keyword">struct</span> &#123;<br>words []<span class="hljs-type">uint</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Has(x <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>word, bit := x/uintSize, x%uintSize<br><span class="hljs-keyword">return</span> word &lt; <span class="hljs-built_in">len</span>(s.words) &amp;&amp; s.words[word]&amp;(<span class="hljs-number">1</span>&lt;&lt;bit) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Add(x <span class="hljs-type">int</span>) &#123;<br>word, bit := x/uintSize, x%uintSize<br><span class="hljs-keyword">for</span> word &gt;= <span class="hljs-built_in">len</span>(s.words) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s.words); i &lt;= word; i++ &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, <span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br>s.words[word] |= <span class="hljs-number">1</span> &lt;&lt; bit<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> Unionwith(t *IntSet) &#123;<br><span class="hljs-keyword">for</span> i, tword := <span class="hljs-keyword">range</span> t.words &#123;<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(s.words) &#123;<br>s.words[i] |= tword<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.words = <span class="hljs-built_in">append</span>(s.words, tword)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *IntSet)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">for</span> i, word := <span class="hljs-keyword">range</span> s.words &#123;<br><span class="hljs-keyword">if</span> word == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; uintSize; j++ &#123;<br><span class="hljs-keyword">if</span> word&amp;(<span class="hljs-number">1</span>&lt;&lt;j) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> buf.Len() &gt; <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;&#123;&quot;</span>) &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, uintSize*i+j)<br>&#125;<br>&#125;<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.4. 方法值和方法表达式</title>
      <link href="/posts/4fa1929ae9d9/"/>
      <url>/posts/4fa1929ae9d9/</url>
      
        <content type="html"><![CDATA[<h1 id="方法值定义"><a href="#方法值定义" class="headerlink" title="方法值定义"></a>方法值定义</h1><p>通常情况下，调用一个方法，如<code>p.Distance()</code>，实际上可以分为两步来执行。<code>p.Distance</code>是方法选择器，返回一个方法值-&gt;一个将方法（Point.Distance）绑定到特定接收器变量的函数。<br>调用时，不再需要指定接收器，只要传入函数参数即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">p := Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>q := Point&#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;<br><br>distanceFromP := p.Distance   <span class="hljs-comment">// 方法值</span><br>fmt.Println(distanceFromP(q)) <span class="hljs-comment">// 5</span><br><span class="hljs-keyword">var</span> origin Point<br>fmt.Println(distanceFromP(origin)) <span class="hljs-comment">// 2.23606797749979 sqrt(5)</span><br><br>scaleP := p.ScaleBy<br>scaleP(<span class="hljs-number">2</span>)  <span class="hljs-comment">// &#123;2,4&#125;</span><br>scaleP(<span class="hljs-number">3</span>)  <span class="hljs-comment">// &#123;6,12&#125;</span><br>scaleP(<span class="hljs-number">10</span>) <span class="hljs-comment">// &#123;60,120&#125;</span><br></code></pre></td></tr></table></figure><h1 id="方法值当参数"><a href="#方法值当参数" class="headerlink" title="方法值当参数"></a>方法值当参数</h1><p>当一个函数或方法需要方法值当做参数时，使用方法值当做参数，则非常便利。<br>如下例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Rocket <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Rocket)</span></span> Launch() &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>r := <span class="hljs-built_in">new</span>(Rocket)<br>time.AfterFunc(<span class="hljs-number">10</span>*time.Second, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>r.Launch()<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用方法值传参则更加简明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">time.AfterFunc(<span class="hljs-number">10</span>*time.Second, r.Launch)<br></code></pre></td></tr></table></figure><p>即将匿名函数改成方法值。</p><h1 id="类型的方法值"><a href="#类型的方法值" class="headerlink" title="类型的方法值"></a>类型的方法值</h1><p>和方法”值”相关的还有方法表达式。当调用一个方法时，与调用一个普通的函数相比，我们必须要用选择器(p.Distance)语法来指定方法的接收器。<br>当T是一个类型时，方法表达式可能会写作<code>T.f</code>或者<code>(*T).f</code>，会返回一个函数”值”，这种函数会将其第一个参数用作接收器，所以可以用通常(译注：不写选择器)的方式来对其进行调用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">p := Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>q := Point&#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;<br>distance := Point.Distance   <span class="hljs-comment">// method expression</span><br>fmt.Println(distance(p, q))  <span class="hljs-comment">// 5</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, distance) <span class="hljs-comment">// func(main.Point, main.Point) float64</span><br><br>scale := (*Point).ScaleBy<br>scale(&amp;p, <span class="hljs-number">2</span>)<br>fmt.Println(p)            <span class="hljs-comment">// &#123;2 4&#125;</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, scale) <span class="hljs-comment">// func(*main.Point, float64)</span><br></code></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>根据一个变量来决定调用同一个类型的哪个函数时，方法表达式就显得很有用了。你可以根据选择来调用接收器各不相同的方法。下面的例子，变量op代表Point类型的addition或者subtraction方法，Path.TranslateBy方法会为其Path数组中的每一个Point来调用对应的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> point<br><br><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Point)</span></span> Add(q Point) Point &#123;<br><span class="hljs-keyword">return</span> Point&#123;p.X + q.X, p.Y + q.Y&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Point)</span></span> Sub(q Point) Point &#123;<br><span class="hljs-keyword">return</span> Point&#123;p.X - q.X, p.Y - q.Y&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Path []Point<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(path Path)</span></span> TranslateBy(offset Point, add <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">var</span> op <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p, q Point)</span></span> Point<br><span class="hljs-keyword">if</span> add &#123;<br>op = Point.Add<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>op = Point.Sub<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> path &#123;<br>path[i] = op(path[i], offset)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.3. 通过嵌入结构体来扩展类型</title>
      <link href="/posts/3d2bce45dc58/"/>
      <url>/posts/3d2bce45dc58/</url>
      
        <content type="html"><![CDATA[<h1 id="内嵌结构体"><a href="#内嵌结构体" class="headerlink" title="内嵌结构体"></a>内嵌结构体</h1><p>下面是一个ColoredPoint的嵌入结构体，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">float64</span><br>&#125;<br><span class="hljs-keyword">type</span> ColoredPoint <span class="hljs-keyword">struct</span> &#123;<br>Point<br>color color.RGBA<br>&#125;<br></code></pre></td></tr></table></figure><p>由结构体特性可知，内嵌可使得ColoredPoint包含Point的所有字段，并附加自身的一些字段。即可以直接访问Point的字段，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> cp ColoredPoint<br>cp.X = <span class="hljs-number">1</span><br>fmt.Println(cp.Point.X) <span class="hljs-comment">// 1</span><br>cp.Point.Y = <span class="hljs-number">2</span><br>fmt.Println(cp.Y) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>类似的，ColoredPoint也可以直接访问Point的方法，即使ColoredPoint未声明方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">red := color.RGBA&#123;<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>&#125;<br>blue := color.RGBA&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>&#125;<br><span class="hljs-keyword">var</span> p = ColoredPoint&#123;Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, red&#125;<br><span class="hljs-keyword">var</span> q = ColoredPoint&#123;Point&#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;, blue&#125;<br>fmt.Println(p.Distance(q.Point)) <span class="hljs-comment">// 5</span><br>p.ScaleBy(<span class="hljs-number">2</span>)<br>q.ScaleBy(<span class="hljs-number">2</span>)<br>fmt.Println(p.Distance(q.Point)) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p>使用此特性，可以定义字段多的复杂类型，然后把字段按照类型进行分组，定义小类型的方法，再组合起来。</p><p>同比其它编程语言，可将Point当做一个基类，ColoredPoint看作Point的子类或继承类，或者把ColoredPoint看作Point类。但是在Go语言中，这种理解是有误差的。如上例子中，<code>p.Distance(q.Point)</code>，如果q看作Point类，那么可以写成<code>p.Distance(q)</code>，但运行时，发现<code>“compile error: cannot use q (ColoredPoint) as Point</code>的错误。可知，ColoredPoint并非Point类，只是包含Point这个嵌入类型。</p><p>ColoredPoint并不是Point，但是拥有一个内嵌的Point，并且有由Point类引入的<code>Distance</code>和<code>ScaleBy</code>。<br>其实在编译过程中，内嵌字段会使得编译器去生成额外的包装方法来委托已经声明好的方法，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p ColoredPoint)</span></span> Distance(q Point) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> p.Point.Distance(q)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p ColoredPoint)</span></span> ScaleBy(factor <span class="hljs-type">float64</span>) &#123;<br>p.Point.ScaleBy(factor)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="指针匿名字段"><a href="#指针匿名字段" class="headerlink" title="指针匿名字段"></a>指针匿名字段</h1><p>在结构体类型中，内嵌的匿名字段也可能是一个命名类型的指针。<br>这种情况下，字段和方法会被简接引入到当前的类型中，但需要使用指针指向的对象去访问。<br>下面的<code>ColoredPoint</code>类内嵌了一个<code>*Point</code>的指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ColoredPoint <span class="hljs-keyword">struct</span> &#123;<br>*Point<br>Color color.RGBA<br>&#125;<br><br>red := color.RGBA&#123;<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>&#125;<br>blue := color.RGBA&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>&#125;<br>p := ColoredPoint&#123;&amp;Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, red&#125;<br>q := ColoredPoint&#123;&amp;Point&#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;, blue&#125;<br>fmt.Println(p.Distance(*q.Point))<br>q.Point = p.Point <span class="hljs-comment">// q and p now share the same Point.</span><br><br>p.ScaleBy(<span class="hljs-number">2</span>)<br>fmt.Println(*p.Point, *q.Point) <span class="hljs-comment">// &#123;2,2&#125; &#123;2,2&#125;</span><br></code></pre></td></tr></table></figure><p>指针类型可以使得共享同一个对象，如q.Point和p.Point共享{2,2}。</p><h1 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h1><p>struct类型也可以拥有多个匿名字段，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ColoredPoint <span class="hljs-keyword">struct</span> &#123;<br>Point<br>color.RGBA<br>&#125;<br></code></pre></td></tr></table></figure><p>如上类型的对象包含Point和color.RGBA类型的方法，以及直接定义在ColoredPoint中的方法。<br>当编译器解析一个选择器的方法时，如<code>p.ScaleBy</code>，编译器首先会去找直接在这个类ColorPoint中定义的方法，然后再去找ColoredPoint的内嵌字段引入的方法，接着就再去找Point和color.RGBA的内嵌字段引入的方法，然后再一直递归向下找。<br>如果存在二义性，即同一级内存在两个或以上的同名方法，编译器就会报错。</p><p>方法只能在命名类型(像Point)或者指向类型的指针上定义，但是多亏了内嵌，有些时候我们给匿名struct类型来定义方法也有了手段。<br>下面是一个小trick。这个例子展示了简单的cache，其使用两个包级别的变量来实现，一个mutex互斥量(§9.2)和它所操作的cache：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>mu      sync.Mutex<br>mapping = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Lookup</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>mu.Lock()<br>v := mapping[key]<br>mu.Unlock()<br><span class="hljs-keyword">return</span> v<br>&#125;<br></code></pre></td></tr></table></figure><p>下面版本是将字段整合到struct中，将方法引入到新的对象中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> cache = <span class="hljs-keyword">struct</span> &#123;<br>sync.Mutex<br>mapping <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br>&#125;&#123;<br>mapping: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>),<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Lookup</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>cache.Lock()<br>v := cache.mapping[key]<br>cache.Unlock()<br><span class="hljs-keyword">return</span> v<br>&#125;<br></code></pre></td></tr></table></figure><p>如上例子，因为sync.Mutex被引入到cache中，那么Lock和Unlock方法也被引入到cache的结构体中。使得，加锁解锁的操作更加简明。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.2. 基于指针对象的方法</title>
      <link href="/posts/8633284a6bad/"/>
      <url>/posts/8633284a6bad/</url>
      
        <content type="html"><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>当调用一个函数时，会对每一个参数值进行拷贝。<br>如果函数的需要更新一个变量，或函数中的某个参数过于大，则希望避免进行默认的拷贝，这种情况可以用到指针。<br>相对应到方法接受器，当接受者过于大，也可以使用指针而非接受者对象本身来声明方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Point)</span></span> ScaleBy(factor <span class="hljs-type">float64</span>) &#123;<br>    p.X *= factor<br>    p.Y *= factor<br>&#125;<br></code></pre></td></tr></table></figure><p>上述的方法名为：<code>(*Point).ScaleBy</code>，这里的括号是不能省略的。</p><p>一般情况下，当某类拥有一个指针作为接收器的方法，那么该类的所有方法也应以指针作为接收器，即使是哪些不需要指针接收器的函数。</p><p>此外，为了避免歧义，在声明方法时，<code>如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的</code>，比如下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> P *<span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p P)</span></span> f()  &#123; &#125; <span class="hljs-comment">// Invalid receiver type &#x27;P&#x27; (&#x27;P&#x27; is a pointer type)</span><br></code></pre></td></tr></table></figure><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>调用指针类型方法<code>(*Point).ScaleBy</code>，只要提供一个Point类型的指针即可，像下面这样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">r := &amp;Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>r.ScaleBy(<span class="hljs-number">2</span>)<br>fmt.Println(*r) <span class="hljs-comment">// &quot;&#123;2, 4&#125;”</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">p := Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>pptr := &amp;p<br>pptr.ScaleBy(<span class="hljs-number">2</span>)<br>fmt.Println(p) <span class="hljs-comment">// &quot;&#123;2, 4&#125;”</span><br></code></pre></td></tr></table></figure><p>再或者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">p := Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>(&amp;p).ScaleBy(<span class="hljs-number">2</span>)<br>fmt.Println(p) <span class="hljs-comment">// &quot;&#123;2, 4&#125;”</span><br></code></pre></td></tr></table></figure><p>上述方法看起来比较笨拙，在Go语言中，如果接收器p是指针类型的，那么可以直接调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">p.ScaleBy(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>编译器会隐式用<code>&amp;p</code>去调用<code>ScaleBy</code>，这种简写仅适用于<code>变量</code>。“包括struct里的字段比如p.X，以及array和slice内的元素比如perim[0]。我们不能通过一个无法取到地址的接收器来调用指针方法，比如临时变量的内存地址就无法获取得到：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;.ScaleBy(<span class="hljs-number">2</span>) <span class="hljs-comment">// compile error: can&#x27;t take address of Point literal</span><br></code></pre></td></tr></table></figure><p>同理，当<code>*p</code>取值时，调用其方法，编译器会隐式插入<code>*</code>，则可以进行简写。<br>如下例子中，两种写法是等价的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">pptr.Distance(q)<br>(*pptr).Distance(q)<br></code></pre></td></tr></table></figure><p>在每一个合法的方法调用表达式中，也就是下面三种情况里的任意一种情况都是可以的：<br>1、接收器的实际参数和其接收器的形式参数相同，比如两者都是类型<code>T</code>或者都是类型<code>*T</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;.Distance(q) <span class="hljs-comment">//  Point</span><br>pptr.ScaleBy(<span class="hljs-number">2</span>)         <span class="hljs-comment">// *Point</span><br></code></pre></td></tr></table></figure><p>2 、接收器形参是类型T，但接收器实参是类型<code>*T</code>，这种情况下编译器会隐式地为我们取变量的地址：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">p.ScaleBy(<span class="hljs-number">2</span>) <span class="hljs-comment">// implicit (&amp;p)</span><br></code></pre></td></tr></table></figure><p>3、接收器形参是类型<code>*T</code>，实参是类型<code>T</code>。编译器会隐式地为我们解引用，取到指针指向的实际变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">pptr.Distance(q) <span class="hljs-comment">// implicit (*pptr)</span><br></code></pre></td></tr></table></figure><p>在声明方法的receiver该是指针类型或非指针类型时，需要考虑2个方面。<br>第一个方面是，该对象占用内存是不是特别大，如果声明为非指针类型，调用时会产生一次拷贝，考虑其耗能问题。<br>第二方面是，如果是用指针类型为receiver的类型时，要注意的是，指针指向的是内存空间，就算进行拷贝，也是指向同一块内存空间，要注意拷贝后的修改会改变原变量的值。</p><h1 id="6-2-1-Nil也是一个合法的接收器类型"><a href="#6-2-1-Nil也是一个合法的接收器类型" class="headerlink" title="6.2.1. Nil也是一个合法的接收器类型"></a>6.2.1. Nil也是一个合法的接收器类型</h1><p>一些函数允许其参数为nil，相同的，也可以使用nil当做其接收器。<br>尤其对于对象而已，nil为合法的零值，如map或slice。<br>在下面的简单int链表的例子里，nil代表的是空链表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> intlist<br><br><span class="hljs-comment">// An IntList is a linked list of integers.</span><br><span class="hljs-comment">// A nil *IntList represents an empty list.</span><br><span class="hljs-keyword">type</span> IntList <span class="hljs-keyword">struct</span> &#123;<br>Value <span class="hljs-type">int</span><br>Tail  *IntList<br>&#125;<br><br><span class="hljs-comment">// Sum returns the sum of the list elements.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(list *IntList)</span></span> Sum() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> list == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> list.Value + list.Tail.Sum()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当你定义一个允许nil作为接收器值的方法的类型时，在类型前面的注释中指出nil变量代表的意义是很有必要的，就像我们上面例子里做的这样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> urlvalues<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/url&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := url.Values&#123;<span class="hljs-string">&quot;len&quot;</span>: &#123;<span class="hljs-string">&quot;en&quot;</span>&#125;&#125;<br>m.Add(<span class="hljs-string">&quot;item&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br>m.Add(<span class="hljs-string">&quot;item&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>)<br><br>fmt.Println(m.Get(<span class="hljs-string">&quot;lang&quot;</span>)) <span class="hljs-comment">// &quot;en&quot;</span><br>fmt.Println(m.Get(<span class="hljs-string">&quot;q&quot;</span>))    <span class="hljs-comment">// &quot;&quot;</span><br>fmt.Println(m.Get(<span class="hljs-string">&quot;item&quot;</span>)) <span class="hljs-comment">// &quot;1&quot;      (first value)</span><br>fmt.Println(m[<span class="hljs-string">&quot;item&quot;</span>])     <span class="hljs-comment">// &quot;[1 2]&quot;  (direct map access)</span><br><br>m = <span class="hljs-literal">nil</span><br>fmt.Println(m.Get(<span class="hljs-string">&quot;item&quot;</span>)) <span class="hljs-comment">// &quot;&quot;</span><br>m.Add(<span class="hljs-string">&quot;item&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>)         <span class="hljs-comment">// panic: assignment to entry in nil map</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后一次调用m，m为nil，等价于<code>Value(nil).Get(&quot;item&quot;)</code>。如果写为<code>nil.Get(&quot;item&quot;)</code>，则无法通过编译，因为编译器无法判断其准备类型。<br>而在<code>m.Add(&quot;item&quot;,&quot;3&quot;)</code>中，因为m为nil，则出抛出panic异常，因为试图更新一个nil的map。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.1. 方法声明</title>
      <link href="/posts/627a83e633ba/"/>
      <url>/posts/627a83e633ba/</url>
      
        <content type="html"><![CDATA[<p>在函数声明前加上一个变量，就是方法。<br>第一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> geometry<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;math&quot;</span><br><br><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// traditional function</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Distance</span><span class="hljs-params">(p, q Point)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br><br><span class="hljs-comment">// same thing, but as a method of the Point type</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Point)</span></span> Distance(q Point) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br></code></pre></td></tr></table></figure><p>方法前的参数p，被称为函数接收器（receiver），通常使用类型的首字母。</p><p>方法调用时，直接使用该变量点语法连接方法名即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">p := Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>q := Point&#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;<br>fmt.Println(Distance(p, q))<br>fmt.Println(p.Distance(q))<br></code></pre></td></tr></table></figure><p>因为每种类型都有其方法的命名空间，我们在用Distance这个名字的时候，不同的Distance调用指向了不同类型里的Distance方法。让我们来定义一个Path类型，这个Path代表一个线段的集合，并且也给这个Path定义一个叫Distance的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A Path is a journey connecting the points with straight lines.</span><br><span class="hljs-keyword">type</span> Path []Point<br><br><span class="hljs-comment">// Distance returns the distance traveled along the path.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(path Path)</span></span> Distance() <span class="hljs-type">float64</span> &#123;<br>sum := <span class="hljs-number">0.0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> path &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>sum += path[i<span class="hljs-number">-1</span>].Distance(path[i])<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><p>Path是一个命名的slice类型，而不是Point那样的struct类型，然而我们依然可以为它定义方法。<br>在Go中，能够给任意类型定义方法。<br>下面例子是计算三角形的周长。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">perim := Path&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>&#123;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">2</span>&#125;,<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>&#125;<br>fmt.Println(perim.Distance())<br></code></pre></td></tr></table></figure><p>在包外，使用方法比通过包调用方法要简短些。<br>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">perim := geometry.Path&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;<br>fmt.Println(geometry.PathDistance(perim))<br>fmt.Println(perim.Distance())<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章 方法</title>
      <link href="/posts/b376389fd346/"/>
      <url>/posts/b376389fd346/</url>
      
        <content type="html"><![CDATA[<p><a href="/posts/627a83e633ba/">6.1. 方法声明</a></p><p><a href="/posts/8633284a6bad/">6.2. 基于指针对象的方法</a></p><p><a href>6.3. 通过嵌入式结构体来扩展类型</a></p><p><a href="/posts/4fa1929ae9d9/">6.4. 方法值和方法表达式</a></p><p><a href="/posts/aaab166a7bb7/">6.5. 示例：Bit数组</a></p><p><a href="/posts/387bb90cfe97/">6.6. 封装</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.10. Recover捕获异常</title>
      <link href="/posts/9b9419099212/"/>
      <url>/posts/9b9419099212/</url>
      
        <content type="html"><![CDATA[<p>通常情况下，不应该对<code>panic</code>异常做任何处理，但有时，也可以使得程序从异常中恢复，或至少在程序崩溃前做一些事情。如web服务器在开发过程中，将异常信息反馈到客户端，便于调试。</p><p>在<code>defer</code>函数中调用内置<code>recover</code>函数，并且定义该<code>defer</code>语句中的函数发生了<code>panic</code>异常，<code>recover</code>函数会使程序从<code>panic</code>中恢复，并返回<code>panic value</code>。<br>导致<code>panic</code>异常的函数不会继续运行，但能正常返回。<br>在未发生<code>panic</code>时调用<code>recover</code>，<code>recover</code>会返回nil。<br>以语言解析器为例，当某个异常出现时，不会让解析器崩溃，而是将异常信息当做普通的解析错误，并附加额外信息提醒用户报告此错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> (s *Syntax, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> p := <span class="hljs-built_in">recover</span>(); p != <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;internal error: %v&quot;</span>, p)<br>&#125;<br>&#125;()<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>deferred函数帮助Parse从panic中恢复。在deferred函数内部，panic value被附加到错误信息中；并用err变量接收错误信息，返回给调用者。我们也可以通过调用runtime.Stack往错误信息中添加完整的堆栈调用信息。</p><p>不加区分的恢复所有的panic异常，不是可取的做法；因为在panic之后，无法保证包级变量的状态仍然和我们预期一致。比如，对数据结构的一次重要更新没有被完整完成、文件或者网络连接没有被关闭、获得的锁没有被释放。此外，如果写日志时产生的panic被不加区分的恢复，可能会导致漏洞被忽略。</p><p>虽然把对panic的处理都集中在一个包下，有助于简化对复杂和不可以预料问题的处理，但作为被广泛遵守的规范，你不应该试图去恢复其他包引起的panic。公有的API应该将函数的运行失败作为error返回，而不是panic。同样的，你也不应该恢复一个由他人开发的函数引起的panic，比如说调用者传入的回调函数，因为你无法确保这样做是安全的。</p><p><code>只恢复应该被恢复的panic异常.</code></p><p>被恢复的panic异常占比应该尽可能的低。<br>为了标识某个panic是否应该被恢复，我们可以将panic value设置成特殊类型。在recover时对panic value进行检查，如果发现panic value是特殊类型，就将这个panic作为errror处理，如果不是，则按照正常的panic进行处理（在下面的例子中，我们会看到这种方式）。</p><p>下面的例子是title函数的变形，如果HTML页面包含多个<code>&lt;title&gt;</code>，该函数会给调用者返回一个错误（error）。在soleTitle内部处理时，如果检测到有多个<code>&lt;title&gt;</code>，会调用panic，阻止函数继续递归，并将特殊类型bailout作为panic的参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>url := <span class="hljs-string">&quot;https://www.dy2018.com/&quot;</span><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>title, err := soleTitle(doc)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;url: %s, title: %s&quot;</span>, url, title)<br>&#125;<br><br><span class="hljs-comment">// soleTitle returns the text of the first non-empty title element</span><br><span class="hljs-comment">// in doc, and an error if there was not exactly one.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">soleTitle</span><span class="hljs-params">(doc *html.Node)</span></span> (title <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">type</span> bailout <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> p := <span class="hljs-built_in">recover</span>(); p &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>: <span class="hljs-comment">// nil panic</span><br><span class="hljs-keyword">case</span> bailout&#123;&#125;: <span class="hljs-comment">// expected panic</span><br>err = fmt.Errorf(<span class="hljs-string">&quot;multiple title elements&quot;</span>)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(p)<br>&#125;<br>&#125;()<br><br>forEachNode(doc, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;title&quot;</span> &amp;&amp; n.FirstChild != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> title != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-built_in">panic</span>(bailout&#123;&#125;)<br>&#125;<br>title = n.FirstChild.Data<br>&#125;<br>&#125;, <span class="hljs-literal">nil</span>)<br><br><span class="hljs-keyword">if</span> title == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;no title element&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> title, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">forEachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(node *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>forEachNode(c, pre, post)<br>&#125;<br><br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上例中，deferred函数调用recover，并检查panic value。当panic value是bailout{}类型时，deferred函数生成一个error返回给调用者。当panic value是其他non-nil值时，表示发生了未知的panic异常，deferred函数将调用panic函数并将当前的panic value作为参数传入。此时，等同于recover没有做任何操作。（请注意：在例子中，对可预期的错误采用了panic，这违反了之前的建议，我们在此只是想向读者演示这种机制。）</p><p>有些情况下，我们无法恢复。某些致命错误会导致Go在运行时终止程序，如<code>内存不足</code>。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习5.19：</strong> 使用panic和recover编写一个不包含return语句但能返回一个非零值的函数。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(f()) <span class="hljs-comment">// 1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> (n <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>n = <span class="hljs-number">1</span><br>_ = <span class="hljs-built_in">recover</span>()<br>&#125;()<br><br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;panic!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.9. Panic异常</title>
      <link href="/posts/b0cbde1e1f43/"/>
      <url>/posts/b0cbde1e1f43/</url>
      
        <content type="html"><![CDATA[<p>一般而言，当<code>panic</code>异常发生时，程序会中断运行，并立即执行在该goroutine中被延迟的函数(<code>defer</code>机制)，随后，程序崩溃并输出日志信息。<br>日志信息包括<code>panic value</code>和函数调用的堆栈跟踪信息。<br>不是所有的<code>panic</code>异常都来自运行时，直接调用内置的<code>panic</code>函数也会引起<code>panic</code>异常。<br>panic函数可接受任何值作为参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> s := suit(drawCard()); s &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Spades&quot;</span>:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Hearts&quot;</span>:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Diamonds&quot;</span>:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Clubs&quot;</span>:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;invalid suit %q&quot;</span>, s))<br>&#125;<br></code></pre></td></tr></table></figure><p>运行<code>panic</code>函数的前提是满足前置条件，但切勿滥用。<br>除非提供更多的错误信息，或更快的发现错误，否则不需要<code>panic</code>，编译器在运行时会检查代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Reset</span><span class="hljs-params">(x *Buffer)</span></span> &#123;<br><span class="hljs-keyword">if</span> x == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;x is nil&quot;</span>)<br>&#125;<br>x.elements = <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><h2 id="regexp-Compile函数"><a href="#regexp-Compile函数" class="headerlink" title="regexp.Compile函数"></a>regexp.Compile函数</h2><p><code>regexp.Compile</code>函数将正则表达式编译成有效的可匹配格式。当输入的正则表达式不合法时，该函数会返回一个错误。当调用者明确的知道正确的输入不会引起函数错误时，要求调用者检查这个错误是不必要和累赘的。我们应该假设函数的输入一直合法，就如前面的断言一样：当调用者输入了不应该出现的输入时，触发panic异常。<br>在程序源码中，大多数正则表达式是字符串字面值（<code>string literals</code>），因此<code>regexp</code>包提供了包装函数<code>regexp.MustCompile</code>检查输入的合法性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> regexp<br>...<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MustCompile</span><span class="hljs-params">(str <span class="hljs-type">string</span>)</span></span> *Regexp &#123;<br>regexp, err := Compile(str)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">`regexp: Compile(`</span> + quote(str) + <span class="hljs-string">`): `</span> + err.Error())<br>&#125;<br><span class="hljs-keyword">return</span> regexp<br>&#125;<br></code></pre></td></tr></table></figure><p>显然，<code>MustCompile</code>不能接收不合法的输入。<br>函数名中的<code>Must</code>前缀是一种针对此类函数的命名。</p><h2 id="panic信息和堆栈信息"><a href="#panic信息和堆栈信息" class="headerlink" title="panic信息和堆栈信息"></a>panic信息和堆栈信息</h2><p>在下面的例子，会输出其程序崩溃的信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>f(<span class="hljs-number">3</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;f(%d)\n&quot;</span>, x+<span class="hljs-number">0</span>/x)<br><span class="hljs-keyword">defer</span> fmt.Printf(<span class="hljs-string">&quot;defer %d\n&quot;</span>, x)<br>f(x - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的程序运行后输出的内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">f(<span class="hljs-number">3</span>)<br>f(<span class="hljs-number">2</span>)<br>f(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">defer</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">defer</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">defer</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>当<code>f(0)</code>执行到<code>x+0/x</code>时，触发panic异常，之前被延迟执行的3个<code>fmt.Printf</code>被调用。程序中断执行后，panic信息和堆栈信息会被输出（下面是简化的输出）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">panic</span>: runtime <span class="hljs-type">error</span>: integer divide by zero<br><br>goroutine <span class="hljs-number">1</span> [running]:<br>main.f(<span class="hljs-number">0x0</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ex/demo.<span class="hljs-keyword">go</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0x1e6</span><br>main.f(<span class="hljs-number">0x1</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ex/demo.<span class="hljs-keyword">go</span>:<span class="hljs-number">28</span> +<span class="hljs-number">0x1b6</span><br>main.f(<span class="hljs-number">0x2</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ex/demo.<span class="hljs-keyword">go</span>:<span class="hljs-number">28</span> +<span class="hljs-number">0x1b6</span><br>main.f(<span class="hljs-number">0x3</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ex/demo.<span class="hljs-keyword">go</span>:<span class="hljs-number">28</span> +<span class="hljs-number">0x1b6</span><br>main.main()<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ex/demo.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span> +<span class="hljs-number">0x1e</span><br>Exiting.<br></code></pre></td></tr></table></figure><h2 id="手动输出堆栈信息"><a href="#手动输出堆栈信息" class="headerlink" title="手动输出堆栈信息"></a>手动输出堆栈信息</h2><p>为了方便诊断问题，runtime包允许程序员输出堆栈信息。在下面的例子中，我们通过在main函数中延迟调用printStack输出堆栈信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> printStack()<br>f(<span class="hljs-number">3</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printStack</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> buf [<span class="hljs-number">4096</span>]<span class="hljs-type">byte</span><br>n := runtime.Stack(buf[:], <span class="hljs-literal">false</span>)<br>os.Stdout.Write(buf[:n])<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;f(%d)\n&quot;</span>, x+<span class="hljs-number">0</span>/x)<br><span class="hljs-keyword">defer</span> fmt.Printf(<span class="hljs-string">&quot;defer %d\n&quot;</span>, x)<br>f(x - <span class="hljs-number">1</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>printStack的简化输出如下（下面只是printStack的输出，不包括panic的日志信息）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">goroutine <span class="hljs-number">1</span> [running]:<br>main.printStack()<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch5/defer2/<span class="hljs-keyword">defer</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">16</span> +<span class="hljs-number">0x39</span><br><span class="hljs-built_in">panic</span>(&#123;<span class="hljs-number">0x10995c0</span>, <span class="hljs-number">0x1139180</span>&#125;)<br>        /usr/local/<span class="hljs-keyword">go</span>/src/runtime/<span class="hljs-built_in">panic</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">884</span> +<span class="hljs-number">0x212</span><br>main.f(<span class="hljs-number">0x10c7da8</span>?)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch5/defer2/<span class="hljs-keyword">defer</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">21</span> +<span class="hljs-number">0x113</span><br>main.f(<span class="hljs-number">0x1</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch5/defer2/<span class="hljs-keyword">defer</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span> +<span class="hljs-number">0xf5</span><br>main.f(<span class="hljs-number">0x2</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch5/defer2/<span class="hljs-keyword">defer</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span> +<span class="hljs-number">0xf5</span><br>main.f(<span class="hljs-number">0x3</span>)<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch5/defer2/<span class="hljs-keyword">defer</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span> +<span class="hljs-number">0xf5</span><br>main.main()<br>        /Users/huangfuwang/Desktop/Code/Go/<span class="hljs-keyword">go</span>-learn-gopl/ch/ch5/defer2/<span class="hljs-keyword">defer</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">11</span> +<span class="hljs-number">0x45</span><br></code></pre></td></tr></table></figure><p><code>runtime.Stack</code>为何能输出已经被释放函数的信息？<br>得益于Go的defer机制，defer函数在释放堆栈信息之前执行。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.8. Deferred函数</title>
      <link href="/posts/6f685641f7fc/"/>
      <url>/posts/6f685641f7fc/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>在普通函数前加上关键字<code>defer</code>时，当<code>defer</code>语句被执行时，其后面的函数会被延迟执行。<br>直到包含该<code>defer</code>语句的函数执行完毕时，<code>defer</code>后的函数才会被执行，无论是包含<code>defer</code>的函数通过<code>return</code>正常结束或由于<code>panic</code>导致的异常结束。<br>一个函数中可以执行多条<code>defer</code>语句，它们的执行顺序与声明的顺序相反。</p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><p><code>defer</code>语句常用于处理成对的操作，如打开、关闭、连接、断开连接、加锁、释放锁。<br>通过<code>defer</code>机制，无论函数逻辑多复杂，都能保证在任何执行路径下，资源能被释放。<br>释放资源的<code>defer</code>语句应该直接跟着请求资源的语句后。</p><h2 id="关闭网络连接"><a href="#关闭网络连接" class="headerlink" title="关闭网络连接"></a>关闭网络连接</h2><p>下面例子获取HTML页面并输出页面的标题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br><span class="hljs-keyword">if</span> err := title(arg); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;title: %v\n&quot;</span>, err)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">title</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>ct := resp.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br><span class="hljs-keyword">if</span> ct != <span class="hljs-string">&quot;text/html&quot;</span> &amp;&amp; !strings.HasPrefix(ct, <span class="hljs-string">&quot;text/html&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;%s has type %s, not text/html&quot;</span>, url, ct)<br>&#125;<br><br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;parsing %s as HTML: %v&quot;</span>, url, err)<br>&#125;<br><br>visitNode := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;title&quot;</span> &amp;&amp; n.FirstChild != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stdout, <span class="hljs-string">&quot;title:%s&quot;</span>, n.Data)<br>&#125;<br>&#125;<br><br>foreachNode(doc, visitNode, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foreachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(n *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>foreachNode(c, pre, post)<br>&#125;<br><br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是代码的运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./title1 http://gopl.io</span><br>The Go Programming Language<br>./title1 https://inews.gtimg.com/news_ls/OExtuAtUKTNazpSOqxmuLgKRPO6wJk6nwVNAfixgCGtOAAA_640330/0<br>title: https://inews.gtimg.com/news_ls/OExtuAtUKTNazpSOqxmuLgKRPO6wJk6nwVNAfixgCGtOAAA_640330/0 has type image/jpeg, not text/html<br></code></pre></td></tr></table></figure><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>如<code>io.util</code>包中，读取文件<code>ReadFile</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadFile</span><span class="hljs-params">(filename <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br>f, err := os.Open(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br><span class="hljs-keyword">return</span> ReadAll(f)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="处理互斥锁"><a href="#处理互斥锁" class="headerlink" title="处理互斥锁"></a>处理互斥锁</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> mu sync.Mutex<br><span class="hljs-keyword">var</span> m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lookup</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>mu.Lock()<br><span class="hljs-keyword">defer</span> mu.Unlock()<br><span class="hljs-keyword">return</span> m[key]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="记录函数运行时间"><a href="#记录函数运行时间" class="headerlink" title="记录函数运行时间"></a>记录函数运行时间</h2><p>在调试复杂程序时，<code>defer</code>机制也可用于记录何时进入和退出函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>bigSlowOperation()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bigSlowOperation</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> trace(<span class="hljs-string">&quot;bigSlowOperation&quot;</span>)()<br><span class="hljs-comment">// lots of work</span><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br><span class="hljs-comment">// operation by sleeping</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">trace</span><span class="hljs-params">(msg <span class="hljs-type">string</span>)</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>start := time.Now()<br>log.Printf(<span class="hljs-string">&quot;enter %s&quot;</span>, msg)<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Printf(<span class="hljs-string">&quot;exit %s (%s)&quot;</span>, msg, time.Since(start))<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要注意的是，不要漏掉<code>defer</code>语句后的圆括号，即调用<code>trace</code>返回的函数，否则本该在进入时执行的操作会在退出时执行，而本该在退出时执行的，永远执行不了。<br>下面是例子的运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">2023</span>/<span class="hljs-number">06</span>/<span class="hljs-number">11</span> <span class="hljs-number">04</span>:<span class="hljs-number">07</span>:<span class="hljs-number">48</span> enter bigSlowOperation<br><span class="hljs-number">2023</span>/<span class="hljs-number">06</span>/<span class="hljs-number">11</span> <span class="hljs-number">04</span>:<span class="hljs-number">07</span>:<span class="hljs-number">58</span> exit bigSlowOperation (<span class="hljs-number">10.001382207</span>s)<br></code></pre></td></tr></table></figure><h2 id="使用匿名函数观察返回值"><a href="#使用匿名函数观察返回值" class="headerlink" title="使用匿名函数观察返回值"></a>使用匿名函数观察返回值</h2><p><code>defer</code>语句中的函数会在<code>return</code>语句更新返回值变量后再执行，又因为在函数中定义的匿名函数可以访问该函数包括返回值变量在内的所有变量，所以，对匿名函数采用<code>defer</code>机制，可以使其观察函数的返回值。<br>如下函数<code>double</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">double</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> x + x<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要命名<code>double</code>函数的返回值，再增加<code>defer</code>语句，就可以在<code>double</code>每次被调用时，输出参数以及返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">double</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> (result <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;double(%d) = %d\n&quot;</span>, x, result)<br>&#125;()<br><span class="hljs-keyword">return</span> x + x<br>&#125;<br><br>double(<span class="hljs-number">2</span>) <span class="hljs-comment">// double(2) = 4</span><br></code></pre></td></tr></table></figure><p>另外一个小技巧，被延迟执行的匿名函数甚至可以修改函数返回值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triple</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> (result <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>result += x<br>&#125;()<br><span class="hljs-keyword">return</span> double(x)<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;triple(%d) = %d\n&quot;</span>, <span class="hljs-number">2</span>, triple(<span class="hljs-number">2</span>)) <span class="hljs-comment">// triple(2) = 6</span><br></code></pre></td></tr></table></figure><h2 id="注意循环体中的defer机制"><a href="#注意循环体中的defer机制" class="headerlink" title="注意循环体中的defer机制"></a>注意循环体中的defer机制</h2><p>在循环体中的<code>defer</code>语句要特别注意，因为只有函数执行完毕后，被延迟的函数才会执行。<br>下面的代码导致系统的文件并没有关闭。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">closeFiles</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span>  &#123;<br><span class="hljs-keyword">for</span> _, filename := <span class="hljs-keyword">range</span> filenames &#123;<br>f, err := os.Open(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> f.Close() <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> could run out of file</span><br><span class="hljs-comment">// ...process f...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法是将循环体中的<code>defer</code>语句移到另外一个函数。每次循环时，调用该函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">closeFiles</span><span class="hljs-params">(filenames []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> _, filename := <span class="hljs-keyword">range</span> filenames &#123;<br><span class="hljs-keyword">if</span> err := doFile(filename); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doFile</span><span class="hljs-params">(filename <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>f, err := os.Open(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br><span class="hljs-comment">// ...process f...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="传递函数反馈信息"><a href="#传递函数反馈信息" class="headerlink" title="传递函数反馈信息"></a>传递函数反馈信息</h2><p>下面代码是<code>fetch</code>的改进版，将http响应信息写入本地文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> fetch<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br>)<br><br><span class="hljs-comment">// Fetch downloads the URL and returns the name and length of the local file.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (filename <span class="hljs-type">string</span>, n <span class="hljs-type">int64</span>, err <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>local := path.Base(resp.Request.URL.Path)<br><span class="hljs-keyword">if</span> local == <span class="hljs-string">&quot;/&quot;</span> &#123;<br>local = <span class="hljs-string">&quot;index.html&quot;</span><br>&#125;<br><br>f, err := os.Create(local)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, err<br>&#125;<br>n, err = io.Copy(f, resp.Body)<br><span class="hljs-keyword">if</span> closeErr := f.Close(); err == <span class="hljs-literal">nil</span> &#123;<br>err = closeErr<br>&#125;<br><span class="hljs-keyword">return</span> local, n, err<br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子使用<code>defer</code>机制对<code>resp.Body.Close</code>进行延迟调用。<br>但未对<code>f.Close()</code>进行延迟调用，原因是会产生一些微妙的错误。<br>当写入文件时发生的错误被延迟到文件关闭时反馈，如果没有检查文件关闭时的反馈信息，可能会导致数据丢失，而我们还误以为写入操作成功。<br>如果<code>io.Copy</code>和<code>f.close</code>都失败了，我们倾向于将<code>io.Copy</code>的错误信息反馈给调用者，因为它先于<code>f.close</code>发生，更有可能接近问题的本质。</p><h1 id="defer、return和返回值"><a href="#defer、return和返回值" class="headerlink" title="defer、return和返回值"></a>defer、return和返回值</h1><p><code>defer</code>、<code>return</code>和返回值的执行顺序如何呢？<br>其实呢，在一般情况下，即<code>defer</code>写于<code>return</code>前（为什么要强调呢，后面再议），<code>return</code>语句非原子性，<code>return</code>先给返回值赋值；接着<code>defer</code>语句开始执行；最后执行<code>RET</code>指令携带返回值返回函数。<br>那么问题来了，<code>defer</code>可以修改返回值么？<br>下面几个例子足以说明：</p><ol><li><code>defer</code>不能修改匿名返回值 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testDefer</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i = <span class="hljs-number">10</span><br>&#125;()<br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> i<br>&#125;<br>fmt.Println(testDefer()) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure> <code>i</code>初始化为0，然后赋值1，<code>defer</code>语句中i&#x3D;10，结果返回值为1，显然<code>defer</code>语句无法修改匿名返回值。</li><li><code>defer</code>可以修改非匿名返回值 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testDefer</span><span class="hljs-params">()</span></span> (i <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i = <span class="hljs-number">10</span><br>&#125;()<br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> i<br>&#125;<br>fmt.Println(testDefer()) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure> <code>return</code>语句返回的是1，<code>defer</code>语句修改返回值i&#x3D;10，结果返回值为10，显然<code>defer</code>语句是可以修改非匿名返回值。</li></ol><h1 id="defer和return的书写顺序"><a href="#defer和return的书写顺序" class="headerlink" title="defer和return的书写顺序"></a>defer和return的书写顺序</h1><p>先看个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun2</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> (i <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; i = <span class="hljs-number">10</span> &#125;()<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述例子，当参数n&#x3D;0时，返回值是多少呢？<br>第一反应是应该是10吧，非也，返回值为1。<br>那就奇了怪了，根据<code>defer</code>、<code>return</code>和<code>返回值</code>的执行顺序，<code>defer</code>语句应该修改了<code>return</code>修改后的命名返回值i为10。<br>个人理解啊，虽然有<code>defer</code>语句存在，但是函数根本没运行到<code>defer</code>语句，在之前就之前返回了，所以就没被修改到。<br>并没有找到官方的有关文档，纯属个人猜测。</p><p>所以在设计函数时，要注意<code>defer</code>语句和<code>return</code>语句的书写顺序，如在协程关闭另外一个协程时。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>&lt;-sema<br>&#125;() <span class="hljs-comment">// release token</span><br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> sema &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;: <span class="hljs-comment">// acquire token</span><br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>sema channel</code>在容量满时，同时也没接收到<code>done channel</code>的信息时，<code>select</code>进行堵塞，等待释放资源， 一旦此时<code>done channel</code>接收到值时，<code>return</code>语句执行了，再执行<code>defer</code>语句，导致<code>sema channel</code>一直在堵塞。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习5.18：</strong> 不修改fetch的行为，重写fetch函数，要求使用defer机制关闭文件。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (filename <span class="hljs-type">string</span>, n <span class="hljs-type">int64</span>, err <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>local := path.Base(resp.Request.URL.Path)<br><span class="hljs-keyword">if</span> local == <span class="hljs-string">&quot;/&quot;</span> &#123;<br>local = <span class="hljs-string">&quot;index.html&quot;</span><br>&#125;<br><br>f, err := os.Create(local)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>closeErr := f.Close()<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>err = closeErr<br>&#125;<br>&#125;()<br><br>n, err = io.Copy(f, resp.Body)<br><span class="hljs-keyword">return</span> local, n, err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>f, n, err := fetch(arg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch: %serror: %v\n&quot;</span>, arg, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Fprintf(os.Stdout, <span class="hljs-string">&quot;fetch: %sfilename: %s  count: %d\n&quot;</span>, arg, f, n)<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.7. 可变参数</title>
      <link href="/posts/f16f86776a10/"/>
      <url>/posts/f16f86776a10/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>参数数量可变的函数称为<code>可变参数函数</code>。<br>如<code>fmt.Printf</code>和类似参数。</p><p> 在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号<code>...</code>，表示该函数会接受任何数量的该类型参数。</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(vals ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span>  &#123;<br>total := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;<br>total += val<br>&#125;<br><span class="hljs-keyword">return</span> total<br>&#125;<br></code></pre></td></tr></table></figure><p> sum函数返回任意个int类型参数的和。<br> 在函数体中，vals被看作是类型为[]int的切片。<br> sum可以接受任意数量的int类型参数。<br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(sum())                              <span class="hljs-comment">// 0</span><br>fmt.Println(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)) <span class="hljs-comment">// 55</span><br>fmt.Println(sum(<span class="hljs-number">1</span>))                             <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p><h1 id="切片写法"><a href="#切片写法" class="headerlink" title="切片写法"></a>切片写法</h1><p> 在上面的例子中，调用者隐式地创建一个数组，并将原始参数复制到数组中，再把数组的一个切片作为参数传给被调用函数。<br> 如原始参数已经是切片类型，该如何传递给sum?<br> <code>在最后一个参数后加上省略符号...</code><br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">values := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>fmt.Println(sum(values...)) <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><br> 直接写入参数和传递切片加省略号的方式效果相同。</p><p> 虽然在可变参数函数内部，…int类型参数的行为很像切片类型，但实际上，可变参数函数和以切片作为参数的函数的类型是不同的。<br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(...<span class="hljs-type">int</span>)</span></span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">g</span><span class="hljs-params">([]<span class="hljs-type">int</span>)</span></span> &#123;&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, f) <span class="hljs-comment">// func(...int)</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, g) <span class="hljs-comment">// func([]int)</span><br></code></pre></td></tr></table></figure></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p> <code>可变参数函数常用于格式化字符串。</code><br> 下面的errorf函数构造了一个以行号开头的，经过格式化的错误信息。函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf风格的格式化字符串。<br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">errorf</span><span class="hljs-params">(linenum <span class="hljs-type">int</span>, format <span class="hljs-type">string</span>, args ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;Line %d: &quot;</span>, linenum)<br>fmt.Fprintf(os.Stderr, format, args...)<br>fmt.Fprintln(os.Stderr)<br>&#125;<br>linenum, name := <span class="hljs-number">12</span>, <span class="hljs-string">&quot;count&quot;</span><br>errorf(linenum, <span class="hljs-string">&quot;undefined: %s&quot;</span>, name) <span class="hljs-comment">// Line 12: undefined: count</span><br></code></pre></td></tr></table></figure></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p> <strong>练习5.15：</strong> 编写类似sum的可变参数函数max和min。考虑不传参时，max和min该如何处理，再编写至少接收1个参数的版本。<br> 解：<br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>fmt.Println(max(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// 5 &lt;nil&gt;</span><br>fmt.Println(min(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// 1 &lt;nil&gt;</span><br>fmt.Println(max())              <span class="hljs-comment">// 0 vals can not be nill or empty! []</span><br>fmt.Println(min())              <span class="hljs-comment">// 0 vals can not be nill or empty! []</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(vals ...<span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> vals == <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(vals) == <span class="hljs-number">0</span> &#123;<br>err := fmt.Errorf(<span class="hljs-string">&quot;vals can not be nill or empty! %v&quot;</span>, vals)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err<br>&#125;<br><br>m := vals[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(vals); i++ &#123;<br><span class="hljs-keyword">if</span> m &lt; vals[i] &#123;<br>m = vals[i]<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> m, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(vals ...<span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> vals == <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(vals) == <span class="hljs-number">0</span> &#123;<br>err := fmt.Errorf(<span class="hljs-string">&quot;vals can not be nill or empty! %v&quot;</span>, vals)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err<br>&#125;<br><br>m := vals[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(vals); i++ &#123;<br><span class="hljs-keyword">if</span> m &gt; vals[i] &#123;<br>m = vals[i]<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> m, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>练习5.16：</strong> 编写多参数版本的strings.Join。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(Join(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>)) <span class="hljs-comment">// 1,2,3,4,5,6,7,8,9</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Join</span><span class="hljs-params">(sep <span class="hljs-type">string</span>, elems ...<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> i, elem := <span class="hljs-keyword">range</span> elems &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(elems)<span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><br>tem := elem<br><span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> &#123;<br>tem = sep + elem<br>&#125;<br>str += tem<br>&#125;<br><span class="hljs-keyword">return</span> str<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习5.17：</strong> 编写多参数版本的ElementsByTagName，函数接收一个HTML结点树以及任意数量的标签名，返回与这些标签名匹配的所有元素。下面给出了2个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ElementsByTagName</span><span class="hljs-params">(doc *html.Node, name...<span class="hljs-type">string</span>)</span></span> []*html.Node<br>images := ElementsByTagName(doc, <span class="hljs-string">&quot;img&quot;</span>)<br>headings := ElementsByTagName(doc, <span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-string">&quot;h3&quot;</span>, <span class="hljs-string">&quot;h4&quot;</span>)<br></code></pre></td></tr></table></figure><p>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>resp, err := http.Get(<span class="hljs-string">&quot;https://www.apple.com.cn&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>nodes := ElementsByTagName(doc, <span class="hljs-string">&quot;img&quot;</span>, <span class="hljs-string">&quot;span&quot;</span>, <span class="hljs-string">&quot;title&quot;</span>)<br><span class="hljs-keyword">for</span> _, node := <span class="hljs-keyword">range</span> nodes &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%v    &quot;</span>, node.Data)<br>fmt.Println(node.Attr)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ElementsByTagName</span><span class="hljs-params">(doc *html.Node, name ...<span class="hljs-type">string</span>)</span></span> []*html.Node &#123;<br><br><span class="hljs-keyword">var</span> nodes []*html.Node<br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> name &#123;<br><span class="hljs-keyword">if</span> doc.Data == s &#123;<br>nodes = <span class="hljs-built_in">append</span>(nodes, doc)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> c := doc.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>nodes = <span class="hljs-built_in">append</span>(nodes, ElementsByTagName(c, name...)...)<br>&#125;<br><br><span class="hljs-keyword">return</span> nodes<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.6. 匿名函数</title>
      <link href="/posts/f29c530bb54f/"/>
      <url>/posts/f29c530bb54f/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名函数的定义"><a href="#匿名函数的定义" class="headerlink" title="匿名函数的定义"></a>匿名函数的定义</h1><p>拥有函数名的函数只能在包级语法块中被声明。<br>可以通过函数字面量（function literal），可以绕过限制，在任何表达式内表示函数值。<br>没有名字的函数，即函数值字面量，被称为匿名函数（anonymous function）。</p><p>函数字面量可以在使用函数时，再定义。如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">strings.Map(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">rune</span> &#123;<br><span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span><br>&#125;, <span class="hljs-string">&quot;HAL-9000&quot;</span>)<br></code></pre></td></tr></table></figure><p>匿名函数可以正常访问所在语法块中的变量。例子如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// The squares program demonstrates a function value with state.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">squares</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>x++<br><span class="hljs-keyword">return</span> x * x<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>f := squares()<br>fmt.Println(f()) <span class="hljs-comment">// 1</span><br>fmt.Println(f()) <span class="hljs-comment">// 4</span><br>fmt.Println(f()) <span class="hljs-comment">// 9</span><br>fmt.Println(f()) <span class="hljs-comment">// 16</span><br>&#125;<br></code></pre></td></tr></table></figure><p>函数<code>squares</code>返回类型为<code>func()int</code>的函数。<br>调用一次<code>squares</code>函数就会生成一个局部变量<code>x</code>并返回一个匿名函数。<br>每次调用匿名函数，该函数就会先使x的值加1，再返回x的平方。</p><p>函数值记录了函数状态，在squares中定义的匿名函数可以访问和更新squares中的局部变量，即存在变量引用。这也是函数值属于引用类型和函数值不可比较的原因。<br>Go使用闭包（closures）技术实现函数值，也把函数值称为闭包。</p><p>例子中，变量x的生命周期不由x的作用域决定：squares函数返回后，变量x仍然隐式存在于函数值变量f中。</p><p>给定一些计算机课程，每个课程都有前置课程，只有完成了前置课程才可以开始当前课程的学习；我们的目标是选择出一组课程，这组课程必须确保按顺序学习时，能全部被完成。每个课程的前置课程如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// The toposort program prints the nodes of a DAG in topological order.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br>)<br><br><span class="hljs-comment">// prereqs maps computes science courses to their prerequisites.</span><br><span class="hljs-keyword">var</span> prereqs = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;algorithms&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;calculus&quot;</span>:   &#123;<span class="hljs-string">&quot;linear algebra&quot;</span>&#125;,<br><span class="hljs-string">&quot;compilers&quot;</span>: &#123;<br><span class="hljs-string">&quot;data structures&quot;</span>,<br><span class="hljs-string">&quot;format languages&quot;</span>,<br><span class="hljs-string">&quot;computer organization&quot;</span>,<br>&#125;,<br><span class="hljs-string">&quot;data structures&quot;</span>:       &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;databases&quot;</span>:             &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;discrete math&quot;</span>:         &#123;<span class="hljs-string">&quot;intro to programming&quot;</span>&#125;,<br><span class="hljs-string">&quot;format languages&quot;</span>:      &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;networks&quot;</span>:              &#123;<span class="hljs-string">&quot;operating systems&quot;</span>&#125;,<br><span class="hljs-string">&quot;operating systems&quot;</span>:     &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br><span class="hljs-string">&quot;programming languages&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> topoSort(prereqs) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d:\t%s\n&quot;</span>, i+<span class="hljs-number">1</span>, c)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">topoSort</span><span class="hljs-params">(m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 声明目标数组</span><br><span class="hljs-keyword">var</span> order []<span class="hljs-type">string</span><br><span class="hljs-comment">// 创建已收录的课程map, key-课程，value-是否出现过</span><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-comment">// 声明匿名函数 搜索图  参数为课程数组</span><br><span class="hljs-keyword">var</span> visitAll <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">([]<span class="hljs-type">string</span>)</span></span><br><br><span class="hljs-comment">// 实现匿名函数</span><br>visitAll = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(items []<span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-comment">// 遍历课程数组</span><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br><span class="hljs-comment">// 如果未出现过的课程，进行下一步；如果已出现，忽略</span><br><span class="hljs-keyword">if</span> !seen[item] &#123;<br><span class="hljs-comment">// 进行对课程的标识，以免再次进入</span><br>seen[item] = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 进行对该课程所需的先决条件进行递归</span><br>visitAll(m[item])<br><span class="hljs-comment">// 将课程收录到目标数组中</span><br>order = <span class="hljs-built_in">append</span>(order, item)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 获取先决条件中的课程keys</span><br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> m &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, key)<br>&#125;<br><span class="hljs-comment">// 进行对keys课程排序 其实无关紧要 排不排序都不影响课程先决条件的最终走向</span><br><span class="hljs-comment">// 但由于map是无序的，将导致每次运算都可能出现不相同的结果，所以进行排序，使的每次输出一致。</span><br>sort.Strings(keys)<br>visitAll(keys)<br><span class="hljs-keyword">return</span> order<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子被称为<code>拓扑排序</code>，即前置条件构成有向图。<br>图中的顶点表示课程，边表示课程间的依赖关系。<br>而且此有向图不存在环，也就是说从某点出发的边，最终不会回到该点。<br>其输出为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">1:      intro to programming<br>2:      discrete math<br>3:      data structures<br>4:      algorithms<br>5:      linear algebra<br>6:      calculus<br>7:      format languages<br>8:      computer organization<br>9:      compilers<br>10:     databases<br>11:     operating systems<br>12:     networks<br>13:     programming languages<br></code></pre></td></tr></table></figure><p>其关系图如下：<br><img src="/posts/f29c530bb54f/1683489266098.png" alt="1683489266098"></p><p>让我们回到findLinks这个例子。我们将代码移动到了links包下，将函数重命名为Extract，在第八章我们会再次用到这个函数。新的匿名函数被引入，用于替换原来的visit函数。该匿名函数负责将新连接添加到切片中。在Extract中，使用forEachNode遍历HTML页面，由于Extract只需要在遍历结点前操作结点，所以forEachNode的post参数被传入nil。<br>findlinks.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Findlinks3 crawls the web, starting with the URls on the command line.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-comment">// breadthFirst calls f for each item in the worklist.</span><br><span class="hljs-comment">// Any items returned by f are added to the worklist.</span><br><span class="hljs-comment">// f is called at most once for each item.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">breadthFirst</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(item <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span>, worklist []<span class="hljs-type">string</span>) &#123;<br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(worklist) &gt; <span class="hljs-number">0</span> &#123;<br>items := worklist<br>worklist = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br><span class="hljs-keyword">if</span> !seen[item] &#123;<br>seen[item] = <span class="hljs-literal">true</span><br>worklist = <span class="hljs-built_in">append</span>(worklist, f(item)...)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>fmt.Println(url)<br>list, err := links.Extract(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Crawl the web breadth-first.</span><br><span class="hljs-comment">// starting from the command-line arguments.</span><br>breadthFirst(crawl, os.Args[<span class="hljs-number">1</span>:])<br>&#125;<br><br></code></pre></td></tr></table></figure><p>links.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package links provides a link-extraction function.</span><br><span class="hljs-keyword">package</span> links<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-comment">// Extract makes an HTTP GET request to the specified URL,</span><br><span class="hljs-comment">// parses the response as HTML, and returns the links in the HTML document.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Extract</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 1.Get请求url</span><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 如果非200状态码 关闭resp.Body并输出错误信息</span><br><span class="hljs-keyword">if</span> resp.StatusCode != http.StatusOK &#123;<br>resp.Body.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;getting %s: %s&quot;</span>, url, resp.Status)<br>&#125;<br><span class="hljs-comment">// 2.将请求的内容转换成html.Node</span><br>doc, err := html.Parse(resp.Body)<br><span class="hljs-comment">// 关闭resp.Body</span><br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;parsing %s as HTML: %v&quot;</span>, url, err)<br>&#125;<br><br><span class="hljs-comment">// 声明匿名函数visitNode和数组变量links</span><br><span class="hljs-comment">// 匿名函数visitNode用于遍历节点并收集url存储在数组变量links中</span><br><span class="hljs-keyword">var</span> links []<span class="hljs-type">string</span><br>visitNode := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;a&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-comment">// 非href的属性跳过</span><br><span class="hljs-keyword">if</span> a.Key != <span class="hljs-string">&quot;href&quot;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 校验url是否合法</span><br>link, err := resp.Request.URL.Parse(a.Val)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span> <span class="hljs-comment">// ignore bad URLs</span><br>&#125;<br>links = <span class="hljs-built_in">append</span>(links, link.String())<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 3.进行遍历图</span><br>forEachNode(doc, visitNode, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> links, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">forEachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(n *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>forEachNode(c, pre, post)<br>&#125;<br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./findlinks.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./findlinks http://go.dev</span><br>http://go.dev<br>https://go.dev/<br>https://go.dev/solutions/case-studies<br>https://go.dev/solutions/use-cases<br>https://go.dev/security/<br>https://go.dev/learn/<br>https://go.dev/doc/effective_go<br>https://go.dev/doc<br>https://pkg.go.dev/std<br>https://go.dev/doc/devel/release<br>https://pkg.go.dev<br>https://go.dev/talks/<br>https://www.meetup.com/pro/<br></code></pre></td></tr></table></figure><p>当爬过所有链接或内存耗尽时，程序才运行结束。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习5.10：</strong> 重写topoSort函数，用map代替切片并移除对key的排序代码。验证结果的正确性（结果不唯一）。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> prereqs = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;algorithms&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;calculus&quot;</span>:   &#123;<span class="hljs-string">&quot;linear algebra&quot;</span>&#125;,<br><br><span class="hljs-string">&quot;compilers&quot;</span>: &#123;<br><span class="hljs-string">&quot;data structures&quot;</span>,<br><span class="hljs-string">&quot;formal languages&quot;</span>,<br><span class="hljs-string">&quot;computer organization&quot;</span>,<br>&#125;,<br><br><span class="hljs-string">&quot;data structures&quot;</span>:       &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;database&quot;</span>:              &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;discrete math&quot;</span>:         &#123;<span class="hljs-string">&quot;intro to programming&quot;</span>&#125;,<br><span class="hljs-string">&quot;formal languages&quot;</span>:      &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;networks&quot;</span>:              &#123;<span class="hljs-string">&quot;operating systems&quot;</span>&#125;,<br><span class="hljs-string">&quot;operating systems&quot;</span>:     &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br><span class="hljs-string">&quot;programming languages&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> topoSort(prereqs) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d:\t%s\n&quot;</span>, i, c)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">topoSort</span><span class="hljs-params">(m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>)</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span> &#123;<br>order := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>)<br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">var</span> visitAll <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(items []<span class="hljs-type">string</span>)</span></span><br><br>visitAll = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(items []<span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br><span class="hljs-keyword">if</span> !seen[item] &#123;<br>seen[item] = <span class="hljs-literal">true</span><br>visitAll(m[item])<br>order[<span class="hljs-built_in">len</span>(order)] = item<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> m &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, k)<br>&#125;<br>visitAll(keys)<br><span class="hljs-keyword">return</span> order<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5.11：</strong> 现在线性代数的老师把微积分设为了前置课程。完善topSort，使其能检测有向图中的环。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> prereqs = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;algorithms&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;calculus&quot;</span>:   &#123;<span class="hljs-string">&quot;linear algebra&quot;</span>&#125;,<br><br><span class="hljs-string">&quot;compilers&quot;</span>: &#123;<br><span class="hljs-string">&quot;data structures&quot;</span>,<br><span class="hljs-string">&quot;formal languages&quot;</span>,<br><span class="hljs-string">&quot;computer organization&quot;</span>,<br>&#125;,<br><br><span class="hljs-string">&quot;data structures&quot;</span>:       &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;database&quot;</span>:              &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;discrete math&quot;</span>:         &#123;<span class="hljs-string">&quot;intro to programming&quot;</span>&#125;,<br><span class="hljs-string">&quot;formal languages&quot;</span>:      &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;networks&quot;</span>:              &#123;<span class="hljs-string">&quot;operating systems&quot;</span>&#125;,<br><span class="hljs-string">&quot;operating systems&quot;</span>:     &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br><span class="hljs-string">&quot;programming languages&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br><br><span class="hljs-string">&quot;linear algebra&quot;</span>: &#123;<span class="hljs-string">&quot;calculus&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sorted, err := topoSort(prereqs)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> sorted &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d:\t%s\n&quot;</span>, i+<span class="hljs-number">1</span>, c)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">topoSort</span><span class="hljs-params">(m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> order []<span class="hljs-type">string</span><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">var</span> visitAll <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(items []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span><br><br>visitAll = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(items []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br><span class="hljs-keyword">if</span> !seen[item] &#123;<br>seen[item] = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 如果发现有闭环错误，则返回</span><br><span class="hljs-keyword">if</span> err := visitAll(m[item]); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>order = <span class="hljs-built_in">append</span>(order, item)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 是否闭环 默认true</span><br>hasCycle := <span class="hljs-literal">true</span><br><span class="hljs-comment">// 遍历已排好的课程列表，如果order存在item,则说明item对应的前提课程已经递归完毕，不存在闭环</span><br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> order &#123;<br><span class="hljs-keyword">if</span> item == s &#123;<br>hasCycle = <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> hasCycle &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;has cycle: %s&quot;</span>, item)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> m &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, key)<br>&#125;<br><br>sort.Strings(keys)<br><br><span class="hljs-keyword">if</span> err := visitAll(keys); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> order, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5.12：</strong> gopl.io&#x2F;ch5&#x2F;outline2（5.5节）的startElement和endElement共用了全局变量depth，将它们修改为匿名函数，使其共享outline中的局部变量。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>outline(url)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">outline</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">var</span> depth <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> startElement = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>depth++<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;%s&gt;\n&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot; &quot;</span>, n.Data)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> endElement = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;/%s&gt;\n&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot; &quot;</span>, n.Data)<br>depth--<br>&#125;<br>&#125;<br><br>foreachNode(doc, startElement, endElement)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foreachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(n *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>foreachNode(c, pre, post)<br>&#125;<br><br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5.13：</strong> 修改crawl，使其能保存发现的页面，必要时，可以创建目录来保存这些页面。只保存来自原始域名下的页面。假设初始页面在golang.org下，就不要保存vimeo.com下的页面。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch5/links&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> base = flag.String(<span class="hljs-string">&quot;base&quot;</span>, <span class="hljs-string">&quot;https://gitee.com/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> crawl(*base) &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> download(*base, url)<br>&#125;<br><br>done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Wait()<br>done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;()<br><br>&lt;-done<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">download</span><span class="hljs-params">(base, url <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><br><span class="hljs-keyword">if</span> !strings.HasPrefix(url, base) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>dir := strings.TrimPrefix(strings.TrimPrefix(url, <span class="hljs-string">&quot;http://&quot;</span>), <span class="hljs-string">&quot;https://&quot;</span>)<br><span class="hljs-keyword">if</span> err := os.MkdirAll(dir, <span class="hljs-number">0755</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><br>filename := dir + <span class="hljs-string">&quot;index.html&quot;</span><br>f, err := os.Create(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br><br>_, err = io.Copy(f, resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">crawl</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>list, err := links.Extract(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5.14：</strong> 使用breadthFirst遍历其他数据结构。比如，topoSort例子中的课程依赖关系（有向图）,个人计算机的文件层次结构（树），你所在城市的公交或地铁线路（无向图）。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> prereqs = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;algorithms&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;calculus&quot;</span>:   &#123;<span class="hljs-string">&quot;linear algebra&quot;</span>&#125;,<br><br><span class="hljs-string">&quot;compilers&quot;</span>: &#123;<br><span class="hljs-string">&quot;data structures&quot;</span>,<br><span class="hljs-string">&quot;formal languages&quot;</span>,<br><span class="hljs-string">&quot;computer organization&quot;</span>,<br>&#125;,<br><br><span class="hljs-string">&quot;data structures&quot;</span>:       &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;database&quot;</span>:              &#123;<span class="hljs-string">&quot;data structures&quot;</span>&#125;,<br><span class="hljs-string">&quot;discrete math&quot;</span>:         &#123;<span class="hljs-string">&quot;intro to programming&quot;</span>&#125;,<br><span class="hljs-string">&quot;formal languages&quot;</span>:      &#123;<span class="hljs-string">&quot;discrete math&quot;</span>&#125;,<br><span class="hljs-string">&quot;networks&quot;</span>:              &#123;<span class="hljs-string">&quot;operating systems&quot;</span>&#125;,<br><span class="hljs-string">&quot;operating systems&quot;</span>:     &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br><span class="hljs-string">&quot;programming languages&quot;</span>: &#123;<span class="hljs-string">&quot;data structures&quot;</span>, <span class="hljs-string">&quot;computer organization&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> prereqs &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, key)<br>&#125;<br>breathFirst(keys)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">breathFirst</span><span class="hljs-params">(worklist []<span class="hljs-type">string</span>)</span></span> &#123;<br>n := <span class="hljs-number">1</span><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(worklist) &gt; <span class="hljs-number">0</span> &#123;<br>items := worklist<br>worklist = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;<br><span class="hljs-keyword">if</span> !seen[item] &#123;<br>seen[item] = <span class="hljs-literal">true</span><br><br>fmt.Printf(<span class="hljs-string">&quot;%d: %s\n&quot;</span>, n, item)<br>n++<br><br>worklist = <span class="hljs-built_in">append</span>(worklist, prereqs[item]...)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-6-1-警告：-捕获迭代变量"><a href="#5-6-1-警告：-捕获迭代变量" class="headerlink" title="5.6.1. 警告： 捕获迭代变量"></a>5.6.1. 警告： 捕获迭代变量</h1><p>问题：你被要求首先创建一些目录，再将目录删除。在下面的例子中我们用函数值来完成删除操作。下面的示例代码需要引入os包。为了使代码简单，我们忽略了所有的异常处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> rmdirs []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> tempDirs() &#123;<br>    dir := d <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> necessary!</span><br>    os.MkdirAll(dir, <span class="hljs-number">0755</span>) <span class="hljs-comment">// creates parent directories too</span><br>    rmdirs = <span class="hljs-built_in">append</span>(rmdirs, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        os.RemoveAll(dir)<br>    &#125;)<br>&#125;<br><span class="hljs-comment">// ...do some work…</span><br><span class="hljs-keyword">for</span> _, rmdir := <span class="hljs-keyword">range</span> rmdirs &#123;<br>    rmdir() <span class="hljs-comment">// clean up</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么要在循环体中重新定义局部变量dir并用循环变量d赋值？<br>而不像下面代码中一样直接使用循环变量dir?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> rmdirs []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">for</span> _, dir := <span class="hljs-keyword">range</span> tempDirs() &#123;<br>    os.MkdirAll(dir, <span class="hljs-number">0755</span>)<br>    rmdirs = <span class="hljs-built_in">append</span>(rmdirs, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        os.RemoveAll(dir) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> incorrect!</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子是错误的，函数append中的匿名函数，使用了最后一个循环变量dir，导致对os.RemoveAll调用删除都是相同的目录。为什么呢？<br>循环变量dir在for循环语句中声明，那么所有函数值都共享相同的循环变量，注意的是，函数值中的dir，记录的是变量dir的内存地址，而不是循环变量某一时刻的值。在迭代中，dir的值不断被更新，当删除操作执行时，for循环已经完成，那么dir的值为最后一次迭代的值。<br>所以，在循环中，重新声明一个新的变量，作为循环变量的副本，即可解决该问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, dir := <span class="hljs-keyword">range</span> tempDirs() &#123;<br>    dir := dir <span class="hljs-comment">// declares inner dir, initialized to outer dir</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该问题不仅存在于基于range的循环，还存在于for循环中，循环变量i的使用也存在同样的问题，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> rmdirs []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>dirs := tempDirs()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(dirs); i++ &#123;<br>    os.MkdirAll(dirs[i], <span class="hljs-number">0755</span>) <span class="hljs-comment">// OK</span><br>    rmdirs = <span class="hljs-built_in">append</span>(rmdirs, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        os.RemoveAll(dirs[i]) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> incorrect!</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，在go语句，defer语句也会存在该问题，并非其本身导致，而是因为它们都是等循环结束后，再执行函数值。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.5. 函数值</title>
      <link href="/posts/e0d18dccf0bc/"/>
      <url>/posts/e0d18dccf0bc/</url>
      
        <content type="html"><![CDATA[<p>在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值（function value）的调用类似函数调用。<br>例子如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">square</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> n * n<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">negative</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> -n<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">product</span><span class="hljs-params">(m, n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> m * n<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>f := square<br>fmt.Println(f(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 9</span><br><br>f = negative<br>fmt.Println(f(<span class="hljs-number">3</span>))     <span class="hljs-comment">// -3</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, f) <span class="hljs-comment">// func(int) int</span><br><br>f = product <span class="hljs-comment">// cannot use product (value of type func(m int, n int) int) as type func(n int) int in assignment</span><br>&#125;<br></code></pre></td></tr></table></figure><p>函数类型的零值是nil。调用值为nil的函数值会引起panic错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span><br>f(<span class="hljs-number">3</span>) <span class="hljs-comment">// panic: runtime error: invalid memory address or nil pointer dereference</span><br></code></pre></td></tr></table></figure><p>函数值可以与nil比较：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> f != <span class="hljs-literal">nil</span> &#123;<br>f(<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>但函数值之间不可以比较，也不能用函数值作为map的key。<br>可以继续参数化函数，如下例子。<code>strings.Map</code>对字符串中的每个字符调用add1函数，并将每个add1函数的返回值组成一个新的字符串返回给调用者。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add1</span><span class="hljs-params">(r <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">rune</span> &#123;<br><span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(strings.Map(add1, <span class="hljs-string">&quot;HAL-9000&quot;</span>)) <span class="hljs-comment">// IBM.:111</span><br>fmt.Println(strings.Map(add1, <span class="hljs-string">&quot;VMS&quot;</span>))      <span class="hljs-comment">// WNT</span><br>fmt.Println(strings.Map(add1, <span class="hljs-string">&quot;Admix&quot;</span>))    <span class="hljs-comment">// Benjy</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.2节的findLinks函数使用了辅助函数visit,遍历和操作了HTML页面的所有结点。使用函数值，我们可以将遍历结点的逻辑和操作结点的逻辑分离，使得我们可以复用遍历的逻辑，从而对结点进行不同的操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Outline prints the outline of an HTML document tree.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>outline(url)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">outline</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-comment">//!+call</span><br>forEachNode(doc, startElement, endElement)<br><span class="hljs-comment">//!-call</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// !+forEachNode</span><br><span class="hljs-comment">// forEachNode calls the functions pre(x) and post(x) for each node</span><br><span class="hljs-comment">// x in the tree rooted at n. Both functions are optional.</span><br><span class="hljs-comment">// pre is called before the children are visits (preorder) and</span><br><span class="hljs-comment">// post is called after (postorder).</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">forEachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(n *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>forEachNode(c, pre, post)<br>&#125;<br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//!-forEachNode</span><br><br><span class="hljs-comment">// !+startend</span><br><span class="hljs-keyword">var</span> depth <span class="hljs-type">int</span><br><br><span class="hljs-comment">// 控制输出的缩进，%*s中的*会在字符串之前填充一些空格。 每次输出会先填充depth*2数量的空格，在输出&quot;&quot;，最后再输出HTML标签。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">startElement</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;%s&gt;\n&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>, n.Data)<br>depth++<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">endElement</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>depth--<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;/%s&gt;\n&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>, n.Data)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//!-startend</span><br></code></pre></td></tr></table></figure><p><code>forEachNode</code>函数有两个函数值的参数，<code>pre</code>和<code>post</code>，它们的类型都是<code>func(n *html.Node)</code>，表示一前一后的处理操作。<br>代码编译运行后，输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./outline.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go ./outline http://go.dev</span><br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;link&gt;<br>    &lt;/link&gt;<br>    &lt;script&gt;<br>    &lt;/script&gt;<br>    &lt;meta&gt;<br>    &lt;/meta&gt;<br>...<br>  &lt;/head&gt;<br>&lt;/html&gt; <br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 5.7：</strong> 完善startElement和endElement函数，使其成为通用的HTML输出器。要求：输出注释结点，文本结点以及每个元素的属性（&lt; a href&#x3D;’…’&gt;）。使用简略格式输出没有孩子结点的元素（即用<img>代替<img>）。编写测试，验证程序输出的格式正确。（详见11章）<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>outline(url)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">outline</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>forEachNode(doc, startElement, endElement)<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">forEachNode</span><span class="hljs-params">(n *html.Node, pre, post <span class="hljs-keyword">func</span>(n *html.Node)</span></span>) &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br>pre(n)<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>forEachNode(c, pre, post)<br>&#125;<br><br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br>post(n)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> depth <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">startElement</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;%s&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>, n.Data)<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br>fmt.Printf(<span class="hljs-string">&quot; %s=%q&quot;</span>, a.Key, a.Val)<br>&#125;<br><span class="hljs-keyword">if</span> n.Data == <span class="hljs-string">&quot;img&quot;</span> &amp;&amp; n.FirstChild == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;/&gt;&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>&#125;<br>depth++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n.Type == html.CommentNode &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;!--%s--&gt;\n&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>, n.Data)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">endElement</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>depth--<br><span class="hljs-keyword">if</span> n.Data != <span class="hljs-string">&quot;img&quot;</span> || n.FirstChild != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%*s&lt;/%s&gt;\n&quot;</span>, depth*<span class="hljs-number">2</span>, <span class="hljs-string">&quot;&quot;</span>, n.Data)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 5.8：</strong> 修改pre和post函数，使其返回布尔类型的返回值。返回false时，中止forEachNoded的遍历。使用修改后的代码编写ElementByID函数，根据用户输入的id查找第一个拥有该id元素的HTML元素，查找成功后，停止遍历。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ElementByID</span><span class="hljs-params">(doc *html.Node, id <span class="hljs-type">string</span>)</span></span> *html.Node<br></code></pre></td></tr></table></figure><p>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> id = flag.String(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment">// $ go build ./outline.go</span><br><span class="hljs-comment">// $ ./outline -id quote_slide0 http://go.dev</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><br><span class="hljs-keyword">var</span> nodes []*html.Node<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">3</span>:] &#123;<br>node, err := outline(url, *id)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;err: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>nodes = <span class="hljs-built_in">append</span>(nodes, node)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, node := <span class="hljs-keyword">range</span> nodes &#123;<br>fmt.Println(node.Data)<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> node.Attr &#123;<br>fmt.Println(a.Key, a.Val)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">outline</span><span class="hljs-params">(url, id <span class="hljs-type">string</span>)</span></span> (*html.Node, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">var</span> node *html.Node<br><span class="hljs-keyword">if</span> node = ElementByID(doc, id); node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;node not found&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> node, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ElementByID</span><span class="hljs-params">(n *html.Node, id <span class="hljs-type">string</span>)</span></span> *html.Node &#123;<br><span class="hljs-keyword">return</span> forEachNode(n, id, findElement, findElement)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">forEachNode</span><span class="hljs-params">(n *html.Node, id <span class="hljs-type">string</span>, pre, post <span class="hljs-keyword">func</span>(n *html.Node, id <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span>) *html.Node &#123;<br><span class="hljs-keyword">if</span> pre != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> pre(n, id) &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br><span class="hljs-keyword">if</span> node := forEachNode(c, id, pre, post); node != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> node<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> post != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> post(n, id) &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findElement</span><span class="hljs-params">(n *html.Node, id <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> a.Key == <span class="hljs-string">&quot;id&quot;</span> &amp;&amp; a.Val == id &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./outline.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./outline -<span class="hljs-built_in">id</span> quote_slide0 http://go.dev</span><br></code></pre></td></tr></table></figure><p><strong>练习 5.9：</strong> 编写函数expand，将s中的”foo”替换为f(“foo”)的返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">expand</span><span class="hljs-params">(s <span class="hljs-type">string</span>, f <span class="hljs-keyword">func</span>(<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span>) <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>foo := <span class="hljs-string">&quot;foo&quot;</span><br>fmt.Println(expand(foo, replace))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">expand</span><span class="hljs-params">(s <span class="hljs-type">string</span>, f <span class="hljs-keyword">func</span>(<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> f(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">replace</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> s + <span class="hljs-string">&quot;-next&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.4. 错误</title>
      <link href="/posts/b269706cb426/"/>
      <url>/posts/b269706cb426/</url>
      
        <content type="html"><![CDATA[<p>函数对于运行失败预期结果，都会返回一个额外的返回值，通常是最后一个，用于传递错误信息。<br>额外的返回值可以是一个布尔值，通常被命名为ok。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">value, ok := cache.Lookup(key)<br><span class="hljs-keyword">if</span> !ok &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以返回error类型的返回值。当error为nil，则代表运行成功，error为non-nil时表示失败。<br>对于non-nil的error类型，可以通过调用error的Error函数或者输出函数获得字符串类型的错误信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(err)<br>fmt.Printf(<span class="hljs-string">&quot;%v&quot;</span>, err)<br></code></pre></td></tr></table></figure><p>通常，当函数返回non-nil的error时，其他返回值是未定义的（undefined），未定义的返回值应该被忽略。但也有函数发生错误时，仍然会返回一些有用的返回值。如，读取文件发生错误时，Read函数会返回可以读取的字节数以及错误信息。对于这种情况，正确的处理方式应该是先处理这些不完整的数据，再处理错误。</p><h1 id="5-4-1-错误处理策略"><a href="#5-4-1-错误处理策略" class="headerlink" title="5.4.1. 错误处理策略"></a>5.4.1. 错误处理策略</h1><p>常用的五种方式：</p><ul><li>传播错误</li><li>重试</li><li>输出错误信息并结束程序</li><li>只输出错误信息</li><li>忽略错误</li></ul><h2 id="传播错误"><a href="#传播错误" class="headerlink" title="传播错误"></a>传播错误</h2><p>当函数发生错误时，可以讲函数错误返回给调用者。<br><code>fmt.Errorf</code>函数使用<code>fmt.Sprintf</code>格式化错误信息并返回。<br>当在传播错误时，应该错误信息前缀添加额外的上下文信息到原始错误信息中，最后错误最终有main函数处理时，错误信息应提供清晰地从原因到后果的因果链。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">genesis: crashed: no parachute: G-<span class="hljs-keyword">switch</span> failed: bad relay orientation<br></code></pre></td></tr></table></figure><p>编写错误信息时，确保错误信息对问题细节的描述是详尽的，要注意错误信息表达的一致性，即相同函数或同包内的同一组函数返回的错误在构成和处理方式上是相似的。如OS包。</p><h2 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h2><p>如果错误的发生是偶然的，或由不可预知的问题导致的，则可以进行重试。<br>在重试时，需要限制重试的时间间隔或重试的次数，防止无限制的重试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// The wait program waits for an HTTP server to start responding.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// !+</span><br><span class="hljs-comment">// WaitForServer attempts to contact the server of a URL.</span><br><span class="hljs-comment">// It tries for one minute using exponential back-off.</span><br><span class="hljs-comment">// It reports an error if all attempt fail.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WaitForServer</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">const</span> timeout = <span class="hljs-number">1</span> * time.Minute<br>deadline := time.Now().Add(timeout)<br><span class="hljs-keyword">for</span> tries := <span class="hljs-number">0</span>; time.Now().Before(deadline); tries++ &#123;<br>_, err := http.Head(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span> <span class="hljs-comment">// success</span><br>&#125;<br>log.Printf(<span class="hljs-string">&quot;server not responding (%v); retrying...&quot;</span>, err)<br>time.Sleep(time.Second &gt;&gt; <span class="hljs-type">uint</span>(tries)) <span class="hljs-comment">// exponential back-off</span><br>&#125;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;server %s failed to respond after %s&quot;</span>, url, timeout)<br>&#125;<br><br><span class="hljs-comment">//!-</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) != <span class="hljs-number">2</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;usage: wait url\n&quot;</span>)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>url := os.Args[<span class="hljs-number">1</span>]<br><span class="hljs-comment">//!+main</span><br><span class="hljs-comment">// (In function main.)</span><br><span class="hljs-keyword">if</span> err := WaitForServer(url); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;Site is down: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-comment">//!-main</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输出错误信息并结束程序"><a href="#输出错误信息并结束程序" class="headerlink" title="输出错误信息并结束程序"></a>输出错误信息并结束程序</h2><p>输出错误信息并结束程序，这种策略只应在main中执行。<br>对库函数而言，应仅向上传播错误，除非该错误意味着程序内部包含不一致性。即遇到了bug，才能在库函数中结束程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := WaitForServer(url); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;Site is down: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>调用log.Fatalf可以更简洁的代码达到与上文相同的效果。<br>log中的所有函数，都默认会在错误信息之前输出时间信息。<br>长时间运行的服务器常采用默认的时间格式，而交互式工具很少采用包含如此多信息的格式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">2023/05/05 05:47:46 Site is down:server https://go.dev failed to respond after 1m0s<br></code></pre></td></tr></table></figure><p>当然，还可以设置log的前缀信息屏蔽时间信息，一般而言，前缀信息会被设置成命令名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">log.SetPrefix(<span class="hljs-string">&quot;wait:&quot;</span>)<br>log.SetFlags(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="只输出错误信息"><a href="#只输出错误信息" class="headerlink" title="只输出错误信息"></a>只输出错误信息</h2><p>有时候，只需要输出错误信息即可，而不中断程序的运行。<br>如log包中输出函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := Ping(); err != <span class="hljs-literal">nil</span> &#123;<br>    log.Printf(<span class="hljs-string">&quot;ping failed: %v; networking disabled&quot;</span>,err)<br>&#125;<br></code></pre></td></tr></table></figure><p>或者标准错误流输出错误信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := Ping(); err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;ping failed: %v; networking disabled\n&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>log包中的所有函数会为没有换行符的字符串增加换行符。</p><h2 id="忽略错误"><a href="#忽略错误" class="headerlink" title="忽略错误"></a>忽略错误</h2><p>如下例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">dir, err := ioutil.TempDir(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;scratch&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;failed to create temp dir: %v&quot;</span>,err)<br>&#125;<br><span class="hljs-comment">// ...use temp dir…</span><br>os.RemoveAll(dir) <span class="hljs-comment">// ignore errors; $TMPDIR is cleaned periodically</span><br></code></pre></td></tr></table></figure><p>尽管<code>os.RemoveAll</code>会失败，但例子中并没有做错误处理。<br>因为操作系统会定期的清理临时目录。所以，程序没有处理错误。<br>当决定忽略某个错误时，应该清晰记录原因。</p><h2 id="错误处理编码风格"><a href="#错误处理编码风格" class="headerlink" title="错误处理编码风格"></a>错误处理编码风格</h2><p>检查某个子函数是否失败后，通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。<br>如上忽略错误的例子。</p><h1 id="5-4-2-文件结尾错误（EOF）"><a href="#5-4-2-文件结尾错误（EOF）" class="headerlink" title="5.4.2. 文件结尾错误（EOF）"></a>5.4.2. 文件结尾错误（EOF）</h1><p><code>io包</code>保证任何由文件结束引起的读取失败都返回同一个错误——<code>io.EOF</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> io<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;errors&quot;</span><br><br><span class="hljs-comment">// EOF is the error returned by Read when no more input is available.</span><br><span class="hljs-keyword">var</span> EOF = errors.New(<span class="hljs-string">&quot;EOF&quot;</span>)<br></code></pre></td></tr></table></figure><p>下面的例子展示了如何从标准输入中读取字符，以及判断文件结束。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">in := bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">for</span> &#123;<br>    r, _, err := in.ReadRune()<br>    <span class="hljs-keyword">if</span> err == io.EOF &#123;<br>        <span class="hljs-keyword">break</span> <span class="hljs-comment">// finished reading</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;read failed:%v&quot;</span>, err)<br>    &#125;<br>    <span class="hljs-comment">// ...use r…</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.3. 多返回值</title>
      <link href="/posts/3b104e15a027/"/>
      <url>/posts/3b104e15a027/</url>
      
        <content type="html"><![CDATA[<p>在Go中，一个函数可以返回多个值。</p><p>下面的程序是findlinks的改进版本。修改后的findlinks可以自己发起HTTP请求，这样我们就不必再运行fetch。因为HTTP请求和解析操作可能会失败，因此findlinks声明了2个返回值：链接列表和错误信息。一般而言，HTML的解析器可以处理HTML页面的错误结点，构造出HTML页面结构，所以解析HTML很少失败。这意味着如果findlinks函数失败了，很可能是由于I&#x2F;O的错误导致的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//for _, url := range os.Args[1:] &#123;</span><br><span class="hljs-comment">//links, err := findLinks(url)</span><br><span class="hljs-comment">//if err != nil &#123;</span><br><span class="hljs-comment">//fmt.Fprintf(os.Stderr, &quot;findlinks2: %v\n&quot;, err)</span><br><span class="hljs-comment">//continue</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//for _, link := range links &#123;</span><br><span class="hljs-comment">//fmt.Println(link)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><br>links, err := findLinks(<span class="hljs-string">&quot;http://go.dev&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;findlinks2: %v\n&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> links &#123;<br>fmt.Println(link)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// findLinks performs an HTTP GET request for url, parses the</span><br><span class="hljs-comment">// response as HTML, and extracts and returns the links.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findLinks</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">if</span> resp.StatusCode != http.StatusOK &#123;<br>resp.Body.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;getting %s: %s&quot;</span>, url, resp.Status)<br>&#125;<br>doc, err := html.Parse(resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;parsing %s as HTML: %v&quot;</span>, url, err)<br>&#125;<br><span class="hljs-keyword">return</span> visit(<span class="hljs-literal">nil</span>, doc), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">visit</span><span class="hljs-params">(links []<span class="hljs-type">string</span>, n *html.Node)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;a&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> a.Key == <span class="hljs-string">&quot;href&quot;</span> &#123;<br>links = <span class="hljs-built_in">append</span>(links, a.Val)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>links = visit(links, c)<br>&#125;<br><span class="hljs-keyword">return</span> links<br>&#125;<br></code></pre></td></tr></table></figure><p>准确的变量名可以传达函数返回值的含义。尤其在返回值的类型都相同时，就像下面这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Size</span><span class="hljs-params">(rect image.Rectangle)</span></span>(width, height <span class="hljs-type">int</span>)<br></code></pre></td></tr></table></figure><p>虽然良好的命名很重要，但也不必为每一个返回值都取一个名字。<br>按照惯例，函数的最后一个bool类型的返回值表示函数是否运行成功，error类型的返回值代表函数的错误信息，所以不必进行命名。</p><p>如果一个函数将所有的返回值都显示的变量名，那么该函数的return语句可以省略操作数。这称之为<code>bare return</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// CountWordsAndImages does an HTTP GET request for the HTML</span><br><span class="hljs-comment">// document url and returns the number of words and images in it.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CountWordsAndImages</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (words, images <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br>    resp, err := http.Get(url)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span><br>    &#125;<br>    doc, err := html.Parse(resp.Body)<br>    resp.Body.Close()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        err = fmt.Errorf(<span class="hljs-string">&quot;parsing HTML: %s&quot;</span>, err)<br>    <span class="hljs-keyword">return</span><br>    &#125;<br>    words, images = countWordsAndImages(doc)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countWordsAndImages</span><span class="hljs-params">(n *html.Node)</span></span> (words, images <span class="hljs-type">int</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>即赋值返回值的命名，则可以直接return，等价于</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">return</span> words, images, err<br></code></pre></td></tr></table></figure><p>但当函数有多处return语句以及许多返回值是，<code>bare return</code>可以减少代码的重复，但降低代码的可读性，所以不宜过度使用<code>bare return</code>。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 5.5：</strong> 实现countWordsAndImages。（参考练习4.9如何分词）<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>images, words, err := CountWordsAndImages(<span class="hljs-string">&quot;http://go.dev&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;err: %v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;images: %d\nwords: %d\n&quot;</span>, images, words)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CountWordsAndImages</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (images, words <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>doc, err := html.Parse(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;parsing HTML: %s&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>images, words = countWordsAndImages(doc)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countWordsAndImages</span><span class="hljs-params">(n *html.Node)</span></span> (images, words <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">if</span> n.Type == html.TextNode &#123;<br>words += <span class="hljs-built_in">len</span>(strings.Fields(n.Data))<br>&#125;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;img&quot;</span> &#123;<br>images++<br>&#125;<br><br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>imgs, ws := countWordsAndImages(c)<br>words += ws<br>images += imgs<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>练习 5.6：</strong> 修改gopl.io&#x2F;ch3&#x2F;surface (§3.2) 中的corner函数，将返回值命名，并使用bare return。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Surface computes an SVG rendering of a 3-D surface function.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>width, height = <span class="hljs-number">600</span>, <span class="hljs-number">320</span>            <span class="hljs-comment">// canvas size in pixels</span><br>cells         = <span class="hljs-number">100</span>                 <span class="hljs-comment">// number of grid cells</span><br>xyrange       = <span class="hljs-number">30.0</span>                <span class="hljs-comment">// axis ranges(-xyrange...+xyrange)</span><br>xyscale       = width / <span class="hljs-number">2</span> / xyrange <span class="hljs-comment">// pixels per x or y unit</span><br>zscale        = height * <span class="hljs-number">0.4</span>        <span class="hljs-comment">// pixels per z unit</span><br>angle         = math.Pi / <span class="hljs-number">6</span>         <span class="hljs-comment">// angle of x, y axes (=30°)</span><br>)<br><br><span class="hljs-keyword">var</span> sin30, cos30 = math.Sin(angle), math.Cos(angle) <span class="hljs-comment">// sin(30°) cos(30°)</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; &quot;</span>+<br><span class="hljs-string">&quot;style=&#x27;stroke: grey; fill: white; stroke-width: 0.7&#x27; &quot;</span>+<br><span class="hljs-string">&quot;width=&#x27;%d&#x27; height=&#x27;%d&#x27;&gt;&quot;</span>, width, height)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; cells; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; cells; j++ &#123;<br>ax, ay := corner(i+<span class="hljs-number">1</span>, j)<br>bx, by := corner(i, j)<br>cx, cy := corner(i, j+<span class="hljs-number">1</span>)<br>dx, dy := corner(i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>)<br>fmt.Printf(<span class="hljs-string">&quot;&lt;polygon points=&#x27;%g,%g,%g,%g,%g,%g,%g,%g&#x27;/&gt;\n&quot;</span>, ax, ay, bx, by, cx, cy, dx, dy)<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;&lt;/svg&gt;&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">corner</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> (sx, sy <span class="hljs-type">float64</span>) &#123;<br><span class="hljs-comment">// Find point(x,y) at corner of cell(i,j).</span><br>x := xyrange * (<span class="hljs-type">float64</span>(i)/cells - <span class="hljs-number">0.5</span>)<br>y := xyrange * (<span class="hljs-type">float64</span>(j)/cells - <span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment">// Compute surface height z.</span><br>z := f(x, y)<br><br><span class="hljs-comment">// Project(x,y,z) isometrically onto 2-D SVG canvas(sx,sy)</span><br>sx = width/<span class="hljs-number">2</span> + (x-y)*cos30*xyscale<br>sy = height/<span class="hljs-number">2</span> + (x+y)*sin30*xyscale - z*zscale<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>r := math.Hypot(x, y) <span class="hljs-comment">// distance from (0,0)</span><br><span class="hljs-keyword">return</span> math.Sin(r) / r<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.2. 递归</title>
      <link href="/posts/3e816bbb7aaa/"/>
      <url>/posts/3e816bbb7aaa/</url>
      
        <content type="html"><![CDATA[<p>函数递归：函数直接或间接地调用自身。<br>例子中调用<code>golang.org/x/net/html</code>的部分api如下所示。html.Parse函数读入一组bytes.解析后，返回html.node类型的HTML页面树状结构根节点。HTML拥有很多类型的结点如text（文本）,commnets（注释）类型，在下面的例子中，我们 只关注&lt; name key&#x3D;’value’ &gt;形式的结点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Findlinks1 prints the links in an HTML document read from standard input.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">$ go build ./../../ch1/fetch.go</span><br><span class="hljs-comment">$ go build ./main.go</span><br><span class="hljs-comment">$ ./fetch https://go.dev | ./main</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>doc, err := html.Parse(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;findlinks1: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> visit(<span class="hljs-literal">nil</span>, doc) &#123;<br>fmt.Println(link)<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// visit appends to links each link found in n and returns the result.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">visit</span><span class="hljs-params">(links []<span class="hljs-type">string</span>, n *html.Node)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;a&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> a.Key == <span class="hljs-string">&quot;href&quot;</span> &#123;<br>links = <span class="hljs-built_in">append</span>(links, a.Val)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>links = visit(links, c)<br>&#125;<br><span class="hljs-keyword">return</span> links<br>&#125;<br></code></pre></td></tr></table></figure><p>使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./../../ch1/fetch.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./main.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./fetch https://go.dev | ./main</span><br></code></pre></td></tr></table></figure><p>为了遍历节点n的所有后代节点，每次遇到n的孩子节点时，visit递归调用自身。<br>可以得出页面内的链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">/<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">/solutions/case-studies</span><br>/solutions/use-cases<br>/security/<br>/learn/<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">/doc/effective_go</span><br>/doc<br>https://pkg.go.dev/std<br>/doc/devel/release<br>https://pkg.go.dev<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">/talks/</span><br>https://www.meetup.com/pro/go<br>https://github.com/golang/go/wiki/Conferences<br>/blog<br>/help<br>https://groups.google.com/g/golang-nuts<br>https://github.com/golang<br>https://twitter.com/golang<br>https://www.reddit.com/r/golang/<br>https://invite.slack.golangbridge.org/<br>https://stackoverflow.com/tags/go<br><br></code></pre></td></tr></table></figure><p>在函数outline中，我们通过递归的方式遍历整个HTML结点树，并输出树的结构。在outline内部，每遇到一个HTML元素标签，就将其入栈，并输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>doc, err := html.Parse(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;outline: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>outline(<span class="hljs-literal">nil</span>, doc)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">outline</span><span class="hljs-params">(stack []<span class="hljs-type">string</span>, n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, n.Data)<br>fmt.Println(stack)<br>&#125;<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>outline(stack, c)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./main.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./fetch https://go.dev | ./main</span><br></code></pre></td></tr></table></figure><p>得到以下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[html]<br>[html head]<br>[html head link]<br>[html head script]<br>[html head meta]<br>[html head meta]<br>[html head meta]<br>[html head link]<br>[html head link]<br>[html head link]<br>[html head link]<br>[html head link]<br>[html head script]<br>[html head script]<br>...<br></code></pre></td></tr></table></figure><p>编程语言大部分会限制使用栈的大小，如64KB到2MB不等。<br>固定大小的栈会限制递归的深度，递归处理大量数据时，需要考虑栈溢出的问题，甚至会导致安全问题。<br>相反，Go语言使用可变栈，即栈的大小按需增加，使得使用递归时不必考虑溢出和安全问题。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 5.1：</strong> 修改findlinks代码中遍历n.FirstChild链表的部分，将循环调用visit，改成递归调用。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>doc, err := html.Parse(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;findlinks1: %v\n&quot;</span>, err) <br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> _, link := <span class="hljs-keyword">range</span> visit(<span class="hljs-literal">nil</span>, doc) &#123;<br>fmt.Println(link)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">visit</span><span class="hljs-params">(links []<span class="hljs-type">string</span>, n *html.Node)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> links<br>&#125;<br><br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="hljs-string">&quot;a&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> a.Key == <span class="hljs-string">&quot;href&quot;</span> &#123;<br>links = <span class="hljs-built_in">append</span>(links, a.Val)<br>&#125;<br>&#125;<br>&#125;<br><br>links = visit(links, n.FirstChild)<br>links = visit(links, n.NextSibling)<br><br><span class="hljs-keyword">return</span> links<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 5.2：</strong> 编写函数，记录在HTML树中出现的同名元素的次数。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> count = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>doc, err := html.Parse(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;html parse: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>visit(doc)<br><span class="hljs-keyword">for</span> v, c := <span class="hljs-keyword">range</span> count &#123;<br>fmt.Println(v, c)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">visit</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &#123;<br>count[n.Data]++<br>&#125;<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>visit(c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 5.3：</strong> 编写函数输出所有text结点的内容。注意不要访问<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>元素,因为这些元素对浏览者是不可见的。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>doc, err := html.Parse(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;%v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> _, text := <span class="hljs-keyword">range</span> visit(<span class="hljs-literal">nil</span>, doc) &#123;<br>fmt.Println(text)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">visit</span><span class="hljs-params">(texts []<span class="hljs-type">string</span>, n *html.Node)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data != <span class="hljs-string">&quot;script&quot;</span> &amp;&amp; n.Data != <span class="hljs-string">&quot;style&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br>texts = <span class="hljs-built_in">append</span>(texts, a.Val)<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>texts = visit(texts, c)<br>&#125;<br><span class="hljs-keyword">return</span> texts<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 5.4：</strong> 扩展visit函数，使其能够处理其他类型的结点，如images、scripts和style sheets。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;golang.org/x/net/html&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>doc, err := html.Parse(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;findlinks1: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>visit(doc)<br><br>fmt.Fprintf(os.Stdout, <span class="hljs-string">&quot;links:%v\nimgs:%v\nscripts:%v\nstyles:%v\n&quot;</span>, links, imgs, scripts, styles)<br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>links   []<span class="hljs-type">string</span><br>imgs    []<span class="hljs-type">string</span><br>scripts []<span class="hljs-type">string</span><br>styles  []<span class="hljs-type">string</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">visit</span><span class="hljs-params">(n *html.Node)</span></span> &#123;<br><span class="hljs-keyword">if</span> n.Type != html.ElementNode &#123;<br><span class="hljs-keyword">goto</span> LOOP<br>&#125;<br><br><span class="hljs-keyword">switch</span> n.Data &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>:<br><span class="hljs-keyword">for</span> _, a := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> a.Key == <span class="hljs-string">&quot;href&quot;</span> &#123;<br>links = <span class="hljs-built_in">append</span>(links, a.Val)<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;img&quot;</span>:<br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> i.Key == <span class="hljs-string">&quot;src&quot;</span> &#123;<br>imgs = <span class="hljs-built_in">append</span>(imgs, i.Val)<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;script&quot;</span>:<br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> s.Key == <span class="hljs-string">&quot;src&quot;</span> &#123;<br>scripts = <span class="hljs-built_in">append</span>(scripts, s.Val)<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;link&quot;</span>:<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> n.Attr &#123;<br><span class="hljs-keyword">if</span> m.Key == <span class="hljs-string">&quot;href&quot;</span> &#123;<br>styles = <span class="hljs-built_in">append</span>(styles, m.Val)<br>&#125;<br>&#125;<br>&#125;<br><br>LOOP:<br><span class="hljs-keyword">for</span> c := n.FirstChild; c != <span class="hljs-literal">nil</span>; c = c.NextSibling &#123;<br>visit(c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.1. 函数声明</title>
      <link href="/posts/9ebdd846b6d6/"/>
      <url>/posts/9ebdd846b6d6/</url>
      
        <content type="html"><![CDATA[<p>函数声明的写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">name</span><span class="hljs-params">(parameter-list)</span></span> (result-list) &#123;<br>body<br>&#125;<br></code></pre></td></tr></table></figure><p>函数声包括函数名、形式参数列表、返回值列表（可省略）以及函数体。<br>形式参数列表描述了函数的参数名以及参数类型。<br>返回值列表描述了函数返回值的变量名以及类型。<br>如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。<br>函数声明没有返回值列表时，那么函数体执行完毕后，不会返回任何值。<br>如果一组形参或返回值有相同的类型，可以简化成一个参数类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(i,j,k <span class="hljs-type">int</span>, s, t <span class="hljs-type">string</span>)</span></span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(i <span class="hljs-type">int</span>, j <span class="hljs-type">int</span>, k <span class="hljs-type">int</span>, s <span class="hljs-type">string</span>, t <span class="hljs-type">string</span>)</span></span>&#123;<span class="hljs-comment">/*...*/</span>&#125;<br></code></pre></td></tr></table></figure><p>当形参未被使用时，可以使用_表示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">first</span><span class="hljs-params">(x <span class="hljs-type">int</span>, _ <span class="hljs-type">int</span>)</span></span> &#123;<span class="hljs-keyword">return</span> x&#125;<br></code></pre></td></tr></table></figure><p>函数的类型被称为函数的标识符。<br>如果两个函数的形参列表和返回值列表中的变量类型一一对应，那么可以说这两个函数有相同的类型和标识符，也就是这两个函数相同。<br>形参和返回值的变量名不影响函数标识符，也不影响它们是否可以以省略参数类型的形式表示。</p><p>调用参数时必须按照函数声明顺序为所有参数提供实参。<br>Go语言中，函数没有默认参数值，也没有任何方法可以通过参数名指定形参，因此形参和返回值的变量名对应函数调用者而言没有意义。</p><p>在函数体中，形参作为局部变量，被初始化为调用者提供的值。<br>函数的形参和有名返回值作为函数最外层的局部变量，被存储在相同的词法块中。</p><p>实参通过值的方式进行传递，因此函数的形参是实参的拷贝。<br>对形参的修改不会影响实参，但如果实参为引用类型，如指针、slice、map、function、channel等类型，实参可能由于函数的简接引用而被修改。</p><p>当遇到没有函数体的函数声明，这表示该函数不是以Go实现的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> math<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sin</span><span class="hljs-params">(x <span class="hljs-type">float64</span>)</span></span> float<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.6 文本和HTML模版</title>
      <link href="/posts/4d1bb1bed6d0/"/>
      <url>/posts/4d1bb1bed6d0/</url>
      
        <content type="html"><![CDATA[<p>复杂的打印格式可以使用<code>text/template</code>和<code>html\template</code>等模板包实现。<br>模版包含一个字符串或一个文件，里面包含一个或多个由双花括号包含的<code>&#123;&#123;action&#125;&#125;</code>对象。<br><code>action</code>对象包含一个用模板语言书写的表达式，如选择结构体的成员、调用函数或方法、表达式控制流if-else语句和range循环语句等等特性。</p><h1 id="text-template"><a href="#text-template" class="headerlink" title="text&#x2F;template"></a>text&#x2F;template</h1><p>下面是一个简单的模板字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ch/ch4/github&quot;</span><br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// !+template</span><br><span class="hljs-keyword">const</span> templ = <span class="hljs-string">`&#123;&#123;.TotalCount&#125;&#125; issues:</span><br><span class="hljs-string">&#123;&#123;range .Items&#125;&#125;---------------------------------------</span><br><span class="hljs-string">Number:&#123;&#123;.Number&#125;&#125;</span><br><span class="hljs-string">User:&#123;&#123;.User.Login&#125;&#125;</span><br><span class="hljs-string">Title:&#123;&#123;.Title | printf &quot;%.64s&quot;&#125;&#125;</span><br><span class="hljs-string">Age:&#123;&#123;.CreatedAt | daysAgo&#125;&#125; days</span><br><span class="hljs-string">&#123;&#123;end&#125;&#125;`</span><br><br><span class="hljs-comment">//!-template</span><br><br><span class="hljs-comment">// !+daysAgo</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">daysAgo</span><span class="hljs-params">(t time.Time)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(time.Since(t).Hours() / <span class="hljs-number">24</span>)<br>&#125;<br><br><span class="hljs-comment">//!-daysAgo</span><br><br><span class="hljs-comment">// !+exec</span><br><span class="hljs-keyword">var</span> report = template.Must(template.New(<span class="hljs-string">&quot;issuelist&quot;</span>).<br>Funcs(template.FuncMap&#123;<span class="hljs-string">&quot;daysAgo&quot;</span>: daysAgo&#125;).<br>Parse(templ))<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>result, err := github.SearchIssues(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> err := report.Execute(os.Stdout, result); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// !-exec</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">noMust</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//!+parse</span><br>report, err := template.New(<span class="hljs-string">&quot;reprot&quot;</span>).<br>Funcs(template.FuncMap&#123;<span class="hljs-string">&quot;daysAgo&quot;</span>: daysAgo&#125;).<br>Parse(templ)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-comment">//!-parse</span><br><br>result, err := github.SearchIssues(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> err := report.Execute(os.Stdout, result); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//!+output</span><br><span class="hljs-comment">$ go run main.go windows+label:bug</span><br><span class="hljs-comment">651325 issues:</span><br><span class="hljs-comment">---------------------------------------</span><br><span class="hljs-comment">Number: 1449</span><br><span class="hljs-comment">User:   sensuikan1973</span><br><span class="hljs-comment">Title:  debug windows widget test</span><br><span class="hljs-comment">Age:    0 days</span><br><span class="hljs-comment">---------------------------------------</span><br><span class="hljs-comment">Number: 334</span><br><span class="hljs-comment">User:   mkilgore</span><br><span class="hljs-comment">Title:  Fix keyboard _Device on Windows</span><br><span class="hljs-comment">Age:    0 days</span><br><span class="hljs-comment">---------------------------------------</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">//!-output</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><p>点操作符<code>.</code>可以引用模板调用参数，当前例子中对应为<code>github.IssuesSearchResult</code>类型的变量。<br>模板中<code>&#123;&#123;.TotalCount&#125;&#125;</code>对应action将展开为结构体中<code>TotalCount</code>成员以默认的方式打印的值。<br>模板中<code>&#123;&#123;range .Items&#125;&#125;</code>和<code>&#123;&#123;end&#125;&#125;</code>对应一个循环action，可以进行循环迭代，每次迭代的当前值对应当前的Iteams元素的值。<br><code>|</code>操作符表示将前一个表达式的结果作为后一个函数的输入，类型UNIX中管道的概率。<br>在Title这一行的action中，第二个操作是一个printf函数，是一个基于fmt.Sprintf实现的内置函数，所有模板都可以直接使用。<br>对于Age部分，第二个动作是一个叫daysAgo的函数，通过time.Since函数将CreatedAt成员转换为过去的时间长度。</p><p>生成模板的输出需要两个处理步骤。第一步是要分析模板并转为内部表示，然后基于指定的输入执行模板。<br>分析模板部分一般只需要执行一次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">report, err := template.New(<span class="hljs-string">&quot;reprot&quot;</span>).<br>Funcs(template.FuncMap&#123;<span class="hljs-string">&quot;daysAgo&quot;</span>: daysAgo&#125;).<br>Parse(templ)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的模板执行顺序：</p><ol><li><code>template.New</code>先创建并返回一个模板。</li><li><code>Funcs</code>方法将<code>daysAgo</code>等自定义函数注册到模板中，并返回模板。</li><li>最后调用<code>Parse</code>函数分析模板。</li></ol><p><code>template.Must</code>辅助函数可以简化模板解析失败的处理：它接受一个模板和一个error类型的参数，检测error是否为nil（如果不是nil则发出panic异常），然后返回传入的模板。</p><p>模板创建、注册函数、并通过分析和检测，可以使用<code>github.IssuesSearchResult</code>作为输入源、<code>os.Stdout</code>作为输出源来执行模板：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> report = template.Must(template.New(<span class="hljs-string">&quot;issuelist&quot;</span>).<br>Funcs(template.FuncMap&#123;<span class="hljs-string">&quot;daysAgo&quot;</span>: daysAgo&#125;).<br>Parse(templ))<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>result, err := github.SearchIssues(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> err := report.Execute(os.Stdout, result); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="html-template"><a href="#html-template" class="headerlink" title="html&#x2F;template"></a>html&#x2F;template</h1><p><code>html/template</code>包使用的API和模板语言与<code>text/template</code>包一样，但增加了一个讲字符串自动转义特性，以避免输入字符串和HTML、JavaScript、CSS或URL语法产生冲突的问题。还能避免安全问题，如通过生成HTML注入攻击、通过构造一个含有恶意代码的问题标题。<br>下面的模板以HTML格式输出issue列表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Issueshtml prints an HTML table of issues matching the search terms.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go-learn-gopl/ch/ch4/github&quot;</span><br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-comment">// !+template</span><br><span class="hljs-keyword">var</span> issueList = template.Must(template.New(<span class="hljs-string">&quot;issuelist&quot;</span>).Parse(<span class="hljs-string">`</span><br><span class="hljs-string">&lt;h1&gt;&#123;&#123;.TotalCount&#125;&#125; issues&lt;/h1&gt;</span><br><span class="hljs-string">&lt;table&gt;</span><br><span class="hljs-string">&lt;tr style=&#x27;text-align: left&#x27;&gt;</span><br><span class="hljs-string">&lt;th&gt;#&lt;/th&gt;</span><br><span class="hljs-string">&lt;th&gt;State&lt;/th&gt;</span><br><span class="hljs-string">&lt;th&gt;User&lt;/th&gt;</span><br><span class="hljs-string">&lt;th&gt;Title&lt;/th&gt;</span><br><span class="hljs-string">&lt;/tr&gt;</span><br><span class="hljs-string">&#123;&#123;range .Items&#125;&#125;</span><br><span class="hljs-string">&lt;tr&gt;</span><br><span class="hljs-string">&lt;td&gt;&lt;a href=&#x27;&#123;&#123;.HTMLURL&#125;&#125;&#x27;&gt;&#123;&#123;.Number&#125;&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="hljs-string">&lt;td&gt;&#123;&#123;.State&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">&lt;td&gt;&lt;a href=&#x27;&#123;&#123;.User.HTMLURL&#125;&#125;&#x27;&gt;&#123;&#123;.User.Login&#125;&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="hljs-string">&lt;td&gt;&lt;a href=&#x27;&#123;&#123;.HTMLURL&#125;&#125;&#x27;&gt;&#123;&#123;.Title&#125;&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="hljs-string">&lt;/tr&gt;</span><br><span class="hljs-string">&#123;&#123;end&#125;&#125;</span><br><span class="hljs-string">&lt;/table&gt;</span><br><span class="hljs-string">`</span>))<br><br><span class="hljs-comment">//!-template</span><br><br><span class="hljs-comment">// !+</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>result, err := github.SearchIssues(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> err := issueList.Execute(os.Stdout, result); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//!-</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//!+output</span><br><span class="hljs-comment">$ go run main.go windows+label:bug</span><br><span class="hljs-comment">//!-output</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><p>得出结果：<br><img src="/posts/4d1bb1bed6d0/1682529639246.png" alt="enter description here"><br><strong>html&#x2F;template包自动将特殊字符转义，因此依然可以看到正确的字面值。</strong><br>如果使用<code>text/template</code>包的话，如”&It;”四个字符会被当作小于字符”&lt;”处理，同时”<link>“字符串会被当作一个链接元素处理，就会导致HTML文档结构的改变，从而导致有未知的风险。<br>通过对信任的HTML字符串使用template.HTML类型来抑制这种自动转义的行为。还有很多采用类型命名的字符串类型分别对应信任的JavaScript、CSS和URL。<br>下面的程序演示了两个使用不同类型的相同字符串产生的不同结果：A是一个普通字符串，B是一个信任的template.HTML字符串类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Autoescape demonstrate automatic HTML escaping in html/template.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-comment">// !+</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> templ = <span class="hljs-string">`&lt;p&gt;A: &#123;&#123;.A&#125;&#125;&lt;/p&gt;&lt;p&gt;B: &#123;&#123;.B&#125;&#125;&lt;/p&gt;`</span><br>t := template.Must(template.New(<span class="hljs-string">&quot;escape&quot;</span>).Parse(templ))<br><span class="hljs-keyword">var</span> data <span class="hljs-keyword">struct</span> &#123;<br>A <span class="hljs-type">string</span><br>B template.HTML<br>&#125;<br>data.A = <span class="hljs-string">&quot;&lt;b&gt;Hello!&lt;/b&gt;&quot;</span><br>data.B = <span class="hljs-string">&quot;&lt;b&gt;Hello!&lt;/b&gt;&quot;</span><br><span class="hljs-keyword">if</span> err := t.Execute(os.Stdout, data); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//!-</span><br></code></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run main.go &gt;autoescape.html</span><br></code></pre></td></tr></table></figure><p><img src="/posts/4d1bb1bed6d0/1682530571287.png" alt="enter description here"><br>由上图可知，A的黑体标志被转义失效了，但B没有。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 4.14：</strong> 创建一个web服务器，查询一次GitHub，然后生成BUG报告、里程碑和对应的用户信息。<br>解：<br>issue&#x2F;issue.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> issue<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> IssuesURL = <span class="hljs-string">&quot;https://api.github.com/search/issues&quot;</span><br><br><span class="hljs-keyword">type</span> IssuesSearchResult <span class="hljs-keyword">struct</span> &#123;<br>TotalCount <span class="hljs-type">int</span> <span class="hljs-string">`json:total_count`</span><br>Items      []Issue<br>&#125;<br><br><span class="hljs-keyword">type</span> Issue <span class="hljs-keyword">struct</span> &#123;<br>Title     <span class="hljs-type">string</span><br>User      User<br>Milestone Milestone<br>&#125;<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Login <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Milestone <span class="hljs-keyword">struct</span> &#123;<br>Title       <span class="hljs-type">string</span><br>Description <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SearchIssues</span><span class="hljs-params">(params <span class="hljs-type">string</span>)</span></span> (*IssuesSearchResult, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(IssuesURL + <span class="hljs-string">&quot;?q=&quot;</span> + params)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">var</span> result IssuesSearchResult<br><span class="hljs-keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;result); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;result, <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Issue Search&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;&#123;&#123;.TotalCount&#125;&#125; issues:&lt;/h1&gt;<br>&lt;table&gt;<br>    &lt;tr style=<span class="hljs-string">&quot;text-align: left&quot;</span>&gt;<br>        &lt;th&gt;Title&lt;/th&gt;<br>        &lt;th&gt;User&lt;/th&gt;<br>        &lt;th&gt;Milestone&lt;/th&gt;<br>        &lt;th&gt;Description&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123;<span class="hljs-keyword">range</span> .Items&#125;&#125;<br>    &lt;tr&gt;<br>        &lt;td&gt;&#123;&#123;.Title&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.User.Login&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.Milestone.Title&#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123;.Milestone.Description&#125;&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123;end&#125;&#125;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex4/ex4.14/issue&quot;</span><br><span class="hljs-string">&quot;html/template&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, Handler)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintln(w, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>q := r.FormValue(<span class="hljs-string">&quot;key&quot;</span>)<br>result, err := issue.SearchIssues(q)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintln(w, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>templ := template.Must(template.ParseFiles(<span class="hljs-string">&quot;./ex/ex4/ex4.14/index.html&quot;</span>))<br><span class="hljs-keyword">if</span> err := templ.Execute(w, result); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintln(w, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.5. JSON</title>
      <link href="/posts/b184f11121f4/"/>
      <url>/posts/b184f11121f4/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>JSON（JavaScript Object Notation）是基于JavaScript语言的轻量级的数据交换格式，也常用于发送和接收结构化信息的标准协议。<br>还有类似的协议，如XML、ASN.1和Google的Protocol Buffers。</p><p>Go语言对于这些标准格式的编码和解码都有良好的支持，标准库中对应的包有<code>encoding/json</code>、<code>encoding/xml</code>、<code>encoding/asn1</code>。“Protocol Buffers的支持由 github.com&#x2F;golang&#x2F;protobuf 包提供）。</p><h1 id="JSON支持的类型"><a href="#JSON支持的类型" class="headerlink" title="JSON支持的类型"></a>JSON支持的类型</h1><p>JSON是对JavaScript中各种类型的Unicode文本编码。<br>JSON类型如下：</p><ul><li>字符串<br>  字符串是以双引号包含的Unicode字符序列，支持和Go语言类似的反斜杠转义特性，不过JSON使用的是\Uhhhh转义数字来表示一个UTF-16编码（译注：UTF-16和UTF-8一样是一种变长的编码，有些Unicode码点较大的字符需要用4个字节表示；而且UTF-16还有大端和小端的问题），而不是Go语言的rune类型。如：”She said &quot;Hello,BF&quot;“</li><li>数字number<br>  十进制或科学计数法，如：-273.15</li><li>布尔值boolean<br>  true或false</li><li>数组array<br>  如：[“gold”,”silver”,”bronze”]</li><li>对象object<br>  如：<br>  {<br>          “year”: 1980,<br>           “event”: “archery”,<br>           “medals”: [“gold”, “silver”, “bronze”]<br>  }</li></ul><p>下面程序负责收集各种电影评论并提供反馈功能。它的Movie数据类型和一个典型的表示电影的值列表如下所示:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">type</span> Movie <span class="hljs-keyword">struct</span> &#123;<br>Title  <span class="hljs-type">string</span><br>Year   <span class="hljs-type">int</span>  <span class="hljs-string">`json:&quot;released&quot;`</span><br>Color  <span class="hljs-type">bool</span> <span class="hljs-string">`json:&quot;color,omitempty&quot;`</span><br>Actors []<span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> movies = []Movie&#123;<br>&#123;Title: <span class="hljs-string">&quot;Casablanca&quot;</span>, Year: <span class="hljs-number">1942</span>, Color: <span class="hljs-literal">false</span>, Actors: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;Humphrey Bogart&quot;</span>, <span class="hljs-string">&quot;Ingrid Bergman&quot;</span>&#125;&#125;,<br>&#123;Title: <span class="hljs-string">&quot;Cool Hand Luke&quot;</span>, Year: <span class="hljs-number">1967</span>, Color: <span class="hljs-literal">true</span>, Actors: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;Paul Newman&quot;</span>&#125;&#125;,<br>&#123;Title: <span class="hljs-string">&quot;Bullitt&quot;</span>, Year: <span class="hljs-number">1968</span>, Color: <span class="hljs-literal">true</span>, Actors: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;Steve McQueen&quot;</span>, <span class="hljs-string">&quot;Jacqueline Bisset&quot;</span>&#125;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JSON的编码与解码"><a href="#JSON的编码与解码" class="headerlink" title="JSON的编码与解码"></a>JSON的编码与解码</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>将一个Go语言中类似movies的结构体slice转为JSON的过程叫编码（marshaling）。<br>通过<code>json.Marshall</code>函数完成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">data, err := json.Marshal(movies)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;JSON marshaling failed:%s&quot;</span>, err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, data)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">[&#123;&quot;Title&quot;:&quot;Casablanca&quot;,&quot;released&quot;:1942,&quot;Actors&quot;:[&quot;Humphrey Bogart&quot;,&quot;Ingrid Bergman&quot;]&#125;,&#123;&quot;Title&quot;:&quot;Cool Hand Luke&quot;,&quot;released&quot;:1967,&quot;color&quot;:true,&quot;Actors&quot;:[&quot;Paul Newman&quot;]&#125;,&#123;&quot;Title&quot;:&quot;Bullitt&quot;,&quot;released&quot;:1968,&quot;color&quot;:true,&quot;Actors&quot;:[&quot;Steve McQueen&quot;,&quot;Jacqueline Bisset&quot;]&#125;]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><code>json.MarshalIndent</code>函数可以产生整齐缩进的输出，以便阅读。<br>该函数有两个字符串参数，分别表示每一行输出的前缀和每一个层级的缩进。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go">data, err := json.MarshalIndent(movies, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;JSON marshaling failed:%s&quot;</span>, err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, data)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">[</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">                &quot;Title&quot;: &quot;Casablanca&quot;,</span><br><span class="hljs-comment">                &quot;released&quot;: 1942,</span><br><span class="hljs-comment">                &quot;Actors&quot;: [</span><br><span class="hljs-comment">                        &quot;Humphrey Bogart&quot;,</span><br><span class="hljs-comment">                        &quot;Ingrid Bergman&quot;</span><br><span class="hljs-comment">                ]</span><br><span class="hljs-comment">        &#125;,</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">                &quot;Title&quot;: &quot;Cool Hand Luke&quot;,</span><br><span class="hljs-comment">                &quot;released&quot;: 1967,</span><br><span class="hljs-comment">                &quot;color&quot;: true,</span><br><span class="hljs-comment">                &quot;Actors&quot;: [</span><br><span class="hljs-comment">                        &quot;Paul Newman&quot;</span><br><span class="hljs-comment">                ]</span><br><span class="hljs-comment">        &#125;,</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">                &quot;Title&quot;: &quot;Bullitt&quot;,</span><br><span class="hljs-comment">                &quot;released&quot;: 1968,</span><br><span class="hljs-comment">                &quot;color&quot;: true,</span><br><span class="hljs-comment">                &quot;Actors&quot;: [</span><br><span class="hljs-comment">                        &quot;Steve McQueen&quot;,</span><br><span class="hljs-comment">                        &quot;Jacqueline Bisset&quot;</span><br><span class="hljs-comment">                ]</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>在编码时，默认使用Go语言结构体的成员名字作为JSON的对象（通过reflect反射技术，我们将在12.6节讨论）。<br><strong>只有导出的结构体成员才会被编码</strong>，这也就是我们为什么选择用大写字母开头的成员名称。</p><p>其中Year名字的成员在编码后变成了released，还有Color成员编码后变成了小写字母开头的color。这是因为构体成员<code>Tag</code>所导致的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">Year  <span class="hljs-type">int</span>  <span class="hljs-string">`json:&quot;released&quot;`</span><br>Color <span class="hljs-type">bool</span> <span class="hljs-string">`json:&quot;color,omitempty&quot;`</span><br></code></pre></td></tr></table></figure><p>结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:”value”键值对序列；因为值中含义双引号字符，因此成员Tag一般用原生字符串面值的形式书写。<br>json开头键名对应的值用于控制encoding&#x2F;json包的编码和解码的行为，并且encoding&#x2F;…下面其它的包也遵循这个约定。<br>成员的Tag中json对应值的第一部分用于指定JSON对象的名字，比如将Go语言中的TotalCount成员对应到JSON中的total_count对象。<br>Color成员的Tag还带了一个额外的omitempty选项，表示当Go语言结构体成员为空或零值时不生成JSON对象（这里false为零值）。</p><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>编码的逆操作是解码，对应将JSON数据解码为Go语言的数据结构，Go语言中一般叫<code>unmarshaling</code>，通过<code>json.Unmarshal</code>函数完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> titles []<span class="hljs-keyword">struct</span>&#123; Title <span class="hljs-type">string</span> &#125;<br><span class="hljs-keyword">if</span> err := json.Unmarshal(data, &amp;titles); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;JSON unmarshaling failed:%s&quot;</span>, err)<br>&#125;<br>fmt.Println(titles) <span class="hljs-comment">// [&#123;Casablanca&#125; &#123;Cool Hand Luke&#125; &#123;Bullitt&#125;]</span><br></code></pre></td></tr></table></figure><p>通过定义合适的Go语言数据结构，可以选择性地解码JSON中感兴趣的成员。<br>当Unmarshal函数返回时，slice将只含有Title信息值填充，其它的JSON成员将被忽略。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="Github的issue查询服务"><a href="#Github的issue查询服务" class="headerlink" title="Github的issue查询服务"></a>Github的issue查询服务</h2><p>许多web服务都提供JSON接口，通过HTTP接口发送JSON格式请求并返回JSON格式的信息。为了说明这一点，我们通过Github的issue查询服务来演示类似的用法。<br>定义合适的类型和常量：<br>github.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> github<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> IssuesURL = <span class="hljs-string">&quot;https://api.github.com/search/issues&quot;</span><br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Login   <span class="hljs-type">string</span><br>HTMLURL <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;html_url&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Issue <span class="hljs-keyword">struct</span> &#123;<br>Number    <span class="hljs-type">int</span><br>HTMLURL   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;html_url&quot;`</span><br>Title     <span class="hljs-type">string</span><br>State     <span class="hljs-type">string</span><br>User      *User<br>CreatedAt time.Time <span class="hljs-string">`json:&quot;created_at&quot;`</span><br>Body      <span class="hljs-type">string</span>    <span class="hljs-comment">// in Markdown format</span><br>&#125;<br><br><span class="hljs-keyword">type</span> IssuesSearchResult <span class="hljs-keyword">struct</span> &#123;<br>TotalCount <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;total_count&quot;`</span><br>Items      []*Issue<br>&#125;<br></code></pre></td></tr></table></figure><p>定义查询方法：<br>search.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> github<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;net/url&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// SearchIssues queries the GitHub issue tracker.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SearchIssues</span><span class="hljs-params">(terms []<span class="hljs-type">string</span>)</span></span> (*IssuesSearchResult, <span class="hljs-type">error</span>) &#123;<br>q := url.QueryEscape(strings.Join(terms, <span class="hljs-string">&quot;&quot;</span>))<br>resp, err := http.Get(IssuesURL + <span class="hljs-string">&quot;?q=&quot;</span> + q)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-comment">// We must close resp.Body on all executing paths.</span><br><span class="hljs-keyword">if</span> resp.StatusCode != http.StatusOK &#123;<br>resp.Body.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;search query failed:%s&quot;</span>, resp.Status)<br>&#125;<br><br><span class="hljs-keyword">var</span> result IssuesSearchResult<br><span class="hljs-keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;result); err != <span class="hljs-literal">nil</span> &#123;<br>resp.Body.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>resp.Body.Close()<br><span class="hljs-keyword">return</span> &amp;result, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编写主程序，包含输出请求结果：<br>issue&#x2F;main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch4/github&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// windows+label:bug</span><br>result, err := github.SearchIssues(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%d issues:\n&quot;</span>, result.TotalCount)<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> result.Items &#123;<br>fmt.Printf(<span class="hljs-string">&quot;#%-5d %9.9s %.55s\n&quot;</span>, item.Number, item.User.Login, item.Title)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过一下命令进行程序运行及输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build ./issues/main.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main.go windows+label:bug</span><br>649797 issues:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">14     deondreE Windows Integration</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">11948  wujunwei fix: failed testcase on windows</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">20821  joker5bb Build fails on windows</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">272    tieugene Windows issues</span><br>...<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 4.10：</strong>  修改issues程序，根据问题的时间进行分类，比如不到一个月的、不到一年的、超过一年。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch4/github&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> class <span class="hljs-type">string</span><br><br><span class="hljs-keyword">const</span> (<br>LTOM class = <span class="hljs-string">&quot;less than one month&quot;</span><br>MTOM class = <span class="hljs-string">&quot;more than one month&quot;</span><br>LTOY class = <span class="hljs-string">&quot;less than one year&quot;</span><br>MTOY class = <span class="hljs-string">&quot;more than one year&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>result, err := github.SearchIssues(os.Args[<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>issueClass := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[class][]github.Issue)<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> result.Items &#123;<br>item := *item<br>y, m, _ := item.CreatedAt.Date()<br>cy, cm, _ := time.Now().Date()<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> cm-m &lt;= time.Month(<span class="hljs-number">1</span>):<br>issueClass[LTOM] = <span class="hljs-built_in">append</span>(issueClass[LTOM], item)<br><span class="hljs-keyword">case</span> cm-m &gt; time.Month(<span class="hljs-number">1</span>):<br>issueClass[MTOM] = <span class="hljs-built_in">append</span>(issueClass[MTOM], item)<br><span class="hljs-keyword">case</span> cy-y &lt;= <span class="hljs-number">1</span>:<br>issueClass[LTOY] = <span class="hljs-built_in">append</span>(issueClass[LTOY], item)<br><span class="hljs-keyword">case</span> cy-y &gt; <span class="hljs-number">1</span>:<br>issueClass[MTOY] = <span class="hljs-built_in">append</span>(issueClass[MTOY], item)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> class, issues := <span class="hljs-keyword">range</span> issueClass &#123;<br>fmt.Printf(<span class="hljs-string">&quot;class: %s, issue: %v\n&quot;</span>, class, issues)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 4.11：</strong> 编写一个工具，允许用户在命令行创建、读取、更新和关闭GitHub上的issue，当必要的时候自动打开用户默认的编辑器用于输入文本信息。<br>解：<br>issue&#x2F;issue.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> issue<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Params <span class="hljs-keyword">struct</span> &#123;<br>Owner  <span class="hljs-type">string</span><br>Repo   <span class="hljs-type">string</span><br>Number <span class="hljs-type">string</span><br>Token  <span class="hljs-type">string</span><br>Issue<br>&#125;<br><br><span class="hljs-keyword">type</span> Issue <span class="hljs-keyword">struct</span> &#123;<br>Title <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span><br>Body  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;body&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">const</span> baseURL = <span class="hljs-string">&quot;https://api.github.com/repos/&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Params)</span></span> GetIssues() ([]Issue, <span class="hljs-type">error</span>) &#123;<br>u := baseURL + p.Owner + <span class="hljs-string">&quot;/&quot;</span> + p.Repo + <span class="hljs-string">&quot;/issues&quot;</span><br>resp, err := http.Get(u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">var</span> issues []Issue<br><span class="hljs-keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;issues); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> issues, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Params)</span></span> GetIssue() (Issue, <span class="hljs-type">error</span>) &#123;<br>u := baseURL + p.Owner + <span class="hljs-string">&quot;/&quot;</span> + p.Repo + <span class="hljs-string">&quot;/issue&quot;</span> + <span class="hljs-string">&quot;/&quot;</span> + p.Number<br>resp, err := http.Get(u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> Issue&#123;&#125;, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">var</span> issue Issue<br><span class="hljs-keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;issue); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> Issue&#123;&#125;, err<br>&#125;<br><span class="hljs-keyword">return</span> issue, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Params)</span></span> CreateIssue() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br><span class="hljs-keyword">if</span> err := json.NewEncoder(&amp;buf).Encode(p.Issue); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>u := baseURL + p.Owner + <span class="hljs-string">&quot;/&quot;</span> + p.Repo + <span class="hljs-string">&quot;/issues&quot;</span> + <span class="hljs-string">&quot;?access_token&quot;</span> + p.Token<br>_, err := http.Post(u, <span class="hljs-string">&quot;application/json&quot;</span>, &amp;buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Params)</span></span> EditIssue() <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br><span class="hljs-keyword">if</span> err := json.NewEncoder(&amp;buf).Encode(p.Issue); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>u := baseURL + p.Owner + <span class="hljs-string">&quot;/&quot;</span> + p.Repo + <span class="hljs-string">&quot;/issues&quot;</span> + <span class="hljs-string">&quot;/&quot;</span> + p.Number + <span class="hljs-string">&quot;?access+token=&quot;</span> + p.Token<br>request, err := http.NewRequest(http.MethodPatch, u, &amp;buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>request.Header.Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>client := &amp;http.Client&#123;&#125;<br>_, err = client.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex4.11/issue&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>create = flag.Bool(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>)<br>list   = flag.Bool(<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>)<br>read   = flag.Bool(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>)<br>edit   = flag.Bool(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>owner  = flag.String(<span class="hljs-string">&quot;owner&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>repo   = flag.String(<span class="hljs-string">&quot;repo&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>number = flag.String(<span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>token  = flag.String(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>title = flag.String(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>body  = flag.String(<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> *create:<br>p := issue.Params&#123;Owner: *owner,<br>Repo:  *repo,<br>Token: *token,<br>Issue: issue.Issue&#123;Title: *title, Body: *body&#125;&#125;<br><span class="hljs-keyword">if</span> !p.CreateIssue() &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;create issue fail&quot;</span>)<br>&#125;<br><span class="hljs-keyword">case</span> *list:<br>p := issue.Params&#123;Owner: *owner, Repo: *repo&#125;<br>issues, err := p.GetIssues()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprint(os.Stderr, err)<br>&#125;<br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> issues &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s\t%s\n&quot;</span>, i.Title, i.Body)<br>&#125;<br><span class="hljs-keyword">case</span> *read:<br>p := issue.Params&#123;Owner: *owner, Repo: *repo, Number: *number&#125;<br>i, err := p.GetIssue()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprint(os.Stderr, err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\t%s\n&quot;</span>, i.Title, i.Body)<br><span class="hljs-keyword">case</span> *edit:<br>p := issue.Params&#123;<br>Owner:  *owner,<br>Repo:   *repo,<br>Token:  *token,<br>Number: *number,<br>Issue:  issue.Issue&#123;Title: *token, Body: *body&#125;,<br>&#125;<br><span class="hljs-keyword">if</span> !p.EditIssue() &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;edit issue fail&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 4.12：</strong> 流行的web漫画服务xkcd也提供了JSON接口。例如，一个 <a href="https://xkcd.com/571/info.0.json">https://xkcd.com/571/info.0.json</a> 请求将返回一个很多人喜爱的571编号的详细描述。下载每个链接（只下载一次）然后创建一个离线索引。编写一个xkcd工具，使用这些离线索引，打印和命令行输入的检索词相匹配的漫画的URL。<br>解：<br>xkcd&#x2F;xkcd.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> xkcd<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>MinNum = <span class="hljs-number">1</span><br>MaxNum = <span class="hljs-number">2125</span><br>)<br><br><span class="hljs-keyword">type</span> comic <span class="hljs-keyword">struct</span> &#123;<br>Month      <span class="hljs-type">string</span><br>Num        <span class="hljs-type">int</span><br>Link       <span class="hljs-type">string</span><br>Year       <span class="hljs-type">string</span><br>News       <span class="hljs-type">string</span><br>SafeTitle  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;sale_title&quot;`</span><br>Transcript <span class="hljs-type">string</span><br>Alt        <span class="hljs-type">string</span><br>Img        <span class="hljs-type">string</span><br>Title      <span class="hljs-type">string</span><br>Day        <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *comic)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Comic: %d\n&quot;</span>, c.Num) +<br>fmt.Sprintf(<span class="hljs-string">&quot;Image: %s\n&quot;</span>, c.Img) +<br>fmt.Sprintf(<span class="hljs-string">&quot;Transcript: %s\n&quot;</span>, c.Transcript)<br>&#125;<br><br><span class="hljs-keyword">type</span> Index <span class="hljs-keyword">struct</span> &#123;<br>Comic []*comic<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span></span> Index &#123;<br><span class="hljs-keyword">return</span> Index&#123;[]*comic&#123;&#125;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(num <span class="hljs-type">int</span>)</span></span> (*comic, <span class="hljs-type">error</span>) &#123;<br>url := <span class="hljs-string">&quot;https://xkcd.com/&quot;</span> + strconv.Itoa(num) + <span class="hljs-string">&quot;/info.0.json&quot;</span><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-keyword">var</span> comic comic<br><span class="hljs-keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;comic); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;comic, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Search</span><span class="hljs-params">(index Index, keywords []<span class="hljs-type">string</span>)</span></span> []*comic &#123;<br><span class="hljs-keyword">var</span> result []*comic<br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> index.Comic &#123;<br>isMatch := <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> _, term := <span class="hljs-keyword">range</span> keywords &#123;<br><span class="hljs-keyword">if</span> !match(c, term) &#123;<br>isMatch = <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> isMatch &#123;<br>result = <span class="hljs-built_in">append</span>(result, c)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">match</span><span class="hljs-params">(c *comic, keyword <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> strings.Contains(c.Month, keyword) ||<br>strings.Contains(strconv.Itoa(c.Num), keyword) ||<br>strings.Contains(c.Link, keyword) ||<br>strings.Contains(c.Year, keyword) ||<br>strings.Contains(c.News, keyword) ||<br>strings.Contains(c.SafeTitle, keyword) ||<br>strings.Contains(c.Transcript, keyword) ||<br>strings.Contains(c.Alt, keyword) ||<br>strings.Contains(c.Img, keyword) ||<br>strings.Contains(c.Title, keyword) ||<br>strings.Contains(c.Day, keyword)<br>&#125;<br></code></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex4/ex4.12/xkcd&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>f = flag.Bool(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>)<br>n = flag.Int(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;&quot;</span>)<br>)<br><br><span class="hljs-comment">// fetch: go run main.go -f -n=100 &gt; in.json</span><br><span class="hljs-comment">// search: cat in.json | go run main.go keywords</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-keyword">if</span> *f &#123;<br><span class="hljs-keyword">if</span> *n &gt; xkcd.MaxNum &#123;<br>log.Fatalf(<span class="hljs-string">&quot;%d can&#x27;t bigger than %d&quot;</span>, *n, xkcd.MaxNum)<br>&#125;<br>fetch(*n)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>search(flag.Args())<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> &#123;<br>index := xkcd.New()<br><span class="hljs-keyword">for</span> num := xkcd.MinNum; num &lt; n; num++ &#123;<br>c, err := xkcd.Get(num)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>index.Comic = <span class="hljs-built_in">append</span>(index.Comic, c)<br>&#125;<br>out, err := json.MarshalIndent(index, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;   &quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">search</span><span class="hljs-params">(keywords []<span class="hljs-type">string</span>)</span></span> &#123;<br>in, err := io.ReadAll(os.Stdin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>index := xkcd.New()<br><span class="hljs-keyword">if</span> err := json.Unmarshal(in, &amp;index); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>resul := xkcd.Search(index, keywords)<br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> resul &#123;<br>fmt.Println(c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 4.13：</strong> 使用开放电影数据库的JSON服务接口，允许你检索和下载 <a href="https://omdbapi.com/">https://omdbapi.com/</a> 上电影的名字和对应的海报图像。编写一个poster工具，通过命令行输入的电影名字，下载对应的海报。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>url2 <span class="hljs-string">&quot;net/url&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>title  = flag.String(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>apikey = flag.String(<span class="hljs-string">&quot;apikey&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>)<br><br><span class="hljs-keyword">const</span> api = <span class="hljs-string">&quot;https://www.omdbapi.com/&quot;</span><br><br><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;<br>PosterURL <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Poster&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>url := api + <span class="hljs-string">&quot;?t=&quot;</span> + url2.QueryEscape(*title) + <span class="hljs-string">&quot;&amp;apikey=&quot;</span> + url2.QueryEscape(*apikey)<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;http get url: %v fail. err: %v&quot;</span>, url, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-keyword">var</span> res result<br><span class="hljs-keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;res); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;json decode fail. err: %v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><br>poster, err := http.Get(res.PosterURL)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;http get poster url: %v fail. err: %v&quot;</span>, res.PosterURL, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">defer</span> poster.Body.Close()<br><br>f, err := os.Create(*title + <span class="hljs-string">&quot;.jpeg&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;create file fail. err: %v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br><br>_, err = io.Copy(f, poster.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;io copy fail. err：%v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.4. Struct</title>
      <link href="/posts/556653fe988e/"/>
      <url>/posts/556653fe988e/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>下面例子声明了经典的员工信息Employee的结构类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>ID        <span class="hljs-type">int</span><br>Name      <span class="hljs-type">string</span><br>Address   <span class="hljs-type">string</span><br>DoB       time.Time<br>Position  <span class="hljs-type">string</span><br>Salary    <span class="hljs-type">int</span><br>ManagerID <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> dilbert Employee<br></code></pre></td></tr></table></figure><p>结构体成员变量的输入顺序不同，就定义了不同的结构体类型，通常情况下，可以把相同类型的成员变量写到一起。</p><p>如果结构体成员变量以大写字母开头，那么该成员是导出的；一个结构体可能同时包含导出和未导出的成员变量。</p><p>结构体的成员变量不能包含其自身，和数组一样。但结构体的成员变量可以包含其指针类型的成员变量。</p><p>结构体类型的零值是每个成员变量都是零值。<br>当声明一个结构体变量时，其实初始化为零值的结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> e Employee<br>fmt.Println(e) <span class="hljs-comment">// &#123;0   0001-01-01 00:00:00 +0000 UTC  0 0&#125;</span><br></code></pre></td></tr></table></figure><p>空结构体没有任何成员变量，写作<code>struct&#123;&#125;</code>，大小为0，也不包含任何信息，常用作map模拟set数据结构是，用于替代value。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;) <span class="hljs-comment">// set of strings</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> _, ok := seen[s]; !ok &#123;<br>seen[s] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-comment">// first time seeing ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="访问成员变量"><a href="#访问成员变量" class="headerlink" title="访问成员变量"></a>访问成员变量</h1><p>结构体成员变量可以通过点操作符访问，如<code>dilbert.Name</code>。<br>因为<code>dilbert</code>是一个变量，其所有的成员也是变量，即可以对每个成员变量赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">dilbert.Salary = <span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure><p>也可以对成员取址，通过指针访问：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">position := &amp;dilbert.Position<br>*position = <span class="hljs-string">&quot;Senior&quot;</span> + *position<br></code></pre></td></tr></table></figure><p>点操作符也可以和指针结合：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> employeeOfTheMonth *Employee = &amp;dilbert<br>employeeOfTheMonth.Position += <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>简化成下面语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">(*employeeOfTheMonth).Position += <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="结构体作为函数的参数和返回值"><a href="#结构体作为函数的参数和返回值" class="headerlink" title="结构体作为函数的参数和返回值"></a>结构体作为函数的参数和返回值</h1><p>结构体可以作为函数的参数和返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scale</span><span class="hljs-params">(p Point, factor <span class="hljs-type">int</span>)</span></span> Point &#123;<br><span class="hljs-keyword">return</span> Point&#123;p.X * factor, p.Y * factor&#125;<br>&#125;<br>fmt.<span class="hljs-built_in">println</span>(Scale(Point&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;, <span class="hljs-number">5</span>)) <span class="hljs-comment">// &#123;5, 10&#125;</span><br></code></pre></td></tr></table></figure><p>如果考虑性能效率，较大的结构体通常会用指针的方式传入和返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Bonus</span><span class="hljs-params">(e *Employee, percent <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> e.Salary * percent / <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在Go语言中，所有函数参数都是值拷贝出入，函数参数将不再是函数调用时的原始变量。所以要在函数内部修改结构体成员的话，用指针传入是必须的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AwardAnnualRaise</span><span class="hljs-params">(e *Employee)</span></span> &#123;<br>e.Salary = e.Salay * <span class="hljs-number">105</span> / <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树的插入排序"><a href="#二叉树的插入排序" class="headerlink" title="二叉树的插入排序"></a>二叉树的插入排序</h1><p>结构体类型可以包含其自身指针，那么就可以创建递归的数据结构，如链表和树结构。<br>下面使用一个二叉树来实现插入排序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;<br>Sort(s)<br>fmt.Println(s) <span class="hljs-comment">// [1 2 3 4 6]</span><br>&#125;<br><br><span class="hljs-keyword">type</span> tree <span class="hljs-keyword">struct</span> &#123;<br>value       <span class="hljs-type">int</span><br>left, right *tree<br>&#125;<br><br><span class="hljs-comment">// Sort sorts values in place.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sort</span><span class="hljs-params">(values []<span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">var</span> root *tree<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>root = add(root, v)<br>&#125;<br>appendValues(values[:<span class="hljs-number">0</span>], root)<br>&#125;<br><br><span class="hljs-comment">// appendValues appends the elements of t to values in order</span><br><span class="hljs-comment">// and returns the resulting slice.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appendValues</span><span class="hljs-params">(values []<span class="hljs-type">int</span>, t *tree)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> t != <span class="hljs-literal">nil</span> &#123;<br>values = appendValues(values, t.left)<br>values = <span class="hljs-built_in">append</span>(values, t.value)<br>values = appendValues(values, t.right)<br>&#125;<br><span class="hljs-keyword">return</span> values<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(t *tree, value <span class="hljs-type">int</span>)</span></span> *tree &#123;<br><span class="hljs-keyword">if</span> t == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// Equivalent to return &amp;tree&#123;value:value&#125;.</span><br>t = <span class="hljs-built_in">new</span>(tree)<br>t.value = value<br><span class="hljs-keyword">return</span> t<br>&#125;<br><span class="hljs-keyword">if</span> value &lt; t.value &#123;<br>t.left = add(t.left, value)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.right = add(t.right, value)<br>&#125;<br><span class="hljs-keyword">return</span> t<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-4-1-结构体面值"><a href="#4-4-1-结构体面值" class="headerlink" title="4.4.1. 结构体面值"></a>4.4.1. 结构体面值</h1><p>结构体值也可以用结构体面值表示，指定每个成员变量的值。<br>以结构体成员声明的顺序为每个结构体成员变量赋值，一般用于定义结构体的包内部使用，或小的结构体中使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span>&#123; X,Y <span class="hljs-type">int</span>&#125;<br>p := Point&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p>更常用的写法，以成员变量名字和相应的值来初始化，可以包含部分或全部的成员变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">anim := gif.GIF&#123;LoopCount: nframes&#125;<br></code></pre></td></tr></table></figure><p>在这种结构体面值写法中，如果成员变量被忽略将默认使用相对应类型的零值。<br>两种写法不能混用！</p><p>结构体内的命名首字母为小写字母的成员变量，将不能在其他包内导出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> p<br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span>&#123; a, b <span class="hljs-type">int</span> &#125; <span class="hljs-comment">// a and b are not exported</span><br><br><span class="hljs-keyword">package</span> q<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;p&quot;</span><br><span class="hljs-keyword">var</span> _ = p.T&#123;a: <span class="hljs-number">1</span>, b: <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// compile error: can&#x27;t reference a, b</span><br><span class="hljs-keyword">var</span> _ = p.T&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;       <span class="hljs-comment">// compile error: can&#x27;t reference a, b</span><br></code></pre></td></tr></table></figure><p>结构体还可以通过指针处理，可以用下面的写法来创建并初始化一个结构体变量，并返回结构体的地址：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">pp := &amp;Point&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">pp := <span class="hljs-built_in">new</span>(Point)<br>*pp = Point&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><p>·<code>&amp;Point&#123;1,2&#125;</code>写法可以直接在表达式中使用，如函数调用。</p><h1 id="4-4-2-结构体比较"><a href="#4-4-2-结构体比较" class="headerlink" title="4.4.2. 结构体比较"></a>4.4.2. 结构体比较</h1><p>如果结构体的全部成员变量都是可以比较的，那么结构体也是可以比较的。<br>可以使用了<code>==</code>或<code>!=</code>运算符进行比较，将比较两个结构体的每个成员。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span>&#123; X, Y <span class="hljs-type">int</span> &#125;<br><br>p := Point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>q := Point&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;<br>fmt.Println(p.X == q.X &amp;&amp; p.Y == q.Y) <span class="hljs-comment">// false</span><br>fmt.Println(p == q)                   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>可比较的结构体类型和其他可比较的类型一样，可以用于map的key类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> address <span class="hljs-keyword">struct</span> &#123;<br>hostname <span class="hljs-type">string</span><br>port     <span class="hljs-type">int</span><br>&#125;<br><br>hits := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[address]<span class="hljs-type">int</span>)<br>hits[address&#123;<span class="hljs-string">&quot;golang.org&quot;</span>, <span class="hljs-number">443</span>&#125;]++<br></code></pre></td></tr></table></figure><h1 id="4-4-3-结构体嵌入和匿名成员"><a href="#4-4-3-结构体嵌入和匿名成员" class="headerlink" title="4.4.3. 结构体嵌入和匿名成员"></a>4.4.3. 结构体嵌入和匿名成员</h1><p>Go语言提供的不同寻常的结构体嵌入机制让一个命名的结构体包含另一个结构体类型的匿名成员，这样就可以通过简单的点运算符x.f来访问匿名成员链中嵌套的x.d.e.f成员。</p><p>如一个二维的绘图程序，提供了各种图形的库，如矩形、椭圆等几何形状：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>X, Y, Radius <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Wheel <span class="hljs-keyword">struct</span> &#123;<br>X, Y, Radius, Spokes <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由上代码可知，Circle代表的圆形类型包含了标准圆心的X和Y坐标信息，和Radius表示的半价信息。Wheel轮形除了包含Circle类型所有的全部成员外，还增加了Spokes表示径向辐条的数量。可以创建一个Wheel变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w Wheel<br>w.X = <span class="hljs-number">8</span><br>w.Y = <span class="hljs-number">8</span><br>w.Radius = <span class="hljs-number">5</span><br>w.Spokes = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>随着几何形状数量最多，它们之间重复的属性，可以将其独立出来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span>&#123; X, Y <span class="hljs-type">int</span> &#125;<br><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>Center Point<br>Radius <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Wheel <span class="hljs-keyword">struct</span> &#123;<br>Circle Circle<br>Spokes <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>虽然改动后结构体类型变得清晰了，但是访问成员变量变得繁琐了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w Wheel<br>w.Circle.Center.X = <span class="hljs-number">8</span><br>w.Circle.Center.Y = <span class="hljs-number">8</span><br>w.Circle.Radius = <span class="hljs-number">5</span><br>w.Spokes = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>Go语言有一个特性让只声明一个成员对应的数据类型而不指明成员变量的名字，这类成员叫做<code>匿名成员</code>。<br>匿名成员的数据类型必须是命名的类型或指向一个命名的类型或指针。<br>下面的代码中，Circle和Wheel各自拥有一个匿名成员，Point类型被嵌入到了Circle结构体，Circle类型被嵌入到了Wheel结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span>&#123; X, Y <span class="hljs-type">int</span> &#125;<br><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>Point<br>Radius <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Wheel <span class="hljs-keyword">struct</span> &#123;<br>Circle<br>Spokes <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于匿名嵌入的特性，可以直接访问叶子属性而不需要给出完整的路径：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> w Wheel<br>w.X = <span class="hljs-number">8</span> <span class="hljs-comment">// 相当于w.Circle.Center.X = 8</span><br>w.Y = <span class="hljs-number">8</span> <span class="hljs-comment">// 相当于w.Circle.Center.Y = 8</span><br>w.Radius = <span class="hljs-number">5</span> <span class="hljs-comment">// 相当于w.Circle.Radius = 5</span><br>w.Spokes = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>右边注释中的显式形式访问叶子成员的语法依然有效，匿名成员的名字就是命名的类型名字。如匿名成员Circle和Point都有自己的名字Circle和Point。</p><p>但要注意的是，结构体字面值并没有简短表示匿名成员的语法，下面的语句是不能编译通过的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">w = Wheel&#123;<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">20</span>&#125;                       <span class="hljs-comment">// compile error: unknown fields</span><br>w = Wheel&#123;X: <span class="hljs-number">8</span>, Y: <span class="hljs-number">8</span>, Radius: <span class="hljs-number">5</span>, Spokes: <span class="hljs-number">20</span>&#125; <span class="hljs-comment">// compile error: unknown fields</span><br></code></pre></td></tr></table></figure><p>结构体字面值必须遵循形状类型声明时的结构，所以我们只能用下面的两种语法，它们彼此是等价的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>Point<br>Radius <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Wheel <span class="hljs-keyword">struct</span> &#123;<br>Circle<br>Spokes <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>w := Wheel&#123;Circle&#123;Point&#123;<span class="hljs-number">8</span>, <span class="hljs-number">8</span>&#125;, <span class="hljs-number">5</span>&#125;, <span class="hljs-number">20</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, w) <span class="hljs-comment">// main.Wheel&#123;Circle:main.Circle&#123;Point:main.Point&#123;X:8, Y:8&#125;, Radius:5&#125;, Spokes:20&#125;</span><br><br>w = Wheel&#123;<br>Circle: Circle&#123;<br>Point:  Point&#123;X: <span class="hljs-number">8</span>, Y: <span class="hljs-number">8</span>&#125;,<br>Radius: <span class="hljs-number">5</span>,<br>&#125;,<br>Spokes: <span class="hljs-number">20</span>,<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, w) <span class="hljs-comment">// main.Wheel&#123;Circle:main.Circle&#123;Point:main.Point&#123;X:8, Y:8&#125;, Radius:5&#125;, Spokes:20&#125;</span><br><br>w.X = <span class="hljs-number">42</span><br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, w) <span class="hljs-comment">// main.Wheel&#123;Circle:main.Circle&#123;Point:main.Point&#123;X:42, Y:8&#125;, Radius:5&#125;, Spokes:20&#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Printf</code>函数中<code>%v</code>参数包含的<code>#</code>副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。</p><p>因为匿名成员也有一个隐式的名字，所以不能同时包含两个类型相同的匿名成员，否则会导致名字冲突。<br>即使成员的名字都是有其类型隐式地决定的，所有匿名成员也有可见性，即Point和Circle匿名成员都是导出的。<br>如果把Point和Circle两个类型改成小写字母开头的point和circle，在包内依然可以使用简短方式访问匿名成员嵌套的成员：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> point <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> circle <span class="hljs-keyword">struct</span> &#123;<br>point<br>Radius <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Wheel <span class="hljs-keyword">struct</span> &#123;<br>circle<br>Spokes <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> w Wheel<br>w.X = <span class="hljs-number">8</span><br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, w)  <span class="hljs-comment">// main.Wheel&#123;circle:main.circle&#123;point:main.point&#123;X:8, Y:0&#125;, Radius:0&#125;, Spokes:0&#125;</span><br></code></pre></td></tr></table></figure><p>在包外部，因为circle和point类型没有导出，就不能使用简短的匿名成员访问。</p><p>简短的点运算符语法不仅可以用于访问匿名成员嵌套的成员，还可以访问它的方法。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.3. Map</title>
      <link href="/posts/610def108dde/"/>
      <url>/posts/610def108dde/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>哈希表是一个<strong>无序</strong>的<code>key/value</code>对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。<br><code>map</code>是哈希表的引用，<code>map</code>类型写法：<code>map[K]V</code>，K为key，V为value。<br>所有key都是相同类型，value也都是相同类型，但key和value之间可以是不同的数据类型。<br>key必须是支持<code>==</code>比较运算符的数据类型，所以<code>map</code>可以通过比较key是否相等来判断key是否存在。<br><code>slice</code>不能当key，因为其不支持<code>==</code>比较运算符。<br>虽然浮点数类型支持<code>==</code>比较运算符，但是可能出现<code>NaN</code>和任何浮点数（包括自身）都不相等，所以浮点数最好不能为key。<br>对于value数据类型则没有任何限制。</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="字面值创建"><a href="#字面值创建" class="headerlink" title="字面值创建"></a>字面值创建</h2><p>指定最初的<code>key\value</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">ages := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;alice&quot;</span>:   <span class="hljs-number">31</span>,<br><span class="hljs-string">&quot;charlie&quot;</span>: <span class="hljs-number">21</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内置make创建"><a href="#内置make创建" class="headerlink" title="内置make创建"></a>内置make创建</h2><p>内置的<code>make</code>函数可以创建<code>map</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">ages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>ages[<span class="hljs-string">&quot;alice&quot;</span>] = <span class="hljs-number">31</span><br>ages[<span class="hljs-string">&quot;charlie&quot;</span>] = <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>另一种创建空的<code>map</code>的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ages := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><p>取值、存值、删除这些操作都是安全的，即使<code>key</code>不存在。</p><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>通过key对应的下标语法访问：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(ages[<span class="hljs-string">&quot;alice&quot;</span>]) <span class="hljs-comment">// 31</span><br></code></pre></td></tr></table></figure><p>当<code>key</code>不存在，返回的<code>value</code>为<code>value</code>对应类型的零值。如<code>int</code>返回0。</p><p>但需要知道<code>map</code>中是否存在该键值对时或返回的值是已存在的0还是不存在而返回的零值0，可以通过以下操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">age, ok := ages[<span class="hljs-string">&quot;bob&quot;</span>]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-comment">/* &quot;bob&quot; is not a key in this map; age == 0.*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以进行结合简化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> age, ok := ages[<span class="hljs-string">&quot;bob&quot;</span>]; !ok &#123;<br><span class="hljs-comment">/* &quot;bob&quot; is not a key in this map; age == 0.*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>map</code>的下标语法将产生两个值；第二个是一个布尔值，用于报告元素是否真的存在。布尔变量一般命名为<code>ok</code>，特别适合马上用于<code>if</code>条件判断部分。</p><p><code>map</code>中的<code>value</code>并不是变量，因此不能对<code>map</code>的值进行取址操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">_ = &amp;ages[<span class="hljs-string">&quot;bob&quot;</span>] <span class="hljs-comment">// invalid operation: cannot take address of ages[&quot;bob&quot;] (map index expression of type int)</span><br></code></pre></td></tr></table></figure><p>原因：<code>map</code>可能随着键值对的数量增长而重新分配更大的内存空间，从而可能导致之前的地址无效。</p><h2 id="存入键值对"><a href="#存入键值对" class="headerlink" title="存入键值对"></a>存入键值对</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">ages[<span class="hljs-string">&quot;alice&quot;</span>] = <span class="hljs-number">31</span><br>ages[<span class="hljs-string">&quot;charlie&quot;</span>] = <span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>使用内置的<code>delete</code>函数删除k\v：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">delete</span>(ages, <span class="hljs-string">&quot;alice&quot;</span>)<br></code></pre></td></tr></table></figure><p>当<code>key</code>不存在时，删除操作同样不会出现异常。</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> ages &#123;<br>fmt.Printf(<span class="hljs-string">&quot;key:%s\tvalue:%d\n&quot;</span>, key, value)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>map</code>的迭代顺序是不确定的，并且不同的哈希函数实现可能导致不同的遍历顺序。所以遍历的顺序是随机的，每一次遍历的顺序都不相同。</p><p>如果要求按顺序遍历<code>key/value</code>对，可以显式对应<code>key</code>进行排序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> name := <span class="hljs-keyword">range</span> ages &#123;<br>names = <span class="hljs-built_in">append</span>(names, name)<br>&#125;<br>sort.Strings(names)<br><span class="hljs-keyword">for</span> _, name := <span class="hljs-keyword">range</span>  names &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s\t%d\n&quot;</span>, name, ages[name])<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="map的零值"><a href="#map的零值" class="headerlink" title="map的零值"></a>map的零值</h1><p><code>map</code>类型的零值是<code>nil</code>，也就是没有引用任何哈希表。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ages <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>fmt.Println(ages == <span class="hljs-literal">nil</span>)    <span class="hljs-comment">// true</span><br>fmt.Println(<span class="hljs-built_in">len</span>(ages) == <span class="hljs-number">0</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>nil</code>值的<code>map</code>进行查找、删除、len和range循环等大部分操作都是安全的，与空的<code>map</code>类似。<br>但向<code>nil</code>值的<code>map</code>存入键值对将导致<code>panic</code>异常：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ages <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>ages[<span class="hljs-string">&quot;carol&quot;</span>] = <span class="hljs-number">21</span> <span class="hljs-comment">// panic: assignment to entry in nil map</span><br></code></pre></td></tr></table></figure><p>所以在向<code>map</code>存储键值对前必须先创建<code>map</code>。</p><h1 id="相等比较"><a href="#相等比较" class="headerlink" title="相等比较"></a>相等比较</h1><p>和<code>slice</code>一样，<code>map</code>之间也不能进行相等比较；<br>唯一的例外是可以和<code>nil</code>进行相等比较。<br>要判断两个map是否包含相同的key和value，我们必须通过一个循环实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">equal</span><span class="hljs-params">(x, y <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-built_in">len</span>(x) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> k, xv := <span class="hljs-keyword">range</span> x &#123;<br><span class="hljs-keyword">if</span> yv, ok := y[k]; !ok || xv != yv &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="dedup去重"><a href="#dedup去重" class="headerlink" title="dedup去重"></a>dedup去重</h2><p>Go语言中并没有提供set类型，但可以通过<code>map</code>去实现类似功能。<br>下面的dedup程序读取多行输入，但是只打印第一次出现的行。（它是1.3节中出现的dup程序的变体。）dedup程序通过map来表示所有的输入行所对应的set集合，以确保已经在集合存在的行不会被重复打印。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>text := input.Text()<br><span class="hljs-keyword">if</span> !seen[text] &#123;<br>seen[text] = <span class="hljs-literal">true</span><br>fmt.Println(text)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> err := input.Err(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;dedup: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>终端中输入文件结束符（EOF，end of file）:</p><ul><li>windows终端，键入<code>ctrl+Z</code></li><li>Linux&#x2F;Mac终端中，键入<code>ctrl+D</code></li></ul><h2 id="统计相同的字符串"><a href="#统计相同的字符串" class="headerlink" title="统计相同的字符串"></a>统计相同的字符串</h2><p>下面的例子演示了如何使用map来记录提交相同的字符串列表的次数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>Add(s)<br>Add(s)<br>Add(s)<br>fmt.Println(Count(s)) <span class="hljs-comment">// 3</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">k</span><span class="hljs-params">(list []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%q&quot;</span>, list)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(list []<span class="hljs-type">string</span>)</span></span> &#123;<br>m[k(list)]++<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Count</span><span class="hljs-params">(list []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> m[k(list)]<br>&#125;<br></code></pre></td></tr></table></figure><p>不可比较的key类型，可以通过k函数，进行转换成可比较的类型。还可以在比较字符串时候忽略大小写等。</p><h2 id="统计Unicode码点出现次数"><a href="#统计Unicode码点出现次数" class="headerlink" title="统计Unicode码点出现次数"></a>统计Unicode码点出现次数</h2><p>下面的程序用于统计输入中每个Unicode码点出现的次数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Charcount computes counts of Unicode characters.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;unicode&quot;</span><br><span class="hljs-string">&quot;unicode/utf8&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>)    <span class="hljs-comment">// counts of Unicode characters</span><br><span class="hljs-keyword">var</span> utflen [utf8.UTFMax + <span class="hljs-number">1</span>]<span class="hljs-type">int</span> <span class="hljs-comment">// count of lengths of UTF-8 encodings</span><br>invalid := <span class="hljs-number">0</span>                    <span class="hljs-comment">// count of invalid UTF-8 characters</span><br><br>in := bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">for</span> &#123;<br>r, n, err := in.ReadRune() <span class="hljs-comment">// returns rune,nbytes,error</span><br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;charcount: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">if</span> r == unicode.ReplacementChar &amp;&amp; n == <span class="hljs-number">1</span> &#123;<br>invalid++<br><span class="hljs-keyword">continue</span><br>&#125;<br>counts[r]++<br>utflen[n]++<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;rune\tcount\n&quot;</span>)<br><span class="hljs-keyword">for</span> c, n := <span class="hljs-keyword">range</span> counts &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%q\t%d\n&quot;</span>, c, n)<br>&#125;<br>fmt.Print(<span class="hljs-string">&quot;\nlen\tcount\n&quot;</span>)<br><span class="hljs-keyword">for</span> i, n := <span class="hljs-keyword">range</span> utflen &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%d\n&quot;</span>, i, n)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> invalid &gt; <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\n%d invalid UTF-8 characters\n&quot;</span>, invalid)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在终端输入后回车，就能继续运行<code>r, n, err := in.ReadRune()</code>及其后面的代码。当检测到有非法utf8字符（如文件结尾）时就会break跳出循环，并打印统计数据。</p><h2 id="聚合类型的value"><a href="#聚合类型的value" class="headerlink" title="聚合类型的value"></a>聚合类型的value</h2><p>在下面的代码中，图graph的key类型是一个字符串，value类型map[string]bool代表一个字符串集合。从概念上将，graph将一个字符串类型的key映射到一组相关的字符串集合，它们指向新的graph的key。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> graph = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>addEdge(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>)<br>fmt.Println(graph)             <span class="hljs-comment">// map[A:map[b:true]]</span><br>fmt.Println(hasEdge(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)) <span class="hljs-comment">// false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(from, to <span class="hljs-type">string</span>)</span></span> &#123;<br>edges := graph[from]<br><span class="hljs-keyword">if</span> edges == <span class="hljs-literal">nil</span> &#123;<br>edges = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br>graph[from] = edges<br>&#125;<br>edges[to] = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasEdge</span><span class="hljs-params">(from, to <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> graph[from][to]<br>&#125;<br></code></pre></td></tr></table></figure><p>其中addEdge函数惰性初始化map是一个惯用方式，也就是说在每个值首次作为key时才初始化。addEdge函数显示了如何让map的零值也能正常工作；即使from到to的边不存在，graph[from][to]依然可以返回一个有意义的结果。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 4.8：</strong> 修改charcount程序，使用unicode.IsLetter等相关的函数，统计字母、数字等Unicode中不同的字符类别。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;unicode&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> class <span class="hljs-type">string</span><br><br><span class="hljs-keyword">const</span> (<br>letter  class = <span class="hljs-string">&quot;letter&quot;</span><br>number  class = <span class="hljs-string">&quot;number&quot;</span><br>graphic class = <span class="hljs-string">&quot;graphic&quot;</span><br>space   class = <span class="hljs-string">&quot;space&quot;</span><br>symbol  class = <span class="hljs-string">&quot;symbol&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>classCount := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[class]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br>in := bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">for</span> &#123;<br>r, _, err := in.ReadRune()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> unicode.IsLetter(r):<br>classCount[letter]++<br><span class="hljs-keyword">case</span> unicode.IsNumber(r):<br>classCount[number]++<br><span class="hljs-keyword">case</span> unicode.IsGraphic(r):<br>classCount[graphic]++<br><span class="hljs-keyword">case</span> unicode.IsSpace(r):<br>classCount[space]++<br><span class="hljs-keyword">case</span> unicode.IsSymbol(r):<br>classCount[symbol]++<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> class, count := <span class="hljs-keyword">range</span> classCount &#123;<br>fmt.Printf(<span class="hljs-string">&quot;class: %s, count = %d\n&quot;</span>, class, count)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 4.9：</strong> 编写一个程序wordfreq程序，报告输入文本中每个单词出现的频率。在第一次调用Scan前先调用input.Split(bufio.ScanWords)函数，这样可以按单词而不是按行输入。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wordCount := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>input := bufio.NewScanner(os.Stdin)<br>input.Split(bufio.ScanWords)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>wordCount[input.Text()]++<br>&#125;<br><span class="hljs-keyword">for</span> word, count := <span class="hljs-keyword">range</span> wordCount &#123;<br>fmt.Printf(<span class="hljs-string">&quot;word: %s, count= %d\n&quot;</span>, word, count)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2. Slice</title>
      <link href="/posts/53445ef771d8/"/>
      <url>/posts/53445ef771d8/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><code>Slice</code>（切片）代表变长的序列，序列中每个元素都是相同的类型。<br><code>slice</code>类型一般写法<code>[]T</code>，其中<code>T</code>代表<code>slice</code>中元素的类型。</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="字面值初始化"><a href="#字面值初始化" class="headerlink" title="字面值初始化"></a>字面值初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>与数组字面值初始化很相似，但<code>slice</code>字面值初始化没有指明序列长度。<br><code>slice</code>会隐式创建合适大小的数组，然后<code>slice</code>的指针指向底层的数组。</p><h2 id="使用make创建"><a href="#使用make创建" class="headerlink" title="使用make创建"></a>使用make创建</h2><p>内置的<code>make</code>函数创建指定元素类型、长度和容量的<code>slice</code>。容量可以省略，这种情况，容量等于长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>([]T, <span class="hljs-built_in">len</span>)<br><span class="hljs-built_in">make</span>([]T, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span>) <span class="hljs-comment">// same as make([]T, cap)[:len]</span><br></code></pre></td></tr></table></figure><p>在底层，<code>make</code>创建了一个匿名的数组变量，然后返回一个<code>slice</code>;<br>只有通过返回的<code>slice</code>才能引用底层匿名的数组变量。<br>在第一种语句中，<code>slice</code>是指向整个数组。<br>在第二种语句中，<code>slice</code>只引用了底层数组的前len个元素，但容量包含整个数组。<br>额外的元素留作动态增长。</p><h1 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h1><p><code>slice</code>的切片操作<code>s[i:j]</code>，其中<code>0 ≤ i≤ j≤ cap(s)</code>，用于创建一个新的<code>slice</code>。<br>新的<code>slice</code>将只有<code>j-i</code>个元素，从第<code>i</code>个元素开始到第<code>j-1</code>个元素的子序列，并不包含第<code>j</code>个元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a := months[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><p><code>slice</code>类型的切片操作都是返回原序列的子序列，底层都是共享之前的底层数组。</p><h1 id="与数组的关系"><a href="#与数组的关系" class="headerlink" title="与数组的关系"></a>与数组的关系</h1><p><code>slice</code>的语法和数组类型，只是没有固定长度而已。<br><code>slice</code>是轻量级的数据结构，提供了访问数组子序列（或者全部）元素的功能，而且<code>slice</code>的底层确实引用一个数组对象。<br><code>slice</code>由三个部分构成：<code>指针</code>、<code>长度</code>和<code>容量</code>。<br><code>指针</code>指向<code>slice</code>第一个元素对应的底层数组元素的地址，但<code>slice</code>的第一个元素并不一定就是数组的第一个元素。<br><code>长度</code>对应<code>slice</code>中元素的数量。内置的<code>len</code>函数返回<code>slice</code>的长度。<br><code>容量</code>一般是从<code>slice</code>的开始位置到底层数据的结尾位置。内置的<code>cap</code>函数返回<code>slice</code>的容量。</p><p>多个<code>slice</code>之间可以共享底层的数据，并且引用的数组部分区间可能重叠。<br><img src="/posts/53445ef771d8/1680282900447.png" alt="enter description here"></p><p>与数组不同的是，<code>slice</code>之间不能比较，即不能使用<code>==</code>操作符去判断两个<code>slice</code>是否含有全部相等元素。<br>但<code>[]byte</code>的可以使用<code>bytes.Equal</code>函数来判断两个字节型<code>slice</code>是否相等。<br>其他类型，必须展开每个元素进行比较：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">equal</span><span class="hljs-params">(x, y []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-built_in">len</span>(y) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> x &#123;<br><span class="hljs-keyword">if</span> x[i] != y[i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>两个<code>slice</code>相等的测试，运行时间并不比数组或字符串的比较长，但为什么<code>slice</code>不直接支持比较运算符呢？</p><ul><li><code>slice</code>的元素是简接引用的，甚至可以保护自身。</li><li>因为<code>slice</code>的元素是简接引用，所以固定值的<code>slice</code>在不同时间内可能包含不同的元素，因为底层数组的元素可能会被修改。</li></ul><h1 id="与nil比较"><a href="#与nil比较" class="headerlink" title="与nil比较"></a>与nil比较</h1><p><code>slice</code>唯一合法的比较是和<code>nil</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> summer == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">/*...*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一个零值的slice等于nil。</strong><br><strong>一个nil值的slice没有底层数组。</strong><br><strong>一个nil值的slice的长度和容量都是0，但是也有非nil值的slice的长度和容量也是0的，如<code>[]int&#123;&#125;</code>或<code>make([]int,3)[3:]</code>。</strong><br>与任意类型的nil值一样，可以用<code>[]int(nil)</code>类型转换表达式来生成一个对应类型slice的nil值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s []<span class="hljs-type">int</span> <span class="hljs-comment">// len(s)==0, s==nil</span><br>s = <span class="hljs-literal">nil</span><span class="hljs-comment">// len(s)==0, s==nil</span><br>s = []<span class="hljs-type">int</span>(<span class="hljs-literal">nil</span>) <span class="hljs-comment">// len(s)==0, s==nil</span><br>s = []<span class="hljs-type">int</span>&#123;&#125; <span class="hljs-comment">// len(s)==0, s!=nil</span><br></code></pre></td></tr></table></figure><p>如果测试一个<code>slice</code>是否为空的，使用<code>len(s)==0</code>来判断，而不应该用<code>s==nil</code>来判断。<br>除了和<code>nil</code>相等比较外，<code>nil</code>值的<code>slice</code>的行为和其它任意0长度的<code>slice</code>一样。如<code>reverse(nil)</code>也是安全的。<br>除了文档已经明确说明的地方，所有Go语言的函数应该以相同的方式对于<code>nil</code>值的<code>slice</code>和0长度的<code>slice</code>。</p><h1 id="4-2-1-append函数"><a href="#4-2-1-append函数" class="headerlink" title="4.2.1. append函数"></a>4.2.1. append函数</h1><p>内置的<code>append</code>函数用于向<code>slice</code>追加元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> runes []<span class="hljs-type">rune</span><br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> <span class="hljs-string">&quot;Hello, 世界&quot;</span> &#123;<br>runes = <span class="hljs-built_in">append</span>(runes, r)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%q\n&quot;</span>, runes) <span class="hljs-comment">//[&#x27;H&#x27; &#x27;e&#x27; &#x27;l&#x27; &#x27;l&#x27; &#x27;o&#x27; &#x27;,&#x27; &#x27; &#x27; &#x27;世&#x27; &#x27;界&#x27;]</span><br></code></pre></td></tr></table></figure><p>第一个版本的appendInt函数，专门用于处理<code>[]int</code>类型的<code>slice</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := []<span class="hljs-type">int</span>&#123;&#125;<br>fmt.Println(appendInt(a, <span class="hljs-number">1</span>)) <span class="hljs-comment">// [1]</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appendInt</span><span class="hljs-params">(x []<span class="hljs-type">int</span>, y <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> z []<span class="hljs-type">int</span><br>zlen := <span class="hljs-built_in">len</span>(x) + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> zlen &lt;= <span class="hljs-built_in">cap</span>(x) &#123;<br><span class="hljs-comment">// There is room to grow. Extend the slice.</span><br>z = x[:zlen]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// There is insufficient space. Allocate a new array.</span><br><span class="hljs-comment">// Grow by doubling, for amortized linear complexity.</span><br>zcap := zlen<br><span class="hljs-keyword">if</span> zcap &lt; <span class="hljs-number">2</span>*<span class="hljs-built_in">len</span>(x) &#123;<br>zcap = <span class="hljs-number">2</span> * <span class="hljs-built_in">len</span>(x)<br>&#125;<br>z = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, zlen, zcap)<br><span class="hljs-built_in">copy</span>(z, x)<br>&#125;<br>z[<span class="hljs-built_in">len</span>(x)] = y<br><span class="hljs-keyword">return</span> z<br>&#125;<br></code></pre></td></tr></table></figure><p><code>appendInt</code>函数剖析：</p><ol><li>先检测<code>slice</code>底层数组是否有猪狗的容量来保存新的元素。</li><li>如果足够空间，直接在原底层数组上扩展<code>slie</code>：<code>z= x[:zlen]</code>，赋值新元素y到新扩展的空间，并返回<code>slice</code>。此时输入x和输出的z共享相同的底层数组。</li><li>如果空间不足够，先分配足够大（原先底层数组长度的2倍）的<code>slice</code>，复制输入的x到新<code>slice</code>，并添加y元素。此时z和输入的x引用的是不同的底层数组。</li></ol><p>虽然通过循环复制元素更直接，不过内置的<code>copy</code>函数可以方便地将一个slice复制到另一个相同类型的slice。<br><code>copy</code>函数返回成功复制的元素个数，等于两个<code>slice</code>中较小那个<code>slice</code>的长度，所以不会导致超过目标<code>slice</code>的范围。</p><p>内置<code>append</code>函数使用了比<code>appendInt</code>更复杂的内存扩展策略。<br>通常情况下，我们并不知道调用<code>append</code>函数是否导致了内存的重新分配，因此也不能确定新的<code>slice</code>和原始的<code>slice</code>是否引用相同的底层数组空间。<br>同样，我们不能确认在原先的<code>slice</code>上的操作是否会影响到新的<code>slice</code>，因此，通常是将<code>append</code>函数返回的结果直接赋值给输入的<code>slice</code>变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">runes = <span class="hljs-built_in">append</span>(runes, r)<br></code></pre></td></tr></table></figure><p>更新slice变量不仅对调用append函数是必要的，实际上对应任何可能导致长度、容量或底层数组变化的操作都是必要的。<br><code>slice</code>的底层数组的元素是简接访问的，但<code>slice</code>对应结构体本身的指针、长度和容量部分是直接访问的。<br><code>slice</code>并不是纯粹的引用类型，实际上是类似下面结构体的聚合类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> IntSlice <span class="hljs-keyword">struct</span> &#123;<br>ptr *<span class="hljs-type">int</span><br><span class="hljs-built_in">len</span>,<span class="hljs-built_in">cap</span> <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>内置的<code>append</code>函数可以追加多个元素，甚至追加一个<code>slice</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x []<span class="hljs-type">int</span><br>x = <span class="hljs-built_in">append</span>(x, <span class="hljs-number">1</span>)<br>x = <span class="hljs-built_in">append</span>(x, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>x = <span class="hljs-built_in">append</span>(x, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br>x = <span class="hljs-built_in">append</span>(x, x...) <span class="hljs-comment">// append the slice x</span><br>fmt.Println(x)      <span class="hljs-comment">// &quot;[1 2 3 4 5 6 1 2 3 4 5 6]</span><br></code></pre></td></tr></table></figure><p>修改<code>appendInt</code>函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := []<span class="hljs-type">int</span>&#123;&#125;<br>fmt.Println(appendInt(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// [1 2 3 4]</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appendInt</span><span class="hljs-params">(x []<span class="hljs-type">int</span>, y ...<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> z []<span class="hljs-type">int</span><br>zlen := <span class="hljs-built_in">len</span>(x) + <span class="hljs-built_in">len</span>(y)<br><span class="hljs-keyword">if</span> zlen &lt;= <span class="hljs-built_in">cap</span>(x) &#123;<br>z = x[:zlen]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>zcap := zlen<br><span class="hljs-keyword">if</span> zcap &lt; <span class="hljs-number">2</span>*<span class="hljs-built_in">len</span>(x) &#123;<br>zcap = <span class="hljs-number">2</span> * <span class="hljs-built_in">len</span>(x)<br>&#125;<br>z = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, zlen, zcap)<br><span class="hljs-built_in">copy</span>(z, x)<br>&#125;<br><span class="hljs-built_in">copy</span>(z[<span class="hljs-built_in">len</span>(x):], y)<br><span class="hljs-keyword">return</span> z<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-2-2-Slice内存技巧"><a href="#4-2-2-Slice内存技巧" class="headerlink" title="4.2.2. Slice内存技巧"></a>4.2.2. Slice内存技巧</h1><p>Continue…</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.1. 数组</title>
      <link href="/posts/681582df4225/"/>
      <url>/posts/681582df4225/</url>
      
        <content type="html"><![CDATA[<p>数组是一个由固定长度的特定类型元素组成的序列。</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br>fmt.Println(a) <span class="hljs-comment">// [0 0 0]</span><br></code></pre></td></tr></table></figure><p>Go语言声明变量，会默认初始化。<br>默认情况下，数组每个元素都被初始化为元素类型对应的零值。</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>可以通过声明数组，也可以直接使用数组字面值初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> q [<span class="hljs-number">3</span>]<span class="hljs-type">int</span> = [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">var</span> r [<span class="hljs-number">3</span>]<span class="hljs-type">int</span> = [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br>fmt.Println(r[<span class="hljs-number">2</span>]) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>当使用数组字面值时，值的数量与数组长度不一致，那么没有数组字面值的元素被赋值为元素类型的零值。</p><p>也可以由数组字面值来确定数组长度：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">q := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, q) <span class="hljs-comment">// [3]int</span><br></code></pre></td></tr></table></figure><p>数组的长度是数组类型的组成部分，因此<code>[3]int</code>和<code>[4]int</code>是两种不同的数组类型。<br>数组的长度必须是常量表达式，因为数组的长度需要再编译阶段确定。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">q := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>q = [<span class="hljs-number">4</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; <span class="hljs-comment">// compile error: cannot assign [4]int to [3]int</span><br></code></pre></td></tr></table></figure><p>也可以指定索引和对应值列表方式初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Currency <span class="hljs-type">int</span><br><br><span class="hljs-keyword">const</span> (<br>USD Currency = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 美元</span><br>EUR                 <span class="hljs-comment">// 欧元</span><br>GBP                 <span class="hljs-comment">// 英镑</span><br>RMB                 <span class="hljs-comment">// 人民币</span><br>)<br><br>symbol := [...]<span class="hljs-type">string</span>&#123;USD: <span class="hljs-string">&quot;$&quot;</span>, EUR: <span class="hljs-string">&quot;€&quot;</span>, GBP: <span class="hljs-string">&quot;£&quot;</span>, RMB: <span class="hljs-string">&quot;￥&quot;</span>&#125;<br>fmt.Println(RMB, symbol[RMB]) <span class="hljs-comment">// 3 ￥</span><br></code></pre></td></tr></table></figure><p>在这种形式的数组字面值形式中，初始化索引的顺序是无关紧要的，而没用到的索引可以省略，未指定初始化值的元素将用零值初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">99</span>:<span class="hljs-number">-1</span>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。</p><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>数组的每个元素可以通过索引下标来访问，索引下标的范围从0开始到数组长度减1的。<br>内置len函数将返回数组中的元素个数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br>fmt.Println(a[<span class="hljs-number">0</span>])<br>fmt.Println(<span class="hljs-built_in">len</span>(a)) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><code>a[index]</code>可以访问数组的元素。</p><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><p>使用for…range遍历数组:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, v)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>, v)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>如果数组的元素类型是可以相互比较的，那么数组类型也是可以相互比较的。<br>可以使用<code>==</code>比较运算符比较两个数组，只有当两个数组的所有元素都是相等的时候数组才是相等的。<br>不相等比较运算符<code>!=</code>遵循同样的规则。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">a := [<span class="hljs-number">2</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>b := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>c := [<span class="hljs-number">2</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;<br>fmt.Println(a == b, a == c, b == c) <span class="hljs-comment">// true false false</span><br>d := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>fmt.Println(a == d) <span class="hljs-comment">// invalid operation: a == d (mismatched types [2]int and [3]int)</span><br></code></pre></td></tr></table></figure><p>crypto&#x2F;sha256包的Sum256函数对一个任意的字节slice类型的数据生成一个对应的消息摘要。消息摘要有256bit大小，因此对应[32]byte数组类型。如果两个消息摘要是相同的，那么可以认为两个消息本身也是相同（译注：理论上有HASH码碰撞的情况，但是实际应用可以基本忽略）；如果消息摘要不同，那么消息本身必然也是不同的。下面的例子用SHA256算法分别生成“x”和“X”两个信息的摘要：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/sha256&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c1 := sha256.Sum256([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;x&quot;</span>))<br>c2 := sha256.Sum256([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;x&quot;</span>))<br>fmt.Printf(<span class="hljs-string">&quot;%x\n%x\n%t\n%T\n&quot;</span>, c1, c2, c1 == c2, c1)<br><span class="hljs-comment">// Output</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881</span><br><span class="hljs-comment">4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015</span><br><span class="hljs-comment">true</span><br><span class="hljs-comment">[32]uint8</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子中，虽然只有一个字符的差异，但生成的消息摘要相同。</p><h1 id="数组作为函数入参"><a href="#数组作为函数入参" class="headerlink" title="数组作为函数入参"></a>数组作为函数入参</h1><p>当调用函数时，函数的每个调用参数将会被赋值给函数内部的参数变量。<br>函数参数变量接受的是一个复制的副本，并不是原始调用的变量。<br>函数参数传递的机制导致传递大的数组类型将是低效的，并且对数组参数的任何的修改都是发生在复制的数组上，并非直接修改调用时的原始的数组变量。<br>Go语言对待数组的方式和其它很多编程语言不同，其它编程语言可能会隐式地将数组作为引用或指针对象传入被调用的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">a := [<span class="hljs-number">2</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>c(a)<br>fmt.Println(a) <span class="hljs-comment">// [1,2]</span><br>...<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">c</span><span class="hljs-params">(a [2]<span class="hljs-type">int</span>)</span></span> &#123;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">9</span><br>&#125;<br></code></pre></td></tr></table></figure><p>显然，这种直接使用数组当做函数参数的方式，当函数元素过大，将导致函数参数复制的性能。<br>当然，可以显式地传入数组指针，那样的话函数通过指针对数组的任何修改都可以直接反馈到调用者。<br>下面函数用于给[32]byte类型的数组清零：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">a := [<span class="hljs-number">32</span>]<span class="hljs-type">byte</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>zero(&amp;a)<br>fmt.Println(a) <span class="hljs-comment">// [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]</span><br>...<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zero</span><span class="hljs-params">(ptr *[32]<span class="hljs-type">byte</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> ptr &#123;<br>ptr[i] = <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实还有更简洁的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zero</span><span class="hljs-params">(ptr *[32]<span class="hljs-type">byte</span>)</span></span> &#123;<br>*ptr = [<span class="hljs-number">32</span>]<span class="hljs-type">byte</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然通过指针传递数组参数是高效的，而且也允许在函数内部修改数组元素的值，但是数组类型规定了固定的长度信息，决定了数组是不够便捷的类型。<br>如<code>zero</code>函数并不能接受指向[16]byte类型数组的指针，而且也没有任何添加或删除数组元素的方法。<br>由于这些原因，除了像SHA256这类需要处理特定大小数组的特例外，数组很少用于函数参数，一般使用slice来替代数组。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 4.1：</strong> 编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2.6.2节的PopCount函数。)<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/sha256&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c1 := sha256.Sum256([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;x&quot;</span>))<br>c2 := sha256.Sum256([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;X&quot;</span>))<br>fmt.Println(sha256DiffBitCount(c1, c2))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sha256DiffBitCount</span><span class="hljs-params">(c1, c2 [32]<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++ &#123;<br>count += diffBitCount(c1[i], c2[i])<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">diffBitCount</span><span class="hljs-params">(b1, b2 <span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); i &lt; <span class="hljs-number">8</span>; i++ &#123;<br>mask := <span class="hljs-type">byte</span>(<span class="hljs-number">1</span> &lt;&lt; i)<br><span class="hljs-keyword">if</span> b1&amp;mask != b2&amp;mask &#123;<br>count++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 4.2：</strong> 编写一个程序，默认打印标准输入的以SHA256哈希码，也可以通过命令行标准参数选择SHA384或SHA512哈希算法。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;crypto/sha256&quot;</span><br><span class="hljs-string">&quot;crypto/sha512&quot;</span><br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> f = flag.String(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-string">&quot;flag = sha256 | sha384 | sha512&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>bytes := input.Bytes()<br><span class="hljs-keyword">switch</span> *f &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sha256&quot;</span>:<br>fmt.Printf(<span class="hljs-string">&quot;sha256: %x\n&quot;</span>, sha256.Sum256(bytes))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sha384&quot;</span>:<br>fmt.Printf(<span class="hljs-string">&quot;sha384: %x\n&quot;</span>, sha512.Sum384(bytes))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sha512&quot;</span>:<br>fmt.Printf(<span class="hljs-string">&quot;sha512: %x\n&quot;</span>, sha512.Sum512(bytes))<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章 复合数据类型</title>
      <link href="/posts/a27051ca627c/"/>
      <url>/posts/a27051ca627c/</url>
      
        <content type="html"><![CDATA[<p>复合数据类型，它是以不同的方式组合基本类型可以构造出来的复合数据类型。<br>如:<code>数组</code>、<code>slice</code>、<code>map</code>和<code>struct</code>。<br>数组和结构体是聚合类型，其值由许多元素或成员字段的值组成。<br>数组由同构的元素组成，每个元素的类型完全一致。<br>结构体由异构的元素组成，元素类型可以不用完全一致。<br>数组和结构体都是固定内存大小，而<code>slice</code>和<code>map</code>则是动态的数据结构，根据需要动态增长。</p><p><a href="/posts/681582df4225/">4.1. 数组</a></p><p><a href="/posts/53445ef771d8/">4.2. Slice</a></p><p><a href="/posts/610def108dde/">4.3. Map</a></p><p><a href>4.4. 结构体</a></p><p><a href="/posts/b184f11121f4/">4.5. JSON</a></p><p><a href>4.6. 文本和HTML模板</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.6. 常量</title>
      <link href="/posts/68c22f5501fb/"/>
      <url>/posts/68c22f5501fb/</url>
      
        <content type="html"><![CDATA[<p>常量表达式的值在编译期间计算，而非运行期。<br>常量的潜在类型都是基础类型：boolean、string或数字。</p><p>常量的声明语句定义了常量的名字，与变量声明语法类似。<br>常量的值不可改变 ，以防止在运行期间被意外或恶意修改。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.14159</span><br></code></pre></td></tr></table></figure><p>或批量声明多个相关常量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    e  = <span class="hljs-number">2.71828182845904523536028747135266249775724709369995957496696763</span><br>    pi = <span class="hljs-number">3.14159265358979323846264338327950288419716939937510582097494459</span><br>)<br></code></pre></td></tr></table></figure><p>当操作数是常量时，一些运行时的错误也可以在编译时被发现，如整数除零、字符串索引越界、任何导致无效浮点数的操作等。</p><p>常量的声明也可以包含类型和值，如果没有显式指定类型，那么将从右边的表达式推断类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> noDelay time.Duration = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> timeout = <span class="hljs-number">5</span> * time.Minute<br>fmt.Printf(<span class="hljs-string">&quot;%T %[1]v\n&quot;</span>, noDelay)     <span class="hljs-comment">// time.Duration 0s</span><br>fmt.Printf(<span class="hljs-string">&quot;%T %[1]v\n&quot;</span>, timeout)     <span class="hljs-comment">// time.Duration 5m0s</span><br>fmt.Printf(<span class="hljs-string">&quot;%T %[1]v\n&quot;</span>, time.Minute) <span class="hljs-comment">// time.Duration 1m0s</span><br></code></pre></td></tr></table></figure><p>如果批量声明常量且常量类型一样，除了第一个外，都可以省略常量右边的初始化表达式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-number">1</span><br>b<br>c = <span class="hljs-number">2</span><br>d<br>)<br>fmt.Println(a, b, c, d)<br></code></pre></td></tr></table></figure><h1 id="3-6-1-iota常量生成器"><a href="#3-6-1-iota常量生成器" class="headerlink" title="3.6.1. iota常量生成器"></a>3.6.1. iota常量生成器</h1><p>常量声明可以使用iota常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。<br>在一个const声明语句中，在第一个声明的常量所在的行，iota将会被置为0，然后在每一个有常量声明的行加1。</p><p>类似其它编程语言的枚举类型，下面来自time包的Weekday命名类型，为一周的每一天定义一个常量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Weekday <span class="hljs-type">int</span><br><br><span class="hljs-keyword">const</span> (<br>Sunday Weekday = <span class="hljs-literal">iota</span><br>Monday<br>Tuesday<br>Wednesday<br>Thursday<br>Friday<br>Saturday<br>)<br></code></pre></td></tr></table></figure><p>周日为0，周一为1，以此类推。</p><p>也可以在复杂的常量表达式中使用iota.<br>如下<code>net</code>包的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Flags <span class="hljs-type">uint</span><br><br><span class="hljs-keyword">const</span> (<br>FlagUp           Flags = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span> <span class="hljs-comment">// interface is up</span><br>FlagBroadcast                      <span class="hljs-comment">// interface supports broadcast access capability</span><br>FlagLoopback                       <span class="hljs-comment">// interface is a loopback interface</span><br>FlagPointToPoint                   <span class="hljs-comment">// interface belongs to a point-to-point link</span><br>FlagMulticast                      <span class="hljs-comment">// interface supports multicast access capability</span><br>)<br></code></pre></td></tr></table></figure><p>每个常量表达式1&lt;&lt;iota，是连续的2的幂，分别对应一个bit的位置。常应用于测试、设置或清除对应bit位的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsUp</span><span class="hljs-params">(v net.Flags)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> v&amp;net.FlagUp == net.FlagUp<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TurnDown</span><span class="hljs-params">(v *net.Flags)</span></span> &#123;<br>*v &amp;^= net.FlagUp<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SetBroadcast</span><span class="hljs-params">(v *net.Flags)</span></span> &#123;<br>*v |= net.FlagBroadcast<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsCast</span><span class="hljs-params">(v net.Flags)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> v&amp;(net.FlagBroadcast|net.FlagMulticast) != <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> v net.Flags = net.FlagMulticast | net.FlagUp<br>fmt.Printf(<span class="hljs-string">&quot;%b %t\n&quot;</span>, v, IsUp(v)) <span class="hljs-comment">// 10001 true</span><br>TurnDown(&amp;v)<br>fmt.Printf(<span class="hljs-string">&quot;%b %t\n&quot;</span>, v, IsUp(v)) <span class="hljs-comment">// 10000 false</span><br>SetBroadcast(&amp;v)<br>fmt.Printf(<span class="hljs-string">&quot;%b %t\n&quot;</span>, v, IsUp(v))   <span class="hljs-comment">// 10010 false</span><br>fmt.Printf(<span class="hljs-string">&quot;%b %t\n&quot;</span>, v, IsCast(v)) <span class="hljs-comment">// 10010 true</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面有一个更复杂的例子，每个常量都是1024的幂：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>_   = <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">10</span> * <span class="hljs-literal">iota</span>)<br>KiB <span class="hljs-comment">// 1024B</span><br>MiB <span class="hljs-comment">// 1048576B</span><br>GiB <span class="hljs-comment">// 1073741824B</span><br>TiB <span class="hljs-comment">// 1099511627776             (exceeds 1 &lt;&lt; 32)</span><br>PiB <span class="hljs-comment">// 1125899906842624</span><br>EiB <span class="hljs-comment">// 1152921504606846976</span><br>ZiB <span class="hljs-comment">// 1180591620717411303424 (exceeds 1 &lt;&lt; 64)</span><br>YiB <span class="hljs-comment">// 1208925819614629174706176</span><br>)<br></code></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>练习 3.13：</strong> 编写KB、MB的常量声明，然后扩展到YB。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>KB = <span class="hljs-number">1000</span><br>MB = KB * KB<br>GB = MB * KB<br>TB = GB * KB<br>PB = TB * KB<br>EB = PB * KB<br>ZB = EB * KB<br>YB = ZB * KB<br>)<br></code></pre></td></tr></table></figure><h1 id="3-6-2-无类型常量"><a href="#3-6-2-无类型常量" class="headerlink" title="3.6.2. 无类型常量"></a>3.6.2. 无类型常量</h1><p>有六种未明确类型的常量类型：</p><ul><li>无类型的布尔型  true false</li><li>无类型的整数 如 0</li><li>无类型的字符 如 ‘\u0000’</li><li>无类型的浮点数 如 0.0</li><li>无类型的复数 如 0i</li><li>无类型的字符串 如字符串面值常量”123”</li></ul><p>编译器为这些常量类型的数字常量提供比基础类型更高精度的算术运算，至少有256bit的运算精度，而且不需要显式类型转换可以直接用于更多表达式。如上的ZiB和YiB的值已超过整数类型能表达的范围，但仍然是合法的常量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(YiB / ZiB) <span class="hljs-comment">// 1024</span><br>fmt.Println(YiB) <span class="hljs-comment">// cannot use YiB (untyped int constant 1208925819614629174706176) as int value in argument to fmt.Println (overflows)</span><br></code></pre></td></tr></table></figure><p>另一个例子，math.Pi无类型的浮点数常量，可以直接用于任意需要浮点数或复数的地方：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-type">float32</span> = math.Pi<br><span class="hljs-keyword">var</span> y <span class="hljs-type">float64</span> = math.Pi<br><span class="hljs-keyword">var</span> z <span class="hljs-type">complex128</span> = math.Pi<br><br>fmt.Println(x) <span class="hljs-comment">// 3.1415927</span><br>fmt.Println(y) <span class="hljs-comment">// 3.141592653589793</span><br>fmt.Println(z) <span class="hljs-comment">// (3.141592653589793+0i)</span><br></code></pre></td></tr></table></figure><p>将常量赋值给变量时，可能会导致精度丢失。<br>如果常量被指定类型，如<code>math.Pi</code>，精度也会产生变化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> Pi64 <span class="hljs-type">float64</span> = math.Pi<br><span class="hljs-keyword">var</span> x <span class="hljs-type">float32</span> = <span class="hljs-type">float32</span>(Pi64)<br><span class="hljs-keyword">var</span> y <span class="hljs-type">float64</span> = Pi64<br><span class="hljs-keyword">var</span> z <span class="hljs-type">complex128</span> = <span class="hljs-type">complex128</span>(Pi64)<br><br>fmt.Println(x) <span class="hljs-comment">// 3.1415927</span><br>fmt.Println(y) <span class="hljs-comment">// 3.141592653589793</span><br>fmt.Println(z) <span class="hljs-comment">// (3.141592653589793+0i)</span><br></code></pre></td></tr></table></figure><p>除法运算符<code>/</code>会根据操作数的类型生成对应类型的结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f <span class="hljs-type">float64</span> = <span class="hljs-number">212</span><br>fmt.Println((f - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span>)     <span class="hljs-comment">// &quot;100&quot;; (f - 32) * 5 is a float64</span><br>fmt.Println(<span class="hljs-number">5</span> / <span class="hljs-number">9</span> * (f - <span class="hljs-number">32</span>))     <span class="hljs-comment">// &quot;0&quot;;   5/9 is an untyped integer, 0</span><br>fmt.Println(<span class="hljs-number">5.0</span> / <span class="hljs-number">9.0</span> * (f - <span class="hljs-number">32</span>)) <span class="hljs-comment">// &quot;100&quot;; 5.0/9.0 is an untyped float</span><br></code></pre></td></tr></table></figure><p>只有常量可以是无类型的。<br>当无类型的常量赋值给一个变量的时候，如<code>var f float64 = 212</code>或者像输出语句中的表达式含有明确类型的值，如果转换合法，无类型的常量将会被隐式转换为对应的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f <span class="hljs-type">float64</span> = <span class="hljs-number">3</span> + <span class="hljs-number">0i</span> <span class="hljs-comment">// untyped complex -&gt; float64</span><br>f = <span class="hljs-number">2</span>                  <span class="hljs-comment">// untyped integer -&gt; float64</span><br>f = <span class="hljs-number">1e123</span>              <span class="hljs-comment">// untyped floating-point -&gt; float64</span><br>f = <span class="hljs-string">&#x27;a&#x27;</span>                <span class="hljs-comment">// untyped rune -&gt; float64</span><br></code></pre></td></tr></table></figure><p>相当于:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f <span class="hljs-type">float64</span> = <span class="hljs-type">float64</span>(<span class="hljs-number">3</span> + <span class="hljs-number">0i</span>)<br>f = <span class="hljs-type">float64</span>(<span class="hljs-number">2</span>)<br>f = <span class="hljs-type">float64</span>(<span class="hljs-number">1e123</span>)<br>f = <span class="hljs-type">float64</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br></code></pre></td></tr></table></figure><p>无论是隐式或显式转换，将一种类型转换为另一种类型都要求目标可以表示原始值。对于浮点数和复数，可能会有舍入处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    deadbeef = <span class="hljs-number">0xdeadbeef</span> <span class="hljs-comment">// untyped int with value 3735928559</span><br>    a = <span class="hljs-type">uint32</span>(deadbeef)  <span class="hljs-comment">// uint32 with value 3735928559</span><br>    b = <span class="hljs-type">float32</span>(deadbeef) <span class="hljs-comment">// float32 with value 3735928576 (rounded up)</span><br>    c = <span class="hljs-type">float64</span>(deadbeef) <span class="hljs-comment">// float64 with value 3735928559 (exact)</span><br>    d = <span class="hljs-type">int32</span>(deadbeef)   <span class="hljs-comment">// compile error: constant overflows int32</span><br>    e = <span class="hljs-type">float64</span>(<span class="hljs-number">1e309</span>)    <span class="hljs-comment">// compile error: constant overflows float64</span><br>    f = <span class="hljs-type">uint</span>(<span class="hljs-number">-1</span>)          <span class="hljs-comment">// compile error: constant underflows uint</span><br>)<br></code></pre></td></tr></table></figure><p>对于没有显式类型的变量声明语法，无类型的常量会被隐式转为默认的变量类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">0</span>      <span class="hljs-comment">// untyped integer;        implicit int(0)</span><br>r := <span class="hljs-string">&#x27;\000&#x27;</span> <span class="hljs-comment">// untyped rune;           implicit rune(&#x27;\000&#x27;)</span><br>f := <span class="hljs-number">0.0</span>    <span class="hljs-comment">// untyped floating-point; implicit float64(0.0)</span><br>c := <span class="hljs-number">0i</span>     <span class="hljs-comment">// untyped complex;        implicit complex128(0i)</span><br></code></pre></td></tr></table></figure><p>默认类型规则：</p><ul><li>无类型的整数常量 -&gt;<code>int</code></li><li>无类型的浮点数常量-&gt;<code>float64</code></li><li>无类型的复数常量-&gt;<code>complex128</code></li><li>无类型的字符常量-&gt;<code>rune</code></li></ul><p>如果要给变量一个非默认类型，那么可以显式转换为所需类型或给声明的变量指定明确的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i = <span class="hljs-type">int8</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">var</span> i <span class="hljs-type">int8</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>当无类型的常量输出接口值（类型）时，会输出默认类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, <span class="hljs-number">0</span>)      <span class="hljs-comment">// &quot;int&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, <span class="hljs-number">0.0</span>)    <span class="hljs-comment">// &quot;float64&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, <span class="hljs-number">0i</span>)     <span class="hljs-comment">// &quot;complex128&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, <span class="hljs-string">&#x27;\000&#x27;</span>) <span class="hljs-comment">// &quot;int32&quot; (rune)</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.5. 字符串</title>
      <link href="/posts/a309a7c16f6a/"/>
      <url>/posts/a309a7c16f6a/</url>
      
        <content type="html"><![CDATA[<p>字符串是不可变的字节序列。<br>字符串包含任意数据，包括byte值0。<br>文本字符串通常被解释为采用UTF8编码的Unicode码（rune）序列。</p><p>内置的<code>len函数</code>返回字符串的<code>字节数量</code>，不是rune字符数量。<br>索引操作<code>s[i]</code>返回第<code>i</code>个字节的值，i必须满足<code>0 ≤ i&lt; len(s)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;hello, world&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(s))     <span class="hljs-comment">// 12</span><br>fmt.Println(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">7</span>]) <span class="hljs-comment">// 104 119 (h and w)</span><br></code></pre></td></tr></table></figure><p>第<code>i</code>个字节并不一定是字符串的第<code>i</code>个字符，因为对于非ASCII字符的UTF8编码会要两个或多个字节。</p><p><code>s[i:j]</code>基于字符串s的第<code>i</code>个字节开始到第<code>j</code>个字节（不包含第j个字节本身）生成新的字符串。新字符串包含<code>j-i</code>个字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;hello,world&quot;</span><br>fmt.Println(s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><p>注意索引不要超出字符串范围或<code>j</code>小于<code>i</code>。<br><code>i</code>和<code>j</code>都可以被忽略，当它们被忽略时将采用0作为开始位置，采用len(s)作为结束的位置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;hello,world&quot;</span><br>fmt.Println(s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment">// hello</span><br>fmt.Println(s[:<span class="hljs-number">5</span>])  <span class="hljs-comment">// hello</span><br>fmt.Println(s[<span class="hljs-number">6</span>:])  <span class="hljs-comment">// world</span><br>fmt.Println(s[:])   <span class="hljs-comment">// hello,world</span><br></code></pre></td></tr></table></figure><p><code>+</code>操作符可以将两个字符串拼接成一个新字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;hi&quot;</span> + s[<span class="hljs-number">5</span>:]) <span class="hljs-comment">// hi,world</span><br></code></pre></td></tr></table></figure><p>字符串可以通过逐个字节进行比较；比较的结果是根据字符串自然编码的顺序。</p><p>字符串的值是不可变的：一个字符串包含的字节序列永远不会被改变。<br>两个字符串拼接成一个字符串时，将生成新的字符串，原有的字符串值不会被改变。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;left foot&quot;</span><br>t := s<br>s += <span class="hljs-string">&quot;,right foot&quot;</span><br>fmt.Println(s) <span class="hljs-comment">// left foot,right foot</span><br>fmt.Println(t) <span class="hljs-comment">// left foot</span><br></code></pre></td></tr></table></figure><p>原有字符串值不会被改变，但变量s将被赋于新的字符串值，t依然包含原先的字符串值。</p><p>尝试修改字符串内部数据的操作也是被禁止。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;L&#x27;</span>  <span class="hljs-comment">// cannot assign to s[0] (value of type byte)</span><br></code></pre></td></tr></table></figure><p>不变性意味如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串s和对应的子字符串切片s[7:]的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。</p><h1 id="3-5-1-字符串面值"><a href="#3-5-1-字符串面值" class="headerlink" title="3.5.1. 字符串面值"></a>3.5.1. 字符串面值</h1><p>字符串值也可以用字符串面值方式编写，只要将一系列字节序列包含在双引号即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">&quot;Hello, world&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/posts/a309a7c16f6a/1679683714399.png" alt="enter description here"></p><p>Go语言源文件默认使用UTF8编码，文本字符串也是默认使用UTF8编码。<br>也可以将Unicode码点写到字符串面值里。</p><p>ASCII转义字符：</p><table><thead><tr><th>转义字符</th><th>释义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>&#39;</td><td>单引号（只用在’&#39;‘形式的rune符号面值中）</td></tr><tr><td>&quot;</td><td>双引号（只用在”…”形式的字符串面值中）</td></tr><tr><td>\</td><td>反斜杠</td></tr><tr><td>\xhh</td><td>十六进制 （两个h表示十六进制数字大小写都可以）如&#x2F;xff</td></tr><tr><td>\ooo</td><td>三个八进制数字 （0-7, 但不能超过\377，因为对应一个字节的范围，十进制为255）</td></tr></tbody></table><p>在原生字符串面值内是无法直接写字符的（如上表），必须通过转义字符、八进制或十六进制来表示。</p><h1 id="3-5-2-Unicode"><a href="#3-5-2-Unicode" class="headerlink" title="3.5.2. Unicode"></a>3.5.2. Unicode</h1><p>早期，计算机只有一个ASCII字符集（美国信息交换标准代码），使用7bit来表示128个字符（英文字母的大小写、数字、各种标点符号和设置控制符）。但是也导致了世界上很多地区的用户无法直接使用自己的符号系统。那么如何有效处理包含各种语言丰富多样的文本数据呢？</p><p><code>Unicode</code>（<a href="http://unicode.org)收集了世界上所有的符号系统,包括重音符号和其它变音符号,制表符和回车符,还有其它有趣的符号./">http://unicode.org）收集了世界上所有的符号系统，包括重音符号和其它变音符号，制表符和回车符，还有其它有趣的符号。</a><br>每一个符号都分配了唯一的<code>Unicode</code>码点。<br><code>Unicode</code>码点对应Go语言中的<code>rune</code>整数类型（<code>rune</code>是<code>int32</code>等价类型）。</p><p>在第八版的Unicode标准中收集了超过了120,000个字符，涵盖超过100多种语言。<br>Unicode码的数据类型是<code>int32</code>，也就是<code>rune</code>对应的类型，这种编码方式为UTF-32或UCS-4。每个Unicode码使用了32bit来表示，但是会浪费很多存储空间，因此大数据计算器读的文本是ASCII字符，ASCII字符只需要8bit或1Byte就可以表示。</p><h1 id="3-5-3-UTF-8"><a href="#3-5-3-UTF-8" class="headerlink" title="3.5.3. UTF-8"></a>3.5.3. UTF-8</h1><p><code>UTF8</code>是将<code>Unicode</code>码编码为字节序列的变长编码。<br><code>UTF8</code>编码使用1到4个字节来表示每个<code>Unicode</code>码。<br><code>ASCII</code>部分编码是使用1个字节，常用字符部分使用2或3个字节表示。</p><p>每个符号编码后第一个字节的高端bit位用于表示总共有多少个字节。<br>如果第一个字节的高端bit为0，则表示对应7bit的ASCII字符，ASCII码的每个字符依然是一个字节，与传统的ASCII编码兼容。<br>如果第一个字节的高端bit为110，则说明需要2个字节。<br>如果第一个字节的高端bit为1110，则说明需要3个字节。<br>如果第一个字节的高端bit为11110，则说明需要4个字节。<br>后续每个高端bit都以10开头。</p><table><thead><tr><th>字节表示</th><th>范围</th></tr></thead><tbody><tr><td>0xxxxxxx</td><td>runes 0-127 (ASCII)</td></tr><tr><td>110xxxxx 10xxxxxx</td><td>128-2047 (values &lt;128 unused)</td></tr><tr><td>1110xxxx 10xxxxxx 10xxxxxx</td><td>2048-65535 (values &lt; 2048 unused)</td></tr><tr><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td><td>65536-0x10ffff (other values unused)</td></tr></tbody></table><p>变长的编码无法直接通过索引来访问第n个字符，但是UTF8编码获得了额外的优点。</p><ul><li>UTF8编码比较紧凑，完全兼容ASCII编码，并且可以自动同步。</li><li>UTF8编码还可以通过向前回溯最多2个字节就可以确定当前字符编码的开始字节的位置。</li><li>UTF8也是一个前缀编码，所以当从左向右解码时不会有任何歧义也并不需要向前查看（译注：像GBK之类的编码，如果不知道起点位置则可能会出现歧义）。</li><li>没有任何字符的编码是其它字符编码的子串，或是其它编码序列的字串，因此搜索一个字符时只要搜索它的字节编码序列即可，不用担心前后的上下文会对搜索结果产生干扰。</li><li>UTF8编码的顺序和Unicode码点的顺序一致，因此可以直接排序UTF8编码序列。</li><li>因为没有嵌入的NUL(0)字节，可以很好地兼容那些使用NUL作为字符串结尾的编程语言。</li></ul><p><code>unicode</code>包提供了处理<code>rune</code>字符相关功能的函数（如区分字母和数组，或者是字母的大小和小写转换等），<code>unicode/utf8</code>包则提供了用于<code>rune</code>字符序列的<code>UTF8</code>编码和解码的功能。</p><p>有很多Unicode字符很难直接从键盘输入，并且还有很多字符有着相似的结构；有一些甚至是不可见的字符（译注：中文和日文就有很多相似但不同的字）。Go语言字符串面值中的Unicode转义字符让我们可以通过Unicode码点输入特殊的字符。<br>有两种形式：</p><ul><li><code>\uhhhh</code>对应16bit的编码值</li><li><code>\Uhhhhhhhh</code>对应32bit的编码值</li></ul><p>其中一个h表示一个十六进制数字。<br>一般很少使用32bit的形式。<br>每一个对应着UTF编码。<br>下面的字母串面值都表示相同的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;世界&quot;</span>)                       <span class="hljs-comment">// 世界</span><br>fmt.Println(<span class="hljs-string">&quot;\xe4\xb8\x96\xe7\x95\x8c&quot;</span>) <span class="hljs-comment">// 世界</span><br>fmt.Println(<span class="hljs-string">&quot;\u4e16\u754c&quot;</span>)             <span class="hljs-comment">// 世界</span><br>fmt.Println(<span class="hljs-string">&quot;\U00004e16\U0000754c&quot;</span>)     <span class="hljs-comment">// 世界</span><br></code></pre></td></tr></table></figure><p>Unicode转义也可以使用在rune字符中。下面三个字符是等价的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">&#x27;世&#x27;</span> <span class="hljs-string">&#x27;\u4e16&#x27;</span> <span class="hljs-string">&#x27;\U00004e16&#x27;</span><br></code></pre></td></tr></table></figure><p>对于小于256码值可以写在一个十六进制的转义字节中，如<code>\x41</code>对应字符<code>A</code>，但对于更大的码值则必须使用<code>\u</code>或<code>\U</code>转义形式。<br>因此，<code>\xe4\xb8\x96</code>并非一个合法的<code>rune</code>字符，虽然这个3个字节对应一个有效的UTF8编码的码值。</p><p>得益于UTF8编码的优良设计，很多字符串并不需要解码操作。<br>如下，可以不用解码直接测试字符串是否是另一个字符串的前缀：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HasPrefix</span><span class="hljs-params">(s, prefix <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s) &gt;= <span class="hljs-built_in">len</span>(prefix) &amp;&amp; s[:<span class="hljs-built_in">len</span>(prefix)] == prefix<br>&#125;<br></code></pre></td></tr></table></figure><p>当处理一个中西两个字符时，需要UTF8解码器。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;Hello, 世界&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(s))                    <span class="hljs-comment">// 13</span><br>fmt.Println(utf8.RuneCountInString(s)) <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure><p>字符串s包含13个字节，以UTF8形式编码，却只对应9个Unicode字符。<br>可以使用<code>unicode/utf8</code>包中进行UTF解码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); &#123;<br>r, size := utf8.DecodeRuneInString(s[i:])<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%c\n&quot;</span>, i, r)<br>i += size<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0       H</span><br><span class="hljs-comment">1       e</span><br><span class="hljs-comment">2       l</span><br><span class="hljs-comment">3       l</span><br><span class="hljs-comment">4       o</span><br><span class="hljs-comment">5       ,</span><br><span class="hljs-comment">6</span><br><span class="hljs-comment">7       世</span><br><span class="hljs-comment">10      界</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><code>DecodeRuneInString</code>函数返回一个r和size，r对应字符本身，size对应r采用UTF8编码后的编码字节数。<br>Go语言的range循环在处理字符串时，会自动进行隐式解码UTF8字符串。如下：<br><img src="/posts/a309a7c16f6a/1679689120671.png" alt="enter description here"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i, r := <span class="hljs-keyword">range</span> <span class="hljs-string">&quot;Hello,世界&quot;</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%q\t%d\n&quot;</span>, i, r, r)<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0       &#x27;H&#x27;     72</span><br><span class="hljs-comment">1       &#x27;e&#x27;     101</span><br><span class="hljs-comment">2       &#x27;l&#x27;     108</span><br><span class="hljs-comment">3       &#x27;l&#x27;     108</span><br><span class="hljs-comment">4       &#x27;o&#x27;     111</span><br><span class="hljs-comment">5       &#x27;,&#x27;     44</span><br><span class="hljs-comment">6       &#x27;世&#x27;    19990</span><br><span class="hljs-comment">9       &#x27;界&#x27;    30028</span><br></code></pre></td></tr></table></figure><p>统计字符串中字符的数目，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">n := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, _ = <span class="hljs-keyword">range</span> s &#123;<br>   n++<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以忽略变量<code>_</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">n := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> s &#123;<br>n++<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以直接调用<code>utf8.RuneCountInString(s)</code>函数。</p><p>文本字符串采用UTF8编码只是一种惯例，但是对于循环的真正字符串并不是一个惯例，这是正确的。如果用于循环的字符串只是一个普通的二进制数据，或者是含有错误编码的UTF8数据，将会发送什么呢？<br>每一个UTF8字符解码，不管是显式地调用utf8.DecodeRuneInString解码或是在range循环中隐式地解码，如果遇到一个错误的UTF8编码输入，将生成一个特别的Unicode字符’\uFFFD’，在印刷中这个符号通常是一个黑色六角或钻石形状，里面包含一个白色的问号”�”。当程序遇到这样的一个字符，通常是一个危险信号，说明输入并不是一个完美没有错误的UTF8字符串。</p><p>UTF8字符串作为交换格式是非常方便的，但是在程序内部采用rune序列可能更方便，因为rune大小一致，支持数组索引和方便切割。</p><p>string接受到[]rune的类型转换，可以将一个UTF8编码的字符串解码为Unicode字符序列：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;程序&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;% x\n&quot;</span>, s) <span class="hljs-comment">// e7 a8 8b e5 ba 8f</span><br>r := []<span class="hljs-type">rune</span>(s)<br>fmt.Printf(<span class="hljs-string">&quot;%x\n&quot;</span>, r) <span class="hljs-comment">// [7a0b 5e8f]</span><br></code></pre></td></tr></table></figure><p>在第一个Printf中的% x参数用于在每个十六进制数字前插入一个空格。</p><p>将一个[]rune类型的Unicode字符slice或数组转为string，则进行UTF编码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-type">string</span>(r)) <span class="hljs-comment">// 程序</span><br></code></pre></td></tr></table></figure><p>将一个整数转型为字符串意思是生成以只包含对应Unicode码点字符的UTF8字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-type">string</span>(<span class="hljs-number">65</span>))                      <span class="hljs-comment">// A not 65</span><br>fmt.Println(<span class="hljs-type">string</span>(<span class="hljs-number">1234567</span>))                 <span class="hljs-comment">// �</span><br>fmt.Println(<span class="hljs-type">string</span>(<span class="hljs-number">0x4eac</span>))                  <span class="hljs-comment">// 京</span><br>fmt.Printf(<span class="hljs-string">&quot;%0b\n&quot;</span>, <span class="hljs-number">0x4eac</span>)                  <span class="hljs-comment">// 100111010101100 unicode 二进制码点</span><br>fmt.Println(<span class="hljs-type">string</span>(<span class="hljs-type">rune</span>(<span class="hljs-number">0</span>b100111010101100))) <span class="hljs-comment">// 京  unicode二进制码点转rune字符输出</span><br>fmt.Printf(<span class="hljs-string">&quot;%0d\n&quot;</span>, <span class="hljs-number">0x4eac</span>)                  <span class="hljs-comment">// 20140  unicode十六进制转十进制</span><br>fmt.Println(<span class="hljs-type">string</span>(<span class="hljs-number">20140</span>))                   <span class="hljs-comment">// 京</span><br>fmt.Println(strconv.QuoteToASCII(<span class="hljs-string">&quot;京&quot;</span>))       <span class="hljs-comment">// &quot;\u4eac&quot; unicode编码其实就是unicode十六进制前加\u  表示16bit长度</span><br><span class="hljs-comment">// 编码为UTF8 获取UTF8的二进制码点</span><br>p := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">3</span>)<br>n := utf8.EncodeRune(p, <span class="hljs-type">rune</span>(<span class="hljs-number">0x4eac</span>))<br>fmt.Println(p)                                <span class="hljs-comment">// [228 186 172]</span><br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, p)                         <span class="hljs-comment">// 京</span><br>fmt.Println(n)                                <span class="hljs-comment">// 3 表示3个字节</span><br>fmt.Printf(<span class="hljs-string">&quot;%08b %08b %08b\n&quot;</span>, <span class="hljs-number">228</span>, <span class="hljs-number">186</span>, <span class="hljs-number">172</span>) <span class="hljs-comment">//   11100100 10111010 10101100 UTF8的二进制码点</span><br><span class="hljs-comment">// Unicode二进制码点 0100 1110 1010 1100 -&gt; 应用3个字节的模版1110xxxx 10xxxxxx 10xxxxxx进行填充后的utf8二进制码点，11100100 10111010 10101100</span><br></code></pre></td></tr></table></figure><p>如果对应码点的字符是无效的，则用’\uFFFD’无效字符作为替换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-type">string</span>(<span class="hljs-number">1234567</span>)) <span class="hljs-comment">// �</span><br></code></pre></td></tr></table></figure><h1 id="3-5-4-字符串和Byte切片"><a href="#3-5-4-字符串和Byte切片" class="headerlink" title="3.5.4. 字符串和Byte切片"></a>3.5.4. 字符串和Byte切片</h1><p>标准库中有四个包对字符串处理尤为重要：bytes、strings、strconv和unicode包。</p><ul><li>strings包提供了许多如字符串的查询、替换、比较、截断、拆分和合并等功能。</li><li>bytes包也提供了很多类似功能的函数，但是针对和字符串有着相同结构的[]byte类型。</li><li>strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相关的转换。</li><li>unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类。</li></ul><p>下面例子的basename函数灵感于Unix shell的同名工具。在我们实现的版本中，basename(s)将看起来像是系统路径的前缀删除，同时将看似文件类型的后缀名部分删除：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(basename(<span class="hljs-string">&quot;a/b/c.go&quot;</span>)) <span class="hljs-comment">// &quot;c&quot;</span><br>fmt.Println(basename(<span class="hljs-string">&quot;c.d.go&quot;</span>))   <span class="hljs-comment">// &quot;c.d&quot;</span><br>fmt.Println(basename(<span class="hljs-string">&quot;abc&quot;</span>))      <span class="hljs-comment">// &quot;abc”</span><br></code></pre></td></tr></table></figure><p>第一个版本，不使用任何库：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>fmt.Println(basename(input.Text()))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// basename removes directory components and a .suffix.</span><br><span class="hljs-comment">// e.g., a =&gt; a, a.go =&gt; a, a/b/c.go =&gt; c, a/b.c.go =&gt; b.c</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">basename</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// Discard last &#x27;/&#x27; and everything before.</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;/&#x27;</span> &#123;<br>s = s[i+<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// Preserve everything before last &#x27;.&#x27;.</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;.&#x27;</span> &#123;<br>s = s[:i]<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>第二个版本使用<code>strings.LastIndex</code>函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>fmt.Println(basename(input.Text()))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">basename</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>slash := strings.LastIndex(s, <span class="hljs-string">&quot;/&quot;</span>) <span class="hljs-comment">// -1 if &quot;/&quot; not found</span><br>s = s[slash+<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> dot := strings.LastIndex(s, <span class="hljs-string">&quot;.&quot;</span>); dot &gt;= <span class="hljs-number">0</span> &#123;<br>s = s[:dot]<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p><code>path/filepath</code>包则使用操作系统本身的路径规则，例如POSIX系统使用&#x2F;foo&#x2F;bar，而Microsoft Windows使用c:\foo\bar等</p><p>函数的功能是将一个表示整值的字符串，每隔三个字符插入一个逗号分隔符，例如“12345”处理后成为“12,345”。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>fmt.Println(comma(input.Text()))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// comma inserts commas in a non-negative decimal integer string.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">comma</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>n := <span class="hljs-built_in">len</span>(s)<br><span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">3</span> &#123;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><span class="hljs-keyword">return</span> comma(s[:n<span class="hljs-number">-3</span>]) + <span class="hljs-string">&quot;,&quot;</span> + s[n<span class="hljs-number">-3</span>:]<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串和字节slice之间的相互转换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;abc&quot;</span><br>b := []<span class="hljs-type">byte</span>(s)<br>s2 := <span class="hljs-type">string</span>(b)<br></code></pre></td></tr></table></figure><p>从概念上讲，一个[]byte(s)转换是分配了一个新的字节数组用于保存字符串数据的拷贝，然后引用这个底层的字节数组。编译器的优化可以避免在一些场景下分配和复制字符串数据，但总的来说需要确保在变量b被修改的情况下，原始的s字符串也不会改变。将一个字节slice转到字符串的string(b)操作则是构造一个字符串拷贝，以确保s2字符串是只读的。</p><p>strings包的部分函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Contains</span><span class="hljs-params">(s, substr <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Count</span><span class="hljs-params">(s, sep <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fields</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HasPrefix</span><span class="hljs-params">(s, prefix <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(s, sep <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Join</span><span class="hljs-params">(a []<span class="hljs-type">string</span>, sep <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p><code>bytes</code>包的部分函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Contains</span><span class="hljs-params">(b, subslice []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Count</span><span class="hljs-params">(s, sep []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fields</span><span class="hljs-params">(s []<span class="hljs-type">byte</span>)</span></span> [][]<span class="hljs-type">byte</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HasPrefix</span><span class="hljs-params">(s, prefix []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(s, sep []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Join</span><span class="hljs-params">(s [][]<span class="hljs-type">byte</span>, sep []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span><br></code></pre></td></tr></table></figure><p>它们之间唯一的区别是字符串类型参数被替换成了字节slice类型的参数。</p><p>bytes包还提供了Buffer类型用于字节slice的缓存。一个Buffer开始是空的，但是随着string、byte或[]byte等类型数据的写入可以动态增长，一个bytes.Buffer变量并不需要处理化，因为零值也是有效的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(intsToString([]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;)) <span class="hljs-comment">// [1,2,3]</span><br>&#125;<br><br><span class="hljs-comment">// intsToString is like fmt.Sprint(value) but adds commas.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">intsToString</span><span class="hljs-params">(values []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(<span class="hljs-string">&#x27;[&#x27;</span>)<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> values &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>buf.WriteString(<span class="hljs-string">&quot;,&quot;</span>)<br>&#125;<br>fmt.Fprintf(&amp;buf, <span class="hljs-string">&quot;%d&quot;</span>, v)<br>&#125;<br>buf.WriteByte(<span class="hljs-string">&#x27;]&#x27;</span>)<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 3.10：</strong> 编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>fmt.Println(comma(input.Text()))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// comma inserts commas in a non-negative decimal integer string.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">comma</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(s[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(s)-i)%<span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27;,&#x27;</span>)<br>&#125;<br>buf.WriteByte(s[i])<br>&#125;<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 3.11：</strong> 完善comma函数，以支持浮点数处理和一个可选的正负号的处理。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>fmt.Println(comma(input.Text()))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">comma</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br>index := strings.LastIndex(s, <span class="hljs-string">&quot;.&quot;</span>)<br>n := <span class="hljs-built_in">len</span>(s)<br><span class="hljs-keyword">if</span> index &gt;= <span class="hljs-number">0</span> &#123;<br>n = index<br>&#125;<br><br><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteByte(s[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;+&#x27;</span> || s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>buf.WriteByte(s[<span class="hljs-number">1</span>])<br>s = s[<span class="hljs-number">1</span>:]<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;.&#x27;</span> &#123;<br>buf.WriteString(s[i:])<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> (n-i)%<span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; n-i &gt; <span class="hljs-number">0</span> &#123;<br>buf.WriteByte(<span class="hljs-string">&#x27;,&#x27;</span>)<br>&#125;<br>buf.WriteByte(s[i])<br>&#125;<br><span class="hljs-keyword">return</span> buf.String()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 3.12：</strong> 编写一个函数，判断两个字符串是否是是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(isAnagram(<span class="hljs-string">&quot;1233&quot;</span>, <span class="hljs-string">&quot;3312&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(s1, s2 <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> s1 == s2 || <span class="hljs-built_in">len</span>(s1) != <span class="hljs-built_in">len</span>(s2) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(s1))<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s1 &#123;<br>m[v]++<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s2 &#123;<br><span class="hljs-keyword">if</span> m[v] == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>m[v]--<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-5-5-字符串和数字的转换"><a href="#3-5-5-字符串和数字的转换" class="headerlink" title="3.5.5. 字符串和数字的转换"></a>3.5.5. 字符串和数字的转换</h1><p><code>strconv</code>包可以将字符串和数字相互转换。</p><h2 id="整数转字符串"><a href="#整数转字符串" class="headerlink" title="整数转字符串"></a>整数转字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">x := <span class="hljs-number">123</span><br>y := fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, x) <br>fmt.Println(y, strconv.Itoa(x)) <span class="hljs-comment">// 123 123</span><br></code></pre></td></tr></table></figure><p>有以下几种方法：</p><ul><li><code>fmt.Sprintf</code> 返回格式化的字符串。</li><li><code>strconv.Itoa</code>返回字符串 int转ASCII。</li></ul><p><code>Itoa</code>等价于<code>FormatInt</code>，同样的，还有类似的<code>FormatUint</code>。<br><code>FormatInt</code>和<code>FormatUint</code>函数可以用不同的进制来格式化数字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(strconv.FormatInt(<span class="hljs-type">int64</span>(x), <span class="hljs-number">2</span>)) <span class="hljs-comment">// 1111011 二进制</span><br>fmt.Println(strconv.FormatInt(<span class="hljs-type">int64</span>(x), <span class="hljs-number">8</span>)) <span class="hljs-comment">// 173 八进制</span><br>fmt.Println(strconv.FormatInt(<span class="hljs-type">int64</span>(x), <span class="hljs-number">10</span>)) <span class="hljs-comment">// 123 十进制</span><br>fmt.Println(strconv.FormatInt(<span class="hljs-type">int64</span>(x), <span class="hljs-number">16</span>)) <span class="hljs-comment">// 7b 十六进制</span><br></code></pre></td></tr></table></figure><p>同样，<code>fmt.Printf</code>函数的<code>%b</code>、<code>%o</code>、<code>%d</code>和<code>%x</code>等参数提供的功能比<code>strconv</code>包的<code>Format</code>函数强大很多，还可以附加额外信息:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;x=%08b&quot;</span>, x)) <span class="hljs-comment">// x=01111011</span><br>fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;x=%o&quot;</span>, x))   <span class="hljs-comment">// x=173</span><br>fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;x=%d&quot;</span>, x))   <span class="hljs-comment">// x=123</span><br>fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;x=% x&quot;</span>, x))  <span class="hljs-comment">// x= 7b</span><br></code></pre></td></tr></table></figure><h2 id="字符串转整数"><a href="#字符串转整数" class="headerlink" title="字符串转整数"></a>字符串转整数</h2><p>如果要将字符串转整数，有以下方法：</p><ul><li><code>strconv.Atoi</code>函数，返回<code>int</code>类型整数，ASCII转int。</li><li><code>strconv.ParseInt</code>函数，返回整数。还有解析无符号整数函数<code>strconv.ParseUint</code>。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">x, err := strconv.Atoi(<span class="hljs-string">&quot;123&quot;</span>) <br>y, err := strconv.ParseInt(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>) <span class="hljs-comment">// base 10, up to 64 bits</span><br></code></pre></td></tr></table></figure><p><code>strconv.ParseInt</code>函数的第三个参数是用于指定整型数的大小，如16表示int16，0则表示int。通常情况下，返回结果y总是int64类型。但注意范围大小。</p><p><code>strconv.ParseInt</code>函数的第二个参数是用于指定字符串前缀，如2为”0b”，8为”0”或”0o”，16为”0x”，10为其他，0为可以使用下划线字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(strconv.ParseInt(<span class="hljs-string">&quot;01111011&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">64</span>)) <span class="hljs-comment">// 123 &lt;nil&gt;</span><br>fmt.Println(strconv.ParseInt(<span class="hljs-string">&quot;173&quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">64</span>))      <span class="hljs-comment">// 123 &lt;nil&gt;</span><br>fmt.Println(strconv.ParseInt(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>))     <span class="hljs-comment">// 123 &lt;nil&gt;</span><br>fmt.Println(strconv.ParseInt(<span class="hljs-string">&quot;7b&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">64</span>))      <span class="hljs-comment">// 123 &lt;nil&gt;</span><br>fmt.Println(strconv.ParseInt(<span class="hljs-string">&quot;1_23&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>))     <span class="hljs-comment">// 123 &lt;nil&gt;</span><br></code></pre></td></tr></table></figure><p><code>fmt.Scanf</code>用于解析输入的字符串和数字，特别是字符串和数字混合一行时，可以灵活处理不完整或不规则的输入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span><br>fmt.Println(fmt.Scanf(<span class="hljs-string">&quot;混合%s%d&quot;</span>, &amp;s, &amp;a)) <span class="hljs-comment">// 2 &lt;nil&gt; 输入混合123 123</span><br>fmt.Println(s) <span class="hljs-comment">// 123</span><br>fmt.Println(a) <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p>多个输入时，空格或换行。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.4. 布尔型</title>
      <link href="/posts/d98a81de6430/"/>
      <url>/posts/d98a81de6430/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/d98a81de6430/1679595785109.png" alt="bool"></p><h1 id="布尔值的运算"><a href="#布尔值的运算" class="headerlink" title="布尔值的运算"></a>布尔值的运算</h1><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p><code>!</code>对应逻辑非操作，<code>!true=false</code>，<code>!false=true</code>。</p><h2 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h2><p><code>&amp;&amp;</code>(AND)对应逻辑与<br><code>||</code>(OR)对应逻辑或<br>如果运算符左边已经可以确定整个布尔表达式的值，那么运算符右边的值将不被求值，因此下面的表达式并非异常：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;&quot;</span><br>fmt.Println(s != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// false</span><br>fmt.Println(s == <span class="hljs-string">&quot;&quot;</span> || s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>其中s[0]操作会导致panic异常。<br><strong><code>&amp;&amp;</code>的优先级比<code>||</code>高</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span> || <br><span class="hljs-string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> ||<br><span class="hljs-string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;c is ASCII letter or digit&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="一些特别的"><a href="#一些特别的" class="headerlink" title="一些特别的"></a>一些特别的</h1><p>布尔值并不会隐式转换为数字值0或1，反之亦然，必须使用显式if语句辅助转换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> b &#123;<br>    i = <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通常会进行包装：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// btoi returns 1 if b is true and 0 if false.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">btoi</span><span class="hljs-params">(b <span class="hljs-type">bool</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> b &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// itob reports whether i is non-zero.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">itob</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span>  &#123;<br><span class="hljs-keyword">return</span> i != <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3. 复数</title>
      <link href="/posts/01a5b9d8501c/"/>
      <url>/posts/01a5b9d8501c/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/01a5b9d8501c/1679562639256-1710774522762.png" alt="复数"></p><h1 id="3-3-1-复数的构建"><a href="#3-3-1-复数的构建" class="headerlink" title="3.3.1. 复数的构建"></a>3.3.1. 复数的构建</h1><p>复数构建：<code>complex()</code><br>返回复数的实部：<code>real()</code><br>返回复数的虚部：<code>imag()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-type">complex128</span> = <span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> y <span class="hljs-type">complex128</span> = <span class="hljs-built_in">complex</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>fmt.Println(x)           <span class="hljs-comment">// (1 + 2i)</span><br>fmt.Println(x * y)       <span class="hljs-comment">// (1 + 2i) * (3 + 4i) = (1*3 - 2*4) + (2*3 + 1*4)i = -5 + 10i</span><br>fmt.Println(<span class="hljs-built_in">real</span>(x * y)) <span class="hljs-comment">// -5</span><br>fmt.Println(<span class="hljs-built_in">imag</span>(x * y)) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p>复数的声明语句简化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">x := <span class="hljs-number">1</span> + <span class="hljs-number">2i</span><br>y := <span class="hljs-number">3</span> + <span class="hljs-number">4i</span><br></code></pre></td></tr></table></figure><h1 id="3-3-2-纯虚数"><a href="#3-3-2-纯虚数" class="headerlink" title="3.3.2. 纯虚数"></a>3.3.2. 纯虚数</h1><p>纯虚数，实部为0，如3.141592i。<br><code>i^2 = -1</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-number">1i</span> * <span class="hljs-number">1i</span>) <span class="hljs-comment">// (-1+0i), i^2 = -1</span><br></code></pre></td></tr></table></figure><h1 id="3-3-3-复数的比较"><a href="#3-3-3-复数的比较" class="headerlink" title="3.3.3. 复数的比较"></a>3.3.3. 复数的比较</h1><p>复数也可以使用&#x3D;&#x3D;和!&#x3D;进行相等比较，只有实部和虚部都相等时，复数才相等。<br>（注意浮点数比较的精度问题。）<br>复数无大小顺序之分。</p><h1 id="3-3-4-复数的运用"><a href="#3-3-4-复数的运用" class="headerlink" title="3.3.4. 复数的运用"></a>3.3.4. 复数的运用</h1><p>math&#x2F;cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(cmplx.Sqrt(<span class="hljs-number">-1</span>)) <span class="hljs-comment">// (0+1i)</span><br>fmt.Println(cmplx.Exp(<span class="hljs-number">0</span>))   <span class="hljs-comment">// (1+0i)</span><br></code></pre></td></tr></table></figure><p>下面的程序使用complex128复数算法来生成一个Mandelbrot图像。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br><br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><span class="hljs-keyword">for</span> py := <span class="hljs-number">0</span>; py &lt; height; py++ &#123;<br>y := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br><span class="hljs-comment">// Image point(px,py) represents complex value z.</span><br>img.Set(px, py, mandlebrot(z))<br>&#125;<br>&#125;<br>png.Encode(os.Stdout, img) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring errors</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandlebrot</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex128</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + z<br><span class="hljs-keyword">if</span> cmplx.Abs(v) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;<span class="hljs-number">255</span> - contrast*n&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/posts/01a5b9d8501c/1679568526352.png" alt="The Mandelbrot set"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 3.5</strong>： 实现一个彩色的Mandelbrot图像，使用image.NewRGBA创建图像，使用color.RGBA或color.YCbCr生成颜色。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br><br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><span class="hljs-keyword">for</span> py := <span class="hljs-number">0</span>; py &lt; height; py++ &#123;<br>y := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br><span class="hljs-comment">// Image point(px,py) represents complex value z.</span><br>img.Set(px, py, acos(z))<br>&#125;<br>&#125;<br>png.Encode(os.Stdout, img) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring errors</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">acos</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br>v := cmplx.Acos(z)<br>blue := <span class="hljs-type">uint8</span>(<span class="hljs-built_in">real</span>(v)*<span class="hljs-number">128</span>) + <span class="hljs-number">127</span><br>red := <span class="hljs-type">uint8</span>(<span class="hljs-built_in">imag</span>(v)*<span class="hljs-number">128</span>) + <span class="hljs-number">127</span><br><span class="hljs-keyword">return</span> color.YCbCr&#123;Y: <span class="hljs-number">192</span>, Cb: blue, Cr: red&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出图像：<br><img src="/posts/01a5b9d8501c/out.png" alt="out"></p><p><strong>练习 3.6</strong>： 升采样技术可以降低每个像素对计算颜色值和平均值的影响。简单的方法是将每个像素分层四个子像素，实现它。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">2048</span>, <span class="hljs-number">2048</span><br>)<br><br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><span class="hljs-keyword">for</span> py := <span class="hljs-number">0</span>; py &lt; height; py += <span class="hljs-number">2</span> &#123;<br>y1 := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br>y2 := <span class="hljs-type">float64</span>(py+<span class="hljs-number">1</span>)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px += <span class="hljs-number">2</span> &#123;<br>x1 := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>x2 := <span class="hljs-type">float64</span>(px+<span class="hljs-number">1</span>)/width*(xmax-xmin) + xmin<br>z1 := <span class="hljs-built_in">complex</span>(x1, y1)<br>z2 := <span class="hljs-built_in">complex</span>(x1, y2)<br>z3 := <span class="hljs-built_in">complex</span>(x2, y1)<br>z4 := <span class="hljs-built_in">complex</span>(x2, y2)<br><span class="hljs-comment">// Image point (px, py) represents complex value z.</span><br>img.Set(px/<span class="hljs-number">2</span>, py/<span class="hljs-number">2</span>,<br>color.Gray&#123;Y: (mandelbrot(z1).Y +<br>mandelbrot(z2).Y +<br>mandelbrot(z3).Y +<br>mandelbrot(z4).Y) / <span class="hljs-number">4.0</span>&#125;)<br><br><span class="hljs-comment">// acos</span><br><span class="hljs-comment">//img.Set(px/2, py/2,</span><br><span class="hljs-comment">//color.YCbCr&#123;</span><br><span class="hljs-comment">//Y:  (acos(z1).Y + acos(z2).Y + acos(z3).Y + acos(z4).Y) / 4,</span><br><span class="hljs-comment">//Cb: (acos(z1).Cb + acos(z2).Cb + acos(z3).Cb + acos(z4).Cb) / 4,</span><br><span class="hljs-comment">//Cr: (acos(z1).Cr + acos(z2).Cr + acos(z3).Cr + acos(z4).Cr) / 4,</span><br><span class="hljs-comment">//&#125;)</span><br><br><span class="hljs-comment">// sqrt</span><br><span class="hljs-comment">//img.Set(px/2, py/2,</span><br><span class="hljs-comment">//color.YCbCr&#123;</span><br><span class="hljs-comment">//Y:  (sqrt(z1).Y + sqrt(z2).Y + sqrt(z3).Y + sqrt(z4).Y) / 4,</span><br><span class="hljs-comment">//Cb: (sqrt(z1).Cb + sqrt(z2).Cb + sqrt(z3).Cb + sqrt(z4).Cb) / 4,</span><br><span class="hljs-comment">//Cr: (sqrt(z1).Cr + sqrt(z2).Cr + sqrt(z3).Cr + sqrt(z4).Cr) / 4,</span><br><span class="hljs-comment">//&#125;)</span><br><br><span class="hljs-comment">// newton</span><br><span class="hljs-comment">//img.Set(px/2, py/2,</span><br><span class="hljs-comment">//color.Gray&#123;Y: (newton(z1).Y +</span><br><span class="hljs-comment">//newton(z2).Y +</span><br><span class="hljs-comment">//newton(z3).Y +</span><br><span class="hljs-comment">//newton(z4).Y) / 4.0&#125;)</span><br>&#125;<br>&#125;<br>png.Encode(os.Stdout, img)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Gray &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex128</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + z<br><span class="hljs-keyword">if</span> cmplx.Abs(v) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;Y: <span class="hljs-number">255</span> - contrast*n&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Gray&#123;Y: <span class="hljs-number">0</span>&#125;<br>&#125;<br><br><span class="hljs-comment">// Some other interesting functions.</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">acos</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.YCbCr &#123;<br>v := cmplx.Acos(z)<br>blue := <span class="hljs-type">uint8</span>(<span class="hljs-built_in">real</span>(v)*<span class="hljs-number">128</span>) + <span class="hljs-number">127</span><br>red := <span class="hljs-type">uint8</span>(<span class="hljs-built_in">imag</span>(v)*<span class="hljs-number">128</span>) + <span class="hljs-number">127</span><br><span class="hljs-keyword">return</span> color.YCbCr&#123;<br>Y:  <span class="hljs-number">128</span>,<br>Cb: blue,<br>Cr: red,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.YCbCr &#123;<br>v := cmplx.Sqrt(z)<br>blue := <span class="hljs-type">uint8</span>(<span class="hljs-built_in">real</span>(v)*<span class="hljs-number">128</span>) + <span class="hljs-number">127</span><br>red := <span class="hljs-type">uint8</span>(<span class="hljs-built_in">imag</span>(v)*<span class="hljs-number">128</span>) + <span class="hljs-number">127</span><br><span class="hljs-keyword">return</span> color.YCbCr&#123;<br>Y:  <span class="hljs-number">128</span>,<br>Cb: blue,<br>Cr: red,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newton</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Gray &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">37</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">7</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); i &lt; iterations; i++ &#123;<br>z -= (z - <span class="hljs-number">1</span>/(z*z*z)) / <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> cmplx.Abs(z*z*z*z<span class="hljs-number">-1</span>) &lt; <span class="hljs-number">1e-6</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;Y: <span class="hljs-number">255</span> - contrast*i&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Gray&#123;Y: <span class="hljs-number">0</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/posts/01a5b9d8501c/1679590373910.png" alt="mandelbrot"></p><p><img src="/posts/01a5b9d8501c/1679590413010.png" alt="acos"></p><p><img src="/./images/1679590471597.png" alt="sqrt"></p><p><img src="/posts/01a5b9d8501c/1679590518203.png" alt="newton"></p><p><strong>练习 3.7</strong>： 另一个生成分形图像的方式是使用牛顿法来求解一个复数方程，例如<code>!$ z^&#123;4&#125;-1=0 $</code>。每个起点到四个根的迭代次数对应阴影的灰度。方程根对应的点用颜色表示。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>xmin, ymin, xmax, ymax = <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, +<span class="hljs-number">2</span>, +<span class="hljs-number">2</span><br>width, height          = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br><br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><span class="hljs-keyword">for</span> py := <span class="hljs-number">0</span>; py &lt; height; py++ &#123;<br>y := <span class="hljs-type">float64</span>(py)/width*(xmax-xmin) + xmin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br><span class="hljs-comment">// Image point (px, py) represents complex value z.</span><br>img.Set(px, py, newton(z))<br>&#125;<br>&#125;<br>png.Encode(os.Stdout, img)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newton</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">37</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">7</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); i &lt; iterations; i++ &#123;<br>z -= (z - <span class="hljs-number">1</span>/(z*z*z)) / <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> cmplx.Abs(z*z*z*z<span class="hljs-number">-1</span>) &lt; <span class="hljs-number">1e-6</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;Y: <span class="hljs-number">255</span> - contrast*i&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br></code></pre></td></tr></table></figure><p>输出图像：<br><img src="/posts/01a5b9d8501c/1679591754515.png" alt="newton"></p><p><strong>练习 3.8</strong>： 通过提高精度来生成更多级别的分形。使用四种不同精度类型的数字实现相同的分形：complex64、complex128、big.Float和big.Rat。（后面两种类型在math&#x2F;big包声明。Float是有指定限精度的浮点数；Rat是无效精度的有理数。）它们间的性能和内存使用对比如何？当渲染图可见时缩放的级别是多少？<br>解：<br>mandelbrot.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/big&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot64</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex64</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + <span class="hljs-type">complex64</span>(z)<br><span class="hljs-keyword">if</span> cmplx.Abs(<span class="hljs-type">complex128</span>(v)) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">50</span> &#123;<br><span class="hljs-keyword">return</span> color.RGBA&#123;R: <span class="hljs-number">100</span>, A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>scale := math.Log(<span class="hljs-type">float64</span>(n)) / math.Log(<span class="hljs-type">float64</span>(iterations))<br><span class="hljs-keyword">return</span> color.RGBA&#123;B: <span class="hljs-number">255</span> - <span class="hljs-type">uint8</span>(scale*<span class="hljs-number">255</span>), A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot128</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex128</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + z<br><span class="hljs-keyword">if</span> cmplx.Abs(v) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">50</span> &#123;<br><span class="hljs-keyword">return</span> color.RGBA&#123;R: <span class="hljs-number">100</span>, A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>scale := math.Log(<span class="hljs-type">float64</span>(n)) / math.Log(<span class="hljs-type">float64</span>(iterations))<br><span class="hljs-keyword">return</span> color.RGBA&#123;B: <span class="hljs-number">255</span> - <span class="hljs-type">uint8</span>(scale*<span class="hljs-number">255</span>), A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrotBigFloat</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br>zR := (&amp;big.Float&#123;&#125;).SetFloat64(<span class="hljs-built_in">real</span>(z))<br>zI := (&amp;big.Float&#123;&#125;).SetFloat64(<span class="hljs-built_in">imag</span>(z))<br><span class="hljs-keyword">var</span> vR, vI = &amp;big.Float&#123;&#125;, &amp;big.Float&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); i &lt; iterations; i++ &#123;<br>vR2, vI2 := &amp;big.Float&#123;&#125;, &amp;big.Float&#123;&#125;<br>vR2.Mul(vR, vR).Sub(vR2, (&amp;big.Float&#123;&#125;).Mul(vI, vI)).Add(vR2, zR)<br>vI2.Mul(vR, vI).Mul(vI2, big.NewFloat(<span class="hljs-number">2</span>)).Add(vI2, zI)<br>vR, vI = vR2, vI2<br>squareSum := &amp;big.Float&#123;&#125;<br>squareSum.Mul(vR, vR).Add(squareSum, (&amp;big.Float&#123;&#125;).Mul(vI, vI))<br><span class="hljs-keyword">if</span> squareSum.Cmp(big.NewFloat(<span class="hljs-number">4</span>)) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">50</span> &#123;<br><span class="hljs-keyword">return</span> color.RGBA&#123;R: <span class="hljs-number">100</span>, A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>scale := math.Log(<span class="hljs-type">float64</span>(i)) / math.Log(<span class="hljs-type">float64</span>(iterations))<br><span class="hljs-keyword">return</span> color.RGBA&#123;B: <span class="hljs-number">255</span> - <span class="hljs-type">uint8</span>(scale*<span class="hljs-number">255</span>), A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrotBigRat</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br>zR := (&amp;big.Rat&#123;&#125;).SetFloat64(<span class="hljs-built_in">real</span>(z))<br>zI := (&amp;big.Rat&#123;&#125;).SetFloat64(<span class="hljs-built_in">imag</span>(z))<br><span class="hljs-keyword">var</span> vR, vI = &amp;big.Rat&#123;&#125;, &amp;big.Rat&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); i &lt; iterations; i++ &#123;<br>vR2, vI2 := &amp;big.Rat&#123;&#125;, &amp;big.Rat&#123;&#125;<br>vR2.Mul(vR, vR).Sub(vR2, (&amp;big.Rat&#123;&#125;).Mul(vI, vI)).Add(vR2, zR)<br>vI2.Mul(vR, vI).Mul(vI2, big.NewRat(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)).Add(vI2, zI)<br>vR, vI = vR2, vI2<br>squareSum := &amp;big.Rat&#123;&#125;<br>squareSum.Mul(vR, vR).Add(squareSum, (&amp;big.Rat&#123;&#125;).Mul(vI, vI))<br><span class="hljs-keyword">if</span> squareSum.Cmp(big.NewRat(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">50</span> &#123;<br><span class="hljs-keyword">return</span> color.RGBA&#123;R: <span class="hljs-number">100</span>, A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>scale := math.Log(<span class="hljs-type">float64</span>(i)) / math.Log(<span class="hljs-type">float64</span>(iterations))<br><span class="hljs-keyword">return</span> color.RGBA&#123;B: <span class="hljs-number">255</span> - <span class="hljs-type">uint8</span>(scale*<span class="hljs-number">255</span>), A: <span class="hljs-number">255</span>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br></code></pre></td></tr></table></figure><p>mandelbrot_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> mandelbrot<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bench</span><span class="hljs-params">(b *testing.B, f <span class="hljs-keyword">func</span>(complex1282 <span class="hljs-type">complex128</span>)</span></span> color.Color) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>f(<span class="hljs-built_in">complex</span>(<span class="hljs-type">float64</span>(i), <span class="hljs-type">float64</span>(i)))<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMandelbrotComplex64</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, mandelbrot64)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMandelbrotComplex128</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, mandelbrot128)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMandelbrotBigFloat</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, mandelbrotBigFloat)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMandelbrotBigRat</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>bench(b, mandelbrotBigRat)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">goos: darwin</span><br><span class="hljs-comment">goarch: amd64</span><br><span class="hljs-comment">pkg: go-learn-gopl/ex/ex3/ex3.8</span><br><span class="hljs-comment">cpu: Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz</span><br><span class="hljs-comment">BenchmarkMandelbrotComplex128</span><br><span class="hljs-comment">BenchmarkMandelbrotComplex64-8   20120569        57.30 ns/op</span><br><span class="hljs-comment">BenchmarkMandelbrotComplex128-8   19792554        55.43 ns/op</span><br><span class="hljs-comment">BenchmarkMandelbrotBigFloat-8    1730440       656.2 ns/op</span><br><span class="hljs-comment">BenchmarkMandelbrotBigRat-8     501489      2257 ns/op</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>练习 3.9</strong>： 编写一个web服务器，用于给客户端生成分形的图像。运行客户端用过HTTP参数参数指定x,y和zoom参数。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/png&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;parse form err: %v&quot;</span>, err)<br>&#125;<br>x := firstOrDef(r.Form[<span class="hljs-string">&quot;x&quot;</span>], <span class="hljs-number">0</span>)<br>y := firstOrDef(r.Form[<span class="hljs-string">&quot;y&quot;</span>], <span class="hljs-number">0</span>)<br>zoom := firstOrDef(r.Form[<span class="hljs-string">&quot;zoom&quot;</span>], <span class="hljs-number">0</span>)<br>render(w, x, y, zoom)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">firstOrDef</span><span class="hljs-params">(forms []<span class="hljs-type">string</span>, def <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(forms) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> def<br>&#125;<br><br>v, err := strconv.ParseFloat(forms[<span class="hljs-number">0</span>], <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> def<br>&#125;<br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">render</span><span class="hljs-params">(out io.Writer, x, y, zoom <span class="hljs-type">float64</span>)</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>width, height = <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span><br>)<br>exp2 := math.Exp2(<span class="hljs-number">1</span> - zoom)<br>xmin, xmax := x-exp2, x+exp2<br>ymin, ymax := y-exp2, y+exp2<br><br>img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height))<br><span class="hljs-keyword">for</span> py := <span class="hljs-number">0</span>; py &lt; height; py++ &#123;<br>y := <span class="hljs-type">float64</span>(py)/height*(ymax-ymin) + ymin<br><span class="hljs-keyword">for</span> px := <span class="hljs-number">0</span>; px &lt; width; px++ &#123;<br>x := <span class="hljs-type">float64</span>(px)/width*(xmax-xmin) + xmin<br>z := <span class="hljs-built_in">complex</span>(x, y)<br><span class="hljs-comment">// Image point (px, py) represent complex value z.</span><br>img.Set(px, py, mandelbrot(z))<br>&#125;<br>&#125;<br>png.Encode(out, img)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> color.Color &#123;<br><span class="hljs-keyword">const</span> iterations = <span class="hljs-number">200</span><br><span class="hljs-keyword">const</span> contrast = <span class="hljs-number">15</span><br><br><span class="hljs-keyword">var</span> v <span class="hljs-type">complex128</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-type">uint8</span>(<span class="hljs-number">0</span>); n &lt; iterations; n++ &#123;<br>v = v*v + z<br><span class="hljs-keyword">if</span> cmplx.Abs(v) &gt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> color.Gray&#123;Y: <span class="hljs-number">255</span> - contrast*n&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> color.Black<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1. 整型</title>
      <link href="/posts/2a4f4f65e7ca/"/>
      <url>/posts/2a4f4f65e7ca/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/2a4f4f65e7ca/1679232364704.png" alt="数值类型"></p><p>对应不同的CPU平台机器字大小的分为有符合和无符号整数<code>int</code>和<code>uint</code>。这两种类型都有对应32或64bit。</p><p><code>Unicode</code>字符<code>rune</code>类型是和<code>int32</code>等价的类型，通常用于表示一个人<code>Unicode</code>码。这两个名称可以互换使用，同样<code>byte</code>也是<code>unit8</code>类型的等价类型，<code>byte</code>类型一般用于强调数值是一个原始的数据而不是一个小的整数。</p><p>无符号的整数类型<code>uintptr</code>，没有指定具体的bit大小但是足以容纳指针。一般用于底层编程，如Go语言和C语言函数或操作系统接口相交互的地方。</p><p><code>int</code>和<code>int32</code>是不同类型，即使<code>int</code>的大小也是32bit，如果需要将<code>int</code>当做<code>int32</code>类型的地方需要一个显式的类型转换。</p><p>一个n-bit的有符号数的值域是<code>!$ -2^&#123;n-1&#125;$</code>到<code>!$ 2^&#123;n−1&#125;−1$</code>。<br>无符号整数的所有bit位都用于表示非负数，值域是0到<code>!$ 2^&#123;n&#125; - 1$</code>。<br>例如，<code>int8</code>类型整数的值域是从-128到127，而<code>uint8</code>类型整数的值域是从0到255。</p><p>下面是Go语言中的算数运算、逻辑运算和比较运算的二元运算符，按优先级递减的顺序排列：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">*      /      %      &lt;&lt;       &gt;&gt;     &amp;       &amp;^<br>+      -      |      ^<br>==     !=     &lt;      &lt;=       &gt;      &gt;=<br>&amp;&amp;<br>||<br></code></pre></td></tr></table></figure><p>如上所示，二元运算符有5种优先级。<br>同一个优先级中，使用左有效结合规则，但是可以使用括号可以明确优先顺序，使用括号也可以用于提升优先级。</p><p>对于上表中前两行的运算符，如<code>+</code>运算符还有一个与赋值相结合的对应运算符<code>+=</code>，也可以用于简化赋值语句。</p><p>算术运算符<code>+</code>、<code>-</code>、 <code>*</code>和<code>/</code>可以适用与于整数、浮点数和复数，但是取模运算符<code>%</code>仅用于整数间的运算。在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此-5%3和-5%-3结果都是-2。除法运算符&#x2F;的行为则依赖于操作数是否为全为整数，比如5.0&#x2F;4.0的结果是1.25，但是5&#x2F;4的结果是1，因为整数除法会向着0方向截断余数。</p><p>如果一个算数运算的结果，无论是有符号或无符号，如果需要更多bit位才能正确表示的话，就说明计算结果溢出了。超出的高位的bit位部分将被丢弃。<br>如果原始的数值是有符号类型，而且最左边的bit为1，那么最终结果可能为负，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> u <span class="hljs-type">uint8</span> = <span class="hljs-number">255</span><br>fmt.Println(u, u+<span class="hljs-number">1</span>, u*u) <span class="hljs-comment">// 255 0 1</span><br><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int8</span> = <span class="hljs-number">127</span><br>fmt.Println(i, i+<span class="hljs-number">1</span>, i*i) <span class="hljs-comment">// 127 -128 1</span><br></code></pre></td></tr></table></figure><p><code>布尔型</code>、<code>数字类型</code>和<code>字符串</code>等基本类型都是可比较的。<br>可比较的类型值是可以根据比较结果排序的，反之，不可比较的类型的值是不可排序的。</p><p>一元的加法和减法运算符：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">+一元加法（无效果）<br>-   负数<br></code></pre></td></tr></table></figure><p>对于整数，<code>+x</code>是<code>0+x</code>的简写，<code>-x</code>则是<code>0-x</code>的简写;<br>对于浮点数和复数，<code>+x</code>就是x，<code>-x</code>则是<code>x</code>的负数。</p><p>bit位操作运算符，前四个操作运算符并不区分是有符号还是无符号：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">&amp;      位运算 AND 按位与  两个都是1则为1<br>|      位运算 OR 按位或两个中有一个是1则为1<br>^      位运算 XOR 按位异或  相同为0，不同为1<br>&amp;^     位清空 (AND NOT) 相同位一样取0，相同位不同，取左边数的当前位值<br>&lt;&lt;     左移<br>&gt;&gt;     右移<br></code></pre></td></tr></table></figure><p>位操作运算符<code>^</code>作为二元运算符时是<code>按位异或</code>(XOR)，当做一元运算符时表示按位取反(每个bit位取反的数);<br>位操作运算符<code>&amp;^</code>用于<code>按位置零</code>（AND NOT）: 表达式<code>z = x &amp;^ y</code>结果z的bit位为0，如果对应y中bit位为1的话，否则对应的bit位等于x相应的bit位的值。</p><p>下面的代码演示了如何使用位操作解释uint8类型值的8个独立的bit位。它使用了Printf函数的%b参数打印二进制格式的数字；其中%08b中08表示打印至少8个字符宽度，不足的前缀部分用0填充。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-type">uint8</span> = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span> | <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">5</span><br><span class="hljs-keyword">var</span> y <span class="hljs-type">uint8</span> = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span> | <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">2</span><br><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x) <span class="hljs-comment">// 00100010</span><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, y) <span class="hljs-comment">// 00000110</span><br><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x&amp;y)  <span class="hljs-comment">// 00000010</span><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x|y)  <span class="hljs-comment">// 00100110</span><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x^y)  <span class="hljs-comment">// 00100100</span><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x&amp;^y) <span class="hljs-comment">// 00100000</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-type">uint</span>(<span class="hljs-number">0</span>); i &lt; <span class="hljs-number">8</span>; i++ &#123;<br><span class="hljs-keyword">if</span> x&amp;(<span class="hljs-number">1</span>&lt;&lt;i) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0 00100010 &amp; 00000001 = 00000000</span><br><span class="hljs-comment">1 00100010 &amp; 00000010 = 00000010</span><br><span class="hljs-comment">2 00100010 &amp; 00000100 = 00000000</span><br><span class="hljs-comment">3 00100010 &amp; 00001000 = 00000000</span><br><span class="hljs-comment">4 00100010 &amp; 00010000 = 00000000</span><br><span class="hljs-comment">5 00100010 &amp; 00100000 = 00100000</span><br><span class="hljs-comment">6 00100010 &amp; 01000000 = 00000000</span><br><span class="hljs-comment">7 00100010 &amp; 10000000 = 00000000</span><br><span class="hljs-comment">*/</span><br>fmt.Println(i) <span class="hljs-comment">// 1 5</span><br>&#125;<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x&lt;&lt;<span class="hljs-number">1</span>) <span class="hljs-comment">// 01000100</span><br>fmt.Printf(<span class="hljs-string">&quot;%08b\n&quot;</span>, x&gt;&gt;<span class="hljs-number">1</span>) <span class="hljs-comment">// 00010001</span><br></code></pre></td></tr></table></figure><p>移位运算中<code>x&lt;&lt;n</code>和<code>x&gt;&gt;n</code>，移位操作bit数n必须是无符号数，被操作数x可以是有符号或无符号说。<br>算术上，一个<code>x&lt;&lt;n</code>左移运算等价于乘以<code>!$ 2^n$</code>，一个<code>x&gt;&gt;n</code>右移运算等价于除以<code>!$2^n$</code>。</p><p>左移运算用0填充右边空缺的bit位，无符号数的右移运算也是用0填充左边空缺的bit位。<br>有符号数的右移运算会用符号位的值填充左边空缺的bit位，所以最好使用无符号运算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">medals := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;gold&quot;</span>, <span class="hljs-string">&quot;silver&quot;</span>, <span class="hljs-string">&quot;bronze&quot;</span>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(medals) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>fmt.Println(medals[i])<br>&#125;<br></code></pre></td></tr></table></figure><p>如果len函数返回一个无符号数，那么条件<code>i &gt;= 0</code>则永远为真。当i&#x3D;&#x3D;0时，i–将不会为-1，而是<code>uint</code>类型的最大值<code>!$ 2^&#123;64&#125; - 1$</code>，那么medals[i]表达式将发生运行时panic异常。</p><p>一般情况下，无符号数往往只有在位运算或其他特殊的运算场景才会使用，就像bit集合、分析二进制文件格式或者是哈希和加密操作等。</p><p><code>%d</code> 十进制数输出<br><code>%o</code>八进制数输出 0<br><code>%x</code>十六进制数输出 0x 小写字母<br><code>%X</code>十六进制数输出 0X 大小字母</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">o := <span class="hljs-number">0666</span><br>fmt.Printf(<span class="hljs-string">&quot;%d %[1]o %#[1]o\n&quot;</span>, o) <span class="hljs-comment">// 438 666 0666</span><br>x := <span class="hljs-type">int64</span>(<span class="hljs-number">0xdeadbeef</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%d %[1]x %#[1]x %#[1]X\n&quot;</span>, x) <span class="hljs-comment">// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF</span><br></code></pre></td></tr></table></figure><p><code>fmt</code>的两个技巧：</p><ul><li>通常<code>Printf</code>格式化字符串包含多个<code>%</code>参数时将会包含对应相同数量的额外操作数，但是<code>%</code>之后的<code>[1]</code>告诉<code>Printf</code>函数再次使用第一个操作数。</li><li>%后的<code>#</code>将告诉Printf在用<code>%o</code>、<code>%x</code>或<code>%X</code>输出时生成<code>0</code>、<code>0x</code>或<code>0X</code>前缀。</li></ul><p>字符通过转义的数值来表示任意的Unicode编码对应的字符。<br><code>%c</code>  字符打印输出<br><code>%q</code>  打印带单引号的字符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">ascii := <span class="hljs-string">&#x27;a&#x27;</span><br>unicode := <span class="hljs-string">&#x27;国&#x27;</span><br>newline := <span class="hljs-string">&#x27;\n&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;%d %[1]c %[1]q\n&quot;</span>, ascii) <span class="hljs-comment">// 97 a &#x27;a&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;%d %[1]c %[1]q\n&quot;</span>, unicode) <span class="hljs-comment">// 22269 国 &#x27;国&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;%d %[1]c %[1]q\n&quot;</span>, newline) <br><span class="hljs-comment">// 10 </span><br><span class="hljs-comment">//  &#x27;\n&#x27;</span><br><span class="hljs-comment">// &#x27;\n&#x27;前面是换行符&#123;换行\n&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 基础数据类型</title>
      <link href="/posts/0a1ced1a832c/"/>
      <url>/posts/0a1ced1a832c/</url>
      
        <content type="html"><![CDATA[<p>从底层来说，所有数据都是由bit组成，但计算机一般操作的是固定大小的数，如整数、浮点数、bit数组、内存地址等。进一步组合这些数据，就可以表达出更多对象。<br>内置的数据类型保证了硬件的特性和表达复杂数据结构的便捷性。</p><p><img src="/posts/0a1ced1a832c/1679079034021.png" alt="go语言数据类型"></p><p><a href="/posts/2a4f4f65e7ca/">3.1. 整型</a></p><p><a href>3.2. 浮点数</a></p><p><a href="/posts/01a5b9d8501c/">3.3. 复数</a></p><p><a href="/posts/d98a81de6430/">3.4. 布尔型</a></p><p><a href="/posts/a309a7c16f6a/">3.5. 字符串</a></p><p><a href="/posts/68c22f5501fb/">3.6. 常量</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.7. 作用域</title>
      <link href="/posts/5b89ef7a41d0/"/>
      <url>/posts/5b89ef7a41d0/</url>
      
        <content type="html"><![CDATA[<p>声明语句将程序中的实体和名字关联，如函数，变量。<br>声明语句的作用域是指源代码中可以有效使用这个名字的范围。</p><p>不能将作用域与生命周期混为一谈。<br>声明语句的作用域对应的是源代码的文本区域；是一个编译时的属性。<br>变量的生命周期是指程序运行的是变量存在的有效时间段，在此时间段内可以被程序的其它部分引用；是一个运行时的概念。</p><p><strong>语法块</strong>是由花括弧所包含的一系列语句，如函数体或循环体花括弧对应的语法块一样。<br>语法块内部声明的名字是无法被外部语法块访问的。<br>语法块决定了内部声明的名字的作用域范围。</p><ul><li>包含其它类似组批量声明等没有用花括弧包含的代码，称为语法块；</li><li>语法块为整个源代码时，称为全局语法块；</li><li>每个包的包语法块；</li><li>每个for、if和switch语句的语法块；</li><li>每个switch或select的分支也有独立的语法块；</li><li>显式书写的语法块（花括弧包含的语句）；</li></ul><p>声明语句对应的词法域决定了作用域范围的大小。<br>对应内置的类型、函数和常量，如int、len和true等是在全局作用域的，因此可以在整个程序中直接使用。<br>任何在函数外部（包级语法域）声明的名字可以在同一个包的任何源文件中访问的。<br>对于导入的包，如<code>fmt</code>包，则是对应源文件级的作用域，因此只能在当前文件中文件中访问导入的包，当前包的其它源文件无法访问在当前源文件中导入的包。<br>还有许多声明语句，如<code>tempconv.CToF</code>函数中的变量c，则是局部作用域的，它只能在函数内部（甚至只能局部的某些部分）访问。</p><p>控制流符号，就是<code>break</code>、<code>continue</code>或<code>goto</code>语句后面跟着的那种标号，则是函数级的作用域。</p><p>一个程序中可能包含多个同名的声明，但只需要它们在不同的词法域中。<br>如，局部变量和包级的变量同名；或函数参数名字声明为new，虽然内置的new是全局作用域的。<br>如果滥用不同词法域可重名的特性，可能导致程序的可读性变差。</p><p>当编译器编译到一个名字引用时，如果是一个声明，它首先从最内层的词法域向全局作用域查找。<br>如果查找失败，则报错<code>未声明的名字</code>这样的错误。<br>如果该名字在内部和外部的语法块分别声明过，则内部块的声明首先会被找到。<br>这种情况下，内部声明屏蔽了外部同名的声明，让外部的声明的名字无法被访问。<br>如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> &#123;&#125;<br><br><span class="hljs-keyword">var</span> g = <span class="hljs-string">&quot;g&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    f := <span class="hljs-string">&quot;f&quot;</span><br>    fmt.Println(f) <span class="hljs-comment">// &quot;f&quot;; local var f shadows package-level func f</span><br>    fmt.Println(g) <span class="hljs-comment">// &quot;g&quot;; package-level var</span><br>    fmt.Println(h) <span class="hljs-comment">// compile error: undefined: h</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在函数中词法域可以深度嵌套，因此内部的声明可以屏蔽外部的声明。<br>下面的代码有三个不同的变量x，因为它们是定义在不同的词法域：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    x := <span class="hljs-string">&quot;hello!&quot;</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(x); i++ &#123;<br>        x := x[i]<br>        <span class="hljs-keyword">if</span> x != <span class="hljs-string">&#x27;!&#x27;</span> &#123;<br>            x := x + <span class="hljs-string">&#x27;A&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span><br>            fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>, x) <span class="hljs-comment">// &quot;HELLO&quot; (one letter per iteration)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面for语句副本创建了两个词法域：一个显式部分是for的循环体部分词法域，另一个隐式部分是循环的初始化部分（迭代变量i的初始化）。隐式的词法域部分的作用域还包含了条件测试部分和循环后的迭代部分（i++），还包含了循环体词法域。<br>在x[i]和x + ‘A’ - ‘a’声明语句的初始化的表达式中都引用了外部作用域声明的x变量。</p><p>下面的例子同样有三个不同的x变量，每个声明在不同的词法域，一个在函数体词法域，一个在for隐式的初始化词法域，一个在for循环体词法域；只有两个块是显式创建的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    x := <span class="hljs-string">&quot;hello&quot;</span><br>    <span class="hljs-keyword">for</span> _, x := <span class="hljs-keyword">range</span> x &#123;<br>        x := x + <span class="hljs-string">&#x27;A&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span><br>        fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>, x) <span class="hljs-comment">// &quot;HELLO&quot; (one letter per iteration)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>和for循环类似，if和switch语句也会在条件部分创建隐式词法域，还有它们对应的执行体词法域。下面的if-else测试链演示了x和y的有效作用域范围：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> x := f(); x == <span class="hljs-number">0</span> &#123;<br>    fmt.Println(x)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> y := g(x); x == y &#123;<br>    fmt.Println(x, y)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    fmt.Println(x, y)<br>&#125;<br>fmt.Println(x, y) <span class="hljs-comment">// compile error: x and y are not visible here</span><br></code></pre></td></tr></table></figure><p>第二个if语句被嵌套在第一个if语句的内部，因此在第一个if语句条件初始化词法域声明的变量在第二个if语句中也可以访问。<br>switch语句的每个分支也有类似的词法域规则：条件部分为一个隐式词法域，然后每个是每个分支的词法域。</p><p>在包级别，声明的顺序并不影响作用域范围，因此先声明的可以引用它自身或者引用后面的声明，这样就可以定义一些相互嵌套或递归的类型或函数。<br>如果变量或常量递归引用了自身，则会产生编译错误。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.6. 包和文件</title>
      <link href="/posts/4bd2d633ee16/"/>
      <url>/posts/4bd2d633ee16/</url>
      
        <content type="html"><![CDATA[<p>包的存在是为了支持模块化、封装、单独编译和代码重用。</p><p>每个包都对应一个独立的命名空间。如: <code>image</code>包中的<code>Decode</code>函数和在<code>unicode/uft16</code>包中的<code>Decode</code>函数是不同的。要在外部引用该函数，必须显式使用<code>image.Decode</code>或<code>uft16.Decode</code>形式来访问。</p><p>包还可以实现可见性。规则：以大写字母开头的，那么该名字是可导出的。（因为中文汉字不区分大小写，因此汉字开头的名字是不可导出的。）</p><p>在每个源文件的包声明前是包注释。<br>包注释的第一句为包的功能概要说明。<br>通常情况下，包内只有一个源文件有包注释，如有多个包注释，文档工具会根据源文件名的先后顺序将包注释链接为一个包注释。<br>如果包注释很大，通常会放到单独的<code>doc.go</code>文件中。</p><p><strong>练习 2.1：</strong> 向tempconv包添加类型、常量和函数用来处理Kelvin绝对温度的转换，Kelvin 绝对零度是−273.15°C，Kelvin绝对温度1K和摄氏度1°C的单位间隔是一样的。<br>解答：<br>tempconv.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package tempconv performs Celsius and Fahrenheit conversions.</span><br><span class="hljs-keyword">package</span> tempconv<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Celsius <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Fahrenheit <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Kelvin <span class="hljs-type">float64</span><br><br><span class="hljs-keyword">const</span> (<br>AbsoluteZeroC Celsius = <span class="hljs-number">-273.15</span><br>FreezingC     Celsius = <span class="hljs-number">0</span><br>BoilingC      Celsius = <span class="hljs-number">100</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Celsius)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g°C&quot;</span>, c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f Fahrenheit)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g°F&quot;</span>, f)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(k Kelvin)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%gK&quot;</span>, k)<br>&#125;<br></code></pre></td></tr></table></figure><p>conve.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> tempconv<br><br><span class="hljs-comment">// CToF converts a Celsius temperature to Fahrenheit.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CToF</span><span class="hljs-params">(c Celsius)</span></span> Fahrenheit &#123;<br><span class="hljs-keyword">return</span> Fahrenheit(c*<span class="hljs-number">9</span>/<span class="hljs-number">5</span> + <span class="hljs-number">32</span>)<br>&#125;<br><br><span class="hljs-comment">// FToC converts a Fahrenheit temperature to Celsius.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FToC</span><span class="hljs-params">(f Fahrenheit)</span></span> Celsius &#123;<br><span class="hljs-keyword">return</span> Celsius((f - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span>)<br>&#125;<br><br><span class="hljs-comment">// CToK converts a Celsius temperature to Kelvin.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CToK</span><span class="hljs-params">(c Celsius)</span></span> Kelvin &#123;<br><span class="hljs-keyword">return</span> Kelvin(c)<br>&#125;<br><br><span class="hljs-comment">// KToC converts a Kelvin temperature to Celsius.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">KToC</span><span class="hljs-params">(k Kelvin)</span></span> Celsius &#123;<br><span class="hljs-keyword">return</span> Celsius(k)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-6-1-导入包"><a href="#2-6-1-导入包" class="headerlink" title="2.6.1. 导入包"></a>2.6.1. 导入包</h1><p>每个包都是有一个全局唯一的导入路径。如：<code>go-learn-gopl/ch/ch2/tempconv</code>。<br>一个导入路径代表一个目录中的一个或多个Go源文件。</p><p>除了包路径，每个包还有一个包民，包名通常是短小的名字（并不要求包名是唯一的），包名在包的声明处指定。<br>通常，包的名字和包的导入路径的最后一个字段相同，如<code>go-learn-gopl/ch/ch2/tempconv</code>包的名字一般是<code>tempconv</code>。</p><p>要使用<code>go-learn-gopl/ch/ch2/tempconv</code>包，需要先导入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Cf converts its numeric argument to Celsius and Fahrenheit.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ch/ch2/tempconv&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>t, err := strconv.ParseFloat(arg, <span class="hljs-number">64</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;cf: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>f := tempconv.Fahrenheit(t)<br>c := tempconv.Celsius(t)<br>fmt.Printf(<span class="hljs-string">&quot;%s=%s, %s=%s\n&quot;</span>, f, tempconv.FToC(f), c, tempconv.CToF(c))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cf程序是将命令行输入的一个温度在<code>Celsius</code>和<code>Fahrenheit</code>温度单位之间转换:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$ go build ./ch/ch2/cf/main.go <br>$ ./main 24.2<br>24.2°F=-4.333333333333333°C, 24.2°C=75.56°F<br><br></code></pre></td></tr></table></figure><p>如果导入一个包，但是却没有使用，就将会被当做编译错误处理。<br>这种强制规则可以有效减少不必要的依赖。<br>可以使用<code>golang.org/x/tools/cmd/goimports</code>导入工具，它可以根据需要自动添加或删除导入的包；许多编辑器都可以集成<code>goimports</code>工具，然后在保存文件时自动运行。类似还有<code>gofmt</code>工具，用于格式化Go源文件。</p><p><strong>练习 2.2：</strong> 写一个通用的单位转换程序，用类似cf程序的方式从命令行读取参数，如果缺省的话则是从标准输入读取参数，然后做类似Celsius和Fahrenheit的单位转换，长度单位可以对应英尺和米，重量单位可以对应磅和公斤等。<br>unitconv.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package unitconv performs Meter and Foot, Pounds and Kilogram conversions.</span><br><span class="hljs-keyword">package</span> unitconv<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Meter <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Foot <span class="hljs-type">float64</span><br><br><span class="hljs-keyword">type</span> Pounds <span class="hljs-type">float64</span><br><span class="hljs-keyword">type</span> Kilogram <span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m Meter)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g m&quot;</span>, m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f Foot)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g ft&quot;</span>, f)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Pounds)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g lb&quot;</span>, p)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(k Kilogram)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g kg&quot;</span>, k)<br>&#125;<br></code></pre></td></tr></table></figure><p>conv.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> unitconv<br><br><span class="hljs-comment">// MToF converts Meter to Foot.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MToF</span><span class="hljs-params">(m Meter)</span></span> Foot &#123;<br><span class="hljs-keyword">return</span> Foot(m * <span class="hljs-number">3.28083989501</span>)<br>&#125;<br><br><span class="hljs-comment">// FToM converts Foot to Meter.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FToM</span><span class="hljs-params">(f Foot)</span></span> Meter &#123;<br><span class="hljs-keyword">return</span> Meter(f * <span class="hljs-number">0.3048</span>)<br>&#125;<br><br><span class="hljs-comment">// KToP converts Kilogram to Pounds.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">KToP</span><span class="hljs-params">(k Kilogram)</span></span> Pounds &#123;<br><span class="hljs-keyword">return</span> Pounds(k * <span class="hljs-number">2.20462262185</span>)<br>&#125;<br><br><span class="hljs-comment">// PToK converts Pounds to Kilogram.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PToK</span><span class="hljs-params">(p Pounds)</span></span> Kilogram &#123;<br><span class="hljs-keyword">return</span> Kilogram(p * <span class="hljs-number">0.4535924</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>uconv.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go-learn-gopl/ex/ex2/unitconv&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> m = flag.Float64(<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-number">-1</span>, <span class="hljs-string">&quot;converts Meter to Foot.&quot;</span>)<br><span class="hljs-keyword">var</span> f = flag.Float64(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-number">-1</span>, <span class="hljs-string">&quot;converts Foot to Meter.&quot;</span>)<br><span class="hljs-keyword">var</span> k = flag.Float64(<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-number">-1</span>, <span class="hljs-string">&quot;converts Kilogram to Pounds.&quot;</span>)<br><span class="hljs-keyword">var</span> p = flag.Float64(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-number">-1</span>, <span class="hljs-string">&quot;converts Pounds to Kilogram.&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br><span class="hljs-keyword">if</span> *m &gt;= <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s = %s\n&quot;</span>, unitconv.Meter(*m), unitconv.MToF(unitconv.Meter(*m)))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> *f &gt;= <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s = %s\n&quot;</span>, unitconv.Foot(*f), unitconv.FToM(unitconv.Foot(*f)))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> *k &gt;= <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s = %s\n&quot;</span>, unitconv.Kilogram(*k), unitconv.KToP(unitconv.Kilogram(*k)))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> *p &gt;= <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s = %s\n&quot;</span>, unitconv.Pounds(*p), unitconv.PToK(unitconv.Pounds(*p)))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Fprintln(os.Stderr, <span class="hljs-string">&quot;value must be granter than 0.&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$ go build conv/uconv.go<br>$ ./uconv -m 1<br>1 m = 3.28083989501 ft<br>$ ./uconv -f 1<br>1 ft = 0.3048 m<br>$ ./uconv -k 10<br>10 kg = 22.0462262185 lb<br>$ ./uconv -p 2<br>2 lb = 0.9071848 kg<br>$ ./uconv -m -1<br>value must be granter than 0.<br>$ ./uconv -h<br>Usage of ./uconv:<br>  -f float<br><span class="hljs-code">        converts Foot to Meter. (default -1)</span><br><span class="hljs-code">  -k float</span><br><span class="hljs-code">        converts Kilogram to Pounds. (default -1)</span><br><span class="hljs-code">  -m float</span><br><span class="hljs-code">        converts Meter to Foot. (default -1)</span><br><span class="hljs-code">  -p float</span><br><span class="hljs-code">        converts Pounds to Kilogram. (default -1)</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h1 id="2-6-2-包的初始化"><a href="#2-6-2-包的初始化" class="headerlink" title="2.6.2. 包的初始化"></a>2.6.2. 包的初始化</h1><p>包的初始化首先是解决包级变量的依赖顺序，然后安装包级变量声明出现的顺序依次初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a = b + c <span class="hljs-comment">// a 第三个初始化, 为 3</span><br><span class="hljs-keyword">var</span> b = f()   <span class="hljs-comment">// b 第二个初始化, 为 2, 通过调用 f (依赖c)</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">1</span>     <span class="hljs-comment">// c 第一个初始化, 为 1</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">return</span> c + <span class="hljs-number">1</span> &#125;<br></code></pre></td></tr></table></figure><p>如果包中含有多个.go源文件，它们将按照发给编译器的顺序进行初始化，Go语言的构建工具首先会将.go文件根据文件名排序，然后依次调用编译器编译。</p><p>对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，但有些数据初始化并非一个简单的赋值过程。这种情况下，可以使用<code>init</code>初始化函数来简化初始化工作，每个文件都可以包含多个<code>init</code>初始化函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/*...*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>init</code>初始化函数除了不能被调用或引用外，其他行为与普通函数无异。<br>每个文件中的<code>init</code>初始化函数，在程序开始执行时按照声明的顺序被自动调用。</p><p>每个包在解决依赖的前提下，以导入声明的顺序初始化，每个包只会被初始化一次。<br>如果<code>p</code>包导入了<code>q</code>包，那么在<code>p</code>包初始化的时候可以认为<code>q</code>包必然已经初始化过了。<br>初始化工作时自下而上进行的，<code>main</code>包最后被初始化。确保在<code>main</code>函数执行之前，所有依赖的包都已经完成初始化。</p><p>下面的代码定义了一个PopCount函数，用于返回一个数字中含二进制1bit的个数。它使用init初始化函数来生成辅助表格pc，pc表格用于处理每个8bit宽度的数字含二进制的1bit的bit个数，这样的话在处理64bit宽度的数字时就没有必要循环64次，只需要8次查表就可以了。（这并不是最快的统计1bit数目的算法，但是它可以方便演示init函数的用法，并且演示了如果预生成辅助表格，这是编程中常用的技术）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-comment">// pc[i] is the population count of i.</span><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// PopCount returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCount</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">0</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">1</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">2</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">3</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">4</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">5</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">6</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">7</span>*<span class="hljs-number">8</span>))])<br>&#125;<br></code></pre></td></tr></table></figure><p>pc可以将初始化逻辑包装为匿名函数处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// pc[i] is the population count of i.</span><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span> = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> (pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span>) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;()<br></code></pre></td></tr></table></figure><p>for循环只用到索引部分，可以使用<code>_</code>忽略值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i, _ := <span class="hljs-keyword">range</span> pc &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 2.3：</strong> 重写PopCount函数，用一个循环代替单一的表达式。比较两个版本的性能。（11.4节将展示如何系统地比较两个不同实现的性能。）<br>解答：<br>popcount.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-comment">// pc[i] is the population count of i.</span><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// PopCount returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCount</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">0</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">1</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">2</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">3</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">4</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">5</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">6</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">7</span>*<span class="hljs-number">8</span>))])<br>&#125;<br><br><span class="hljs-comment">// PopCountByLoop returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByLoop</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> c <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">8</span>; i++ &#123;<br>c += <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(i*<span class="hljs-number">8</span>))])<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><p>popcount_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(t *testing.T, expected, actual <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">if</span> !reflect.DeepEqual(expected, actual) &#123;<br>t.Errorf(<span class="hljs-string">&quot;(expected, actual) = (%v, %v)\n&quot;</span>, expected, actual)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCount</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCount(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCountByLoop</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCountByLoop(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCount</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCount(<span class="hljs-number">0x1234567890ABCDEF</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByLoop</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByLoop(<span class="hljs-number">0x123456790ABCDEF</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习 2.4：</strong> 用移位算法重写PopCount函数，每次测试最右边的1bit，然后统计总数。比较和查表算法的性能差异。<br>解答：<br>popcount.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-comment">// pc[i] is the population count of i.</span><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// PopCount returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCount</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">0</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">1</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">2</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">3</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">4</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">5</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">6</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">7</span>*<span class="hljs-number">8</span>))])<br>&#125;<br><br><span class="hljs-comment">// PopCountByLoop returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByLoop</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> c <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">8</span>; i++ &#123;<br>c += <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(i*<span class="hljs-number">8</span>))])<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-comment">// PopCountByBitShift returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByBitShift</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>c := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++ &#123;<br><span class="hljs-keyword">if</span> (x&gt;&gt;i)&amp;<span class="hljs-number">1</span> != <span class="hljs-number">0</span> &#123;<br>c++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><p>popcount_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(t *testing.T, expected, actual <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">if</span> !reflect.DeepEqual(expected, actual) &#123;<br>t.Errorf(<span class="hljs-string">&quot;(expected, actual) = (%v, %v)\n&quot;</span>, expected, actual)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCount</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCount(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCountByLoop</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCountByLoop(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCountByBitShift</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCountByBitShift(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCount</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCount(<span class="hljs-number">0x1234567890ABCDEF</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByLoop</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByLoop(<span class="hljs-number">0x123456790ABCDEF</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByBitShift</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByBitShift(<span class="hljs-number">0x123456790ABCDEF</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 2.5：</strong> 表达式x&amp;(x-1)用于将x的最低的一个非零的bit位清零。使用这个算法重写PopCount函数，然后比较性能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-comment">// pc[i] is the population count of i.</span><br><span class="hljs-keyword">var</span> pc [<span class="hljs-number">256</span>]<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pc &#123;<br>pc[i] = pc[i/<span class="hljs-number">2</span>] + <span class="hljs-type">byte</span>(i&amp;<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// PopCount returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCount</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">0</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">1</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">2</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">3</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">4</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">5</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">6</span>*<span class="hljs-number">8</span>))] +<br>pc[<span class="hljs-type">byte</span>(x&gt;&gt;(<span class="hljs-number">7</span>*<span class="hljs-number">8</span>))])<br>&#125;<br><br><span class="hljs-comment">// PopCountByLoop returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByLoop</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> c <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">8</span>; i++ &#123;<br>c += <span class="hljs-type">int</span>(pc[<span class="hljs-type">byte</span>(x&gt;&gt;(i*<span class="hljs-number">8</span>))])<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-comment">// PopCountByBitShift returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByBitShift</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>c := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++ &#123;<br><span class="hljs-keyword">if</span> (x&gt;&gt;i)&amp;<span class="hljs-number">1</span> != <span class="hljs-number">0</span> &#123;<br>c++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-comment">// PopCountByBitClear returns the population count (number of set bits) of x.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PopCountByBitClear</span><span class="hljs-params">(x <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>c := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>x &amp;= x - <span class="hljs-number">1</span><br>c++<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br></code></pre></td></tr></table></figure><p>popcount_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> popcount<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">assert</span><span class="hljs-params">(t *testing.T, expected, actual <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">if</span> !reflect.DeepEqual(expected, actual) &#123;<br>t.Errorf(<span class="hljs-string">&quot;(expected, actual) = (%v, %v)\n&quot;</span>, expected, actual)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCount</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCount(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCountByLoop</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCountByLoop(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCountByBitShift</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCountByBitShift(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestPopCountByBitClear</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>assert(t, <span class="hljs-number">32</span>, PopCountByBitClear(<span class="hljs-number">0x1234567890ABCDEF</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCount</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCount(<span class="hljs-number">0x1234567890ABCDEF</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByLoop</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByLoop(<span class="hljs-number">0x123456790ABCDEF</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByBitShift</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByBitShift(<span class="hljs-number">0x123456790ABCDEF</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkPopCountByBitClear</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>PopCountByBitClear(<span class="hljs-number">0x1234567890ABCDEF</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.5. 类型</title>
      <link href="/posts/9f13bfd0f9d8/"/>
      <url>/posts/9f13bfd0f9d8/</url>
      
        <content type="html"><![CDATA[<p>变量或表达式的类型定义了对应存储值的属性特征，如：</p><ul><li>值在内存的存储大小（或者是元素的bit个数）。</li><li>它们在内部是如何表达的。</li><li>是否支持一些操作符。</li><li>它们自己关联的方法集。</li></ul><p>类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。<br>新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> 类型名称 底层类型<br></code></pre></td></tr></table></figure><p>类型声明语句一般出现在包一级，且新的类型名称首字母大写，则在外部包也可以使用。<br>注：对于中文汉字，Unicode标志都作为小写字母处理，因此不能将其命名导出。<br>为了说明类型声明，将不同温度单位分别定义为不同的类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package tempconv performs Celsius and Fahrenheit temperature computations.</span><br><span class="hljs-keyword">package</span> tempconv<br><br><span class="hljs-keyword">type</span> Celsius <span class="hljs-type">float64</span>    <span class="hljs-comment">// 摄氏温度</span><br><span class="hljs-keyword">type</span> Fahrenheit <span class="hljs-type">float64</span> <span class="hljs-comment">// 华氏温度</span><br><br><span class="hljs-keyword">const</span> (<br>AbsoluteZeroC Celsius = <span class="hljs-number">-273.15</span> <span class="hljs-comment">// 绝对零度</span><br>FreezingC     Celsius = <span class="hljs-number">0</span>       <span class="hljs-comment">// 结冰温度</span><br>BoilingC      Celsius = <span class="hljs-number">100</span>     <span class="hljs-comment">// 沸水温度</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CToF</span><span class="hljs-params">(c Celsius)</span></span> Fahrenheit &#123;<br><span class="hljs-keyword">return</span> Fahrenheit(c*<span class="hljs-number">9</span>/<span class="hljs-number">5</span> + <span class="hljs-number">32</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FToC</span><span class="hljs-params">(f Fahrenheit)</span></span> Celsius &#123;<br><span class="hljs-keyword">return</span> Celsius((f - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Celsius(t)</code>和<code>Fahrenheit(t)</code>是类型转换操作，并非函数调用。<br>对于每一个类型T，都有一个对应的类型转换操作T(x)，将x转为T类型。<br>如果T是指针类型，可能需要用小括弧包装T，如<code>(*int)(0)</code>。<br><code>只有当两个类型的底层基础类型相同时，才允许类型转换, 或者两者都是指向相同底层结构的指针类型。</code><br>如果x是可以赋值给T类型的值，那么x必然也可以被转为T类型。</p><p>数值类型之间的类型转换也是允许的，并且字符串和一些特定类型的slice之间也是可以转换，但有可能改变值。<br>如：浮点数转换为整数将丢弃小数部分；字符串转为<code>[]byte</code>类型的slice将拷贝一个人字符串数据的副本。</p><p>底层数据类型决定了内部结构和表达方式，也决定是否可以像底层类型一样对内置运算符的支持。这意味着，Celsius和Fahrenheit类型的算术运算行为和底层的float64类型一样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;%g\n&quot;</span>, BoilingC - FreezingC) <span class="hljs-comment">// 100°C</span><br>boilingF := CToF(BoilingC)<br>fmt.Printf(<span class="hljs-string">&quot;%g\n&quot;</span>, boilingF-CToF(FreezingC)) <span class="hljs-comment">// 180°F</span><br>fmt.Printf(<span class="hljs-string">&quot;%g\n&quot;</span>, boilingF-FreezingC) <span class="hljs-comment">//  Invalid operation: boilingF-FreezingC (mismatched types Fahrenheit and Celsius)</span><br></code></pre></td></tr></table></figure><p>比较运算符<code>==</code>和<code>&lt;</code>也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。但如果两个值有着不同的类型，则不能直接进行比较：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> c Celsius<br><span class="hljs-keyword">var</span> f Fahrenheit<br>fmt.Println(c == <span class="hljs-number">0</span>)          <span class="hljs-comment">// &quot;true&quot;</span><br>fmt.Println(f &gt;= <span class="hljs-number">0</span>)          <span class="hljs-comment">// &quot;true&quot;</span><br>fmt.Println(c == f)          <span class="hljs-comment">// compile error: type mismatch</span><br>fmt.Println(c == Celsius(f)) <span class="hljs-comment">// &quot;true&quot;!</span><br></code></pre></td></tr></table></figure><p><code>Celsius(f)</code>是类型转换操作，并不会改变值，仅改变了值的类型。</p><p>命名类型更方便书写，避免重复书写复杂类型，如匿名结构体定义变量。</p><p>命名类型还可以为该类型的值定义新的行为。这些行为表示为一组关联到该类型的函数集合，即类型的方法集。<br>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Celsius)</span></span> String() <span class="hljs-type">string</span> &#123; <br> <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%g°C&quot;</span>, c) <br>&#125;<br></code></pre></td></tr></table></figure><p>一般情况下，类型都会定义一个<code>String</code>方法，当使用<code>fmt</code>包的打印方法时，将优先使用该类型对应的<code>String</code>方法返回的结果打印。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">c := FToC(<span class="hljs-number">212.0</span>)<br>fmt.Println(c.String()) <span class="hljs-comment">// &quot;100°C&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, c)   <span class="hljs-comment">// &quot;100°C&quot;; no need to call String explicitly</span><br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, c)   <span class="hljs-comment">// &quot;100°C&quot;</span><br>fmt.Println(c)          <span class="hljs-comment">// &quot;100°C&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;%g\n&quot;</span>, c)   <span class="hljs-comment">// &quot;100&quot;; does not call String</span><br>fmt.Println(<span class="hljs-type">float64</span>(c)) <span class="hljs-comment">// &quot;100&quot;; does not call String</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3.变量</title>
      <link href="/posts/7095472d910d/"/>
      <url>/posts/7095472d910d/</url>
      
        <content type="html"><![CDATA[<p><code>var</code>声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且设置变量的初始值。<br>变量声明的一般语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 变量名称 类型 = 表达式<br></code></pre></td></tr></table></figure><p>类型或”&#x3D;表达式”两个部分可以省略其中的一个。<br>如果省略的是类型，那么将根据初始化表达式来推导变量的类型。<br>如果初始化表达式被省略，那么将用零值初始化该变量。<br>数值类型变量对应的零值是<code>0</code>，布尔类型变量对应的零值是<code>false</code>，字符串类型对应的零值是<code>空字符串</code>，接口或引用类型（包含slice、map、chan和函数）变量对应的零值是<code>nil</code>。数组或结构体等聚合类型对应的零值是每一个元素或字段都是对应该类型的零值。</p><p>零值初始化机制可以确保每一个声明的变量总是有一个良好定义的值，因此在Go语言中不存在未初始化的变量。该特性可以简化代码，确保边界条件下的合理行为。<br>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br>fmt.Println(s) <span class="hljs-comment">//&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>该代码将打印一个空字符串，而非导致错误或产生不可以预知的行为。<br>所以也应该使一些聚合类型的零值有一定意义，可以确保不管任何类型的变量总是有一个合理有效的零值状态。</p><p>简化变量的类型，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i, j, k <span class="hljs-type">int</span><span class="hljs-comment">//int, int, int</span><br><span class="hljs-keyword">var</span> b, f, s = <span class="hljs-literal">true</span>, <span class="hljs-number">2.3</span>, <span class="hljs-string">&quot;four&quot;</span> <span class="hljs-comment">// bool, float64, string</span><br></code></pre></td></tr></table></figure><p> 一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：<br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f, err = os.Open(name) <span class="hljs-comment">// os.Open returns a file and an error</span><br></code></pre></td></tr></table></figure></p><h1 id="2-3-1-简短变量声明"><a href="#2-3-1-简短变量声明" class="headerlink" title="2.3.1. 简短变量声明"></a>2.3.1. 简短变量声明</h1><p>简短变量声明语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">名字:=表达式<br></code></pre></td></tr></table></figure><p>变量的类型根据表达式来自动推导。<br>下面有几个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">100</span> <span class="hljs-comment">// an int</span><br><span class="hljs-keyword">var</span> boiling <span class="hljs-type">float64</span> = <span class="hljs-number">100</span> <span class="hljs-comment">// a float64</span><br><span class="hljs-keyword">var</span> names []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">var</span> p Point<br></code></pre></td></tr></table></figure><p>和var形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">i, j := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>:=</code>是一个变量声明语句。<br><code>=</code>是一个变量赋值操作。</p><p>简短变量声明语句中必须至少要声明一个新的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">f,err := os.Open(infile) <span class="hljs-comment">// 简短声明语句</span><br>f, err = os.Create(outfile) <span class="hljs-comment">// 赋值语句</span><br></code></pre></td></tr></table></figure><h1 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2. 指针"></a>2.3.2. 指针</h1><p>一个变量对应一个保存了变量对应类型值的内存空间。<br>一个指针的值是另一个变量的地址。<br>一个指针对应一个变量在内存中的存储位置。<br>并不是每一个值都有一个内存地址，但是对于每一个变量必然有对应的内存地址。<br>通过指针，可以直接读或更新对应变量的值。</p><p>如果用<code>var x int</code>声明语句声明一个<code>x</code>变量，那么<code>&amp;x</code>表达式（取x变量的内存地址）将产生一个指向该整数变量的指针，指针对应的数据类型是<code>*int</code>，指针被称之为<code>指向int类型的指针</code>。如果指针名字为p，那么可以说<code>p指针指向变量x</code>，或者说<code>p指针保存了x变量的内存地址</code>。同时<code>*p</code>表达式对应<code>p指针</code>指向的变量的值。一般<code>*p</code>表达式读取指针指向的变量的值，这里为<code>int</code>类型的值，同时因为<code>*p</code>对应一个变量，所以该表达式也可以出现在赋值语句的左边，表示更新指针所指向的变量的值。<br><code>&amp;</code>取址符<br><code>*</code>取值符<br><code>*int</code>指向int类型的指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">x := <span class="hljs-number">1</span><br>p := &amp;x <span class="hljs-comment">// p, 类型*int,指向变量x</span><br>fmt.Println(*p) <span class="hljs-comment">// 1</span><br>*p = <span class="hljs-number">2</span><span class="hljs-comment">// 给x赋值2 等同于x=2</span><br>fmt.Println(x) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>对应聚合类型的每一个成员，如结构体的每个字段，数组的每个元素，也都是对应一个变量，因此也可以被取地址。</p><p>变量有时候被称为可寻址的值，即使变量由表达式临时生成，那么表达式也必须能接受<code>&amp;</code>取地址操作。</p><p>任何类型的指针的零值都是<code>nil</code>。如果<code>p != nil</code>为真，那么<code>p</code>是指向某个有效变量。指针之间同一个变量或全为<code>nil</code>时才相等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x, y <span class="hljs-type">int</span><br>fmt.Println(&amp;x == &amp;x, &amp;x == &amp;y, &amp;x == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// true false false</span><br></code></pre></td></tr></table></figure><p>在Go语言中，返回函数中局部变量的地址也是安全的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> p = f()<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br>v := <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> &amp;v<br>&#125;<br></code></pre></td></tr></table></figure><p>每次调用f函数都返回不同的结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(f()==f()) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>通过指针改变变量的值，例子如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">incr</span><span class="hljs-params">(p *<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>*p++<span class="hljs-comment">// 只是增加p指向的变量的值，并不改变p指针！！！</span><br><span class="hljs-keyword">return</span> *p<br>&#125;<br><br>v := <span class="hljs-number">1</span><br>incr(&amp;v)<span class="hljs-comment">// side effect: v is now 2</span><br>fmt.Println(incr(&amp;v))<span class="hljs-comment">// 3 and v is 3</span><br></code></pre></td></tr></table></figure><p>每次对变量取地址或者复制指针，都是为原变量创建了新别名。如，<code>*p</code>就是变量<code>v</code>的别名。<br>指针的特有价值是在于可以不通过名称而访问变量，但是也是一把双刃剑：<br>要找到一个变量的所有访问者并不容易，就必须知道变量全部的别名（即Go语言的垃圾回收器所做的工作）。</p><p>指针式实现标准库中<code>flag</code>包的关键技术，它使用命令行参数来设置对应变量的值，而这些对应命令行标志参数的变量可能会零散分布在整个程序中。<br>在先前的<code>echo</code>版本中，就包含了两个可选的命令行参数：<code>-n</code>用于忽略行尾的换行符，<code>-s sep</code>用于指定分隔字符（默认是空格）。下面是新的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Echo4 prints its command-line arguments.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> n = flag.Bool(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;omit trailing newline&quot;</span>)<br><span class="hljs-keyword">var</span> sep = flag.String(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;separator&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>flag.Parse()<br>fmt.Print(strings.Join(flag.Args(), *sep))<br><span class="hljs-keyword">if</span> !*n &#123;<br>fmt.Println()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>flag.Bool</code>函数会创建一个新的对应布尔型标志参数的变量。它有三个参数：</p><ul><li>第一个是命令行标志参数的名字，<code>n</code>。</li><li>第二个是第一个参数的默认值，<code>false</code>。</li><li>第三个是第一个标志参数对应的描述信息，<code>omit trailing newline</code>。</li></ul><p>如果用户在命令行输入了一个无效的标志参数，或输入<code>-n</code>或<code>-help</code>参数，那么将打印所有标志参数的名字、默认值和描述信息。<br>当然，<code>flag.String</code>函数与<code>flag.Bool</code>函数的区别在于，命令行标志参数的值类型不同罢了。<br>程序中的<code>sep</code>和<code>n</code>变量分别是指向命令行标志参数变量的指针，因此必须使用<code>*sep</code>和<code>*n</code>形式的指针语法简接引用它们。<br>在使用标志参数对应的变量之前，要先调用<code>flag.Parse</code>函数，用于更新每个标志参数对应变量的值（之前是默认值）。<br>对于非标志参数的普通命令行参数可以通过调用<code>flag.Args()</code>函数来访问，返回值对应一个字符串类型的<code>slice</code>。<br>如果在<code>flag.Parse</code>函数解析命令行参数时遇到错误，默认将打印相关的提示信息，然后调用<code>os.Exit(2)</code>终止程序。<br>下面是<code>echo</code>的测试用例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build main.go</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main a bc def</span><br>a bc def<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main -s / a bc def</span><br>a/bc/def<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main -f</span><br>flag provided but not defined: -f<br>Usage of ./main:<br>  -n    omit trailing newline<br>  -s string<br>        separator (default &quot; &quot;)<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./main -h</span><br>Usage of ./main:<br>  -n    omit trailing newline<br>  -s string<br>        separator (default &quot; &quot;)<br></code></pre></td></tr></table></figure><h1 id="2-3-3-new函数"><a href="#2-3-3-new函数" class="headerlink" title="2.3.3. new函数"></a>2.3.3. new函数</h1><p>另一个创建变量的方法是调用内建的<code>new</code>函数。<br>表达式<code>new(T)</code>将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为<code>*T</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">p := <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>) <span class="hljs-comment">// p,*int类型，指向匿名的int变量</span><br>fmt.Println(*p) <span class="hljs-comment">// 0</span><br>*p = <span class="hljs-number">2</span><span class="hljs-comment">// 设置int匿名变量的值为2</span><br>fmt.Println(*p) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>使用<code>new</code>创建变量和普通变量声明语句方式创建变量没有什么区别，除了不需要声明一个临时变量的名字外。<br>换言之，<code>new</code>函数类似一种语法糖，而不是一个新的基础概念。<br>下面的两个<code>newInt</code>函数有着相同的行为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newInt</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newInt</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> dummy <span class="hljs-type">int</span><br><span class="hljs-keyword">return</span> &amp;dummy<br>&#125;<br></code></pre></td></tr></table></figure><p>每次调用<code>new</code>函数都是返回一个新的变量的地址，因此下面两个地址是不同的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">p := <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>)<br>q := <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>)<br>fmt.Println(p == q) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>但是也有一种特殊情况：如果两个类型都是空的，也就是说类型的大小是0，例如<code>struct&#123;&#125;</code>和<code>[0]int</code>，有可能有相同的地址。<br>慎用大小为0的类型，因为如果类型的大小为0的话，可能导致Go语言的自动垃圾回收器有不同的行为，具体可查<code>runtime.SetFinalizer</code>函数相关文档。</p><p>由于<code>new</code>只是一个预定义的函数，它并不是一个关键字，因此可以将<code>new</code>名字重新定义为别的类型。如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">delta</span><span class="hljs-params">(old, <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> - old<br>&#125;<br></code></pre></td></tr></table></figure><p>由于<code>new</code>被定义为<code>int</code>类型的变量名，因此在<code>deltal</code>函数内部无法使用内置的<code>new</code>函数。</p><h1 id="2-3-4-变量的生命周期"><a href="#2-3-4-变量的生命周期" class="headerlink" title="2.3.4. 变量的生命周期"></a>2.3.4. 变量的生命周期</h1><p>变量的生命周期指的是在程序运行期间变量有效存在的时间间隔。<br>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。<br>而局部变量的生命周期则是动态的：从每次创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的内存空间可能被回收。<br>函数的参数变量和返回值变量都是局部变量，它们在函数每次被调用的时候创建。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> t := <span class="hljs-number">0.0</span>; t &lt; cycles*<span class="hljs-number">2</span>*math.Pi; t += res &#123;<br>    x := math.Sin(t)<br>    y := math.Sin(t*freq + phase)<br>    img.SetColorIndex(<br>        size+<span class="hljs-type">int</span>(x*size+<span class="hljs-number">0.5</span>), size+<span class="hljs-type">int</span>(y*size+<span class="hljs-number">0.5</span>),<br>        blackIndex, <span class="hljs-comment">// 最后插入的逗号不会导致编译错误，这是Go编译器的一个特性</span><br>    )               <span class="hljs-comment">// 小括弧另起一行缩进，和大括弧的风格保存一致</span><br>&#125;<br></code></pre></td></tr></table></figure><p>每次循环的开始都会创建临时变量<code>t</code>，然后在每次循环迭代中创建临时变量<code>x</code>和<code>y</code>。</p><p>那么Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢？<br>基本实现思路：从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。<br>因为一个变量的有效生命周期只取决于是否可达，因此一个循环迭代内部的局部变量的生命周期可能会超出其局部作用域。同时，局部变量可能在函数返回之后依然存在。<br>编译器会自动选择在栈上还是在堆上分配局部变量的存储空间，但这个选择并不是由用<code>var</code>还是<code>new</code>声明变量的方式决定的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> global *<span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br>x = <span class="hljs-number">1</span><br>global = &amp;x<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span> &#123;<br>y := <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>)<br>*y = <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>f</code>函数里的<code>x</code>变量一定是在堆上分配的，因为它在函数退出后依然可以通过包一级的<code>global</code>变量找到，尽管它是在函数内部定义的。即可以说，这个<code>x</code>局部变量从函数<code>f</code>中逃逸了。<br>相反，当<code>g</code>函数返回时，变量<code>*y</code>将是不可达的，也就是说可以马上被回收的。因此，<code>*y</code>并没有从函数<code>g</code>中逃逸，编译器可以选择在栈上分配<code>*y</code>的存储空间（也可以选择在堆上分配，然后有Go语言的GC回收这个变量的内存空间），虽然这里使用了<code>new</code>方式。</p><p>其实在编写代码时不需要特意去考虑变量的逃逸行为，但是逃逸的变量需要额外分配内存空间，同时对性能可能会产生影响。</p><p>虽然自动垃圾收集器可以帮助我们不需要显式地分配和释放内存，但是编写高效的程序时依然需要了解变量的生命周期。<br>如将指向短生命周期对象的指针保存到具有长生命周期的对象中，特别是保存到全局变量时，会阻止对短生命周期对象的垃圾回收，从而可能影响程序的性能。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.4. 赋值</title>
      <link href="/posts/3bab4b966165/"/>
      <url>/posts/3bab4b966165/</url>
      
        <content type="html"><![CDATA[<p>使用赋值语句可以更新一个变量的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">x = <span class="hljs-number">1</span><span class="hljs-comment">// 命名变量的赋值</span><br>*p = <span class="hljs-literal">true</span><span class="hljs-comment">// 通过指针间接赋值</span><br>person.name = <span class="hljs-string">&quot;bob&quot;</span><span class="hljs-comment">// 结构体字段赋值</span><br>count[x] = count[x] * scale <span class="hljs-comment">// 数组、slice或map的元素赋值</span><br></code></pre></td></tr></table></figure><p>二元算术运算符和赋值语句的复合操作可以进行简化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">count[x] *= scale<br></code></pre></td></tr></table></figure><p>数值变量也可以支持<code>++</code>递增和<code>--</code>递减语句（自增和自减是语句，而不是表达式，因此<code>x = i++</code>之类的表达式是错误的）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">v := <span class="hljs-number">1</span><br>v++<span class="hljs-comment">// 等价 v = v + 1； v变成2</span><br>v--<span class="hljs-comment">// 等价 v = v - 1； v变成1</span><br></code></pre></td></tr></table></figure><h1 id="2-4-1-元组赋值"><a href="#2-4-1-元组赋值" class="headerlink" title="2.4.1. 元组赋值"></a>2.4.1. 元组赋值</h1><p>元组赋值允许同时更新多个变量的值。<br>赋值之前，赋值语句右边的所有表达式将会先进行求值，然后再统一更新左边对应变量的值。<br>下面是对变量的值进行交换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">x, y = y, x<br>a[i], a[j] = a[j], a[i]<br></code></pre></td></tr></table></figure><p>下面是计算两个整数值的最大公约数(<code>GCD</code>, greatest common divisor)，欧几里得的GCD是最早的非平凡算法:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gcd</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> y != <span class="hljs-number">0</span> &#123;<br>x, y = y, x%y<br>&#125;<br><span class="hljs-keyword">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure><p>计算斐波那契数列（Fibonacci）的第N个数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>x, y := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>x, y = y, x+y<br>&#125;<br><span class="hljs-keyword">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure><p>元组赋值可以简化一系列琐碎赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">i, j, k = <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>但如果表达式太复杂，尽量避免过度使用元组赋值；单独对每个变量赋值的会提高代码的可读性。</p><p>表达式产生多个值时，左边变量数目必须和右边一致：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">f, err = os.Open(<span class="hljs-string">&quot;foo.txt&quot;</span>) <span class="hljs-comment">// function call returns two values</span><br></code></pre></td></tr></table></figure><p>通常，这类函数会用额外的返回值来表达某种错误类型。如<code>os.Open</code>。<br>还有一些是用来返回布尔值，通常被称为ok，如<code>map查找</code>、<code>类型断言</code>和<code>通道接收</code>，都可能产生了两个结果，有一个额外的布尔结果表示操作是否成功。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">v, ok = m[key]<span class="hljs-comment">// map lookup  map查找</span><br>v, ok = x.(T)<span class="hljs-comment">// type assertion类型断言</span><br>v, ok = &lt;-ch        <span class="hljs-comment">// channel receive通道接收</span><br></code></pre></td></tr></table></figure><p>值得一提的是，<code>map查找</code>、<code>类型断言</code>和<code>通道接收</code>并不一定参数两个结果，也可能只产生一个结果。<br>如：</p><ul><li>map查找失败时会返回零值。</li><li>类型断言失败时会发送运行时painc异常。</li><li>通道接收失败时会返回零值（阻塞不算是失败）。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">v = m[key] <span class="hljs-comment">// map查找,失败时会返回零值</span><br>v = x.(T)               <span class="hljs-comment">// type断言，失败时panic异常</span><br>v = &lt;-ch<span class="hljs-comment">// 管道接收，失败时返回零值（阻塞不算是失败）</span><br><br>_, ok = m[key]<span class="hljs-comment">// map返回2个值</span><br>_, ok = mm[<span class="hljs-string">&quot;&quot;</span>], <span class="hljs-literal">false</span><span class="hljs-comment">// map返回1个值</span><br>_ = mm[<span class="hljs-string">&quot;&quot;</span>]<span class="hljs-comment">// map返回1个值</span><br></code></pre></td></tr></table></figure><p>和变量声明一样，可以用下划线空白标识符_来丢弃不需要的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">_, err = io.Copy(dst, src) <span class="hljs-comment">// 丢弃字节数</span><br>_, ok = x.(T)              <span class="hljs-comment">// 只检测类型，忽略具体值</span><br></code></pre></td></tr></table></figure><h1 id="2-4-2-可赋值性"><a href="#2-4-2-可赋值性" class="headerlink" title="2.4.2. 可赋值性"></a>2.4.2. 可赋值性</h1><p>赋值语句是显式的赋值形式，但是程序中还有很多地方会发生隐式的赋值行为：函数调用会隐式地将调用参数的值赋值给函数的参数变量，一个返回语句将隐式地将返回操作的值赋值给结果变量，一个复合类型的字面量也会产生赋值行为。例如下面的语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">medals := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;gold&quot;</span>, <span class="hljs-string">&quot;silver&quot;</span>, <span class="hljs-string">&quot;bronze&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>隐式地对<code>slice</code>的每个元素进行赋值操作，类型这样写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">medals[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;gold&quot;</span> <br>medals[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;silver&quot;</span> <br>medals[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;bronze”</span><br></code></pre></td></tr></table></figure><p><code>map</code>和<code>chan</code>的元素，也有类似的隐式赋值行为。<br>无论是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的求到的值必须有相同的数据类型。即，只有右边的值对于左边的变量是可赋值的，赋值语句才是允许的。</p><p>可赋值性的规则对于不同类型有着不同要求。<br>最简单地规则：类型必须完全匹配，nil可以赋值给任何指针或引用类型的变量。<br>常量的可赋值性可见3.6。</p><p>对于两个值是否可以用<code>==</code>或<code>!=</code>进行相等比较的能力也和可赋值能力有关系：<br>对应任何类型的值的相等比较，第二个值必须是对第一个值类型对应的变量是可赋值的，反之依然。当然，每个类型都会有比较特殊的地方。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2. 声明</title>
      <link href="/posts/2628b27da087/"/>
      <url>/posts/2628b27da087/</url>
      
        <content type="html"><![CDATA[<p>声明语句定义了程序的各种实体对象以及部分或全部的属性。Go语言主要有四种类型的声明语句：</p><ul><li>var 变量</li><li>const 常量</li><li>type 类型</li><li>func 函数实体对象</li></ul><p>下面的例子中声明了一个常量、一个函数和两个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Boiling prints the boiling point of water.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">const</span> boilingF = <span class="hljs-number">212.0</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> f = boilingF<br><span class="hljs-keyword">var</span> c = (f - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span><br>fmt.Printf(<span class="hljs-string">&quot;boiling point = %g“°F or %g°C\n&quot;</span>, f, c)<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// boling point = 212°F or 100°C</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面的fToC函数封装了温度转换的处理逻辑，这样函数只需要被定义一次，就可以在多个地方多次被使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Ftoc prints two Fahrenheit-to-Celsius conversions.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> freezingF, boilingF = <span class="hljs-number">32.0</span>, <span class="hljs-number">212.0</span><br>fmt.Printf(<span class="hljs-string">&quot;%g°F=%g°C\n&quot;</span>, freezingF, fToC(freezingF)) <span class="hljs-comment">// &quot;32°F=0°C&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;%g°F=%g°C\n&quot;</span>, freezingF, fToC(boilingF))  <span class="hljs-comment">// &quot;212°F=100°C&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fToC</span><span class="hljs-params">(f <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> (f - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span> / <span class="hljs-number">9</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1. 命名</title>
      <link href="/posts/feafd476469a/"/>
      <url>/posts/feafd476469a/</url>
      
        <content type="html"><![CDATA[<h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><p>一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下划线。</p><p>大写字母和小写字母是不同的：heapSort和Heapsort是两个不同的名字。</p><p>如果一个命名是在函数内部定义，那么它只在函数内部有效。<br>如果定义在函数外部，那么将在当前包的所有文件中都可以访问。<br>命名的开头字母的大小写决定命名在包外的可见性，大写字母开头且在函数外部定义，那么它将是导出的，可以被外部的包访问。（包级函数名本身也是包级名字，如<code>fmt</code>包的<code>Printf</code>函数就是导出的，可以在<code>fmt</code>包外部访问）<br>包本身的名字一般总是小写字母。</p><p>命名长度没有逻辑限制，但Go语言的风格是尽量使用短小的命名，局部变量更应如此。当一个命名的作用域比较大，生命周期也比较长，那么使用长命名将更有意义。</p><p>习惯上，Go语言推荐使用<code>驼峰式</code>命名。</p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>Go语言中关键字有25个。</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">break</td><td align="center">default</td><td align="center">func</td><td align="center">interface</td><td align="center">select</td></tr><tr><td align="center">case</td><td align="center">defer</td><td align="center">go</td><td align="center">map</td><td align="center">struct</td></tr><tr><td align="center">chan</td><td align="center">else</td><td align="center">goto</td><td align="center">package</td><td align="center">switch</td></tr><tr><td align="center">const</td><td align="center">fallthrough</td><td align="center">if</td><td align="center">range</td><td align="center">type</td></tr><tr><td align="center">continue</td><td align="center">for</td><td align="center">import</td><td align="center">return</td><td align="center">var</td></tr></tbody></table><h1 id="预定义"><a href="#预定义" class="headerlink" title="预定义"></a>预定义</h1><p>这些内部预定义的名字并不是关键字，可以再定义中重新使用。<br>在一些特殊的场景中重新定义它们是有意义的，但是要注意避免过度而引起语义混乱。</p><h2 id="内建常量"><a href="#内建常量" class="headerlink" title="内建常量"></a>内建常量</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>true</td><td>false</td><td>iota</td><td>nill</td></tr></tbody></table><h2 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>int</td><td>int8</td><td>int16</td><td>int32</td><td>int64</td><td></td></tr><tr><td>uint</td><td>uint8</td><td>uint16</td><td>uint32</td><td>uint64</td><td>uintptr</td></tr><tr><td>float32</td><td>float64</td><td>complex128</td><td>complex64</td><td></td><td></td></tr><tr><td>bool</td><td>byte</td><td>rune</td><td>string</td><td></td><td></td></tr></tbody></table><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>make</td><td>len</td><td>cap</td><td>new</td><td>append</td></tr><tr><td>copy</td><td>close</td><td>delete</td><td>complex</td><td>real</td></tr><tr><td>imag</td><td>panic</td><td>recover</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 程序结构</title>
      <link href="/posts/04348d4815af/"/>
      <url>/posts/04348d4815af/</url>
      
        <content type="html"><![CDATA[<p><a href="/posts/feafd476469a/">2.1. 命名</a></p><p><a href="/posts/2628b27da087/">2.2. 声明</a></p><p><a href>2.3. 变量</a></p><p><a href="/posts/3bab4b966165/">2.4. 赋值</a></p><p><a href="/posts/9f13bfd0f9d8/">2.5. 类型</a></p><p><a href="/posts/4bd2d633ee16/">2.6. 包和文件</a></p><p><a href="/posts/5b89ef7a41d0/">2.7. 作用域</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.8. 本章要点</title>
      <link href="/posts/f529e3c31d9e/"/>
      <url>/posts/f529e3c31d9e/</url>
      
        <content type="html"><![CDATA[<h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><ul><li>if</li><li>for</li><li>switch<ul><li>Go语言并不需要显式地在每一个<code>case</code>后写<code>break</code>，语言默认执行完<code>case</code>后的逻辑语句会自动退出。</li><li><code>fallthrough</code>可以<code>case</code>穿透。</li><li>Go语言里的<code>switch</code>还可以不带操作对象，默认用<code>true</code>值代替，然后将每个case的表达式和true值进行比较。这种形式叫无tag switch(tagless switch)，与switch true等价。  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Signum</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> x &gt; <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> +<span class="hljs-number">1</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">case</span> x &lt; <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="命名类型"><a href="#命名类型" class="headerlink" title="命名类型"></a>命名类型</h1><p>给予类型一个新名称。<br>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>    X, Y <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-keyword">var</span> p Point<br></code></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p> 指针是一种直接存储了变量的内存地址的数据类型。<br> 指针是可见的内存地址，<code>&amp;</code>操作符可以返回一个变量的内存地址，并且<code>*</code>操作符可以获取指针指向的变量内容，但是在Go语言里没有指针运算，也就是不能像c语言里可以对指针进行加或减操作。</p><h1 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h1><p> 方法是和命名类型关联的一类函数。Go语言里比较特殊的是方法可以被关联到任意一种命名类型。<br> 接口是一种抽象类型，这种类型可以让我们以同样的方式来处理不同的固有类型，不用关心它们的具体实现，而只需要关注它们提供的方法。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p> 官方的标准库<br> <a href="https://golang.org/pkg">https://golang.org/pkg</a> 和 <a href="https://godoc.org/">https://godoc.org</a><br> <code>godoc</code>工具可以直接在本地命令行阅读标准库的文档，如：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"> $ </span><span class="language-bash">go doc http.ListenAndserve</span><br>package http // import &quot;net/http&quot;<br><br>func ListenAndServe(addr string, handler Handler) error<br>    ListenAndServe listens on the TCP network address addr and then calls<br>    Serve with handler to handle requests on incoming connections. Accepted<br>    connections are configured to enable TCP keep-alives.<br><br>    The handler is typically nil, in which case the DefaultServeMux is used.<br><br>    ListenAndServe always returns a non-nil error.<br></code></pre></td></tr></table></figure></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p> 多行注释<code>/* ... */</code></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.7. Web服务</title>
      <link href="/posts/94de4df7cd79/"/>
      <url>/posts/94de4df7cd79/</url>
      
        <content type="html"><![CDATA[<p>Go语言的内置库使得写一个类似fetch的web服务器变得异常地简单。在本节中，我们会展示一个微型服务器，这个服务器的功能是返回当前用户正在访问的URL。比如用户访问的是 <a href="http://localhost:8000/hello">http://localhost:8000/hello</a> ，那么响应是URL.Path &#x3D; “hello”。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler) <span class="hljs-comment">// each request calls handler</span><br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// handler echoes the Path component of the request URL r.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果操作系统为Mac OS X或者Linux，可以在运行命令的末尾加上一个&amp;符号，可以在后台运行。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ go <span class="hljs-keyword">run</span><span class="language-bash"> server1/main.go &amp;</span><br></code></pre></td></tr></table></figure><p>可以使用fetch进行发送客户端请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./fetch http://localhost:8000<br>URL.Path = <span class="hljs-string">&quot;/&quot;</span><br>$ ./fetch http://localhost:8000/help<br>URL.Path = <span class="hljs-string">&quot;/help&quot;</span><br></code></pre></td></tr></table></figure><p>也可以使用浏览器直接访问<code>http://localhost:8000</code>。<br>下面版本对请求次数继续计算，对URL的请求结果会包含各种URL被访问的总次数，直接对<code>/count</code>这个URL的访问要被排除。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Server2 is a minimal &quot;echo&quot; and counter server.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> mu sync.Mutex<br><span class="hljs-keyword">var</span> count <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler)<br>http.HandleFunc(<span class="hljs-string">&quot;/count&quot;</span>, counter)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// hanlder echoes the Path component of the requested URL.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>mu.Lock()<br>count++<br>mu.Unlock()<br>fmt.Fprintf(w, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)<br>&#125;<br><br><span class="hljs-comment">// counter echoes the number of calls so far.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>mu.Lock()<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Count %d\n&quot;</span>, count)<br>mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一个更为丰富的例子，<code>handler</code>函数会把请求的http头和请求的form数据都打印出来，更便于检查和调试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// handler echoes the HTTP request.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s %s %s\n&quot;</span>, r.Method, r.URL, r.Proto)<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Header &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Header[%q]=%q\n&quot;</span>, k, v)<br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Host = %q\n&quot;</span>, r.Host)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;RemoteAddr = %q\n&quot;</span>, r.RemoteAddr)<br><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Form &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Form[%q]=%q\n&quot;</span>, k, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后会输出以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">GET / HTTP/1.1<br>Header[&quot;User-Agent&quot;]=[&quot;Go-http-client/1.1&quot;]<br>Header[&quot;Accept-Encoding&quot;]=[&quot;gzip&quot;]<br>Host = &quot;localhost:8000&quot;<br>RemoteAddr = &quot;127.0.0.1:51006&quot;<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 1.12：</strong> 修改Lissajour服务，从URL读取变量，比如你可以访问 <a href="http://localhost:8000/?cycles=20">http://localhost:8000/?cycles=20</a> 这个URL，这样访问可以将程序里的cycles默认的5修改为20。字符串转换为数字可以调用strconv.Atoi函数。你可以在godoc里查看strconv.Atoi的详细说明。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/gif&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> palette = []color.Color&#123;color.White, color.Black&#125;<br><br><span class="hljs-keyword">const</span> (<br>whileIndex = <span class="hljs-number">0</span> <span class="hljs-comment">// first color in palette</span><br>blackIndex = <span class="hljs-number">1</span> <span class="hljs-comment">// next color in palette</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>cycles, _ := strconv.Atoi(r.FormValue(<span class="hljs-string">&quot;cycles&quot;</span>))<br><span class="hljs-keyword">if</span> cycles &gt; <span class="hljs-number">50</span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;The number of cycles cannot be greater than 50&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>lissajous(w, cycles)<br>&#125;)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lissajous</span><span class="hljs-params">(w http.ResponseWriter, cycles <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br><span class="hljs-comment">//cycles = 5 // number of complete x oscillator revolutions</span><br>res     = <span class="hljs-number">0.001</span> <span class="hljs-comment">// angular resolution</span><br>size    = <span class="hljs-number">100</span>   <span class="hljs-comment">// image canvas covers[-size..size]</span><br>nframes = <span class="hljs-number">64</span>    <span class="hljs-comment">// number of animation frames</span><br>delay   = <span class="hljs-number">8</span>     <span class="hljs-comment">// delay between frames in 10ms units</span><br>)<br>freq := rand.Float64() * <span class="hljs-number">3.0</span> <span class="hljs-comment">// relative frequency of y oscillator</span><br>anim := gif.GIF&#123;LoopCount: nframes&#125;<br>phase := <span class="hljs-number">0.0</span> <span class="hljs-comment">// phase difference</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; nframes; i++ &#123;<br>rect := image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>)<br>img := image.NewPaletted(rect, palette)<br><span class="hljs-keyword">for</span> t := <span class="hljs-number">0.0</span>; t &lt; <span class="hljs-type">float64</span>(cycles)*<span class="hljs-number">2</span>*math.Pi; t += res &#123;<br>x := math.Sin(t)<br>y := math.Sin(t*freq + phase)<br>img.SetColorIndex(size+<span class="hljs-type">int</span>(x*size+<span class="hljs-number">0.5</span>), size+<span class="hljs-type">int</span>(y*size+<span class="hljs-number">0.5</span>), blackIndex)<br>&#125;<br>phase += <span class="hljs-number">0.1</span><br>anim.Delay = <span class="hljs-built_in">append</span>(anim.Delay, delay)<br>anim.Image = <span class="hljs-built_in">append</span>(anim.Image, img)<br>&#125;<br>gif.EncodeAll(w, &amp;anim) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring encoding errors</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.6. 并发获取多个URL</title>
      <link href="/posts/c84dc5dd7597/"/>
      <url>/posts/c84dc5dd7597/</url>
      
        <content type="html"><![CDATA[<p>下面的例子fetchall，和前面小节的fetch程序所要做的工作基本一致，fetchall的特别之处在于它会同时去获取所有的URL，所以这个程序的总执行时间不会超过执行时间最长的那一个任务，前面的fetch程序执行时间则是所有任务执行时间之和。fetchall程序只会打印获取的内容大小和经过的时间，不会像之前那样打印获取的内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>start := time.Now()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br><span class="hljs-keyword">go</span> fetch(url, ch)<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>fmt.Println(&lt;-ch)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%.2fs elapsed\n&quot;</span>, time.Since(start).Seconds())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>, ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> &#123;<br>start := time.Now()<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ch &lt;- fmt.Sprint(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>nbytes, err := io.Copy(io.Discard, resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;while reading %s:%v&quot;</span>, url, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>secs := time.Since(start).Seconds()<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%.2fs %7d %s&quot;</span>, secs, nbytes, url)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译并运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build fetchall.go</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./fetchall http://www.baidu.com http://qq.com http://gopl.io</span><br>0.03s  374152 http://www.baidu.com<br>0.05s     228 http://qq.com<br>1.42s    4154 http://gopl.io<br>1.42s elapsed<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 1.10：</strong> 找一个数据量比较大的网站，用本小节中的程序调研网站的缓存策略，对每个URL执行两遍请求，查看两次时间是否有较大的差别，并且每次获取到的响应内容是否一致，修改本节中的程序，将响应结果输出，以便于进行对比。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>start := time.Now()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br><span class="hljs-keyword">go</span> fetch(url, ch)<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>fmt.Println(&lt;-ch)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%.2fs elased\n&quot;</span>, time.Since(start).Seconds())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>, ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> &#123;<br>start := time.Now()<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ch &lt;- fmt.Sprint(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>buf := <span class="hljs-built_in">new</span>(strings.Builder)<br>nbytes, err := io.Copy(buf, resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;while reading %s:%v&quot;</span>, url, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>resp.Body.Close()<br>secs := time.Since(start).Seconds()<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%.2fs %7d %s\n %s&quot;</span>, secs, nbytes, url, buf)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 1.11：</strong> 在fatchall中尝试使用长一些的参数列表，比如使用在alexa.com的上百万网站里排名靠前的。如果一个网站没有回应，程序将采取怎样的行为？（Section8.9 描述了在这种情况下的应对机制）。<br>解：<br>将输出响应错误信息，但不影响其他网站的访问。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5. 获取URL</title>
      <link href="/posts/8855378318a6/"/>
      <url>/posts/8855378318a6/</url>
      
        <content type="html"><![CDATA[<p>为了最简单地展示基于HTTP获取信息的方式，下面给出一个示例程序fetch，这个程序将获取对应的url，并将其源文本打印出来；这个例子的灵感来源于curl工具（译注：unix下的一个用来发http请求的工具，具体可以man curl）。当然，curl提供的功能更为复杂丰富，这里只编写最简单的样例。这个样例之后还会多次被用到。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Fetch prints the content found at a URL.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch:%v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>b, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch:reading %s: %v\n&quot;</span>, url, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>, b)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build fetch</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./fetch http://gopl.io</span><br>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;<br>  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;<br>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;<br>...<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 1.7：</strong> 函数调用io.Copy(dst, src)会从src中读取内容，并将读到的结果写入到dst中，使用这个函数替代掉例子中的ioutil.ReadAll来拷贝响应结构体到os.Stdout，避免申请一个缓冲区（例子中的b）来存储。记得处理io.Copy返回结果中的错误。<br>解：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-keyword">for</span> _, url := range os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[1:]</span> &#123;<br>resp, err := http<span class="hljs-selector-class">.Get</span>(url)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>fmt<span class="hljs-selector-class">.Fprintf</span>(os<span class="hljs-selector-class">.Stderr</span>, <span class="hljs-string">&quot;fetch:%v\n&quot;</span>, err)<br>os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)<br>&#125;<br>_, err = io<span class="hljs-selector-class">.Copy</span>(os<span class="hljs-selector-class">.Stdout</span>, resp.Body)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>fmt<span class="hljs-selector-class">.Fprintf</span>(os<span class="hljs-selector-class">.Stderr</span>, <span class="hljs-string">&quot;fetch:reading %s:%v&quot;</span>, url, err)<br>os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 1.8：</strong> 修改fetch这个范例，如果输入的url参数没有 http:&#x2F;&#x2F; 前缀的话，为这个url加上该前缀。你可能会用到strings.HasPrefix这个函数。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br><span class="hljs-keyword">if</span> !strings.HasPrefix(url, <span class="hljs-string">&quot;http://&quot;</span>) &#123;<br>url = <span class="hljs-string">&quot;http://&quot;</span> + url<br>&#125;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch:%v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>_, err = io.Copy(os.Stdout, resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stdout, <span class="hljs-string">&quot;fetch:reading %s:%v&quot;</span>, url, err)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 1.9：</strong> 修改fetch打印出HTTP协议的状态码，可以从resp.Status变量得到该状态码。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stdout, <span class="hljs-string">&quot;fetch:%v&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>fmt.Println(resp.Status)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.4. GIF动画</title>
      <link href="/posts/d37e56e6ca24/"/>
      <url>/posts/d37e56e6ca24/</url>
      
        <content type="html"><![CDATA[<p>下面的程序会演示Go语言标准库里的image这个package的用法，我们会用这个包来生成一系列的bit-mapped图，然后将这些图片编码为一个GIF动画。我们生成的图形名字叫利萨如图形(Lissajous figures)，这种效果是在1960年代的老电影里出现的一种视觉特效。它们是协振子在两个纬度上振动所产生的曲线，比如两个sin正弦波分别在x轴和y轴输入会产生的曲线。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Lissajous generates GIF animations of random Lissajous figures.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/gif&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> palette = []color.Color&#123;color.White, color.Black&#125;<br><br><span class="hljs-keyword">const</span> (<br>whiteIndex = <span class="hljs-number">0</span> <span class="hljs-comment">// first color in palette</span><br>blackIndex = <span class="hljs-number">1</span> <span class="hljs-comment">// next color in palette</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lissajous(os.Stdout)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lissajous</span><span class="hljs-params">(out io.Writer)</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>cycles  = <span class="hljs-number">5</span>     <span class="hljs-comment">// number of complete x oscillator revolutions</span><br>res     = <span class="hljs-number">0.001</span> <span class="hljs-comment">// angular resolution</span><br>size    = <span class="hljs-number">100</span>   <span class="hljs-comment">// image canvas covers[-size..size]</span><br>nframes = <span class="hljs-number">64</span>    <span class="hljs-comment">// number of animation frames</span><br>delay   = <span class="hljs-number">8</span>     <span class="hljs-comment">// delay between frames in 10ms units</span><br>)<br>freq := rand.Float64() * <span class="hljs-number">3.0</span> <span class="hljs-comment">// relative frequency of y oscillator</span><br>anim := gif.GIF&#123;LoopCount: nframes&#125;<br>phase := <span class="hljs-number">0.0</span> <span class="hljs-comment">// phase difference</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; nframes; i++ &#123;<br>rect := image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>)<br>img := image.NewPaletted(rect, palette)<br><span class="hljs-keyword">for</span> t := <span class="hljs-number">0.0</span>; t &lt; cycles*<span class="hljs-number">2</span>*math.Pi; t += res &#123;<br>x := math.Sin(t)<br>y := math.Sin(t*freq + phase)<br>img.SetColorIndex(size+<span class="hljs-type">int</span>(x*size+<span class="hljs-number">0.5</span>), size+<span class="hljs-type">int</span>(y*size+<span class="hljs-number">0.5</span>), blackIndex)<br>&#125;<br>phase += <span class="hljs-number">0.1</span><br>anim.Delay = <span class="hljs-built_in">append</span>(anim.Delay, delay)<br>anim.Image = <span class="hljs-built_in">append</span>(anim.Image, img)<br>&#125;<br>gif.EncodeAll(out, &amp;anim) <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring encoding errors</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用以下命令生成一个GIF动画。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build lissajous</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./lissajous &gt;out.gif</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/posts/d37e56e6ca24/out.gif" alt="out"></p><p>练习 1.5： 修改前面的Lissajous程序里的调色板，由黑色改为绿色。我们可以用color.RGBA{0xRR, 0xGG, 0xBB, 0xff}来得到#RRGGBB这个色值，三个十六进制的字符串分别代表红、绿、蓝像素。<br>解答：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/gif&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> palette = []color.Color&#123;color.RGBA&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>&#125;, color.Black&#125;<br><br><span class="hljs-keyword">const</span> (<br>whiteIndex = <span class="hljs-number">0</span><br>blackIndex = <span class="hljs-number">1</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lissajous(os.Stdout)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lissajous</span><span class="hljs-params">(out io.Writer)</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>cycles  = <span class="hljs-number">5</span><br>res     = <span class="hljs-number">0.001</span><br>size    = <span class="hljs-number">100</span><br>nframes = <span class="hljs-number">64</span><br>delay   = <span class="hljs-number">8</span><br>)<br>freq := rand.Float64() * <span class="hljs-number">3.0</span><br>anim := gif.GIF&#123;LoopCount: nframes&#125;<br>phase := <span class="hljs-number">0.0</span><br><span class="hljs-keyword">for</span> nf := <span class="hljs-number">0</span>; nf &lt; nframes; nf++ &#123;<br>rect := image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>)<br>img := image.NewPaletted(rect, palette)<br><span class="hljs-keyword">for</span> t := <span class="hljs-number">0.0</span>; t &lt; cycles*<span class="hljs-number">2</span>*math.Pi; t += res &#123;<br>x := math.Sin(t)<br>y := math.Sin(t*freq + phase)<br>img.SetColorIndex(size+<span class="hljs-type">int</span>(x*size+<span class="hljs-number">0.5</span>), size+<span class="hljs-type">int</span>(y*size+<span class="hljs-number">0.5</span>), blackIndex)<br>&#125;<br>phase += <span class="hljs-number">0.1</span><br>anim.Delay = <span class="hljs-built_in">append</span>(anim.Delay, delay)<br>anim.Image = <span class="hljs-built_in">append</span>(anim.Image, img)<br>&#125;<br>gif.EncodeAll(out, &amp;anim)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/posts/d37e56e6ca24/out_1.gif" alt="out"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 1.6：</strong> 修改Lissajous程序，修改其调色板来生成更丰富的颜色，然后修改SetColorIndex的第三个参数，看看显示结果吧。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/gif&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> palette = []color.Color&#123;color.RGBA&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x1</span>&#125;, color.White&#125;<br><br><span class="hljs-keyword">const</span> (<br>whiteIndex = <span class="hljs-number">0</span><br>blackIndex = <span class="hljs-number">3</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lissajous(os.Stdout)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lissajous</span><span class="hljs-params">(out io.Writer)</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>cycles  = <span class="hljs-number">5</span><br>res     = <span class="hljs-number">0.001</span><br>size    = <span class="hljs-number">100</span><br>nframes = <span class="hljs-number">64</span><br>delay   = <span class="hljs-number">8</span><br>)<br>freq := rand.Float64() * <span class="hljs-number">3.0</span><br>anim := gif.GIF&#123;LoopCount: nframes&#125;<br>phase := <span class="hljs-number">0.0</span><br><span class="hljs-keyword">for</span> nf := <span class="hljs-number">0</span>; nf &lt; nframes; nf++ &#123;<br>rect := image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>)<br>img := image.NewPaletted(rect, palette)<br><span class="hljs-keyword">for</span> t := <span class="hljs-number">0.0</span>; t &lt; cycles*<span class="hljs-number">2</span>*math.Pi; t += res &#123;<br>x := math.Sin(t)<br>y := math.Sin(t*freq + phase)<br>img.SetColorIndex(size+<span class="hljs-type">int</span>(x*size+<span class="hljs-number">0.5</span>), size+<span class="hljs-type">int</span>(y*size+<span class="hljs-number">0.5</span>), blackIndex)<br>&#125;<br>phase += <span class="hljs-number">0.1</span><br>anim.Delay = <span class="hljs-built_in">append</span>(anim.Delay, delay)<br>anim.Image = <span class="hljs-built_in">append</span>(anim.Image, img)<br>&#125;<br>gif.EncodeAll(out, &amp;anim)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/posts/d37e56e6ca24/lissajous2.gif" alt="lissajous2"></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3. 查找重复的行</title>
      <link href="/posts/c749b9e4bafd/"/>
      <url>/posts/c749b9e4bafd/</url>
      
        <content type="html"><![CDATA[<p>对文件做拷贝、打印、搜索、排序、统计或类似事情的程序都有一个差不多的程序结构：一个处理输入的循环，在每个元素上执行计算处理，在处理的同时或最后产生输出。我们会展示一个名为dup的程序的三个版本；灵感来自于Unix的uniq命令，其寻找相邻的重复行。该程序使用的结构和包是个参考范例，可以方便地修改。</p><p>dup的第一个版本打印标准输入中多次出现的行，以重复次数开头。该程序将引入if语句，<code>map</code>数据类型以及<code>bufio</code>包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Dup1 prints the text of each line that appears more than</span><br><span class="hljs-comment">// once in the standard input, preceded by its count.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>counts[input.Text()]++<br><span class="hljs-keyword">if</span> input.Text() == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring potential errors from input.Err()</span><br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>正如for循环一样，if语句条件两边也不加括号，但是主体部分需要加。<br>if语句的else部分是可选的，在if的条件为false时执行。<br><code>map</code>存储了键&#x2F;值（key&#x2F;value）的集合，对集合元素，提供常数时间的存、取或测试操作。键可以是任意类型，只要其值能用<code>==</code>运算符比较，最常见的例子是字符串；值则可以是任意类型。这个例子中的键是字符串，值是整数。内置函数<code>make</code>创建空<code>map</code>，此外，它还有别的作用。<br>从功能和实现上说，Go的<code>map</code>类似于Java语言中的<code>HashMap</code>，Python语言中的<code>dict</code>，Lua语言中的<code>table</code>，通常使用hash实现。遗憾的是，对于该词的翻译并不统一，数学界术语为映射，而计算机界众说纷纭莫衷一是。<br><code>counts[input.Text()]++</code>语句等价于：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">line := input.Text()<br>counts[line] = counts[line] + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>Printf</code>部分格式字符</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">%d          十进制整数<br>%x, %o, %b  十六进制，八进制，二进制整数。<br>%f, %g, %e  浮点数： 3.141593 3.141592653589793 3.141593e+00<br>%t          布尔：true或false<br>%c          字符（rune） (Unicode码点)<br>%s          字符串<br>%q          带双引号的字符串&quot;abc&quot;或带单引号的字符&#x27;c&#x27;<br>%v          变量的自然形式（natural format）<br>%T          变量的类型<br>%%          字面上的百分号标志（无操作数）<br></code></pre></td></tr></table></figure><p>制表符<code>\t</code>和换行符<code>\n</code>,称为<code>转义字符</code>(escap sequences)。<br>按照惯例，以字母<code>f</code>结尾的格式化函数，如<code>log.Printf</code>和<code>fmt.Errof</code>,都采用了<code>fmt.Printf</code>的格式化准则。<br>以<code>ln</code>结尾的格式化函数，则遵循<code>Printlin</code>的方式，以跟<code>%v</code>差不多的方式格式化参数，并在最后添加一个换行符。<br>后缀<code>f</code>指<code>format</code>, <code>ln</code>指<code>line</code>。<br>很多程序要么从标准输入中读取数据，如上面的例子所示，要么从一系列具名文件中读取数据。<code>dup</code>程序的下个版本读取标准输入或是使用<code>os.Open</code>打开各个具名文件，并操作它们。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Dup2 prints the count and text of lines that appear more than once</span><br><span class="hljs-comment">// in the input. It reads from stdin or from a list of named files.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>files := os.Args[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(files) == <span class="hljs-number">0</span> &#123;<br>countLines(os.Stdin, counts)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> files &#123;<br>f, err := os.Open(arg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;dup2:%v\n&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>countLines(f, counts)<br>f.Close()<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countLines</span><span class="hljs-params">(f *os.File, counts <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)</span></span> &#123;<br>input := bufio.NewScanner(f)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>counts[input.Text()]++<br>&#125;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring potential errors form input.Err()</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>dup</code>的前两个版本以”流”模式读取输入，并根据需要拆分成多个行。理论上，这些程序可以处理任意数量的输入数据。还有另一个方法，就是一口气把全部输入数据读到内存中，一次分割为多行，然后处理它们。下面这个版本，dup3，就是这么操作的。这个例子引入了<code>ReadFile</code>函数（来自于<code>io/ioutil</code>包），其读取指定文件的全部内容，<code>strings.Split</code>函数把字符串分割成子串的切片。（<code>Split</code>的作用与前文提到的<code>strings.Join</code>相反。）<br>我们略微简化了dup3。首先，由于<code>ReadFile</code>函数需要文件名作为参数，因此只读指定文件，不读标准输入。其次，由于行计数代码只在一处用到，故将其移回<code>main</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-keyword">for</span> _, filename := <span class="hljs-keyword">range</span> os.Args &#123;<br>data, err := os.ReadFile(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;dup3:%v\n&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> _, line := <span class="hljs-keyword">range</span> strings.Split(<span class="hljs-type">string</span>(data), <span class="hljs-string">&quot;\n&quot;</span>) &#123;<br>counts[line]++<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 1.4：</strong> 修改dup2，出现重复的行时打印文件名称。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>files := os.Args[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(files) == <span class="hljs-number">0</span> &#123;<br>countLines(os.Stdin, counts)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> files &#123;<br>f, err := os.Open(arg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;dup2:%v\n&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>countLines(f, counts)<br>f.Close()<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countLines</span><span class="hljs-params">(f *os.File, counts <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)</span></span> &#123;<br>input := bufio.NewScanner(f)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>counts[input.Text()]++<br><span class="hljs-keyword">if</span> counts[input.Text()] &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Println(f.Name())<br>&#125;<br>&#125;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring potential errors form input.Err()</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2. 命令行参数</title>
      <link href="/posts/b7c6dc0a75aa/"/>
      <url>/posts/b7c6dc0a75aa/</url>
      
        <content type="html"><![CDATA[<p>大多数程序都是处理输入，产生输出，这也正是“计算”的定义。但是，程序如何获取要处理的输入数据呢？<br>有以下几种获取输入数据：</p><ul><li>一些程序生成自己的数据</li><li>文件</li><li>网络连接</li><li>其它程序的输入</li><li>键盘，鼠标等</li><li>命令行参数</li><li>其它类似输入源</li></ul><p><code>os</code>包以跨平台的方式，提供了一些与操作系统交互的函数和变量。<br>程序的命令行参数可从<code>os</code>包的Args变量获取。<br><code>os</code>包外部使用<code>os.Args</code>访问该变量。</p><p><code>os.Args</code>变量是一个字符串切片（<code>string slice</code>）。<br><code>slice</code>是简化的动态数组。<br>可以把<code>slice</code>当做数组元素序列，序列的成长度动态变化，用<code>s[i]</code>访问单个元素，用<code>s[n:m]</code>获取子序列。<br>序列的元素数目为<code>len(s)</code>。<br>区间索引时，采用<code>左闭右开</code>形式，即，区间包括第一个索引元素，不包括最后一个，因为这样可以简化逻辑。如<code>s[m:n]</code>这个切片，0 ≤ m ≤ n ≤ len(s)，包含n - m个元素。“比如a &#x3D; [1, 2, 3, 4, 5], a[0:3] &#x3D; [1, 2, 3]，不包含最后一个元素”</p><p><code>os.Args</code>的第一个元素，<code>os.Args[0]</code>是命令本身的名字。<br>其它元素则是程序启动时传给它的参数。即<code>os.Args[1:len(os.Args)]</code>,简化<code>os.Args[1:]</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Echo1 prints its command-line arguments.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s, sep <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(os.Args); i++ &#123;<br>s += sep + os.Args[i]<br>sep = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>fmt.Println(s)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run echo1 1 2 3 4 5</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">12345<br></code></pre></td></tr></table></figure><p>Go语言只有for循环这一种循环语句。for循环有多种形式，其中一种如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> initialization; condition; post &#123;<br><span class="hljs-comment">// zero or more statements</span><br>&#125;<br></code></pre></td></tr></table></figure><p>for循环三个部分不需括号包围。<br>大括号强制要求, 左大括号必须和post语句在同一行。<br><code>initialization</code>语句是可选的，在循环开始前执行。<br><code>initalization</code>如果存在，必须是一条简单语句（<code>simple statement</code>），即，短变量声明、自增语句、赋值语句或函数调用。<br><code>condition</code>是一个布尔表达式（<code>boolean expression</code>），其值在每次循环迭代开始时计算。如果为true则执行循环体语句。<br><code>post</code>语句在循环体执行结束后执行，之后再次对<code>conditon</code>求值。<code>condition</code>值为false时，循环结束。</p><p>for循环的这三个部分每个都可以省略，如果省略<code>initialization</code>和<code>post</code>，分号也可以省略：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// a traditional &quot;while&quot; loop</span><br><span class="hljs-keyword">for</span> condition &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果连<code>condition</code>也省略了，像下面这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// a traditional infinite loop</span><br><span class="hljs-keyword">for</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这就变成一个无限循环，尽管如此，还可以用其他方式终止循环, 如一条<code>break</code>或<code>return</code>语句。</p><p>for循环的另一种形式, 在某种数据类型的区间（<code>range</code>）上遍历，如字符串或切片。echo的第二版本展示了这种形式:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Echo2 prints its command-line arguments.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s, sep := <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>s += sep + arg<br>sep = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>fmt.Println(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>每次循环迭代，range产生一对值: 索引以及在该索引处的元素值。<br>这个例子不需要索引，但range的语法要求, 要处理元素, 必须处理索引。一种思路是把索引赋值给一个临时变量, 如temp, 然后忽略它的值，但Go语言不允许使用无用的局部变量（<code>local variables</code>），因为这会导致编译错误。Go语言中这种情况的解决方法是用空标识符（blank identifier），即_（也就是下划线）。</p><p>echo的这个版本使用一条短变量声明来声明并初始化s和seps，也可以将这两个变量分开声明，声明一个变量有好几种方式，下面这些都等价：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>第一种形式，是一条短变量声明，最简洁，但只能用在函数内部，而不能用于包变量。<br>第二种形式依赖于字符串的默认初始化零值机制，被初始化为””。<br>第三种形式用得很少，除非同时声明多个变量。<br>第四种形式显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余，但如果两者类型不同，变量类型就必须了。<br>实践中一般使用前两种形式中的某个，初始值重要的话就显式地指定变量的类型，否则使用隐式初始化。</p><p>如前文所述，每次循环迭代字符串s的内容都会更新。<code>+=</code>连接原字符串、空格和下个参数，产生新字符串, 并把它赋值给s。s原来的内容已经不再使用，将在适当时机对它进行垃圾回收。</p><p>如果连接涉及的数据量很大，这种方式代价高昂。一种简单且高效的解决方案是使用strings包的Join函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(strings.Join(os.Args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot;&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，如果不关心输出格式，只想看看输出值，或许只是为了调试，可以用Println为我们格式化输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(os.Args[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习 1.1：</strong> 修改echo程序，使其能够打印os.Args[0]，即被执行命令本身的名字。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(os.Args[<span class="hljs-number">0</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 1.2：</strong> 修改echo程序，使其打印每个参数的索引和值，每个一行。<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> idx, sep := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>fmt.Print(idx)<br>fmt.Println(<span class="hljs-string">&quot;  &quot;</span> + sep)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习 1.3：</strong> 做实验测量潜在低效的版本和使用了strings.Join的版本的运行时间差异。（1.6节讲解了部分time包，11.4节展示了如何写标准测试程序，以得到系统性的性能评测。）<br>解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>startTime := time.Now()<br>s, sep := <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>s += sep + arg<br>sep = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>fmt.Println(s)<br>secs := time.Since(startTime).Microseconds()<br>fmt.Println(secs)<br><br>startTime = time.Now()<br>fmt.Println(strings.Join(os.Args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot;&quot;</span>))<br>secs = time.Since(startTime).Microseconds()<br>fmt.Println(secs)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1. Hello, World</title>
      <link href="/posts/02fc6779c7cd/"/>
      <url>/posts/02fc6779c7cd/</url>
      
        <content type="html"><![CDATA[<p>传统案例“hello world”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello, world&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run helloworld.go</span><br></code></pre></td></tr></table></figure><p>毫无疑问，这个命令会输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hello, world<br></code></pre></td></tr></table></figure><p>Go语言原生支持Unicode, 可以处理全世界任何语言的文本。<br>如果不只是一次性实验，可以进行编译重新，并保留编译结果以备将来之用。<br>编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go build helloworld.go</span><br></code></pre></td></tr></table></figure><p>编译命令生成一个名为helloworld的可执行的二进制文件。<br>运行可执行文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./helloworld</span><br>hello,world<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 入门</title>
      <link href="/posts/b721eb61c1a0/"/>
      <url>/posts/b721eb61c1a0/</url>
      
        <content type="html"><![CDATA[<p>本章主要为Go语言的基础组件，及其示例程序等。</p><p><a href="/posts/02fc6779c7cd/">1.1. Hello, World</a></p><p><a href="/posts/b7c6dc0a75aa/">1.2. 命令行参数</a></p><p><a href="/posts/c749b9e4bafd/">1.3. 查找重复的行</a></p><p><a href="/posts/d37e56e6ca24/">1.4. GIF动画</a></p><p><a href="/posts/8855378318a6/">1.5. 获取URL</a></p><p><a href="/posts/c84dc5dd7597/">1.6. 并发获取多个URL</a></p><p><a href="/posts/94de4df7cd79/">1.7. Web服务</a></p><p><a href="/posts/f529e3c31d9e/">1.8. 本章要点</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
          <category> Go语言圣经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
